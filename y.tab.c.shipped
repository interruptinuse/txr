/* A Bison parser, made by GNU Bison 2.5.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.5"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Copy the first part of user declarations.  */

/* Line 268 of yacc.c  */
#line 1 "parser.y"


/* Copyright 2009-2021
 * Kaz Kylheku <kaz@kylheku.com>
 * Vancouver, Canada
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <stddef.h>
#include <stdio.h>
#include <assert.h>
#include <limits.h>
#include <stdlib.h>
#include <wchar.h>
#include <signal.h>
#include "config.h"
#include "alloca.h"
#include "lib.h"
#include "signal.h"
#include "unwind.h"
#include "regex.h"
#include "match.h"
#include "hash.h"
#include "struct.h"
#include "eval.h"
#include "tree.h"
#include "y.tab.h"
#include "debug.h"
#include "txr.h"
#include "itypes.h"
#include "buf.h"
#include "parser.h"

static void set_syntax_tree(parser_t *parser, val tree);
static val sym_helper(parser_t *parser, wchar_t *lexeme, val meta_allowed);
static val repeat_rep_helper(val sym, val args, val main, val parts);
static void process_catch_exprs(val exprs);
static val define_transform(parser_t *parser, val define_form);
static val optimize_text(val text_form);
static val unquotes_occur(val quoted_form, int level);
static val rlrec(parser_t *, val form, val line);
static val rlcp_parser(parser_t *parser, val to, val from);
static wchar_t char_from_name(const wchar_t *name);
static val make_expr(parser_t *, val sym, val rest, val lineno);
static val check_parse_time_action(val spec_rev);
static val uref_helper(parser_t *, val expr);
static val uoref_helper(parser_t *, val expr);
static val qref_helper(parser_t *, val lexpr, val rexpr);
static val fname_helper(parser_t *, val name);

#if YYBISON
union YYSTYPE;
int yylex(union YYSTYPE *, yyscan_t scanner);
int yyparse(scanner_t *, parser_t *);
#endif

#define rl(form, line) rlrec(parser, form, line)
#define rlc(to, from) rlcp_parser(parser, to, from)
#define mkexp(sym, rest, lineno) make_expr(parser, sym, rest, lineno)
#define symhlpr(lexeme, meta_allowed) sym_helper(parser, lexeme, meta_allowed)
#define yyerr(msg) yyerror(scnr, parser, msg)
#define yybadtok(tok, context) yybadtoken(parser, tok, context)
#define ifnign(expr) (parser->ignore ? nil : (expr))

INLINE val expand_forms_ver(val forms, int ver)
{
  if (!opt_compat || opt_compat >= ver)
    return expand_forms(forms, nil);
  return forms;
}

INLINE val expand_form_ver(val form, int ver)
{
  if (!opt_compat || opt_compat >= ver)
    return expand(form, nil);
  return form;
}



/* Line 268 of yacc.c  */
#line 173 "y.tab.c"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     SPACE = 258,
     TEXT = 259,
     SYMTOK = 260,
     ALL = 261,
     SOME = 262,
     NONE = 263,
     MAYBE = 264,
     CASES = 265,
     BLOCK = 266,
     CHOOSE = 267,
     GATHER = 268,
     AND = 269,
     OR = 270,
     END = 271,
     COLLECT = 272,
     UNTIL = 273,
     COLL = 274,
     OUTPUT = 275,
     REPEAT = 276,
     REP = 277,
     SINGLE = 278,
     FIRST = 279,
     LAST = 280,
     EMPTY = 281,
     MOD = 282,
     MODLAST = 283,
     DEFINE = 284,
     TRY = 285,
     CATCH = 286,
     FINALLY = 287,
     IF = 288,
     ERRTOK = 289,
     HASH_BACKSLASH = 290,
     HASH_SLASH = 291,
     DOTDOT = 292,
     HASH_H = 293,
     HASH_S = 294,
     HASH_R = 295,
     HASH_SEMI = 296,
     HASH_B_QUOTE = 297,
     HASH_N = 298,
     HASH_T = 299,
     WORDS = 300,
     WSPLICE = 301,
     QWORDS = 302,
     QWSPLICE = 303,
     SECRET_ESCAPE_R = 304,
     SECRET_ESCAPE_E = 305,
     SECRET_ESCAPE_I = 306,
     OLD_DOTDOT = 307,
     NUMBER = 308,
     METANUM = 309,
     HASH_N_EQUALS = 310,
     HASH_N_HASH = 311,
     REGCHAR = 312,
     REGTOKEN = 313,
     LITCHAR = 314,
     SPLICE = 315,
     OLD_AT = 316,
     CONSDOT = 317,
     LAMBDOT = 318,
     UREFDOT = 319,
     OREFDOT = 320,
     UOREFDOT = 321,
     LOW = 322,
     ELSE = 323,
     ELIF = 324
   };
#endif
/* Tokens.  */
#define SPACE 258
#define TEXT 259
#define SYMTOK 260
#define ALL 261
#define SOME 262
#define NONE 263
#define MAYBE 264
#define CASES 265
#define BLOCK 266
#define CHOOSE 267
#define GATHER 268
#define AND 269
#define OR 270
#define END 271
#define COLLECT 272
#define UNTIL 273
#define COLL 274
#define OUTPUT 275
#define REPEAT 276
#define REP 277
#define SINGLE 278
#define FIRST 279
#define LAST 280
#define EMPTY 281
#define MOD 282
#define MODLAST 283
#define DEFINE 284
#define TRY 285
#define CATCH 286
#define FINALLY 287
#define IF 288
#define ERRTOK 289
#define HASH_BACKSLASH 290
#define HASH_SLASH 291
#define DOTDOT 292
#define HASH_H 293
#define HASH_S 294
#define HASH_R 295
#define HASH_SEMI 296
#define HASH_B_QUOTE 297
#define HASH_N 298
#define HASH_T 299
#define WORDS 300
#define WSPLICE 301
#define QWORDS 302
#define QWSPLICE 303
#define SECRET_ESCAPE_R 304
#define SECRET_ESCAPE_E 305
#define SECRET_ESCAPE_I 306
#define OLD_DOTDOT 307
#define NUMBER 308
#define METANUM 309
#define HASH_N_EQUALS 310
#define HASH_N_HASH 311
#define REGCHAR 312
#define REGTOKEN 313
#define LITCHAR 314
#define SPLICE 315
#define OLD_AT 316
#define CONSDOT 317
#define LAMBDOT 318
#define UREFDOT 319
#define OREFDOT 320
#define UOREFDOT 321
#define LOW 322
#define ELSE 323
#define ELIF 324




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 293 of yacc.c  */
#line 107 "parser.y"

  wchar_t *lexeme;
  union obj *val;
  wchar_t chr;
  cnum lineno;



/* Line 293 of yacc.c  */
#line 356 "y.tab.c"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */


/* Line 343 of yacc.c  */
#line 368 "y.tab.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  200
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   4767

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  95
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  120
/* YYNRULES -- Number of rules.  */
#define YYNRULES  429
/* YYNRULES -- Number of states.  */
#define YYNSTATES  771

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   324

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
      90,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,    94,     2,    92,    91,     2,    88,    83,    79,
      67,    76,    85,    87,    78,    77,    89,    82,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    86,    69,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    68,     2,    75,    80,     2,    93,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    71,    81,    72,    84,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    70,    73,    74
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     8,     9,    14,    15,    20,    22,
      24,    27,    28,    32,    33,    38,    39,    44,    46,    49,
      52,    53,    57,    58,    63,    64,    69,    71,    74,    77,
      79,    81,    82,    84,    87,    89,    90,    92,    94,    96,
      98,   100,   102,   104,   106,   108,   110,   112,   114,   116,
     118,   122,   126,   132,   138,   142,   146,   150,   154,   158,
     162,   170,   176,   182,   188,   196,   209,   215,   218,   222,
     226,   227,   235,   248,   254,   256,   258,   260,   262,   265,
     268,   272,   276,   286,   292,   299,   300,   304,   305,   308,
     310,   311,   313,   316,   318,   320,   322,   324,   326,   329,
     331,   333,   335,   341,   351,   357,   367,   373,   376,   379,
     382,   385,   390,   393,   396,   399,   404,   410,   413,   415,
     418,   421,   429,   436,   439,   445,   450,   457,   461,   467,
     474,   478,   479,   484,   490,   494,   502,   508,   515,   523,
     532,   535,   541,   546,   553,   559,   561,   564,   566,   568,
     570,   579,   583,   588,   593,   600,   605,   612,   619,   620,
     630,   633,   639,   646,   647,   651,   652,   654,   655,   658,
     660,   661,   663,   666,   668,   671,   673,   675,   677,   679,
     681,   688,   691,   695,   699,   705,   709,   715,   721,   722,
     724,   728,   733,   736,   741,   747,   753,   756,   759,   761,
     763,   765,   767,   769,   771,   776,   779,   785,   789,   792,
     795,   798,   801,   804,   807,   810,   813,   816,   819,   822,
     825,   829,   834,   837,   842,   847,   850,   853,   856,   859,
     862,   867,   871,   874,   877,   879,   881,   883,   885,   887,
     888,   890,   894,   896,   897,   901,   902,   907,   908,   913,
     914,   920,   923,   926,   930,   933,   937,   939,   941,   943,
     945,   947,   949,   951,   953,   955,   957,   959,   961,   963,
     965,   968,   971,   973,   976,   977,   981,   982,   986,   987,
     991,   992,   996,   998,  1001,  1003,  1005,  1007,  1009,  1011,
    1013,  1015,  1017,  1019,  1021,  1023,  1025,  1027,  1029,  1031,
    1034,  1037,  1039,  1042,  1043,  1047,  1048,  1052,  1053,  1057,
    1061,  1066,  1070,  1075,  1079,  1083,  1086,  1089,  1090,  1094,
    1096,  1098,  1099,  1102,  1105,  1107,  1111,  1114,  1118,  1121,
    1123,  1127,  1131,  1134,  1135,  1137,  1140,  1144,  1147,  1150,
    1153,  1157,  1161,  1164,  1167,  1169,  1171,  1173,  1175,  1177,
    1179,  1183,  1186,  1188,  1191,  1193,  1195,  1197,  1201,  1203,
    1205,  1207,  1209,  1211,  1213,  1215,  1217,  1219,  1221,  1223,
    1225,  1227,  1229,  1232,  1235,  1239,  1242,  1245,  1248,  1251,
    1254,  1257,  1261,  1264,  1266,  1269,  1271,  1273,  1275,  1278,
    1280,  1283,  1285,  1288,  1290,  1293,  1295,  1298,  1300,  1303,
    1306,  1308,  1310,  1313,  1316,  1320,  1323,  1327,  1330,  1333,
    1335,  1338,  1341,  1343,  1345,  1347,  1349,  1351,  1353,  1355,
    1357,  1359,  1363,  1367,  1371,  1375,  1379,  1383,  1387,  1393
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
      96,     0,    -1,   109,    -1,    49,   193,    -1,    -1,    50,
      99,    97,   107,    -1,    -1,    51,   103,    98,   107,    -1,
      50,    -1,    51,    -1,     1,    90,    -1,    -1,    41,   100,
     184,    -1,    -1,    41,    89,   101,   184,    -1,    -1,    41,
      65,   102,   184,    -1,   184,    -1,    89,   184,    -1,    65,
     184,    -1,    -1,    41,   104,   178,    -1,    -1,    41,    89,
     105,   178,    -1,    -1,    41,    65,   106,   178,    -1,   178,
      -1,    89,   178,    -1,    65,   178,    -1,   184,    -1,    41,
      -1,    -1,   110,    -1,   108,   110,    -1,   108,    -1,    -1,
     111,    -1,   112,    -1,   113,    -1,   114,    -1,   115,    -1,
     116,    -1,   117,    -1,   121,    -1,   118,    -1,   137,    -1,
     138,    -1,   126,    -1,   140,    -1,   129,    -1,     6,   201,
     124,    -1,     6,   201,     1,    -1,     7,   171,    76,   201,
     124,    -1,     7,   171,    76,   201,     1,    -1,     8,   201,
     124,    -1,     8,   201,     1,    -1,     9,   201,   124,    -1,
       9,   201,     1,    -1,    10,   201,   124,    -1,    10,   201,
       1,    -1,    11,   171,    76,   201,   109,    16,   201,    -1,
      11,   171,    76,   201,     1,    -1,    12,   171,    76,   201,
     124,    -1,    12,   171,    76,   201,     1,    -1,    13,   171,
      76,   201,   119,    16,   201,    -1,    13,   171,    76,   201,
     119,   123,   171,    76,   201,   109,    16,   201,    -1,    13,
     171,    76,   201,     1,    -1,   109,   120,    -1,    14,   201,
     119,    -1,    15,   201,   119,    -1,    -1,   122,   171,    76,
     201,   109,    16,   201,    -1,   122,   171,    76,   201,   109,
     123,   171,    76,   201,   109,    16,   201,    -1,   122,   171,
      76,   201,     1,    -1,    17,    -1,    21,    -1,    18,    -1,
      25,    -1,   109,   125,    -1,    16,   201,    -1,    14,   201,
     124,    -1,    15,   201,   124,    -1,    33,   189,    76,   201,
     109,   127,   128,    16,   201,    -1,    33,   189,    76,   201,
       1,    -1,    74,   189,    76,   201,   109,   127,    -1,    -1,
      73,   201,   109,    -1,    -1,   130,    90,    -1,   131,    -1,
      -1,   134,    -1,   134,   131,    -1,     4,    -1,     3,    -1,
     191,    -1,    26,    -1,   132,    -1,   132,   133,    -1,   133,
      -1,   155,    -1,   166,    -1,    19,   171,    76,   130,    16,
      -1,    19,   171,    76,   130,   123,   171,    76,   130,    16,
      -1,    22,   171,    76,   131,    16,    -1,    22,   171,    76,
     131,   123,   171,    76,   131,    16,    -1,    11,   171,    76,
     131,    16,    -1,    19,     1,    -1,    22,     1,    -1,    11,
       1,    -1,     6,   135,    -1,     7,   171,    76,   135,    -1,
       8,   135,    -1,     9,   135,    -1,    10,   135,    -1,    12,
     171,    76,   135,    -1,    29,   170,    76,   131,    16,    -1,
     130,   136,    -1,    16,    -1,    14,   135,    -1,    15,   135,
      -1,    29,   170,    76,   201,   109,    16,   201,    -1,    29,
      76,   201,   109,    16,   201,    -1,    29,     1,    -1,    29,
     170,    76,   201,     1,    -1,    29,    76,   201,     1,    -1,
      30,   201,   109,   139,    16,   201,    -1,    30,   201,     1,
      -1,    31,    76,   201,   109,   139,    -1,    31,   170,    76,
     201,   109,   139,    -1,    32,   201,   109,    -1,    -1,    31,
      76,   201,     1,    -1,    31,   170,    76,   201,     1,    -1,
      32,   201,     1,    -1,    20,    76,   151,    90,   141,    16,
     201,    -1,    20,    76,   201,    16,   201,    -1,    20,    76,
     201,   141,    16,   201,    -1,    20,   170,    76,   201,   141,
      16,   201,    -1,    20,   170,    76,   151,    90,   141,    16,
     201,    -1,    20,     1,    -1,    20,    76,   151,    90,     1,
      -1,    20,    76,   201,     1,    -1,    20,   170,    76,   151,
      90,     1,    -1,    20,   170,    76,   201,     1,    -1,   142,
      -1,   142,   141,    -1,   143,    -1,   145,    -1,   149,    -1,
      21,   189,    76,   201,   148,   144,    16,   201,    -1,    21,
     201,     1,    -1,    23,   201,   148,   144,    -1,    24,   201,
     148,   144,    -1,    25,   171,    76,   201,   148,   144,    -1,
      26,   201,   148,   144,    -1,    27,   171,    76,   201,   148,
     144,    -1,    28,   171,    76,   201,   148,   144,    -1,    -1,
      33,   184,    76,   201,   148,   146,   147,    16,   201,    -1,
      33,    76,    -1,    33,   184,    76,   201,     1,    -1,    74,
     189,    76,   201,   148,   146,    -1,    -1,    73,   201,   148,
      -1,    -1,   141,    -1,    -1,   150,    90,    -1,   151,    -1,
      -1,   152,    -1,   152,   151,    -1,   214,    -1,   214,   151,
      -1,     4,    -1,     3,    -1,   158,    -1,   169,    -1,   153,
      -1,    22,   189,    76,   150,   154,    16,    -1,    22,     1,
      -1,    23,   150,   154,    -1,    24,   150,   154,    -1,    25,
     171,    76,   150,   154,    -1,    26,   150,   154,    -1,    27,
     171,    76,   150,   154,    -1,    28,   171,    76,   150,   154,
      -1,    -1,     5,    -1,    71,     5,    72,    -1,    71,     5,
     157,    72,    -1,   156,     5,    -1,   156,    71,     5,    72,
      -1,   156,    71,     5,   191,    72,    -1,   156,    71,     5,
      53,    72,    -1,     5,     1,    -1,   156,     1,    -1,    85,
      -1,    53,    -1,   191,    -1,   169,    -1,     5,    -1,     5,
      -1,    71,   184,   189,    72,    -1,     5,     1,    -1,    69,
      71,   184,   189,    72,    -1,    69,    71,     1,    -1,    91,
     166,    -1,    91,     1,    -1,    38,   166,    -1,    38,     1,
      -1,    39,   166,    -1,    39,     1,    -1,    40,   166,    -1,
      40,     1,    -1,    43,   166,    -1,    43,     1,    -1,    44,
     166,    -1,    44,     1,    -1,    67,   172,    76,    -1,    67,
      89,   172,    76,    -1,    67,    76,    -1,    67,    63,   184,
      76,    -1,    67,    62,   184,    76,    -1,    67,     1,    -1,
      69,   184,    -1,    69,     1,    -1,    61,   184,    -1,    61,
       1,    -1,    68,    89,   172,    75,    -1,    68,   172,    75,
      -1,    68,    75,    -1,    68,     1,    -1,   166,    -1,   168,
      -1,   167,    -1,   172,    -1,   170,    -1,    -1,   173,    -1,
     173,    62,   184,    -1,   184,    -1,    -1,    41,   174,   184,
      -1,    -1,    41,    89,   175,   184,    -1,    -1,   173,    41,
     176,   184,    -1,    -1,   173,    41,    89,   177,   184,    -1,
     173,   184,    -1,    46,   209,    -1,   173,    46,   209,    -1,
      48,   210,    -1,   173,    48,   210,    -1,     5,    -1,    54,
      -1,    53,    -1,   169,    -1,   160,    -1,   161,    -1,   162,
      -1,   163,    -1,   164,    -1,   165,    -1,   192,    -1,   203,
      -1,   202,    -1,   204,    -1,    45,   209,    -1,    47,   210,
      -1,   211,    -1,    79,   183,    -1,    -1,    80,   179,   183,
      -1,    -1,    78,   180,   183,    -1,    -1,    60,   181,   183,
      -1,    -1,    55,   182,   183,    -1,    56,    -1,    89,   178,
      -1,   178,    -1,     5,    -1,    54,    -1,    53,    -1,   169,
      -1,   160,    -1,   161,    -1,   162,    -1,   163,    -1,   164,
      -1,   165,    -1,   192,    -1,   203,    -1,   202,    -1,   204,
      -1,    45,   209,    -1,    47,   210,    -1,   211,    -1,    79,
     190,    -1,    -1,    80,   185,   190,    -1,    -1,    78,   186,
     190,    -1,    -1,    60,   187,   190,    -1,   184,    37,   184,
      -1,   184,    37,    89,   184,    -1,   184,    52,   184,    -1,
     184,    52,    89,   184,    -1,   184,    89,   184,    -1,   184,
      65,   184,    -1,    64,   184,    -1,    66,   184,    -1,    -1,
      55,   188,   190,    -1,    56,    -1,   172,    -1,    -1,    89,
     184,    -1,    65,   184,    -1,   184,    -1,    82,   193,    82,
      -1,    82,     1,    -1,    36,   193,    82,    -1,    36,     1,
      -1,   194,    -1,   193,    81,   193,    -1,   193,    83,   193,
      -1,    84,   193,    -1,    -1,   195,    -1,   195,   194,    -1,
     195,    84,   193,    -1,   195,    85,    -1,   195,    87,    -1,
     195,    86,    -1,   195,    88,   193,    -1,    68,   196,    75,
      -1,    68,    75,    -1,    68,     1,    -1,    89,    -1,    75,
      -1,    77,    -1,    57,    -1,   200,    -1,     4,    -1,    67,
     193,    76,    -1,    67,     1,    -1,   197,    -1,   197,   196,
      -1,   198,    -1,   199,    -1,   200,    -1,   199,    77,   199,
      -1,    86,    -1,    89,    -1,    85,    -1,    87,    -1,    67,
      -1,    76,    -1,    81,    -1,    84,    -1,    83,    -1,    88,
      -1,    82,    -1,    57,    -1,    58,    -1,    90,    -1,     1,
      90,    -1,    92,    92,    -1,    92,   207,    92,    -1,    92,
       1,    -1,    35,     5,    -1,    35,    59,    -1,    35,     4,
      -1,    35,     1,    -1,    93,    93,    -1,    93,   205,    93,
      -1,    93,     1,    -1,   206,    -1,   206,   205,    -1,   207,
      -1,   159,    -1,    54,    -1,    69,   184,    -1,    59,    -1,
      59,   208,    -1,     4,    -1,     4,   208,    -1,    59,    -1,
     208,    59,    -1,     4,    -1,   208,     4,    -1,    92,    -1,
      94,   209,    -1,   207,   209,    -1,     1,    -1,    93,    -1,
      94,   210,    -1,   205,    93,    -1,   205,    94,   210,    -1,
      42,    79,    -1,    42,   212,    79,    -1,    42,     1,    -1,
     212,   213,    -1,   213,    -1,    59,    59,    -1,    59,     1,
      -1,     6,    -1,     7,    -1,     8,    -1,     9,    -1,    10,
      -1,    14,    -1,    15,    -1,    30,    -1,    32,    -1,    11,
     171,    76,    -1,    12,   171,    76,    -1,    17,   171,    76,
      -1,    19,   171,    76,    -1,    13,   171,    76,    -1,    29,
     171,    76,    -1,    31,   171,    76,    -1,    33,   184,   184,
     171,    76,    -1,    20,   171,    76,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   174,   174,   175,   178,   177,   181,   180,   183,   190,
     197,   206,   206,   209,   209,   212,   212,   215,   216,   217,
     220,   220,   223,   223,   226,   226,   229,   230,   231,   236,
     237,   238,   241,   242,   245,   246,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   261,   262,   263,   264,
     267,   269,   273,   276,   282,   284,   288,   290,   294,   296,
     300,   311,   316,   319,   324,   333,   345,   350,   354,   355,
     356,   359,   365,   377,   382,   383,   386,   387,   390,   393,
     394,   395,   398,   421,   425,   438,   441,   446,   449,   452,
     453,   456,   458,   463,   464,   472,   474,   477,   478,   481,
     483,   485,   493,   496,   504,   507,   516,   519,   521,   523,
     525,   526,   528,   529,   530,   531,   534,   540,   543,   544,
     545,   548,   553,   557,   559,   561,   566,   574,   579,   584,
     590,   595,   596,   599,   602,   608,   612,   614,   617,   629,
     634,   636,   639,   642,   645,   650,   651,   654,   655,   656,
     659,   665,   670,   674,   678,   687,   691,   698,   705,   708,
     720,   723,   727,   738,   741,   744,   747,   748,   750,   753,
     755,   758,   759,   760,   761,   764,   766,   768,   769,   771,
     774,   777,   781,   784,   787,   795,   798,   804,   810,   817,
     818,   819,   820,   821,   822,   826,   831,   834,   838,   841,
     842,   844,   846,   849,   854,   863,   868,   871,   876,   881,
     885,   891,   895,   902,   906,   910,   914,   919,   923,   936,
     940,   941,   947,   948,   949,   950,   954,   959,   963,   968,
     972,   976,   977,   978,   982,   983,   984,   987,   990,   991,
     994,   996,  1001,  1004,  1004,  1008,  1008,  1012,  1012,  1015,
    1015,  1018,  1021,  1023,  1027,  1029,  1035,  1036,  1038,  1039,
    1040,  1041,  1042,  1043,  1044,  1045,  1046,  1047,  1048,  1049,
    1050,  1051,  1052,  1053,  1055,  1055,  1059,  1059,  1063,  1063,
    1067,  1067,  1070,  1073,  1074,  1076,  1077,  1079,  1080,  1081,
    1082,  1083,  1084,  1085,  1086,  1087,  1088,  1089,  1090,  1091,
    1092,  1093,  1094,  1096,  1096,  1100,  1100,  1104,  1104,  1108,
    1111,  1117,  1121,  1127,  1128,  1131,  1132,  1133,  1133,  1136,
    1139,  1140,  1143,  1144,  1145,  1148,  1151,  1156,  1160,  1166,
    1169,  1170,  1171,  1172,  1175,  1176,  1177,  1180,  1181,  1182,
    1183,  1184,  1191,  1192,  1194,  1195,  1196,  1197,  1198,  1199,
    1200,  1201,  1205,  1206,  1209,  1210,  1211,  1214,  1216,  1217,
    1218,  1219,  1220,  1221,  1222,  1223,  1224,  1225,  1226,  1227,
    1230,  1244,  1245,  1249,  1250,  1252,  1256,  1269,  1271,  1275,
    1280,  1281,  1284,  1288,  1290,  1294,  1295,  1296,  1298,  1305,
    1306,  1308,  1309,  1312,  1313,  1314,  1315,  1318,  1319,  1320,
    1322,  1326,  1327,  1328,  1330,  1336,  1338,  1341,  1346,  1348,
    1352,  1353,  1360,  1361,  1362,  1363,  1364,  1365,  1366,  1367,
    1368,  1369,  1371,  1373,  1375,  1377,  1379,  1381,  1383,  1388
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "SPACE", "TEXT", "SYMTOK", "ALL", "SOME",
  "NONE", "MAYBE", "CASES", "BLOCK", "CHOOSE", "GATHER", "AND", "OR",
  "END", "COLLECT", "UNTIL", "COLL", "OUTPUT", "REPEAT", "REP", "SINGLE",
  "FIRST", "LAST", "EMPTY", "MOD", "MODLAST", "DEFINE", "TRY", "CATCH",
  "FINALLY", "IF", "ERRTOK", "HASH_BACKSLASH", "HASH_SLASH", "DOTDOT",
  "HASH_H", "HASH_S", "HASH_R", "HASH_SEMI", "HASH_B_QUOTE", "HASH_N",
  "HASH_T", "WORDS", "WSPLICE", "QWORDS", "QWSPLICE", "SECRET_ESCAPE_R",
  "SECRET_ESCAPE_E", "SECRET_ESCAPE_I", "OLD_DOTDOT", "NUMBER", "METANUM",
  "HASH_N_EQUALS", "HASH_N_HASH", "REGCHAR", "REGTOKEN", "LITCHAR",
  "SPLICE", "OLD_AT", "CONSDOT", "LAMBDOT", "UREFDOT", "OREFDOT",
  "UOREFDOT", "'('", "'['", "'@'", "LOW", "'{'", "'}'", "ELSE", "ELIF",
  "']'", "')'", "'-'", "','", "'\\''", "'^'", "'|'", "'/'", "'&'", "'~'",
  "'*'", "'?'", "'+'", "'%'", "'.'", "'\\n'", "'#'", "'\"'", "'`'", "' '",
  "$accept", "spec", "$@1", "$@2", "hash_semi_or_n_expr", "$@3", "$@4",
  "$@5", "hash_semi_or_i_expr", "$@6", "$@7", "$@8", "byacc_fool",
  "clauses_rev", "clauses_opt", "clause", "all_clause", "some_clause",
  "none_clause", "maybe_clause", "cases_clause", "block_clause",
  "choose_clause", "gather_clause", "gather_parts",
  "additional_gather_parts", "collect_clause", "collect_repeat",
  "until_last", "clause_parts", "additional_parts", "if_clause",
  "elif_clauses_opt", "else_clause_opt", "line", "elems_opt", "elems",
  "text", "texts", "elem", "clause_parts_h", "additional_parts_h",
  "define_clause", "try_clause", "catch_clauses_opt", "output_clause",
  "out_clauses", "out_clause", "repeat_clause", "repeat_parts_opt",
  "out_if_clause", "out_elif_clauses_opt", "out_else_clause_opt",
  "out_clauses_opt", "o_line", "o_elems_opt", "o_elems", "o_elem",
  "rep_elem", "rep_parts_opt", "var", "var_op", "modifiers", "o_var",
  "q_var", "vector", "hash", "struct", "range", "tnode", "tree", "list",
  "meta", "dwim", "compound", "exprs", "exprs_opt", "n_exprs", "listacc",
  "$@9", "$@10", "$@11", "$@12", "i_expr", "$@13", "$@14", "$@15", "$@16",
  "i_dot_expr", "n_expr", "$@17", "$@18", "$@19", "$@20", "n_exprs_opt",
  "n_dot_expr", "regex", "lisp_regex", "regexpr", "regbranch", "regterm",
  "regclass", "regclassterm", "regrange", "regchar", "regtoken", "newl",
  "strlit", "chrlit", "quasilit", "quasi_items", "quasi_item", "litchars",
  "restlitchar", "wordslit", "wordsqlit", "buflit", "buflit_items",
  "buflit_item", "not_a_clause", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    40,    91,    64,
     322,   123,   125,   323,   324,    93,    41,    45,    44,    39,
      94,   124,    47,    38,   126,    42,    63,    43,    37,    46,
      10,    35,    34,    96,    32
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    95,    96,    96,    97,    96,    98,    96,    96,    96,
      96,   100,    99,   101,    99,   102,    99,    99,    99,    99,
     104,   103,   105,   103,   106,   103,   103,   103,   103,   107,
     107,   107,   108,   108,   109,   109,   110,   110,   110,   110,
     110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
     111,   111,   112,   112,   113,   113,   114,   114,   115,   115,
     116,   116,   117,   117,   118,   118,   118,   119,   120,   120,
     120,   121,   121,   121,   122,   122,   123,   123,   124,   125,
     125,   125,   126,   126,   127,   127,   128,   128,   129,   130,
     130,   131,   131,   132,   132,   132,   132,   133,   133,   134,
     134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
     134,   134,   134,   134,   134,   134,   134,   135,   136,   136,
     136,   137,   137,   137,   137,   137,   138,   138,   139,   139,
     139,   139,   139,   139,   139,   140,   140,   140,   140,   140,
     140,   140,   140,   140,   140,   141,   141,   142,   142,   142,
     143,   143,   144,   144,   144,   144,   144,   144,   144,   145,
     145,   145,   146,   146,   147,   147,   148,   148,   149,   150,
     150,   151,   151,   151,   151,   152,   152,   152,   152,   152,
     153,   153,   154,   154,   154,   154,   154,   154,   154,   155,
     155,   155,   155,   155,   155,   155,   155,   155,   156,   157,
     157,   157,   157,   158,   158,   158,   159,   159,   160,   160,
     161,   161,   162,   162,   163,   163,   164,   164,   165,   165,
     166,   166,   166,   166,   166,   166,   167,   167,   167,   167,
     168,   168,   168,   168,   169,   169,   169,   170,   171,   171,
     172,   172,   173,   174,   173,   175,   173,   176,   173,   177,
     173,   173,   173,   173,   173,   173,   178,   178,   178,   178,
     178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
     178,   178,   178,   178,   179,   178,   180,   178,   181,   178,
     182,   178,   178,   183,   183,   184,   184,   184,   184,   184,
     184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
     184,   184,   184,   185,   184,   186,   184,   187,   184,   184,
     184,   184,   184,   184,   184,   184,   184,   188,   184,   184,
     189,   189,   190,   190,   190,   191,   191,   192,   192,   193,
     193,   193,   193,   193,   194,   194,   194,   195,   195,   195,
     195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
     195,   195,   196,   196,   197,   197,   197,   198,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     200,   201,   201,   202,   202,   202,   203,   203,   203,   203,
     204,   204,   204,   205,   205,   206,   206,   206,   206,   207,
     207,   207,   207,   208,   208,   208,   208,   209,   209,   209,
     209,   210,   210,   210,   210,   211,   211,   211,   212,   212,
     213,   213,   214,   214,   214,   214,   214,   214,   214,   214,
     214,   214,   214,   214,   214,   214,   214,   214,   214,   214
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     2,     0,     4,     0,     4,     1,     1,
       2,     0,     3,     0,     4,     0,     4,     1,     2,     2,
       0,     3,     0,     4,     0,     4,     1,     2,     2,     1,
       1,     0,     1,     2,     1,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     5,     5,     3,     3,     3,     3,     3,     3,
       7,     5,     5,     5,     7,    12,     5,     2,     3,     3,
       0,     7,    12,     5,     1,     1,     1,     1,     2,     2,
       3,     3,     9,     5,     6,     0,     3,     0,     2,     1,
       0,     1,     2,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     5,     9,     5,     9,     5,     2,     2,     2,
       2,     4,     2,     2,     2,     4,     5,     2,     1,     2,
       2,     7,     6,     2,     5,     4,     6,     3,     5,     6,
       3,     0,     4,     5,     3,     7,     5,     6,     7,     8,
       2,     5,     4,     6,     5,     1,     2,     1,     1,     1,
       8,     3,     4,     4,     6,     4,     6,     6,     0,     9,
       2,     5,     6,     0,     3,     0,     1,     0,     2,     1,
       0,     1,     2,     1,     2,     1,     1,     1,     1,     1,
       6,     2,     3,     3,     5,     3,     5,     5,     0,     1,
       3,     4,     2,     4,     5,     5,     2,     2,     1,     1,
       1,     1,     1,     1,     4,     2,     5,     3,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       3,     4,     2,     4,     4,     2,     2,     2,     2,     2,
       4,     3,     2,     2,     1,     1,     1,     1,     1,     0,
       1,     3,     1,     0,     3,     0,     4,     0,     4,     0,
       5,     2,     2,     3,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     2,     0,     3,     0,     3,     0,     3,
       0,     3,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     2,     0,     3,     0,     3,     0,     3,     3,
       4,     3,     4,     3,     3,     2,     2,     0,     3,     1,
       1,     0,     2,     2,     1,     3,     2,     3,     2,     1,
       3,     3,     2,     0,     1,     2,     3,     2,     2,     2,
       3,     3,     2,     2,     1,     1,     1,     1,     1,     1,
       3,     2,     1,     2,     1,     1,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     3,     2,     2,     2,     2,     2,
       2,     3,     2,     1,     2,     1,     1,     1,     2,     1,
       2,     1,     2,     1,     2,     1,     2,     1,     2,     2,
       1,     1,     2,     2,     3,     2,     3,     2,     2,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     3,     3,     3,     3,     3,     5,     3
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,     0,    94,    93,     0,     0,   239,     0,     0,     0,
       0,   239,   239,    74,     0,     0,    75,     0,    96,     0,
       0,   321,   333,     8,     9,     0,     0,     0,   198,     0,
      34,     2,    32,    36,    37,    38,    39,    40,    41,    42,
      44,    43,   239,    47,    49,     0,    89,    97,    99,    91,
      45,    46,    48,   100,     0,   101,    95,    10,   196,     0,
      90,   239,    90,    90,    90,     0,   239,     0,   371,     0,
     110,     0,   285,     0,     0,     0,     0,     0,   243,     0,
       0,     0,     0,     0,     0,     0,   287,   286,   317,   319,
     307,     0,     0,     0,     0,     0,   305,     0,   303,     0,
       0,     0,   289,   290,   291,   292,   293,   294,   234,   236,
     235,   288,   238,     0,   237,   240,   242,   295,   297,   296,
     298,   301,   112,     0,   113,     0,   114,     0,   109,     0,
       0,     0,   107,     0,   140,     0,     0,   108,     0,   123,
       0,     0,     0,   320,     0,   349,   347,   370,     0,     0,
     345,   346,   333,   344,     3,   329,   334,   348,    11,     0,
       0,     4,    17,   256,    20,     0,     0,   258,   257,   280,
     282,   278,     0,   276,     0,   274,     0,     6,   260,   261,
     262,   263,   264,   265,   259,    26,   266,   268,   267,   269,
     272,   225,     0,     0,   222,     0,     0,     0,   326,     0,
       1,    33,     0,    88,    98,    92,   197,   192,     0,   372,
       0,     0,     0,     0,    90,    90,   118,   117,    51,     0,
      50,   379,   378,   376,   377,   328,     0,   211,   210,   213,
     212,   215,   214,   245,     0,   407,     0,   405,     0,   409,
     217,   216,   219,   218,   400,   391,   389,   397,     0,     0,
     299,   252,   387,     0,   401,     0,   386,     0,   383,   385,
     300,   254,     0,     0,   229,   228,   315,   316,   233,   232,
       0,     0,   227,   226,     0,     0,     0,   324,   302,     0,
     209,   208,   375,   373,     0,   382,   380,     0,     0,   247,
       0,     0,     0,   251,     0,     0,     0,     0,    55,    54,
      57,    56,    59,    58,     0,     0,     0,    90,   176,   175,
       0,   412,   413,   414,   415,   416,   239,   239,   239,   417,
     418,   239,   239,   239,     0,   239,   419,   239,   420,     0,
       0,     0,   171,   179,   177,   178,     0,   173,     0,     0,
       0,     0,   127,   131,     0,   351,     0,   343,   369,   362,
     342,   363,   364,   368,   366,   365,   360,   358,   361,   367,
     359,     0,   352,   354,   355,   356,   332,   333,   333,   333,
     337,   339,   338,   333,   335,    15,    13,     0,    19,    18,
      31,    24,    22,     0,   270,   271,     0,     0,    28,     0,
       0,   284,   273,     0,    27,    31,     0,     0,     0,   220,
     202,   199,   190,     0,   201,   200,   325,     0,     0,    90,
       0,    90,     0,   119,   120,     0,     0,     0,    78,   327,
       0,   244,   411,   410,   406,   408,   395,   393,   392,   390,
     398,   399,     0,   388,   402,   403,     0,   384,   318,   308,
       0,   231,   306,   323,   322,   304,   374,   381,   111,     0,
     249,     0,   253,   255,   241,     0,   309,     0,   311,   314,
     313,     0,     0,   115,     0,     0,     0,   205,     0,     0,
       0,     0,     0,     0,   181,     0,     0,     0,     0,   321,
       0,   172,   142,     0,     0,     0,     0,   145,   147,   148,
     149,     0,   169,   174,     0,     0,     0,   125,     0,     0,
       0,     0,     0,     0,     0,   350,   341,   353,     0,   330,
     331,   336,   340,     0,     0,    12,    30,     5,    29,     0,
       0,    21,   281,   279,   277,   283,   275,     7,   224,   223,
     221,   191,     0,     0,   193,     0,    35,    35,    79,   246,
     396,   394,   207,   321,   404,   230,    53,    52,     0,   248,
     310,   312,   106,    61,     0,    63,    62,    66,    70,     0,
     102,    76,    77,   239,   421,   422,   425,   423,   424,   429,
     170,   426,   427,   239,     0,   141,     0,   136,     0,     0,
     160,     0,     0,   146,   168,     0,   144,     0,   104,   239,
       0,   116,   124,     0,     0,     0,     0,     0,    83,    85,
     357,    16,    14,    25,    23,    73,     0,   195,   194,    80,
      81,     0,   250,     0,     0,     0,    67,     0,   239,     0,
     188,     0,   204,     0,     0,   151,     0,   137,   143,     0,
       0,     0,   122,     0,     0,     0,   134,   130,   126,   321,
      87,     0,   239,   206,    60,    35,    35,    64,     0,    90,
     170,   170,   239,   170,   239,   239,     0,   428,   135,   167,
       0,     0,   138,     0,   121,   132,   131,     0,     0,     0,
       0,    71,     0,    68,    69,     0,     0,   188,   188,     0,
     188,     0,     0,   180,   166,   158,   161,   163,   139,     0,
     128,   133,   131,     0,    35,     0,     0,    35,   103,   182,
     183,   170,   185,   170,   170,     0,     0,   239,     0,   239,
     239,     0,   321,   165,   105,   129,    35,    86,    82,    35,
       0,   188,   188,   188,   167,   167,     0,   167,     0,     0,
       0,     0,     0,     0,    85,     0,     0,   184,   186,   187,
     158,   158,     0,   158,     0,     0,   150,     0,   167,     0,
      84,     0,    65,   152,   153,   167,   155,   167,   167,   167,
     164,   159,    72,   158,   158,   158,   163,   154,   156,   157,
     162
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    29,   380,   395,   161,   377,   514,   513,   177,   383,
     520,   519,   517,    30,   219,    32,    33,    34,    35,    36,
      37,    38,    39,    40,   559,   616,    41,    42,   563,   220,
     418,    43,   640,   670,    44,    45,    46,    47,    48,    49,
      70,   217,    50,    51,   503,    52,   684,   487,   488,   711,
     489,   713,   733,   685,   490,   491,   492,   332,   333,   656,
      53,    54,   403,   334,   256,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   234,
     420,   451,   548,   391,   393,   389,   387,   386,   392,   116,
     279,   274,   263,   262,   144,   278,    56,   117,   154,   155,
     156,   361,   362,   363,   364,   157,    71,   118,   119,   120,
     257,   258,   259,   428,   250,   260,   121,   238,   239,   337
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -637
static const yytype_int16 yypact[] =
{
    1916,   -44,  -637,  -637,  3299,  3387,  3785,  3387,  3387,  3387,
    1270,  3785,  3785,  -637,  1339,  1408,  -637,  1477,  -637,  1546,
      24,  3785,   505,  3845,  3975,  1132,    65,   777,  -637,    75,
    4577,  -637,  -637,  -637,  -637,  -637,  -637,  -637,  -637,  -637,
    -637,  -637,  3785,  -637,  -637,   -32,  -637,    48,  -637,  4613,
    -637,  -637,  -637,  -637,    33,  -637,  -637,  -637,  -637,   -11,
    4613,  3785,  4613,  4613,  4613,  1270,  3785,  3785,  -637,   129,
    -637,  2384,  -637,    52,  1893,    35,    41,    42,     9,    68,
      46,    71,    40,    40,    31,    31,  -637,  -637,  -637,  -637,
    -637,  1684,  4334,  4334,  1039,  1753,  -637,  3910,  -637,    72,
      44,    27,  -637,  -637,  -637,  -637,  -637,  -637,  -637,  -637,
    -637,  -637,  -637,     6,  -637,  3600,   122,  -637,  -637,  -637,
    -637,  -637,  -637,  2423,  -637,  2511,  -637,  2542,  -637,    30,
      34,    70,  -637,    84,  -637,  2630,   106,  -637,   117,  -637,
      24,   119,  2663,  -637,   124,  -637,  -637,  -637,  3403,   825,
    -637,  -637,   505,  -637,    11,  -637,   190,  -637,   -35,  4334,
    4334,  -637,   122,  -637,   -25,    40,    31,  -637,  -637,  -637,
    -637,  -637,  4453,  -637,  4394,  -637,  4453,  -637,  -637,  -637,
    -637,  -637,  -637,  -637,  -637,  -637,  -637,  -637,  -637,  -637,
    -637,  -637,  4334,  4334,  -637,  3785,   140,   531,  -637,   -21,
    -637,  -637,   151,  -637,  -637,  -637,  -637,  -637,   136,  -637,
     156,   176,   179,   184,  4613,  4613,  -637,  -637,  -637,   164,
    -637,  -637,  -637,  -637,  -637,  -637,   127,  -637,  -637,  -637,
    -637,  -637,  -637,  -637,  4334,  -637,    58,  -637,    18,  -637,
    -637,  -637,  -637,  -637,  -637,    76,   109,  -637,    40,    40,
    -637,  -637,  -637,  4034,  -637,    31,  -637,   148,   103,  -637,
    -637,  -637,  3910,  3910,  -637,   122,    53,    53,  -637,  -637,
    3785,    54,  -637,   153,  3910,  4334,  4334,   122,  -637,  3910,
    -637,  -637,  -637,  -637,   121,  -637,  -637,   173,  3387,   180,
      40,    31,  4334,   122,  4094,  4154,  4334,  4334,  -637,  -637,
    -637,  -637,  -637,  -637,  3414,  3387,    24,  4613,  -637,  -637,
    2004,  -637,  -637,  -637,  -637,  -637,  3785,  3785,  3785,  -637,
    -637,  3785,  3785,  3785,  1615,  3785,  -637,  3785,  -637,  4334,
    4334,   192,  4696,  -637,  -637,  -637,  2125,  4696,  2630,  4613,
    3061,  3414,  -637,   304,    24,  -637,   207,  -637,  -637,  -637,
    -637,  -637,  -637,  -637,  -637,  -637,  -637,  -637,  -637,  -637,
    -637,   205,   872,  -637,   195,  -637,  -637,   505,   505,   505,
    -637,  -637,  -637,   505,  -637,  -637,  -637,  4334,   122,   122,
    4214,  -637,  -637,  4453,  -637,  -637,  4394,  4394,  -637,  4394,
    4453,  -637,  -637,  4394,  -637,  4214,   149,   197,   208,  -637,
    -637,  -637,  -637,   220,  -637,  -637,  -637,    24,    -4,  4613,
    4613,  4613,  4613,  -637,  -637,    24,    24,    24,  -637,  -637,
    4334,   122,  -637,  -637,  -637,  -637,  -637,  -637,    89,   241,
    -637,  -637,  1822,   122,  -637,  -637,    31,  -637,  -637,  -637,
     231,  -637,  -637,    53,    53,  -637,  -637,  -637,  -637,  2702,
    -637,  4334,  -637,  -637,   122,  4334,   122,  4334,   153,    53,
      53,   296,  3149,  -637,  2790,  2158,   245,  -637,   244,   246,
     254,   256,   265,   269,  -637,   270,   272,   278,  3660,  3470,
    2246,  -637,  -637,    24,  1201,  4274,   337,  4544,  -637,  -637,
    -637,   266,  -637,  -637,   268,  2279,   277,  -637,   346,   347,
    3180,  3725,    24,   348,  2821,  -637,  -637,  -637,  1146,   283,
    -637,  -637,  -637,  4334,  4334,   122,  -637,  -637,   122,  4453,
    4453,  -637,  -637,  -637,  -637,  -637,  -637,  -637,  -637,  -637,
    -637,  -637,  2909,   301,  -637,   311,  4577,  4577,  -637,   122,
    -637,  -637,  -637,  3470,  -637,  -637,  -637,  -637,  4334,   122,
      53,    53,  -637,  -637,   352,  -637,  -637,  -637,   324,   289,
    -637,  -637,  -637,  3785,  -637,  -637,  -637,  -637,  -637,  -637,
    4696,  -637,  -637,  3470,   315,  -637,   360,  -637,   314,   392,
    -637,  3535,    24,  -637,  -637,  2351,  -637,   378,  -637,  3785,
      24,  -637,  -637,   379,    24,   322,  3268,    24,  -637,   325,
    -637,   122,   122,  -637,  -637,  -637,   308,  -637,  -637,  -637,
    -637,   329,   122,    24,    24,    24,  -637,    24,  3785,   327,
     522,   331,  -637,    24,    24,  -637,    24,  -637,  -637,   395,
      24,   339,  -637,    24,  2940,    24,  -637,  -637,  -637,  3785,
     343,    24,  3785,  -637,  -637,  4577,  4577,  -637,   344,  4613,
    4696,  4696,  3785,  4696,  3785,  3785,   405,  -637,  -637,  4544,
    2037,    24,  -637,  4613,  -637,  -637,   304,  3028,   350,    24,
     408,  -637,   353,  -637,  -637,    24,   415,   522,   522,   356,
     522,   359,   362,  -637,  -637,   652,  -637,   365,  -637,   427,
    -637,  -637,   304,    24,  4577,    24,    24,  4577,  -637,  -637,
    -637,  4696,  -637,  4696,  4696,    24,    24,  3785,    24,  3785,
    3785,   428,  3785,   374,  -637,  -637,  4577,  -637,  -637,  4577,
     434,   522,   522,   522,  4544,  4544,   375,  4544,   377,   380,
      24,   384,    24,   438,   325,   439,    24,  -637,  -637,  -637,
     652,   652,    24,   652,    24,    24,  -637,    24,  4544,    24,
    -637,    24,  -637,  -637,  -637,  4544,  -637,  4544,  4544,  4544,
    -637,  -637,  -637,   652,   652,   652,   365,  -637,  -637,  -637,
    -637
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -637,  -637,  -637,  -637,  -637,  -637,  -637,  -637,  -637,  -637,
    -637,  -637,    66,  -637,    39,   442,  -637,  -637,  -637,  -637,
    -637,  -637,  -637,  -637,  -302,  -637,  -637,  -637,  -475,  -109,
    -637,  -637,  -261,  -637,  -637,     3,   -45,  -637,   432,  -637,
     182,  -637,  -637,  -637,  -526,  -637,  -331,  -637,  -637,  -250,
    -637,  -292,  -637,  -636,  -637,  -400,  -108,  -637,  -637,  -362,
    -637,  -637,  -637,  -637,  -637,    -1,    47,    59,   113,   137,
     145,   342,  -637,  -637,    -9,   -12,   141,     1,  -637,  -637,
    -637,  -637,  -637,    92,  -637,  -637,  -637,  -637,  -150,   670,
    -637,  -637,  -637,  -637,  -287,   -59,  -180,   498,     2,   332,
    -637,   130,  -637,  -637,   -27,  -140,    -7,   535,   596,   637,
     -81,  -637,   -50,   237,   -64,   -79,   642,  -637,   259,  -637
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -334
static const yytype_int16 yytable[] =
{
     123,   125,   127,   136,   205,   486,   261,   141,    69,   365,
      69,    69,    69,   142,   299,   184,   301,   405,   303,   251,
     287,   589,   143,   178,   687,    59,   196,   331,   285,   199,
     375,   245,   249,   249,   206,   245,   227,   475,   207,    31,
     381,   244,   229,   231,   245,   282,    57,   240,   245,   533,
     284,     2,     3,   221,   376,   213,   222,   223,   203,   422,
     367,   406,   368,    69,   382,    69,    69,    69,   534,   235,
     197,   179,   242,   280,    18,   200,   226,   236,    27,   209,
     426,   252,   288,   180,   618,   252,   246,   385,   740,   741,
     246,   743,   367,   540,   368,   271,   253,   424,   233,   246,
     253,   384,    25,   246,   208,   295,   304,   245,    25,    25,
     305,   224,   760,    25,    68,   249,   185,   423,   296,   763,
     286,   764,   765,   766,   254,   255,   335,   236,   336,   441,
      27,   642,   247,   340,   248,   427,   283,   181,    25,    25,
     690,   408,   297,   214,   215,   216,   306,   237,   541,   576,
     346,   129,   130,   131,   366,   133,   583,   252,   138,   294,
     307,   182,   246,   184,   587,   184,   715,   184,   427,   183,
     620,   178,   253,   178,   295,   178,   434,   437,   415,   416,
     417,   343,   338,   202,   430,   431,   294,   296,   404,   122,
     124,   126,   574,   339,   145,   341,   398,   578,   249,   249,
     344,   295,   210,   438,   439,   295,   211,   212,   367,   419,
     368,   297,   453,   446,   296,   442,   399,    69,    69,   179,
     445,   179,   365,   179,   481,   528,   452,   407,   535,   493,
     494,   180,   409,   180,   294,   180,   522,   523,   297,   524,
     249,   435,   436,   526,   122,   124,   126,   146,   147,   295,
     677,   678,   410,   680,   629,   411,   611,   148,   149,   461,
     412,   560,   296,   561,   388,   150,   447,   151,   394,   450,
     562,   440,   508,   529,   369,   370,   371,   372,   373,   153,
     506,   449,   480,   505,   530,   181,   297,   181,   367,   181,
     368,    69,   531,   588,   496,   561,   499,   462,   464,   465,
     541,   721,   562,   722,   723,   617,   545,   561,    69,   182,
     466,   182,   552,   182,   562,   699,   700,   183,   702,   183,
     564,   183,   565,   335,   641,   143,   561,   335,   335,   335,
     566,   495,   567,   562,   500,   501,   502,   504,   614,   615,
     547,   568,    55,   673,   674,   569,   570,    55,   571,    55,
      55,    55,   668,   582,   572,   556,   584,   544,   585,   737,
     738,   739,   590,   591,   597,   461,   368,   499,   613,   509,
     510,   511,    55,   607,   184,   512,   623,   184,   184,   498,
     184,   184,   178,   608,   184,   178,   178,   622,   178,   178,
     624,    55,   178,   625,   630,   633,   413,   414,   635,   639,
     532,   643,    55,   649,    55,    55,    55,   657,   536,   537,
     538,   661,    69,    55,    69,   663,   669,   228,   230,   232,
     675,   683,   241,   243,   695,   731,   693,   609,   610,   696,
     179,   698,   701,   179,   179,   703,   179,   179,   704,   712,
     179,   281,   180,   714,   730,   180,   180,   732,   180,   180,
     736,   742,   180,   744,   749,   751,   745,   468,   469,   470,
     747,   527,   471,   472,   473,    55,   476,    55,   477,    55,
     448,   335,   201,   750,   770,   521,   577,   579,   335,   204,
     143,   600,   525,   429,    55,   143,   335,   463,   374,   595,
     753,   754,   507,   756,     0,   596,   181,   425,     0,   181,
     181,   554,   181,   181,   558,     0,   181,     0,     0,   145,
     184,   184,     0,   767,   768,   769,     0,     0,   178,   178,
     182,     0,   186,   182,   182,     0,   182,   182,   183,     0,
     182,   183,   183,     0,   183,   183,   400,     0,   183,   593,
       0,     0,     0,   599,   143,   650,   651,   652,   653,   654,
     655,     0,     0,     0,     0,     0,    55,    55,     0,   187,
       0,   335,   146,   147,     0,     0,   179,   179,     0,     0,
       0,   606,   148,   149,     0,   627,   335,     0,   180,   180,
     150,     0,   151,   632,   401,     0,     0,   634,     0,   152,
     638,   448,    91,   463,   153,     0,     0,     0,    25,    94,
      95,     0,     0,   402,     0,     0,   644,   645,   646,     0,
     647,   603,   604,    27,     0,     0,   658,   659,   689,   660,
     188,     0,     0,   662,     0,     0,   664,     0,   667,     0,
      55,     0,   181,   181,   671,   637,     0,     0,     0,     0,
     143,   335,   335,     0,   335,     0,    55,    55,     0,    55,
     335,   335,   676,     0,   688,     0,   182,   182,     0,     0,
       0,   189,   694,     0,   183,   183,   190,     0,   697,     0,
     186,     0,   186,   666,   186,   705,   706,   707,   708,   709,
     710,    55,    55,    55,   558,   558,   716,     0,   718,   719,
       0,     0,   335,   162,   335,   335,     0,     0,   724,   725,
       0,   727,     0,     0,   619,     0,   692,   187,     0,   187,
       0,   187,     0,   143,   621,   335,   335,     0,   335,     0,
       0,     0,     0,   746,     0,   748,     0,     0,     0,   752,
     631,     0,     0,   717,     0,   755,   720,   757,   758,   335,
     759,     0,   761,     0,   762,     0,   335,     0,   335,   335,
     335,    55,    55,    55,    55,   734,     0,     0,   735,   648,
       0,   265,   266,   267,     0,   273,     0,   277,   188,     0,
     188,     0,   188,     0,     0,     0,     0,     0,   198,     0,
       0,   145,     0,   672,     0,   293,     0,     0,     0,     0,
       0,    55,     0,   679,     0,   681,   682,     0,     0,     0,
       0,     0,     0,     0,    55,     0,    55,    55,     0,   189,
       0,   189,     0,   189,   190,     0,   190,     0,   190,     0,
       0,     0,     0,     0,     0,     0,   347,     0,     0,   378,
     379,     0,     0,     0,   146,   147,     0,     0,     0,     0,
       0,     0,    55,     0,   148,   149,    55,     0,   726,     0,
     728,   729,   150,     0,   151,     0,     0,     0,  -333,  -333,
    -333,   152,   396,   397,     0,     0,   153,     0,     0,     0,
       0,     0,     0,     0,    55,     0,     0,     0,    55,    55,
       0,   186,   348,   147,   186,   186,     0,   186,   186,     0,
       0,   186,   349,     0,     0,     0,     0,     0,     0,     0,
     350,   351,     0,     0,   421,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,     0,     0,     0,   187,     0,
       0,   187,   187,   433,   187,   187,     0,     0,   187,   348,
     147,     0,   277,   277,     0,     0,     0,     0,    55,   349,
       0,     0,     0,     0,   277,   443,   444,     0,   351,   277,
       0,     0,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   454,     0,   456,   458,   459,   460,     0,     0,
       0,     0,     0,     0,     0,     0,    55,     0,     0,   188,
       0,     0,   188,   188,     0,   188,   188,    55,    55,   188,
       0,    55,     0,     0,     0,     0,     0,     0,     0,   478,
     479,     0,     0,     0,     0,    55,     0,     0,     0,    55,
       0,     0,     0,     0,     0,     0,     0,   186,   186,     0,
     189,     0,     0,   189,   189,   190,   189,   189,   190,   190,
     189,   190,   190,     0,     0,   190,    55,     0,     0,    55,
     268,     0,     0,     0,    72,     0,     0,   515,     0,     0,
     518,     0,     0,     0,   187,   187,     0,     0,    55,     0,
       0,    55,     0,     0,     0,   518,     0,     0,     0,     0,
       0,     0,     0,     0,    73,    74,     0,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,     0,     0,
     539,     0,    86,    87,    88,    89,     0,     0,     0,    90,
      91,     0,   543,    92,     0,    93,    25,    94,    95,     0,
       0,     0,     0,     0,   269,   188,   188,    96,    97,    98,
       0,   549,     0,     0,     0,   550,     0,   551,   270,     0,
      99,   100,   101,   191,     0,     0,     0,    72,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   573,     0,
       0,     0,     0,     0,     0,   581,   189,   189,     0,     0,
       0,   190,   190,     0,     0,     0,     0,    73,    74,     0,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,     0,     0,   601,   602,    86,    87,    88,    89,     0,
       0,     0,    90,    91,   192,   193,    92,     0,    93,    25,
      94,    95,    59,   348,     0,     0,    72,     0,   194,     0,
      96,    97,    98,   349,     0,     0,     0,     0,   612,     0,
       0,   195,   351,    99,   100,   101,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,    73,    74,     0,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
       0,   573,     0,     0,    86,    87,    88,    89,     0,     0,
       0,    90,    91,     0,     0,    92,     0,    93,    25,    94,
      95,   128,     0,     0,     0,    72,     0,  -321,     0,    96,
      97,    98,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    68,    99,   100,   101,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    73,    74,     0,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,     0,
       0,     0,     0,    86,    87,    88,    89,     0,     0,     0,
      90,    91,     0,     0,    92,     0,    93,    25,    94,    95,
     132,     0,     0,     0,    72,     0,  -239,     0,    96,    97,
      98,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    99,   100,   101,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    73,    74,     0,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,     0,     0,
       0,     0,    86,    87,    88,    89,     0,     0,     0,    90,
      91,     0,     0,    92,     0,    93,    25,    94,    95,   134,
       0,     0,     0,    72,     0,  -239,     0,    96,    97,    98,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      99,   100,   101,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    73,    74,     0,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,     0,     0,     0,
       0,    86,    87,    88,    89,     0,     0,     0,    90,    91,
       0,     0,    92,     0,    93,    25,    94,    95,   137,     0,
       0,     0,    72,     0,   135,     0,    96,    97,    98,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    73,    74,     0,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,     0,     0,     0,     0,
      86,    87,    88,    89,     0,     0,     0,    90,    91,     0,
       0,    92,     0,    93,    25,    94,    95,   139,     0,     0,
       0,    72,     0,  -239,     0,    96,    97,    98,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    99,   100,
     101,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    73,    74,     0,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,     0,     0,     0,     0,    86,
      87,    88,    89,     0,     0,     0,    90,    91,     0,     0,
      92,     0,    93,    25,    94,    95,   474,     0,     0,     0,
      72,     0,   140,     0,    96,    97,    98,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    99,   100,   101,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      73,    74,     0,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,     0,     0,     0,     0,    86,    87,
      88,    89,     0,     0,     0,    90,    91,     0,     0,    92,
       0,    93,    25,    94,    95,   264,     0,     0,     0,    72,
       0,  -321,     0,    96,    97,    98,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    99,   100,   101,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    73,
      74,     0,    75,    76,    77,     0,    79,    80,    81,    82,
       0,    84,     0,     0,     0,     0,     0,    86,    87,    88,
      89,     0,     0,     0,    90,    91,     0,     0,    92,     0,
      93,    25,    94,    95,   272,     0,     0,     0,    72,     0,
       0,     0,    96,    97,    98,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    99,   100,   101,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    73,    74,
       0,    75,    76,    77,     0,    79,    80,    81,    82,     0,
      84,     0,     0,     0,     0,     0,    86,    87,    88,    89,
       0,     0,     0,    90,    91,     0,     0,    92,     0,    93,
      25,    94,    95,   542,     0,     0,     0,    72,     0,     0,
       0,    96,    97,    98,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    73,    74,     0,
      75,    76,    77,     0,    79,    80,    81,    82,     0,    84,
       0,     0,     0,     0,     0,    86,    87,    88,    89,     0,
       0,     0,    90,    91,     0,     0,    92,     0,    93,    25,
      94,    95,     0,     0,   225,     0,     0,   145,     0,     0,
      96,    97,    98,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    99,   100,   101,   -35,     1,     0,     2,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
       0,     0,     0,    13,     0,    14,    15,    16,    17,     0,
       0,     0,    18,     0,     0,    19,    20,     0,     0,    21,
     146,   147,     0,     0,     0,     0,     0,     0,     0,     0,
     148,   149,     0,     0,     0,    22,    23,    24,   150,     0,
     151,     0,     0,     0,  -333,  -333,  -333,   152,     0,     0,
       0,     0,   153,    25,     0,     0,     0,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
       0,    28,     0,     0,     0,   467,   -90,  -203,  -203,  -203,
    -203,  -203,  -203,  -203,  -203,  -203,  -203,  -203,  -203,  -203,
    -203,  -203,     0,  -203,  -203,     0,  -203,  -203,  -203,  -203,
    -203,  -203,  -203,  -203,  -203,  -203,  -203,  -203,   686,     0,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,  -167,   321,     0,   322,   323,   484,   324,
       0,     0,     0,     0,     0,  -203,   325,   326,   327,   328,
     485,  -203,  -203,  -203,     0,  -203,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -203,     0,     0,     0,    91,     0,
       0,     0,     0,     0,    25,    94,    95,     0,   330,     0,
    -167,  -167,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   482,  -170,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   483,   321,     0,   322,   323,   484,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   485,   557,
       0,     2,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,   -35,   -35,   -35,    13,   -35,    14,    15,    16,
      17,     0,     0,   -35,    18,     0,    91,    19,    20,     0,
       0,    21,    25,    94,    95,     0,   330,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -170,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    25,     0,     0,     0,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,    28,     0,     0,     0,   575,   -90,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   321,     0,   322,   323,   484,   324,     0,
       0,     0,     0,     0,     0,   325,   326,   327,   328,   485,
     586,     0,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,     0,   321,     0,   322,   323,
     484,   324,     0,     0,     0,     0,     0,    91,   325,   326,
     327,   328,   485,    25,    94,    95,     0,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -170,     0,     0,     0,
      91,     0,     0,     0,     0,     0,    25,    94,    95,     0,
     330,     0,   628,     0,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   321,  -170,
     322,   323,   484,   324,     0,     0,     0,     0,     0,     0,
     325,   326,   327,   328,   485,   218,     0,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,   -35,   -35,
     -35,    13,     0,    14,    15,    16,    17,     0,     0,     0,
      18,     0,    91,    19,    20,     0,     0,    21,    25,    94,
      95,     0,   330,     0,   298,     0,     2,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,   -35,   -35,   -35,
      13,  -170,    14,    15,    16,    17,     0,     0,     0,    18,
       0,    25,    19,    20,     0,    26,    21,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,    28,
       0,     0,     0,     0,   -90,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      25,     0,     0,     0,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    27,     0,     0,    28,     0,
       0,     0,   300,   -90,     2,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,   -35,   -35,   -35,    13,     0,
      14,    15,    16,    17,     0,     0,     0,    18,     0,     0,
      19,    20,     0,   302,    21,     2,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,   -35,   -35,   -35,    13,
       0,    14,    15,    16,    17,     0,     0,     0,    18,     0,
       0,    19,    20,     0,     0,    21,     0,     0,    25,     0,
       0,     0,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,    28,     0,     0,     0,
       0,   -90,     0,     0,     0,     0,     0,     0,     0,    25,
       0,     0,     0,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,    28,     0,     0,
       0,    59,   -90,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,     0,   321,     0,   322,
     323,     0,   324,     0,     0,     0,     0,     0,     0,   325,
     326,   327,   328,   329,   342,     0,     2,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,     0,     0,   -35,
      13,     0,    14,    15,    16,    17,     0,     0,     0,    18,
       0,    91,    19,    20,   -35,   -35,    21,    25,    94,    95,
       0,   330,     0,   546,     0,     2,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,   -35,   -35,   -35,    13,
      68,    14,    15,    16,    17,     0,     0,     0,    18,     0,
      25,    19,    20,     0,    26,    21,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    27,     0,     0,    28,     0,
       0,     0,     0,   -90,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    25,
       0,     0,     0,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,    28,     0,     0,
       0,   555,   -90,     2,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,   -35,   -35,   -35,    13,     0,    14,
      15,    16,    17,     0,     0,     0,    18,     0,     0,    19,
      20,     0,   598,    21,     2,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,     0,     0,   -35,    13,     0,
      14,    15,    16,    17,     0,     0,     0,    18,     0,     0,
      19,    20,     0,     0,    21,     0,     0,    25,     0,     0,
       0,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,    28,     0,     0,     0,     0,
     -90,     0,     0,     0,     0,     0,     0,     0,    25,     0,
       0,     0,    26,     0,   -35,   -35,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,    28,     0,     0,     0,
     605,   -90,     2,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,     0,     0,   -35,    13,   -35,    14,    15,
      16,    17,     0,     0,   -35,    18,     0,     0,    19,    20,
       0,   665,    21,     2,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,     0,     0,   -35,    13,     0,    14,
      15,    16,    17,     0,     0,     0,    18,     0,     0,    19,
      20,   -35,   -35,    21,     0,     0,    25,     0,     0,     0,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,    28,     0,     0,     0,     0,   -90,
       0,     0,     0,     0,     0,     0,     0,    25,     0,     0,
       0,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,    28,     0,     0,     0,   691,
     -90,     2,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,     0,     0,   -35,    13,     0,    14,    15,    16,
      17,     0,     0,     0,    18,     0,     0,    19,    20,   -35,
     -35,    21,   497,     0,     2,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,     0,     0,   -35,    13,     0,
      14,    15,    16,    17,     0,     0,     0,    18,     0,     0,
      19,    20,     0,     0,    21,    25,     0,     0,     0,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,    28,     0,     0,     0,     0,   -90,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    25,     0,
       0,     0,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,    28,     0,     0,     0,
     553,   -90,     2,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,     0,     0,   -35,    13,     0,    14,    15,
      16,    17,     0,     0,     0,    18,     0,     0,    19,    20,
       0,   592,    21,     2,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,     0,     0,   -35,    13,     0,    14,
      15,    16,    17,     0,     0,     0,    18,     0,     0,    19,
      20,     0,     0,    21,     0,     0,    25,     0,     0,     0,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,    28,     0,     0,     0,     0,   -90,
       0,     0,     0,     0,     0,     0,     0,    25,     0,     0,
       0,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,    28,     0,     0,     0,   636,
     -90,     2,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,     0,     0,   -35,    13,     0,    14,    15,    16,
      17,     0,     0,     0,    18,     0,     0,    19,    20,     0,
      58,    21,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,     0,  -189,  -189,  -189,     0,  -189,  -189,     0,
       0,  -189,     0,     0,  -189,  -189,     0,     0,  -189,     0,
       0,     0,     0,     0,     0,    25,     0,     0,     0,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,    28,     0,     0,     0,     0,   -90,     0,
       0,     0,     0,     0,     0,     0,  -189,     0,     0,     0,
    -189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -189,     0,     0,  -189,     0,     0,     0,    59,  -189,
       2,     3,     4,    60,    61,    62,    63,    64,    65,    66,
       0,   -90,   -90,   -90,   345,     0,    14,   145,     0,    17,
       0,     0,     0,    18,     0,    59,    67,     2,     3,     4,
      60,    61,    62,    63,    64,    65,    66,     0,     0,     0,
       0,     0,     0,    14,     0,     0,    17,     0,     0,     0,
      18,     0,     0,    67,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    25,     0,     0,     0,    26,     0,
     146,   147,     0,     0,     0,     0,     0,     0,     0,    27,
     148,   149,    28,     0,     0,    72,     0,    68,   150,  -333,
     151,    25,     0,     0,  -333,    26,  -333,   152,     0,     0,
       0,     0,   153,     0,     0,     0,    27,     0,     0,    28,
       0,     0,     0,     0,    68,    73,    74,   294,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,     0,
       0,     0,   295,    86,    87,    88,    89,     0,     0,     0,
      90,    91,     0,     0,    92,   296,    93,    25,    94,    95,
      72,     0,     0,     0,     0,     0,     0,     0,    96,    97,
      98,     0,     0,     0,     0,     0,     0,     0,     0,   297,
       0,    99,   100,   101,     0,     0,     0,     0,     0,     0,
      73,    74,   294,    75,    76,    77,     0,    79,    80,    81,
      82,     0,    84,     0,     0,     0,     0,   295,    86,    87,
      88,    89,     0,     0,     0,    90,    91,     0,     0,    92,
     296,    93,    25,    94,    95,    72,     0,     0,     0,     0,
       0,   626,     0,    96,    97,    98,     0,     0,     0,     0,
       0,     0,     0,     0,   297,     0,    99,   100,   101,     0,
       0,     0,     0,     0,     0,    73,    74,     0,    75,    76,
      77,   289,    79,    80,    81,    82,   290,    84,   291,     0,
       0,     0,     0,    86,    87,    88,    89,     0,     0,     0,
      90,    91,   292,     0,    92,    72,    93,    25,    94,    95,
       0,     0,     0,     0,     0,     0,     0,     0,    96,    97,
      98,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    99,   100,   101,     0,    73,    74,   294,    75,    76,
      77,     0,    79,    80,    81,    82,     0,    84,     0,     0,
       0,     0,   295,    86,    87,    88,    89,     0,     0,     0,
      90,    91,     0,     0,    92,   296,    93,    25,    94,    95,
      72,     0,     0,     0,     0,     0,     0,     0,    96,    97,
      98,     0,     0,     0,     0,     0,     0,     0,     0,   297,
       0,    99,   100,   101,     0,     0,     0,     0,     0,     0,
      73,    74,     0,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,     0,     0,     0,     0,    86,    87,
      88,    89,     0,     0,     0,    90,    91,     0,     0,    92,
      72,    93,    25,    94,    95,     0,     0,     0,     0,     0,
       0,   594,     0,    96,    97,    98,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    99,   100,   101,     0,
      73,    74,     0,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,     0,     0,     0,     0,    86,    87,
      88,    89,     0,     0,     0,    90,    91,     0,     0,    92,
      72,    93,    25,    94,    95,     0,     0,     0,     0,     0,
       0,     0,     0,    96,    97,    98,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    99,   100,   101,     0,
      73,    74,     0,    75,    76,    77,   158,    79,    80,    81,
      82,     0,    84,     0,     0,     0,     0,     0,    86,    87,
      88,    89,     0,     0,     0,    90,    91,     0,     0,    92,
     159,    93,    25,    94,    95,    72,     0,     0,     0,     0,
       0,     0,     0,    96,    97,    98,     0,     0,     0,     0,
       0,     0,     0,     0,   160,     0,    99,   100,   101,     0,
       0,     0,     0,     0,     0,    73,    74,     0,    75,    76,
      77,     0,    79,    80,    81,    82,     0,    84,     0,     0,
       0,     0,     0,    86,    87,    88,    89,     0,     0,     0,
      90,    91,     0,     0,    92,   275,    93,    25,    94,    95,
     163,     0,     0,     0,     0,     0,     0,     0,    96,    97,
      98,     0,     0,     0,     0,     0,     0,     0,     0,   276,
       0,    99,   100,   101,     0,     0,     0,     0,     0,     0,
      73,    74,     0,    75,    76,    77,   164,    79,    80,    81,
     165,     0,   166,     0,     0,     0,     0,     0,   167,   168,
     169,   170,     0,     0,     0,   171,    91,     0,     0,    72,
     172,     0,    25,    94,    95,     0,     0,     0,     0,     0,
       0,     0,     0,   173,   174,   175,     0,     0,     0,     0,
       0,     0,     0,     0,   176,     0,    99,   100,   101,    73,
      74,     0,    75,    76,    77,     0,    79,    80,    81,    82,
       0,    84,     0,     0,     0,     0,     0,    86,    87,    88,
      89,     0,     0,     0,    90,    91,     0,     0,    92,    72,
      93,    25,    94,    95,     0,   432,     0,     0,     0,     0,
       0,     0,    96,    97,    98,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    99,   100,   101,     0,    73,
      74,     0,    75,    76,    77,     0,    79,    80,    81,    82,
       0,    84,     0,     0,     0,     0,     0,    86,    87,    88,
      89,     0,     0,     0,    90,    91,     0,     0,    92,    72,
      93,    25,    94,    95,     0,     0,     0,     0,     0,     0,
       0,     0,    96,    97,    98,     0,     0,     0,     0,     0,
       0,     0,     0,   455,     0,    99,   100,   101,     0,    73,
      74,     0,    75,    76,    77,     0,    79,    80,    81,    82,
       0,    84,     0,     0,     0,     0,     0,    86,    87,    88,
      89,     0,     0,     0,    90,    91,     0,     0,    92,    72,
      93,    25,    94,    95,     0,     0,     0,     0,     0,     0,
       0,     0,    96,    97,    98,     0,     0,     0,     0,     0,
       0,     0,     0,   457,     0,    99,   100,   101,     0,    73,
      74,     0,    75,    76,    77,   516,    79,    80,    81,    82,
       0,    84,     0,     0,     0,     0,     0,    86,    87,    88,
      89,     0,     0,     0,    90,    91,     0,     0,    92,    72,
      93,    25,    94,    95,     0,     0,     0,     0,     0,     0,
       0,     0,    96,    97,    98,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    99,   100,   101,     0,    73,
      74,     0,    75,    76,    77,     0,    79,    80,    81,    82,
       0,    84,     0,     0,     0,     0,     0,    86,    87,    88,
      89,     0,     0,     0,    90,    91,     0,     0,    92,    72,
      93,    25,    94,    95,     0,     0,     0,     0,     0,     0,
     580,     0,    96,    97,    98,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    99,   100,   101,     0,    73,
      74,     0,    75,    76,    77,     0,    79,    80,    81,    82,
       0,    84,     0,     0,     0,     0,     0,    86,    87,    88,
      89,     0,     0,     0,    90,    91,     0,     0,    92,   163,
      93,    25,    94,    95,     0,     0,     0,     0,     0,     0,
       0,     0,    96,    97,    98,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    99,   100,   101,     0,    73,
      74,     0,    75,    76,    77,     0,    79,    80,    81,   165,
       0,   166,     0,     0,     0,     0,     0,   167,   168,   169,
     170,     0,     0,     0,   171,    91,     0,     0,   163,     0,
       0,    25,    94,    95,     0,     0,     0,     0,     0,     0,
       0,     0,   173,   174,   175,     0,     0,     0,     0,     0,
       0,     0,     0,   390,     0,    99,   100,   101,    73,    74,
       0,    75,    76,    77,     0,    79,    80,    81,   165,     0,
     166,     0,     0,     0,     0,     0,   167,   168,   169,   170,
       0,     0,     0,   171,    91,     0,     0,     0,     0,     0,
      25,    94,    95,     0,     0,     0,     0,     0,     0,     0,
       0,   173,   174,   175,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    99,   100,   101,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,   321,     0,   322,   323,   484,   324,     0,     0,     0,
       0,     0,     0,   325,   326,   327,   328,   485,     0,     0,
       2,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,     0,     0,     0,    13,     0,    14,    15,    16,    17,
       0,     0,     0,    18,     0,    91,    19,    20,     0,     0,
      21,    25,    94,    95,     0,   330,     2,     3,     4,    60,
      61,    62,    63,    64,    65,    66,     0,     0,     0,     0,
       0,     0,    14,     0,  -170,    17,     0,     0,     0,    18,
       0,     0,    67,     0,    25,     0,     0,     0,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,    28,     0,     0,     0,     0,   -90,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      25,     0,     0,     0,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    27,     0,     0,    28,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   321,     0,   322,   323,     0,   324,     0,
       0,     0,     0,     0,     0,   325,   326,   327,   328,   329,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    91,     0,     0,
       0,     0,     0,    25,    94,    95,     0,   330
};

#define yypact_value_is_default(yystate) \
  ((yystate) == (-637))

#define yytable_value_is_error(yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       7,     8,     9,    15,    49,   336,    85,    19,     5,   149,
       7,     8,     9,    20,   123,    24,   125,   197,   127,    83,
     101,   496,    21,    24,   660,     1,    25,   135,     1,    27,
      65,     4,    82,    83,     1,     4,     1,   324,     5,     0,
      65,     1,     1,     1,     4,     1,    90,     1,     4,    53,
     100,     3,     4,     1,    89,    67,     4,     5,    90,     1,
      81,    82,    83,    60,    89,    62,    63,    64,    72,     1,
       5,    24,     1,     1,    26,     0,    74,    59,    82,    90,
       4,    54,    76,    24,   559,    54,    59,   166,   724,   725,
      59,   727,    81,     4,    83,    94,    69,    79,    89,    59,
      69,   165,    67,    59,    71,    52,    76,     4,    67,    67,
      76,    59,   748,    67,    90,   165,    24,    59,    65,   755,
      93,   757,   758,   759,    93,    94,   135,    59,   135,    75,
      82,   606,    92,   140,    94,    59,    92,    24,    67,    67,
     666,     5,    89,    14,    15,    16,    76,    79,    59,   480,
     148,    10,    11,    12,   152,    14,   487,    54,    17,    37,
      76,    24,    59,   172,   495,   174,   692,   176,    59,    24,
     570,   172,    69,   174,    52,   176,   255,   258,    14,    15,
      16,   142,    76,    42,   248,   249,    37,    65,   197,     7,
       8,     9,   479,    76,     4,    76,   195,   484,   248,   249,
      76,    52,    61,   262,   263,    52,    65,    66,    81,    82,
      83,    89,   291,    92,    65,   274,    76,   214,   215,   172,
     279,   174,   362,   176,   332,    76,   290,    76,   408,   337,
     338,   172,    76,   174,    37,   176,   386,   387,    89,   389,
     290,    93,    94,   393,    62,    63,    64,    57,    58,    52,
     650,   651,    76,   653,   585,    76,   543,    67,    68,   304,
      76,    16,    65,    18,   172,    75,    93,    77,   176,    89,
      25,   270,    77,    76,    84,    85,    86,    87,    88,    89,
      75,   288,    90,    76,    76,   172,    89,   174,    81,   176,
      83,   288,    72,    16,   339,    18,   341,   304,   305,   306,
      59,   701,    25,   703,   704,    16,    75,    18,   305,   172,
     307,   174,    16,   176,    25,   677,   678,   172,   680,   174,
      76,   176,    76,   332,    16,   324,    18,   336,   337,   338,
      76,   338,    76,    25,   341,    31,    32,   344,    14,    15,
     449,    76,     0,   645,   646,    76,    76,     5,    76,     7,
       8,     9,   639,    16,    76,   464,    90,   436,    90,   721,
     722,   723,    16,    16,    16,   410,    83,   412,    16,   367,
     368,   369,    30,    72,   383,   373,    16,   386,   387,   340,
     389,   390,   383,    72,   393,   386,   387,    72,   389,   390,
      76,    49,   393,     1,    16,    16,   214,   215,    76,    74,
     407,    72,    60,    76,    62,    63,    64,    76,   415,   416,
     417,    16,   409,    71,   411,    76,    73,    75,    76,    77,
      76,    16,    80,    81,    16,   712,    76,   536,   537,    76,
     383,    16,    76,   386,   387,    76,   389,   390,    76,    74,
     393,    99,   383,    16,    16,   386,   387,    73,   389,   390,
      16,    76,   393,    76,    16,    16,    76,   316,   317,   318,
      76,   395,   321,   322,   323,   123,   325,   125,   327,   127,
     288,   480,    30,   734,   766,   383,   483,   484,   487,    47,
     479,   508,   390,   246,   142,   484,   495,   305,   156,   501,
     740,   741,   362,   743,    -1,   502,   383,   238,    -1,   386,
     387,   462,   389,   390,   465,    -1,   393,    -1,    -1,     4,
     519,   520,    -1,   763,   764,   765,    -1,    -1,   519,   520,
     383,    -1,    24,   386,   387,    -1,   389,   390,   383,    -1,
     393,   386,   387,    -1,   389,   390,     5,    -1,   393,   500,
      -1,    -1,    -1,   504,   543,    23,    24,    25,    26,    27,
      28,    -1,    -1,    -1,    -1,    -1,   214,   215,    -1,    24,
      -1,   570,    57,    58,    -1,    -1,   519,   520,    -1,    -1,
      -1,   532,    67,    68,    -1,   582,   585,    -1,   519,   520,
      75,    -1,    77,   590,    53,    -1,    -1,   594,    -1,    84,
     597,   409,    61,   411,    89,    -1,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    -1,    -1,   613,   614,   615,    -1,
     617,   519,   520,    82,    -1,    -1,   623,   624,   663,   626,
      24,    -1,    -1,   630,    -1,    -1,   633,    -1,   635,    -1,
     288,    -1,   519,   520,   641,   596,    -1,    -1,    -1,    -1,
     639,   650,   651,    -1,   653,    -1,   304,   305,    -1,   307,
     659,   660,   649,    -1,   661,    -1,   519,   520,    -1,    -1,
      -1,    24,   669,    -1,   519,   520,    24,    -1,   675,    -1,
     172,    -1,   174,   634,   176,    23,    24,    25,    26,    27,
      28,   339,   340,   341,   645,   646,   693,    -1,   695,   696,
      -1,    -1,   701,    23,   703,   704,    -1,    -1,   705,   706,
      -1,   708,    -1,    -1,   563,    -1,   667,   172,    -1,   174,
      -1,   176,    -1,   712,   573,   724,   725,    -1,   727,    -1,
      -1,    -1,    -1,   730,    -1,   732,    -1,    -1,    -1,   736,
     589,    -1,    -1,   694,    -1,   742,   697,   744,   745,   748,
     747,    -1,   749,    -1,   751,    -1,   755,    -1,   757,   758,
     759,   409,   410,   411,   412,   716,    -1,    -1,   719,   618,
      -1,    91,    92,    93,    -1,    95,    -1,    97,   172,    -1,
     174,    -1,   176,    -1,    -1,    -1,    -1,    -1,     1,    -1,
      -1,     4,    -1,   642,    -1,   115,    -1,    -1,    -1,    -1,
      -1,   449,    -1,   652,    -1,   654,   655,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   462,    -1,   464,   465,    -1,   172,
      -1,   174,    -1,   176,   172,    -1,   174,    -1,   176,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,   159,
     160,    -1,    -1,    -1,    57,    58,    -1,    -1,    -1,    -1,
      -1,    -1,   500,    -1,    67,    68,   504,    -1,   707,    -1,
     709,   710,    75,    -1,    77,    -1,    -1,    -1,    81,    82,
      83,    84,   192,   193,    -1,    -1,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   532,    -1,    -1,    -1,   536,   537,
      -1,   383,    57,    58,   386,   387,    -1,   389,   390,    -1,
      -1,   393,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,   234,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    -1,    -1,   383,    -1,
      -1,   386,   387,   253,   389,   390,    -1,    -1,   393,    57,
      58,    -1,   262,   263,    -1,    -1,    -1,    -1,   596,    67,
      -1,    -1,    -1,    -1,   274,   275,   276,    -1,    76,   279,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,   292,    -1,   294,   295,   296,   297,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   634,    -1,    -1,   383,
      -1,    -1,   386,   387,    -1,   389,   390,   645,   646,   393,
      -1,   649,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   329,
     330,    -1,    -1,    -1,    -1,   663,    -1,    -1,    -1,   667,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,
     383,    -1,    -1,   386,   387,   383,   389,   390,   386,   387,
     393,   389,   390,    -1,    -1,   393,   694,    -1,    -1,   697,
       1,    -1,    -1,    -1,     5,    -1,    -1,   377,    -1,    -1,
     380,    -1,    -1,    -1,   519,   520,    -1,    -1,   716,    -1,
      -1,   719,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    36,    -1,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    -1,    -1,
     420,    -1,    53,    54,    55,    56,    -1,    -1,    -1,    60,
      61,    -1,   432,    64,    -1,    66,    67,    68,    69,    -1,
      -1,    -1,    -1,    -1,    75,   519,   520,    78,    79,    80,
      -1,   451,    -1,    -1,    -1,   455,    -1,   457,    89,    -1,
      91,    92,    93,     1,    -1,    -1,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,
      -1,    -1,    -1,    -1,    -1,   485,   519,   520,    -1,    -1,
      -1,   519,   520,    -1,    -1,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    -1,    -1,   513,   514,    53,    54,    55,    56,    -1,
      -1,    -1,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,     1,    57,    -1,    -1,     5,    -1,    76,    -1,
      78,    79,    80,    67,    -1,    -1,    -1,    -1,   548,    -1,
      -1,    89,    76,    91,    92,    93,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    35,    36,    -1,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      -1,   581,    -1,    -1,    53,    54,    55,    56,    -1,    -1,
      -1,    60,    61,    -1,    -1,    64,    -1,    66,    67,    68,
      69,     1,    -1,    -1,    -1,     5,    -1,    76,    -1,    78,
      79,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    90,    91,    92,    93,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    35,    36,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    -1,
      -1,    -1,    -1,    53,    54,    55,    56,    -1,    -1,    -1,
      60,    61,    -1,    -1,    64,    -1,    66,    67,    68,    69,
       1,    -1,    -1,    -1,     5,    -1,    76,    -1,    78,    79,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    91,    92,    93,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    36,    -1,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    -1,    -1,
      -1,    -1,    53,    54,    55,    56,    -1,    -1,    -1,    60,
      61,    -1,    -1,    64,    -1,    66,    67,    68,    69,     1,
      -1,    -1,    -1,     5,    -1,    76,    -1,    78,    79,    80,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      91,    92,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    35,    36,    -1,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    -1,    -1,    -1,
      -1,    53,    54,    55,    56,    -1,    -1,    -1,    60,    61,
      -1,    -1,    64,    -1,    66,    67,    68,    69,     1,    -1,
      -1,    -1,     5,    -1,    76,    -1,    78,    79,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
      92,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    35,    36,    -1,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    -1,    -1,    -1,    -1,
      53,    54,    55,    56,    -1,    -1,    -1,    60,    61,    -1,
      -1,    64,    -1,    66,    67,    68,    69,     1,    -1,    -1,
      -1,     5,    -1,    76,    -1,    78,    79,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,
      93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    35,    36,    -1,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    -1,    -1,    -1,    -1,    53,
      54,    55,    56,    -1,    -1,    -1,    60,    61,    -1,    -1,
      64,    -1,    66,    67,    68,    69,     1,    -1,    -1,    -1,
       5,    -1,    76,    -1,    78,    79,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    93,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      35,    36,    -1,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    -1,    -1,    -1,    -1,    53,    54,
      55,    56,    -1,    -1,    -1,    60,    61,    -1,    -1,    64,
      -1,    66,    67,    68,    69,     1,    -1,    -1,    -1,     5,
      -1,    76,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    93,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,
      36,    -1,    38,    39,    40,    -1,    42,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    55,
      56,    -1,    -1,    -1,    60,    61,    -1,    -1,    64,    -1,
      66,    67,    68,    69,     1,    -1,    -1,    -1,     5,    -1,
      -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    91,    92,    93,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    36,
      -1,    38,    39,    40,    -1,    42,    43,    44,    45,    -1,
      47,    -1,    -1,    -1,    -1,    -1,    53,    54,    55,    56,
      -1,    -1,    -1,    60,    61,    -1,    -1,    64,    -1,    66,
      67,    68,    69,     1,    -1,    -1,    -1,     5,    -1,    -1,
      -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    91,    92,    93,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    -1,    42,    43,    44,    45,    -1,    47,
      -1,    -1,    -1,    -1,    -1,    53,    54,    55,    56,    -1,
      -1,    -1,    60,    61,    -1,    -1,    64,    -1,    66,    67,
      68,    69,    -1,    -1,     1,    -1,    -1,     4,    -1,    -1,
      78,    79,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    91,    92,    93,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      -1,    -1,    -1,    17,    -1,    19,    20,    21,    22,    -1,
      -1,    -1,    26,    -1,    -1,    29,    30,    -1,    -1,    33,
      57,    58,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    49,    50,    51,    75,    -1,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    -1,    -1,
      -1,    -1,    89,    67,    -1,    -1,    -1,    71,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,
      -1,    85,    -1,    -1,    -1,     1,    90,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    -1,    19,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    -1,    19,    20,    21,    22,
      -1,    -1,    -1,    -1,    -1,    61,    29,    30,    31,    32,
      33,    67,    68,    69,    -1,    71,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    90,    -1,    -1,    -1,    61,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    71,    -1,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    90,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    -1,    19,    20,    21,    22,    -1,    -1,
      -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    -1,    -1,    25,    26,    -1,    61,    29,    30,    -1,
      -1,    33,    67,    68,    69,    -1,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    85,    -1,    -1,    -1,     1,    90,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    -1,    17,    -1,    19,    20,    21,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    -1,    17,    -1,    19,    20,
      21,    22,    -1,    -1,    -1,    -1,    -1,    61,    29,    30,
      31,    32,    33,    67,    68,    69,    -1,    71,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    90,    -1,    -1,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      71,    -1,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    -1,    17,    90,
      19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
      29,    30,    31,    32,    33,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    -1,    19,    20,    21,    22,    -1,    -1,    -1,
      26,    -1,    61,    29,    30,    -1,    -1,    33,    67,    68,
      69,    -1,    71,    -1,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    90,    19,    20,    21,    22,    -1,    -1,    -1,    26,
      -1,    67,    29,    30,    -1,    71,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    85,
      -1,    -1,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    85,    -1,
      -1,    -1,     1,    90,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    -1,
      19,    20,    21,    22,    -1,    -1,    -1,    26,    -1,    -1,
      29,    30,    -1,     1,    33,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      -1,    19,    20,    21,    22,    -1,    -1,    -1,    26,    -1,
      -1,    29,    30,    -1,    -1,    33,    -1,    -1,    67,    -1,
      -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    -1,    85,    -1,    -1,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    85,    -1,    -1,
      -1,     1,    90,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    -1,    17,    -1,    19,
      20,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      30,    31,    32,    33,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    -1,    -1,    16,
      17,    -1,    19,    20,    21,    22,    -1,    -1,    -1,    26,
      -1,    61,    29,    30,    31,    32,    33,    67,    68,    69,
      -1,    71,    -1,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      90,    19,    20,    21,    22,    -1,    -1,    -1,    26,    -1,
      67,    29,    30,    -1,    71,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    85,    -1,
      -1,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    85,    -1,    -1,
      -1,     1,    90,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    -1,    19,
      20,    21,    22,    -1,    -1,    -1,    26,    -1,    -1,    29,
      30,    -1,     1,    33,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    -1,    -1,    16,    17,    -1,
      19,    20,    21,    22,    -1,    -1,    -1,    26,    -1,    -1,
      29,    30,    -1,    -1,    33,    -1,    -1,    67,    -1,    -1,
      -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    85,    -1,    -1,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    71,    -1,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    -1,    85,    -1,    -1,    -1,
       1,    90,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    -1,    -1,    16,    17,    18,    19,    20,
      21,    22,    -1,    -1,    25,    26,    -1,    -1,    29,    30,
      -1,     1,    33,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    -1,    -1,    16,    17,    -1,    19,
      20,    21,    22,    -1,    -1,    -1,    26,    -1,    -1,    29,
      30,    31,    32,    33,    -1,    -1,    67,    -1,    -1,    -1,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    -1,    85,    -1,    -1,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
      -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    85,    -1,    -1,    -1,     1,
      90,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    -1,    -1,    16,    17,    -1,    19,    20,    21,
      22,    -1,    -1,    -1,    26,    -1,    -1,    29,    30,    31,
      32,    33,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    -1,    -1,    16,    17,    -1,
      19,    20,    21,    22,    -1,    -1,    -1,    26,    -1,    -1,
      29,    30,    -1,    -1,    33,    67,    -1,    -1,    -1,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    85,    -1,    -1,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    -1,    85,    -1,    -1,    -1,
       1,    90,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    -1,    -1,    16,    17,    -1,    19,    20,
      21,    22,    -1,    -1,    -1,    26,    -1,    -1,    29,    30,
      -1,     1,    33,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    -1,    -1,    16,    17,    -1,    19,
      20,    21,    22,    -1,    -1,    -1,    26,    -1,    -1,    29,
      30,    -1,    -1,    33,    -1,    -1,    67,    -1,    -1,    -1,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    -1,    85,    -1,    -1,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
      -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    85,    -1,    -1,    -1,     1,
      90,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    -1,    -1,    16,    17,    -1,    19,    20,    21,
      22,    -1,    -1,    -1,    26,    -1,    -1,    29,    30,    -1,
       1,    33,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    -1,    14,    15,    16,    -1,    18,    19,    -1,
      -1,    22,    -1,    -1,    25,    26,    -1,    -1,    29,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    85,    -1,    -1,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    -1,    85,    -1,    -1,    -1,     1,    90,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      -1,    14,    15,    16,     1,    -1,    19,     4,    -1,    22,
      -1,    -1,    -1,    26,    -1,     1,    29,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    -1,    -1,
      26,    -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    71,    -1,
      57,    58,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      67,    68,    85,    -1,    -1,     5,    -1,    90,    75,    76,
      77,    67,    -1,    -1,    81,    71,    83,    84,    -1,    -1,
      -1,    -1,    89,    -1,    -1,    -1,    82,    -1,    -1,    85,
      -1,    -1,    -1,    -1,    90,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    -1,    -1,    -1,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    69,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    92,    93,    -1,    -1,    -1,    -1,    -1,    -1,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      45,    -1,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    -1,    -1,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    69,     5,    -1,    -1,    -1,    -1,
      -1,    76,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    92,    93,    -1,
      -1,    -1,    -1,    -1,    -1,    35,    36,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    -1,
      -1,    -1,    -1,    53,    54,    55,    56,    -1,    -1,    -1,
      60,    61,    62,    -1,    64,     5,    66,    67,    68,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    91,    92,    93,    -1,    35,    36,    37,    38,    39,
      40,    -1,    42,    43,    44,    45,    -1,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    -1,    -1,    -1,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    69,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    92,    93,    -1,    -1,    -1,    -1,    -1,    -1,
      35,    36,    -1,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    -1,    -1,    -1,    -1,    53,    54,
      55,    56,    -1,    -1,    -1,    60,    61,    -1,    -1,    64,
       5,    66,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    93,    -1,
      35,    36,    -1,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    -1,    -1,    -1,    -1,    53,    54,
      55,    56,    -1,    -1,    -1,    60,    61,    -1,    -1,    64,
       5,    66,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    93,    -1,
      35,    36,    -1,    38,    39,    40,    41,    42,    43,    44,
      45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,
      55,    56,    -1,    -1,    -1,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    69,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    92,    93,    -1,
      -1,    -1,    -1,    -1,    -1,    35,    36,    -1,    38,    39,
      40,    -1,    42,    43,    44,    45,    -1,    47,    -1,    -1,
      -1,    -1,    -1,    53,    54,    55,    56,    -1,    -1,    -1,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    69,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    92,    93,    -1,    -1,    -1,    -1,    -1,    -1,
      35,    36,    -1,    38,    39,    40,    41,    42,    43,    44,
      45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,
      55,    56,    -1,    -1,    -1,    60,    61,    -1,    -1,     5,
      65,    -1,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    92,    93,    35,
      36,    -1,    38,    39,    40,    -1,    42,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    55,
      56,    -1,    -1,    -1,    60,    61,    -1,    -1,    64,     5,
      66,    67,    68,    69,    -1,    71,    -1,    -1,    -1,    -1,
      -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    91,    92,    93,    -1,    35,
      36,    -1,    38,    39,    40,    -1,    42,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    55,
      56,    -1,    -1,    -1,    60,    61,    -1,    -1,    64,     5,
      66,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    92,    93,    -1,    35,
      36,    -1,    38,    39,    40,    -1,    42,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    55,
      56,    -1,    -1,    -1,    60,    61,    -1,    -1,    64,     5,
      66,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    92,    93,    -1,    35,
      36,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    55,
      56,    -1,    -1,    -1,    60,    61,    -1,    -1,    64,     5,
      66,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    91,    92,    93,    -1,    35,
      36,    -1,    38,    39,    40,    -1,    42,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    55,
      56,    -1,    -1,    -1,    60,    61,    -1,    -1,    64,     5,
      66,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    91,    92,    93,    -1,    35,
      36,    -1,    38,    39,    40,    -1,    42,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    55,
      56,    -1,    -1,    -1,    60,    61,    -1,    -1,    64,     5,
      66,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    91,    92,    93,    -1,    35,
      36,    -1,    38,    39,    40,    -1,    42,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    55,
      56,    -1,    -1,    -1,    60,    61,    -1,    -1,     5,    -1,
      -1,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    92,    93,    35,    36,
      -1,    38,    39,    40,    -1,    42,    43,    44,    45,    -1,
      47,    -1,    -1,    -1,    -1,    -1,    53,    54,    55,    56,
      -1,    -1,    -1,    60,    61,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    91,    92,    93,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      -1,    17,    -1,    19,    20,    21,    22,    -1,    -1,    -1,
      -1,    -1,    -1,    29,    30,    31,    32,    33,    -1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    -1,    -1,    -1,    17,    -1,    19,    20,    21,    22,
      -1,    -1,    -1,    26,    -1,    61,    29,    30,    -1,    -1,
      33,    67,    68,    69,    -1,    71,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    -1,    90,    22,    -1,    -1,    -1,    26,
      -1,    -1,    29,    -1,    67,    -1,    -1,    -1,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    -1,    85,    -1,    -1,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    85,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    -1,    17,    -1,    19,    20,    -1,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    71
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,     1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    17,    19,    20,    21,    22,    26,    29,
      30,    33,    49,    50,    51,    67,    71,    82,    85,    96,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   121,   122,   126,   129,   130,   131,   132,   133,   134,
     137,   138,   140,   155,   156,   166,   191,    90,     1,     1,
       6,     7,     8,     9,    10,    11,    12,    29,    90,   130,
     135,   201,     5,    35,    36,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    53,    54,    55,    56,
      60,    61,    64,    66,    68,    69,    78,    79,    80,    91,
      92,    93,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   184,   192,   202,   203,
     204,   211,   135,   201,   135,   201,   135,   201,     1,   171,
     171,   171,     1,   171,     1,    76,   170,     1,   171,     1,
      76,   170,   201,   172,   189,     4,    57,    58,    67,    68,
      75,    77,    84,    89,   193,   194,   195,   200,    41,    65,
      89,    99,   184,     5,    41,    45,    47,    53,    54,    55,
      56,    60,    65,    78,    79,    80,    89,   103,   160,   161,
     162,   163,   164,   165,   169,   178,   192,   202,   203,   204,
     211,     1,    62,    63,    76,    89,   172,     5,     1,   193,
       0,   110,   171,    90,   133,   131,     1,     5,    71,    90,
     171,   171,   171,   170,    14,    15,    16,   136,     1,   109,
     124,     1,     4,     5,    59,     1,   193,     1,   166,     1,
     166,     1,   166,    89,   174,     1,    59,    79,   212,   213,
       1,   166,     1,   166,     1,     4,    59,    92,    94,   207,
     209,   209,    54,    69,    93,    94,   159,   205,   206,   207,
     210,   210,   188,   187,     1,   184,   184,   184,     1,    75,
      89,   172,     1,   184,   186,    65,    89,   184,   190,   185,
       1,   166,     1,    92,   207,     1,    93,   205,    76,    41,
      46,    48,    62,   184,    37,    52,    65,    89,     1,   124,
       1,   124,     1,   124,    76,    76,    76,    76,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    17,    19,    20,    22,    29,    30,    31,    32,    33,
      71,   151,   152,   153,   158,   169,   201,   214,    76,    76,
     201,    76,     1,   109,    76,     1,   193,     1,    57,    67,
      75,    76,    81,    82,    83,    84,    85,    86,    87,    88,
      89,   196,   197,   198,   199,   200,   193,    81,    83,    84,
      85,    86,    87,    88,   194,    65,    89,   100,   184,   184,
      97,    65,    89,   104,   209,   210,   182,   181,   178,   180,
      89,   178,   183,   179,   178,    98,   184,   184,   172,    76,
       5,    53,    72,   157,   169,   191,    82,    76,     5,    76,
      76,    76,    76,   135,   135,    14,    15,    16,   125,    82,
     175,   184,     1,    59,    79,   213,     4,    59,   208,   208,
     209,   209,    71,   184,   210,    93,    94,   205,   190,   190,
     172,    75,   190,   184,   184,   190,    92,    93,   135,   201,
      89,   176,   209,   210,   184,    89,   184,    89,   184,   184,
     184,   131,   201,   135,   201,   201,   130,     1,   171,   171,
     171,   171,   171,   171,     1,   189,   171,   171,   184,   184,
      90,   151,     1,    16,    21,    33,   141,   142,   143,   145,
     149,   150,   151,   151,   151,   201,   131,     1,   109,   131,
     201,    31,    32,   139,   201,    76,    75,   196,    77,   193,
     193,   193,   193,   102,   101,   184,    41,   107,   184,   106,
     105,   178,   183,   183,   183,   178,   183,   107,    76,    76,
      76,    72,   201,    53,    72,   191,   201,   201,   201,   184,
       4,    59,     1,   184,   210,    75,     1,   124,   177,   184,
     184,   184,    16,     1,   109,     1,   124,     1,   109,   119,
      16,    18,    25,   123,    76,    76,    76,    76,    76,    76,
      76,    76,    76,   184,   189,     1,   141,   201,   189,   201,
      76,   184,    16,   141,    90,    90,     1,   141,    16,   123,
      16,    16,     1,   109,    76,   170,   201,    16,     1,   109,
     199,   184,   184,   178,   178,     1,   109,    72,    72,   124,
     124,   189,   184,    16,    14,    15,   120,    16,   123,   171,
     150,   171,    72,    16,    76,     1,    76,   201,     1,   141,
      16,   171,   201,    16,   201,    76,     1,   109,   201,    74,
     127,    16,   123,    72,   201,   201,   201,   201,   171,    76,
      23,    24,    25,    26,    27,    28,   154,    76,   201,   201,
     201,    16,   201,    76,   201,     1,   109,   201,   189,    73,
     128,   201,   171,   119,   119,    76,   130,   150,   150,   171,
     150,   171,   171,    16,   141,   148,     1,   148,   201,   131,
     139,     1,   109,    76,   201,    16,    76,   201,    16,   154,
     154,    76,   154,    76,    76,    23,    24,    25,    26,    27,
      28,   144,    74,   146,    16,   139,   201,   109,   201,   201,
     109,   150,   150,   150,   201,   201,   171,   201,   171,   171,
      16,   189,    73,   147,   109,   109,    16,   154,   154,   154,
     148,   148,    76,   148,    76,    76,   201,    76,   201,    16,
     127,    16,   201,   144,   144,   201,   144,   201,   201,   201,
     148,   201,   201,   148,   148,   148,   148,   144,   144,   144,
     146
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (scnr, parser, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* This macro is provided for backward compatibility. */

#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, scnr)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, scnr, parser); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, scanner_t *scnr, parser_t *parser)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, scnr, parser)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    scanner_t *scnr;
    parser_t *parser;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (scnr);
  YYUSE (parser);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, scanner_t *scnr, parser_t *parser)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, scnr, parser)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    scanner_t *scnr;
    parser_t *parser;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, scnr, parser);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, scanner_t *scnr, parser_t *parser)
#else
static void
yy_reduce_print (yyvsp, yyrule, scnr, parser)
    YYSTYPE *yyvsp;
    int yyrule;
    scanner_t *scnr;
    parser_t *parser;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , scnr, parser);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, scnr, parser); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (0, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  YYSIZE_T yysize1;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = 0;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                yysize1 = yysize + yytnamerr (0, yytname[yyx]);
                if (! (yysize <= yysize1
                       && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                  return 2;
                yysize = yysize1;
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  yysize1 = yysize + yystrlen (yyformat);
  if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
    return 2;
  yysize = yysize1;

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, scanner_t *scnr, parser_t *parser)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, scnr, parser)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    scanner_t *scnr;
    parser_t *parser;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (scnr);
  YYUSE (parser);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (scanner_t *scnr, parser_t *parser);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (scanner_t *scnr, parser_t *parser)
#else
int
yyparse (scnr, parser)
    scanner_t *scnr;
    parser_t *parser;
#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1806 of yacc.c  */
#line 174 "parser.y"
    { set_syntax_tree(parser, (yyvsp[(1) - (1)].val)); }
    break;

  case 3:

/* Line 1806 of yacc.c  */
#line 175 "parser.y"
    { set_syntax_tree(parser, (yyvsp[(2) - (2)].val));
                                  end_of_regex(scnr); }
    break;

  case 4:

/* Line 1806 of yacc.c  */
#line 178 "parser.y"
    { set_syntax_tree(parser, (yyvsp[(2) - (2)].val)); YYACCEPT; }
    break;

  case 5:

/* Line 1806 of yacc.c  */
#line 179 "parser.y"
    { internal_error("notreached"); }
    break;

  case 6:

/* Line 1806 of yacc.c  */
#line 181 "parser.y"
    { set_syntax_tree(parser, (yyvsp[(2) - (2)].val)); YYACCEPT; }
    break;

  case 7:

/* Line 1806 of yacc.c  */
#line 182 "parser.y"
    { internal_error("notreached"); }
    break;

  case 8:

/* Line 1806 of yacc.c  */
#line 183 "parser.y"
    { if (yychar == YYEOF) {
                                    parser->syntax_tree = nao;
                                    YYACCEPT;
                                  } else {
                                    yybadtok(yychar, nil);
                                    parser->syntax_tree = nil;
                                  } }
    break;

  case 9:

/* Line 1806 of yacc.c  */
#line 190 "parser.y"
    { if (yychar == YYEOF) {
                                    parser->syntax_tree = nao;
                                    YYACCEPT;
                                  } else {
                                    yybadtok(yychar, nil);
                                    parser->syntax_tree = nil;
                                  } }
    break;

  case 10:

/* Line 1806 of yacc.c  */
#line 197 "parser.y"
    { parser->syntax_tree = nil;
                                  if (parser->errors >= 8)
                                    YYABORT;
                                  yyerrok;
                                  yybadtok(yychar, nil); }
    break;

  case 11:

/* Line 1806 of yacc.c  */
#line 206 "parser.y"
    { parser->ignore = 1; }
    break;

  case 12:

/* Line 1806 of yacc.c  */
#line 207 "parser.y"
    { parser->ignore = 0;
                                                  (yyval.val) = nao; }
    break;

  case 13:

/* Line 1806 of yacc.c  */
#line 209 "parser.y"
    { parser->ignore = 1; }
    break;

  case 14:

/* Line 1806 of yacc.c  */
#line 210 "parser.y"
    { parser->ignore = 0;
                                                  (yyval.val) = nao; }
    break;

  case 15:

/* Line 1806 of yacc.c  */
#line 212 "parser.y"
    { parser->ignore = 1; }
    break;

  case 16:

/* Line 1806 of yacc.c  */
#line 213 "parser.y"
    { parser->ignore = 0;
                                                  (yyval.val) = nao; }
    break;

  case 17:

/* Line 1806 of yacc.c  */
#line 215 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 18:

/* Line 1806 of yacc.c  */
#line 216 "parser.y"
    { (yyval.val) = uref_helper(parser, (yyvsp[(2) - (2)].val)); }
    break;

  case 19:

/* Line 1806 of yacc.c  */
#line 217 "parser.y"
    { (yyval.val) = uoref_helper(parser, (yyvsp[(2) - (2)].val)); }
    break;

  case 20:

/* Line 1806 of yacc.c  */
#line 220 "parser.y"
    { parser->ignore = 1; }
    break;

  case 21:

/* Line 1806 of yacc.c  */
#line 221 "parser.y"
    { parser->ignore = 0;
                                                  (yyval.val) = nao; }
    break;

  case 22:

/* Line 1806 of yacc.c  */
#line 223 "parser.y"
    { parser->ignore = 1; }
    break;

  case 23:

/* Line 1806 of yacc.c  */
#line 224 "parser.y"
    { parser->ignore = 0;
                                                  (yyval.val) = nao; }
    break;

  case 24:

/* Line 1806 of yacc.c  */
#line 226 "parser.y"
    { parser->ignore = 1; }
    break;

  case 25:

/* Line 1806 of yacc.c  */
#line 227 "parser.y"
    { parser->ignore = 0;
                                                  (yyval.val) = nao; }
    break;

  case 26:

/* Line 1806 of yacc.c  */
#line 229 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 27:

/* Line 1806 of yacc.c  */
#line 230 "parser.y"
    { (yyval.val) = uref_helper(parser, (yyvsp[(2) - (2)].val)); }
    break;

  case 28:

/* Line 1806 of yacc.c  */
#line 231 "parser.y"
    { (yyval.val) = uoref_helper(parser, (yyvsp[(2) - (2)].val)); }
    break;

  case 29:

/* Line 1806 of yacc.c  */
#line 236 "parser.y"
    { internal_error("notreached"); }
    break;

  case 30:

/* Line 1806 of yacc.c  */
#line 237 "parser.y"
    { internal_error("notreached"); }
    break;

  case 31:

/* Line 1806 of yacc.c  */
#line 238 "parser.y"
    { internal_error("notreached"); }
    break;

  case 32:

/* Line 1806 of yacc.c  */
#line 241 "parser.y"
    { (yyval.val) = check_parse_time_action(cons((yyvsp[(1) - (1)].val), nil)); }
    break;

  case 33:

/* Line 1806 of yacc.c  */
#line 242 "parser.y"
    { (yyval.val) = check_parse_time_action(cons((yyvsp[(2) - (2)].val), (yyvsp[(1) - (2)].val)));  }
    break;

  case 34:

/* Line 1806 of yacc.c  */
#line 245 "parser.y"
    { (yyval.val) = us_nreverse((yyvsp[(1) - (1)].val)); }
    break;

  case 35:

/* Line 1806 of yacc.c  */
#line 246 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 36:

/* Line 1806 of yacc.c  */
#line 249 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); rlc((yyval.val), (yyvsp[(1) - (1)].val)); }
    break;

  case 37:

/* Line 1806 of yacc.c  */
#line 250 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); rlc((yyval.val), (yyvsp[(1) - (1)].val)); }
    break;

  case 38:

/* Line 1806 of yacc.c  */
#line 251 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); rlc((yyval.val), (yyvsp[(1) - (1)].val)); }
    break;

  case 39:

/* Line 1806 of yacc.c  */
#line 252 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); rlc((yyval.val), (yyvsp[(1) - (1)].val)); }
    break;

  case 40:

/* Line 1806 of yacc.c  */
#line 253 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); rlc((yyval.val), (yyvsp[(1) - (1)].val)); }
    break;

  case 41:

/* Line 1806 of yacc.c  */
#line 254 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); rlc((yyval.val), (yyvsp[(1) - (1)].val)); }
    break;

  case 42:

/* Line 1806 of yacc.c  */
#line 255 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); rlc((yyval.val), (yyvsp[(1) - (1)].val)); }
    break;

  case 43:

/* Line 1806 of yacc.c  */
#line 256 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); rlc((yyval.val), (yyvsp[(1) - (1)].val)); }
    break;

  case 44:

/* Line 1806 of yacc.c  */
#line 257 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); rlc((yyval.val), (yyvsp[(1) - (1)].val)); }
    break;

  case 45:

/* Line 1806 of yacc.c  */
#line 258 "parser.y"
    { (yyval.val) = list(define_transform(parser, (yyvsp[(1) - (1)].val)), nao);
                                  rlc(car((yyval.val)), (yyvsp[(1) - (1)].val));
                                  rlc((yyval.val), (yyvsp[(1) - (1)].val)); }
    break;

  case 46:

/* Line 1806 of yacc.c  */
#line 261 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); rlc((yyval.val), (yyvsp[(1) - (1)].val)); }
    break;

  case 47:

/* Line 1806 of yacc.c  */
#line 262 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); rlc((yyval.val), (yyvsp[(1) - (1)].val)); }
    break;

  case 48:

/* Line 1806 of yacc.c  */
#line 263 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); rlc((yyval.val), (yyvsp[(1) - (1)].val)); }
    break;

  case 49:

/* Line 1806 of yacc.c  */
#line 264 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 50:

/* Line 1806 of yacc.c  */
#line 267 "parser.y"
    { (yyval.val) = list(all_s, (yyvsp[(3) - (3)].val), nao);
                                          rl((yyval.val), num((yyvsp[(1) - (3)].lineno))); }
    break;

  case 51:

/* Line 1806 of yacc.c  */
#line 269 "parser.y"
    { (yyval.val) = nil;
                                          yybadtok(yychar, lit("all clause")); }
    break;

  case 52:

/* Line 1806 of yacc.c  */
#line 274 "parser.y"
    { (yyval.val) = list(some_s, (yyvsp[(5) - (5)].val), (yyvsp[(2) - (5)].val), nao);
                                          rl((yyval.val), num((yyvsp[(1) - (5)].lineno))); }
    break;

  case 53:

/* Line 1806 of yacc.c  */
#line 278 "parser.y"
    { (yyval.val) = nil;
                                          yybadtok(yychar, lit("some clause")); }
    break;

  case 54:

/* Line 1806 of yacc.c  */
#line 282 "parser.y"
    { (yyval.val) = list(none_s, (yyvsp[(3) - (3)].val), nao);
                                          rl((yyval.val), num((yyvsp[(1) - (3)].lineno))); }
    break;

  case 55:

/* Line 1806 of yacc.c  */
#line 284 "parser.y"
    { (yyval.val) = nil;
                                          yybadtok(yychar, lit("none clause")); }
    break;

  case 56:

/* Line 1806 of yacc.c  */
#line 288 "parser.y"
    { (yyval.val) = list(maybe_s, (yyvsp[(3) - (3)].val), nao);
                                          rl((yyval.val), num((yyvsp[(1) - (3)].lineno))); }
    break;

  case 57:

/* Line 1806 of yacc.c  */
#line 290 "parser.y"
    { (yyval.val) = nil;
                                          yybadtok(yychar, lit("maybe clause")); }
    break;

  case 58:

/* Line 1806 of yacc.c  */
#line 294 "parser.y"
    { (yyval.val) = list(cases_s, (yyvsp[(3) - (3)].val), nao);
                                          rl((yyval.val), num((yyvsp[(1) - (3)].lineno))); }
    break;

  case 59:

/* Line 1806 of yacc.c  */
#line 296 "parser.y"
    { (yyval.val) = nil;
                                          yybadtok(yychar, lit("cases clause")); }
    break;

  case 60:

/* Line 1806 of yacc.c  */
#line 302 "parser.y"
    { val name = first((yyvsp[(2) - (7)].val));
                                          if (gt(length((yyvsp[(2) - (7)].val)), one))
                                            yyerr("block: takes zero or no arguments");
                                          if (name && !bindable(name))
                                            yyerrorf(scnr,
                                                     lit("block: ~s is not a bindable symbol"),
                                                     name, nao);
                                          (yyval.val) = list(block_s, name, (yyvsp[(5) - (7)].val), nao);
                                          rl((yyval.val), num((yyvsp[(1) - (7)].lineno))); }
    break;

  case 61:

/* Line 1806 of yacc.c  */
#line 312 "parser.y"
    { (yyval.val) = nil;
                                          yybadtok(yychar, lit("block clause")); }
    break;

  case 62:

/* Line 1806 of yacc.c  */
#line 317 "parser.y"
    { (yyval.val) = list(choose_s, (yyvsp[(5) - (5)].val), (yyvsp[(2) - (5)].val), nao);
                                          rl((yyval.val), num((yyvsp[(1) - (5)].lineno))); }
    break;

  case 63:

/* Line 1806 of yacc.c  */
#line 320 "parser.y"
    { (yyval.val) = nil;
                                          yybadtok(yychar, lit("choose clause")); }
    break;

  case 64:

/* Line 1806 of yacc.c  */
#line 326 "parser.y"
    { val args = match_expand_keyword_args((yyvsp[(2) - (7)].val));
                                          (yyval.val) = list(gather_s,
                                                    append2(mapcar(pa_12_1(func_n2(cons), nil),
                                                                   first((yyvsp[(5) - (7)].val))), rest((yyvsp[(5) - (7)].val))),
                                                    args, nao);
                                          rl((yyval.val), num((yyvsp[(1) - (7)].lineno))); }
    break;

  case 65:

/* Line 1806 of yacc.c  */
#line 337 "parser.y"
    { val args = match_expand_keyword_args((yyvsp[(2) - (12)].val));
                                          (yyval.val) = list(gather_s,
                                                    append2(mapcar(pa_12_1(func_n2(cons), nil),
                                                                   first((yyvsp[(5) - (12)].val))), rest((yyvsp[(5) - (12)].val))),
                                                    args, cons(cdr((yyvsp[(6) - (12)].val)),
                                                             cons((yyvsp[(7) - (12)].val), (yyvsp[(10) - (12)].val))), nao);
                                          rl((yyval.val), num((yyvsp[(1) - (12)].lineno))); }
    break;

  case 66:

/* Line 1806 of yacc.c  */
#line 346 "parser.y"
    { (yyval.val) = nil;
                                          yybadtok(yychar, lit("gather clause")); }
    break;

  case 67:

/* Line 1806 of yacc.c  */
#line 351 "parser.y"
    { (yyval.val) = if2((yyvsp[(1) - (2)].val), cons((yyvsp[(1) - (2)].val), (yyvsp[(2) - (2)].val))); }
    break;

  case 68:

/* Line 1806 of yacc.c  */
#line 354 "parser.y"
    { (yyval.val) = (yyvsp[(3) - (3)].val); }
    break;

  case 69:

/* Line 1806 of yacc.c  */
#line 355 "parser.y"
    { (yyval.val) = (yyvsp[(3) - (3)].val); }
    break;

  case 70:

/* Line 1806 of yacc.c  */
#line 356 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 71:

/* Line 1806 of yacc.c  */
#line 360 "parser.y"
    { val args = match_expand_keyword_args((yyvsp[(2) - (7)].val));
                                            (yyval.val) = list(car((yyvsp[(1) - (7)].val)),
                                                      (yyvsp[(5) - (7)].val), nil, args,
                                                      nao);
                                            rl((yyval.val), cdr((yyvsp[(1) - (7)].val))); }
    break;

  case 72:

/* Line 1806 of yacc.c  */
#line 368 "parser.y"
    { val args = match_expand_keyword_args((yyvsp[(2) - (12)].val));
                                            if (nilp((yyvsp[(10) - (12)].val)))
                                              yyerr("empty until/last in collect");
                                            (yyval.val) = list(car((yyvsp[(1) - (12)].val)), (yyvsp[(5) - (12)].val),
                                                      cons(cdr((yyvsp[(6) - (12)].val)),
                                                           cons((yyvsp[(7) - (12)].val), (yyvsp[(10) - (12)].val))),
                                                      args, nao);
                                            rl((yyval.val), cdr((yyvsp[(1) - (12)].val)));
                                            rl((yyvsp[(10) - (12)].val), car((yyvsp[(6) - (12)].val))); }
    break;

  case 73:

/* Line 1806 of yacc.c  */
#line 378 "parser.y"
    { (yyval.val) = nil;
                                          yybadtok(yychar, lit("collect clause")); }
    break;

  case 74:

/* Line 1806 of yacc.c  */
#line 382 "parser.y"
    { (yyval.val) = cons(collect_s, num((yyvsp[(1) - (1)].lineno))); }
    break;

  case 75:

/* Line 1806 of yacc.c  */
#line 383 "parser.y"
    { (yyval.val) = cons(repeat_s, num((yyvsp[(1) - (1)].lineno))); }
    break;

  case 76:

/* Line 1806 of yacc.c  */
#line 386 "parser.y"
    { (yyval.val) = cons(num((yyvsp[(1) - (1)].lineno)), until_s); }
    break;

  case 77:

/* Line 1806 of yacc.c  */
#line 387 "parser.y"
    { (yyval.val) = cons(num((yyvsp[(1) - (1)].lineno)), last_s); }
    break;

  case 78:

/* Line 1806 of yacc.c  */
#line 390 "parser.y"
    { (yyval.val) = if2((yyvsp[(1) - (2)].val), cons((yyvsp[(1) - (2)].val), (yyvsp[(2) - (2)].val))); }
    break;

  case 79:

/* Line 1806 of yacc.c  */
#line 393 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 80:

/* Line 1806 of yacc.c  */
#line 394 "parser.y"
    { (yyval.val) = (yyvsp[(3) - (3)].val); }
    break;

  case 81:

/* Line 1806 of yacc.c  */
#line 395 "parser.y"
    { (yyval.val) = (yyvsp[(3) - (3)].val); }
    break;

  case 82:

/* Line 1806 of yacc.c  */
#line 402 "parser.y"
    { if (opt_compat && opt_compat <= 136)
                                  { val xexp = expand_meta((yyvsp[(2) - (9)].val), nil);
                                    val req = rlc(cons(require_s, xexp), (yyvsp[(2) - (9)].val));
                                    val iff = rlc(cons(cons(cons(req, nil), (yyvsp[(5) - (9)].val)), nil), (yyvsp[(2) - (9)].val));
                                    val elifs = (yyvsp[(6) - (9)].val);
                                    val els = cons((yyvsp[(7) - (9)].val), nil);
                                    val cases = nappend2(nappend2(iff, elifs), els);
                                    (yyval.val) = list(cases_s, cases, nao); }
                                  else
                                  { val expr = expand(car((yyvsp[(2) - (9)].val)), nil);
                                    val ifs = (yyvsp[(5) - (9)].val);
                                    val branch = cons(cons(expr, ifs), nil);
                                    val elifs = (yyvsp[(6) - (9)].val);
                                    val els = (yyvsp[(7) - (9)].val);
                                    if (cdr((yyvsp[(2) - (9)].val)))
                                      yyerr("extra expression in if");
                                    (yyval.val) = cons(if_s,
                                              nappend2(branch, nappend2(elifs, els)));
                                    rl((yyval.val), num((yyvsp[(1) - (9)].lineno))); } }
    break;

  case 83:

/* Line 1806 of yacc.c  */
#line 422 "parser.y"
    { (yyval.val) = nil; yybadtok(yychar, lit("if clause")); }
    break;

  case 84:

/* Line 1806 of yacc.c  */
#line 427 "parser.y"
    { if (opt_compat && opt_compat <= 136)
                                       { val xexp = expand_meta((yyvsp[(2) - (6)].val), nil);
                                         val req = rlc(cons(require_s, xexp), (yyvsp[(2) - (6)].val));
                                         (yyval.val) = cons(cons(cons(req, nil), (yyvsp[(5) - (6)].val)), (yyvsp[(6) - (6)].val)); }
                                       else
                                       { val expr = expand(car((yyvsp[(2) - (6)].val)), nil);
                                         val elifs = (yyvsp[(5) - (6)].val);
                                         val branch = cons(cons(expr, elifs), nil);
                                         if (cdr((yyvsp[(2) - (6)].val)))
                                           yyerr("extra expression in elif");
                                         (yyval.val) = nappend2(branch, (yyvsp[(6) - (6)].val)); } }
    break;

  case 85:

/* Line 1806 of yacc.c  */
#line 438 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 86:

/* Line 1806 of yacc.c  */
#line 442 "parser.y"
    { if (opt_compat && opt_compat <= 136)
                                       { (yyval.val) = (yyvsp[(3) - (3)].val); }
                                       else
                                       { (yyval.val) = cons(cons(t, (yyvsp[(3) - (3)].val)), nil); } }
    break;

  case 87:

/* Line 1806 of yacc.c  */
#line 446 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 88:

/* Line 1806 of yacc.c  */
#line 449 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (2)].val); }
    break;

  case 89:

/* Line 1806 of yacc.c  */
#line 452 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 90:

/* Line 1806 of yacc.c  */
#line 453 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 91:

/* Line 1806 of yacc.c  */
#line 456 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil);
                                  rlc((yyval.val), (yyvsp[(1) - (1)].val)); }
    break;

  case 92:

/* Line 1806 of yacc.c  */
#line 458 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (2)].val), (yyvsp[(2) - (2)].val));
                                  rlc((yyval.val), (yyvsp[(1) - (2)].val)); }
    break;

  case 93:

/* Line 1806 of yacc.c  */
#line 463 "parser.y"
    { (yyval.val) = rl(string_own((yyvsp[(1) - (1)].lexeme)), num(parser->lineno)); }
    break;

  case 94:

/* Line 1806 of yacc.c  */
#line 464 "parser.y"
    { if ((yyvsp[(1) - (1)].lexeme)[0] == ' ' && (yyvsp[(1) - (1)].lexeme)[1] == 0)
                                  { val spaces = list(oneplus_s,
                                                      chr(' '), nao);
                                    free((yyvsp[(1) - (1)].lexeme));
                                    (yyval.val) = regex_compile(spaces, nil);
                                    rl((yyval.val), num(parser->lineno)); }
                                  else
                                  { (yyval.val) = rl(string_own((yyvsp[(1) - (1)].lexeme)), num(parser->lineno)); }}
    break;

  case 95:

/* Line 1806 of yacc.c  */
#line 472 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val);
                                  rl((yyval.val), num(parser->lineno)); }
    break;

  case 96:

/* Line 1806 of yacc.c  */
#line 474 "parser.y"
    { (yyval.val) = null_string; }
    break;

  case 97:

/* Line 1806 of yacc.c  */
#line 477 "parser.y"
    { (yyval.val) = rlc(cons((yyvsp[(1) - (1)].val), nil), (yyvsp[(1) - (1)].val)); }
    break;

  case 98:

/* Line 1806 of yacc.c  */
#line 478 "parser.y"
    { (yyval.val) = rlc(cons((yyvsp[(1) - (2)].val), (yyvsp[(2) - (2)].val)), (yyvsp[(2) - (2)].val)); }
    break;

  case 99:

/* Line 1806 of yacc.c  */
#line 481 "parser.y"
    { (yyval.val) = rlc(cons(text_s, (yyvsp[(1) - (1)].val)), (yyvsp[(1) - (1)].val));
                                  (yyval.val) = rlc(optimize_text((yyval.val)), (yyval.val)); }
    break;

  case 100:

/* Line 1806 of yacc.c  */
#line 483 "parser.y"
    { (yyval.val) = rl((yyvsp[(1) - (1)].val), num(parser->lineno));
                                  match_reg_elem((yyval.val)); }
    break;

  case 101:

/* Line 1806 of yacc.c  */
#line 485 "parser.y"
    { val sym = first((yyvsp[(1) - (1)].val));
                                  if (sym ==  do_s || sym == require_s)
                                    (yyval.val) = rlc(cons(sym,
                                                   expand_forms(rest((yyvsp[(1) - (1)].val)), nil)),
                                              (yyvsp[(1) - (1)].val));
                                  else
                                  { (yyval.val) = match_expand_elem((yyvsp[(1) - (1)].val));
                                    match_reg_elem((yyval.val)); } }
    break;

  case 102:

/* Line 1806 of yacc.c  */
#line 493 "parser.y"
    { val args = match_expand_keyword_args((yyvsp[(2) - (5)].val));
                                          (yyval.val) = list(coll_s, (yyvsp[(4) - (5)].val), nil, args, nao);
                                          rl((yyval.val), num((yyvsp[(1) - (5)].lineno))); }
    break;

  case 103:

/* Line 1806 of yacc.c  */
#line 498 "parser.y"
    { val args = match_expand_keyword_args((yyvsp[(2) - (9)].val));
                                  (yyval.val) = list(coll_s, (yyvsp[(4) - (9)].val), cons(cdr((yyvsp[(5) - (9)].val)),
                                                             cons((yyvsp[(6) - (9)].val), (yyvsp[(8) - (9)].val))),
                                            args, nao);
                                  rl((yyval.val), num((yyvsp[(1) - (9)].lineno)));
                                  rl((yyvsp[(6) - (9)].val), car((yyvsp[(5) - (9)].val))); }
    break;

  case 104:

/* Line 1806 of yacc.c  */
#line 504 "parser.y"
    { val args = match_expand_keyword_args((yyvsp[(2) - (5)].val));
                                         (yyval.val) = list(rep_s, (yyvsp[(4) - (5)].val), nil, args, nao);
                                         rl((yyval.val), num((yyvsp[(1) - (5)].lineno))); }
    break;

  case 105:

/* Line 1806 of yacc.c  */
#line 510 "parser.y"
    { val args = match_expand_keyword_args((yyvsp[(2) - (9)].val));
                                  (yyval.val) = list(rep_s, (yyvsp[(4) - (9)].val), cons(cdr((yyvsp[(5) - (9)].val)),
                                                            cons((yyvsp[(6) - (9)].val), (yyvsp[(8) - (9)].val))),
                                            args, nao);
                                  rl((yyval.val), num((yyvsp[(1) - (9)].lineno)));
                                  rl((yyvsp[(6) - (9)].val), car((yyvsp[(5) - (9)].val))); }
    break;

  case 106:

/* Line 1806 of yacc.c  */
#line 516 "parser.y"
    { (yyval.val) = list(block_s, car((yyvsp[(2) - (5)].val)),
                                                 cons((yyvsp[(4) - (5)].val), nil), nao);
                                       rl((yyval.val), num((yyvsp[(1) - (5)].lineno))); }
    break;

  case 107:

/* Line 1806 of yacc.c  */
#line 519 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("coll clause")); }
    break;

  case 108:

/* Line 1806 of yacc.c  */
#line 521 "parser.y"
    { (yyval.val) = nil;
                                 yybadtok(yychar, lit("rep clause")); }
    break;

  case 109:

/* Line 1806 of yacc.c  */
#line 523 "parser.y"
    { (yyval.val) = nil;
                                 yybadtok(yychar, lit("rep clause")); }
    break;

  case 110:

/* Line 1806 of yacc.c  */
#line 525 "parser.y"
    { (yyval.val) = rl(list(all_s, t, (yyvsp[(2) - (2)].val), nao), num((yyvsp[(1) - (2)].lineno))); }
    break;

  case 111:

/* Line 1806 of yacc.c  */
#line 527 "parser.y"
    { (yyval.val) = rl(list(some_s, t, (yyvsp[(4) - (4)].val), (yyvsp[(2) - (4)].val), nao), num((yyvsp[(1) - (4)].lineno))); }
    break;

  case 112:

/* Line 1806 of yacc.c  */
#line 528 "parser.y"
    { (yyval.val) = rl(list(none_s, t, (yyvsp[(2) - (2)].val), nao), num((yyvsp[(1) - (2)].lineno))); }
    break;

  case 113:

/* Line 1806 of yacc.c  */
#line 529 "parser.y"
    { (yyval.val) = rl(list(maybe_s, t, (yyvsp[(2) - (2)].val), nao), num((yyvsp[(1) - (2)].lineno))); }
    break;

  case 114:

/* Line 1806 of yacc.c  */
#line 530 "parser.y"
    { (yyval.val) = rl(list(cases_s, t, (yyvsp[(2) - (2)].val), nao), num((yyvsp[(1) - (2)].lineno))); }
    break;

  case 115:

/* Line 1806 of yacc.c  */
#line 532 "parser.y"
    { (yyval.val) = list(choose_s, t, (yyvsp[(4) - (4)].val), (yyvsp[(2) - (4)].val), nao);
                                  rl((yyval.val), num((yyvsp[(1) - (4)].lineno))); }
    break;

  case 116:

/* Line 1806 of yacc.c  */
#line 535 "parser.y"
    { (yyval.val) = list(define_s, t, (yyvsp[(4) - (5)].val), (yyvsp[(2) - (5)].val), nao);
                                  rl((yyval.val), num((yyvsp[(1) - (5)].lineno)));
                                  match_reg_params(second((yyvsp[(2) - (5)].val))); }
    break;

  case 117:

/* Line 1806 of yacc.c  */
#line 540 "parser.y"
    { (yyval.val) = if2((yyvsp[(1) - (2)].val), cons((yyvsp[(1) - (2)].val), (yyvsp[(2) - (2)].val))); }
    break;

  case 118:

/* Line 1806 of yacc.c  */
#line 543 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 119:

/* Line 1806 of yacc.c  */
#line 544 "parser.y"
    { (yyval.val) = (yyvsp[(2) - (2)].val); }
    break;

  case 120:

/* Line 1806 of yacc.c  */
#line 545 "parser.y"
    { (yyval.val) = (yyvsp[(2) - (2)].val); }
    break;

  case 121:

/* Line 1806 of yacc.c  */
#line 550 "parser.y"
    { (yyval.val) = list(define_s, (yyvsp[(2) - (7)].val), (yyvsp[(5) - (7)].val), nao);
                                  rl((yyval.val), num((yyvsp[(1) - (7)].lineno)));
                                  match_reg_params(second((yyvsp[(2) - (7)].val))); }
    break;

  case 122:

/* Line 1806 of yacc.c  */
#line 555 "parser.y"
    { (yyval.val) = list(define_s, nil, (yyvsp[(4) - (6)].val), nao);
                                  rl((yyval.val), num((yyvsp[(1) - (6)].lineno))); }
    break;

  case 123:

/* Line 1806 of yacc.c  */
#line 557 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("define directive")); }
    break;

  case 124:

/* Line 1806 of yacc.c  */
#line 560 "parser.y"
    { (yyval.val) = nil; yybadtok(yychar, lit("define")); }
    break;

  case 125:

/* Line 1806 of yacc.c  */
#line 562 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("define")); }
    break;

  case 126:

/* Line 1806 of yacc.c  */
#line 569 "parser.y"
    { (yyval.val) = list(try_s,
                                            flatten(mapcar(func_n1(second),
                                                           (yyvsp[(4) - (6)].val))),
                                            (yyvsp[(3) - (6)].val), (yyvsp[(4) - (6)].val), nao);
                                  rl((yyval.val), num((yyvsp[(1) - (6)].lineno))); }
    break;

  case 127:

/* Line 1806 of yacc.c  */
#line 575 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("try clause")); }
    break;

  case 128:

/* Line 1806 of yacc.c  */
#line 581 "parser.y"
    { (yyval.val) = cons(list(catch_s, cons(t, nil),
                                                         (yyvsp[(4) - (5)].val), nao), (yyvsp[(5) - (5)].val));
                                          rl((yyval.val), num((yyvsp[(1) - (5)].lineno))); }
    break;

  case 129:

/* Line 1806 of yacc.c  */
#line 586 "parser.y"
    { (yyval.val) = cons(list(catch_s, (yyvsp[(2) - (6)].val), (yyvsp[(5) - (6)].val), nao),
                                                    (yyvsp[(6) - (6)].val));
                                          process_catch_exprs((yyvsp[(2) - (6)].val));
                                          rl((yyval.val), num((yyvsp[(1) - (6)].lineno))); }
    break;

  case 130:

/* Line 1806 of yacc.c  */
#line 591 "parser.y"
    { (yyval.val) = cons(list(finally_s, nil,
                                                         (yyvsp[(3) - (3)].val), nao),
                                                    nil);
                                          rl((yyval.val), num((yyvsp[(1) - (3)].lineno))); }
    break;

  case 131:

/* Line 1806 of yacc.c  */
#line 595 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 132:

/* Line 1806 of yacc.c  */
#line 597 "parser.y"
    { (yyval.val) = nil;
                                          yybadtok(yychar, lit("catch clause")); }
    break;

  case 133:

/* Line 1806 of yacc.c  */
#line 600 "parser.y"
    { (yyval.val) = nil;
                                          yybadtok(yychar, lit("catch clause")); }
    break;

  case 134:

/* Line 1806 of yacc.c  */
#line 603 "parser.y"
    { (yyval.val) = nil;
                                          yybadtok(yychar, lit("finally clause")); }
    break;

  case 135:

/* Line 1806 of yacc.c  */
#line 610 "parser.y"
    { (yyval.val) = nil;
                                  yyerr("obsolete output syntax: trailing material"); }
    break;

  case 136:

/* Line 1806 of yacc.c  */
#line 613 "parser.y"
    { (yyval.val) = rl(list(output_s, nao), num((yyvsp[(1) - (5)].lineno))); }
    break;

  case 137:

/* Line 1806 of yacc.c  */
#line 616 "parser.y"
    { (yyval.val) = rl(list(output_s, (yyvsp[(4) - (6)].val), nao), num((yyvsp[(1) - (6)].lineno))); }
    break;

  case 138:

/* Line 1806 of yacc.c  */
#line 619 "parser.y"
    { cons_bind (dest, rest, (yyvsp[(2) - (7)].val));
                                  val dest_ex = expand_form_ver(dest, 166);
                                  val args = if3(dest_ex == dest,
                                                 (yyvsp[(2) - (7)].val), cons(dest_ex, rest));
                                  (yyval.val) = list(output_s, (yyvsp[(5) - (7)].val), args, nao);
                                  rl((yyval.val), num((yyvsp[(1) - (7)].lineno)));
                                  { val into_var = second(memql(into_k, args));
                                    val named_var = second(memql(named_k, args));
                                    match_reg_var(into_var);
                                    match_reg_var(named_var); } }
    break;

  case 139:

/* Line 1806 of yacc.c  */
#line 631 "parser.y"
    { (yyval.val) = nil;
                                  yyerr("invalid combination of old and "
                                               "new syntax in output directive"); }
    break;

  case 140:

/* Line 1806 of yacc.c  */
#line 634 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("output directive")); }
    break;

  case 141:

/* Line 1806 of yacc.c  */
#line 637 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("output clause")); }
    break;

  case 142:

/* Line 1806 of yacc.c  */
#line 640 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("output clause")); }
    break;

  case 143:

/* Line 1806 of yacc.c  */
#line 643 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("output clause")); }
    break;

  case 144:

/* Line 1806 of yacc.c  */
#line 646 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("output clause")); }
    break;

  case 145:

/* Line 1806 of yacc.c  */
#line 650 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); }
    break;

  case 146:

/* Line 1806 of yacc.c  */
#line 651 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (2)].val), (yyvsp[(2) - (2)].val));  }
    break;

  case 147:

/* Line 1806 of yacc.c  */
#line 654 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); }
    break;

  case 148:

/* Line 1806 of yacc.c  */
#line 655 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); }
    break;

  case 149:

/* Line 1806 of yacc.c  */
#line 656 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 150:

/* Line 1806 of yacc.c  */
#line 662 "parser.y"
    { (yyval.val) = repeat_rep_helper(repeat_s,
                                                                 (yyvsp[(2) - (8)].val), (yyvsp[(5) - (8)].val), (yyvsp[(6) - (8)].val));
                                          rl((yyval.val), num((yyvsp[(1) - (8)].lineno))); }
    break;

  case 151:

/* Line 1806 of yacc.c  */
#line 666 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("repeat clause")); }
    break;

  case 152:

/* Line 1806 of yacc.c  */
#line 672 "parser.y"
    { (yyval.val) = cons(cons(single_s, (yyvsp[(3) - (4)].val)), (yyvsp[(4) - (4)].val));
                                          rl((yyval.val), num((yyvsp[(1) - (4)].lineno))); }
    break;

  case 153:

/* Line 1806 of yacc.c  */
#line 676 "parser.y"
    { (yyval.val) = cons(cons(first_s, (yyvsp[(3) - (4)].val)), (yyvsp[(4) - (4)].val));
                                          rl((yyval.val), num((yyvsp[(1) - (4)].lineno))); }
    break;

  case 154:

/* Line 1806 of yacc.c  */
#line 680 "parser.y"
    { if ((yyvsp[(2) - (6)].val))
                                            yyerrorf(scnr,
                                                     lit("last: in output, "
                                                         "takes no arguments"),
                                                     nao);
                                          (yyval.val) = cons(cons(last_s, (yyvsp[(5) - (6)].val)), (yyvsp[(6) - (6)].val));
                                          rl((yyval.val), num((yyvsp[(1) - (6)].lineno))); }
    break;

  case 155:

/* Line 1806 of yacc.c  */
#line 689 "parser.y"
    { (yyval.val) = cons(cons(empty_s, (yyvsp[(3) - (4)].val)), (yyvsp[(4) - (4)].val));
                                          rl((yyval.val), num((yyvsp[(1) - (4)].lineno))); }
    break;

  case 156:

/* Line 1806 of yacc.c  */
#line 694 "parser.y"
    { (yyval.val) = cons(cons(mod_s,
                                                         cons(expand_forms_ver((yyvsp[(2) - (6)].val), 166),
                                                              (yyvsp[(5) - (6)].val))), (yyvsp[(6) - (6)].val));
                                          rl((yyval.val), num((yyvsp[(1) - (6)].lineno))); }
    break;

  case 157:

/* Line 1806 of yacc.c  */
#line 701 "parser.y"
    { (yyval.val) = cons(cons(modlast_s,
                                                         cons(expand_forms_ver((yyvsp[(2) - (6)].val), 166),
                                                              (yyvsp[(5) - (6)].val))), (yyvsp[(6) - (6)].val));
                                          rl((yyval.val), num((yyvsp[(1) - (6)].lineno))); }
    break;

  case 158:

/* Line 1806 of yacc.c  */
#line 705 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 159:

/* Line 1806 of yacc.c  */
#line 712 "parser.y"
    { val expr = expand((yyvsp[(2) - (9)].val), nil);
                                  val ifs = (yyvsp[(5) - (9)].val);
                                  val branch = cons(cons(expr, ifs), nil);
                                  val elifs = (yyvsp[(6) - (9)].val);
                                  val els = (yyvsp[(7) - (9)].val);
                                  (yyval.val) = cons(if_s,
                                            nappend2(branch, nappend2(elifs, els)));
                                  rl((yyval.val), num((yyvsp[(1) - (9)].lineno))); }
    break;

  case 160:

/* Line 1806 of yacc.c  */
#line 721 "parser.y"
    { (yyval.val) = nil;
                                  yyerr("if requires expression"); }
    break;

  case 161:

/* Line 1806 of yacc.c  */
#line 724 "parser.y"
    { (yyval.val) = nil; yybadtok(yychar, lit("if clause")); }
    break;

  case 162:

/* Line 1806 of yacc.c  */
#line 730 "parser.y"
    { val expr = expand(car((yyvsp[(2) - (6)].val)), nil);
                                  val elifs = (yyvsp[(5) - (6)].val);
                                  val branch = cons(cons(expr, elifs), nil);
                                  if (null((yyvsp[(2) - (6)].val)))
                                    yyerr("elif requires expression");
                                  else if (cdr((yyvsp[(2) - (6)].val)))
                                    yyerr("extra expression in elif");
                                  (yyval.val) = nappend2(branch, (yyvsp[(6) - (6)].val)); }
    break;

  case 163:

/* Line 1806 of yacc.c  */
#line 738 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 164:

/* Line 1806 of yacc.c  */
#line 743 "parser.y"
    { (yyval.val) = cons(cons(t, (yyvsp[(3) - (3)].val)), nil); }
    break;

  case 165:

/* Line 1806 of yacc.c  */
#line 744 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 166:

/* Line 1806 of yacc.c  */
#line 747 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 167:

/* Line 1806 of yacc.c  */
#line 748 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 168:

/* Line 1806 of yacc.c  */
#line 750 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (2)].val); }
    break;

  case 169:

/* Line 1806 of yacc.c  */
#line 753 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val);
                                  rl((yyval.val), num(parser->lineno)); }
    break;

  case 170:

/* Line 1806 of yacc.c  */
#line 755 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 171:

/* Line 1806 of yacc.c  */
#line 758 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); }
    break;

  case 172:

/* Line 1806 of yacc.c  */
#line 759 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (2)].val), (yyvsp[(2) - (2)].val)); }
    break;

  case 173:

/* Line 1806 of yacc.c  */
#line 760 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); }
    break;

  case 174:

/* Line 1806 of yacc.c  */
#line 761 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (2)].val), (yyvsp[(2) - (2)].val)); }
    break;

  case 175:

/* Line 1806 of yacc.c  */
#line 764 "parser.y"
    { (yyval.val) = string_own((yyvsp[(1) - (1)].lexeme));
                                  rl((yyval.val), num(parser->lineno)); }
    break;

  case 176:

/* Line 1806 of yacc.c  */
#line 766 "parser.y"
    { (yyval.val) = string_own((yyvsp[(1) - (1)].lexeme));
                                  rl((yyval.val), num(parser->lineno)); }
    break;

  case 177:

/* Line 1806 of yacc.c  */
#line 768 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 178:

/* Line 1806 of yacc.c  */
#line 769 "parser.y"
    { (yyval.val) = rlc(list(expr_s,
                                                 expand((yyvsp[(1) - (1)].val), nil), nao), (yyvsp[(1) - (1)].val)); }
    break;

  case 179:

/* Line 1806 of yacc.c  */
#line 771 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 180:

/* Line 1806 of yacc.c  */
#line 775 "parser.y"
    { (yyval.val) = repeat_rep_helper(rep_s, (yyvsp[(2) - (6)].val), (yyvsp[(4) - (6)].val), (yyvsp[(5) - (6)].val));
                                  rl((yyval.val), num((yyvsp[(1) - (6)].lineno))); }
    break;

  case 181:

/* Line 1806 of yacc.c  */
#line 777 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("rep clause")); }
    break;

  case 182:

/* Line 1806 of yacc.c  */
#line 782 "parser.y"
    { (yyval.val) = cons(cons(single_s, (yyvsp[(2) - (3)].val)), (yyvsp[(3) - (3)].val));
                                          rl((yyval.val), num((yyvsp[(1) - (3)].lineno))); }
    break;

  case 183:

/* Line 1806 of yacc.c  */
#line 785 "parser.y"
    { (yyval.val) = cons(cons(first_s, (yyvsp[(2) - (3)].val)), (yyvsp[(3) - (3)].val));
                                          rl((yyval.val), num((yyvsp[(1) - (3)].lineno))); }
    break;

  case 184:

/* Line 1806 of yacc.c  */
#line 788 "parser.y"
    { if ((yyvsp[(2) - (5)].val))
                                            yyerrorf(scnr,
                                                     lit("last: in output, "
                                                         "takes no arguments"),
                                                     nao);
                                          (yyval.val) = cons(cons(last_s, (yyvsp[(4) - (5)].val)), (yyvsp[(5) - (5)].val));
                                          rl((yyval.val), num((yyvsp[(1) - (5)].lineno))); }
    break;

  case 185:

/* Line 1806 of yacc.c  */
#line 796 "parser.y"
    { (yyval.val) = cons(cons(empty_s, (yyvsp[(2) - (3)].val)), (yyvsp[(3) - (3)].val));
                                          rl((yyval.val), num((yyvsp[(1) - (3)].lineno))); }
    break;

  case 186:

/* Line 1806 of yacc.c  */
#line 800 "parser.y"
    { (yyval.val) = cons(cons(mod_s,
                                                         cons(expand_forms_ver((yyvsp[(2) - (5)].val), 166),
                                                              (yyvsp[(4) - (5)].val))), (yyvsp[(5) - (5)].val));
                                          rl((yyval.val), num((yyvsp[(1) - (5)].lineno))); }
    break;

  case 187:

/* Line 1806 of yacc.c  */
#line 806 "parser.y"
    { (yyval.val) = cons(cons(modlast_s,
                                                         cons(expand_forms_ver((yyvsp[(2) - (5)].val), 166),
                                                              (yyvsp[(4) - (5)].val))), (yyvsp[(5) - (5)].val));
                                          rl((yyval.val), num((yyvsp[(1) - (5)].lineno))); }
    break;

  case 188:

/* Line 1806 of yacc.c  */
#line 810 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 189:

/* Line 1806 of yacc.c  */
#line 817 "parser.y"
    { (yyval.val) = list(var_s, symhlpr((yyvsp[(1) - (1)].lexeme), nil), nao); }
    break;

  case 190:

/* Line 1806 of yacc.c  */
#line 818 "parser.y"
    { (yyval.val) = list(var_s, symhlpr((yyvsp[(2) - (3)].lexeme), nil), nao); }
    break;

  case 191:

/* Line 1806 of yacc.c  */
#line 819 "parser.y"
    { (yyval.val) = list(var_s, symhlpr((yyvsp[(2) - (4)].lexeme), nil), (yyvsp[(3) - (4)].val), nao); }
    break;

  case 192:

/* Line 1806 of yacc.c  */
#line 820 "parser.y"
    { (yyval.val) = list(var_s, symhlpr((yyvsp[(2) - (2)].lexeme), nil), (yyvsp[(1) - (2)].val), nao); }
    break;

  case 193:

/* Line 1806 of yacc.c  */
#line 821 "parser.y"
    { (yyval.val) = list(var_s, symhlpr((yyvsp[(3) - (4)].lexeme), nil), (yyvsp[(1) - (4)].val), nao); }
    break;

  case 194:

/* Line 1806 of yacc.c  */
#line 822 "parser.y"
    { (yyval.val) = nil;
                                          free((yyvsp[(3) - (5)].lexeme));
                                          yyerr("longest match "
                                                "not useable with regex"); }
    break;

  case 195:

/* Line 1806 of yacc.c  */
#line 826 "parser.y"
    { (yyval.val) = nil;
                                          free((yyvsp[(3) - (5)].lexeme));
                                          yyerr("longest match "
                                                "not useable with "
                                                "fixed width match"); }
    break;

  case 196:

/* Line 1806 of yacc.c  */
#line 831 "parser.y"
    { (yyval.val) = nil;
                                  free((yyvsp[(1) - (2)].lexeme));
                                  yybadtok(yychar, lit("variable spec")); }
    break;

  case 197:

/* Line 1806 of yacc.c  */
#line 834 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("variable spec")); }
    break;

  case 198:

/* Line 1806 of yacc.c  */
#line 838 "parser.y"
    { (yyval.val) = list(t, nao); }
    break;

  case 199:

/* Line 1806 of yacc.c  */
#line 841 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); }
    break;

  case 200:

/* Line 1806 of yacc.c  */
#line 842 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil);
                                  rlc((yyval.val), (yyvsp[(1) - (1)].val)); }
    break;

  case 201:

/* Line 1806 of yacc.c  */
#line 844 "parser.y"
    { (yyval.val) = rlc(cons(expand_meta((yyvsp[(1) - (1)].val), nil),
                                                 nil), (yyvsp[(1) - (1)].val)); }
    break;

  case 202:

/* Line 1806 of yacc.c  */
#line 846 "parser.y"
    { (yyval.val) = cons(symhlpr((yyvsp[(1) - (1)].lexeme), nil), nil); }
    break;

  case 203:

/* Line 1806 of yacc.c  */
#line 849 "parser.y"
    { val expr = symhlpr((yyvsp[(1) - (1)].lexeme), nil);
                                  if (!opt_compat || opt_compat > 128)
                                    expr = expand(expr, nil);
                                  (yyval.val) = list(var_s, expr, nao);
                                  rl((yyval.val), num(parser->lineno)); }
    break;

  case 204:

/* Line 1806 of yacc.c  */
#line 855 "parser.y"
    { if (opt_compat && opt_compat <= 128)
                                  { (yyval.val) = list(var_s,
                                              expand_meta((yyvsp[(2) - (4)].val), nil),
                                              expand_meta((yyvsp[(3) - (4)].val), nil), nao); }
                                  else
                                  { val quasi_var = list(var_s, (yyvsp[(2) - (4)].val), (yyvsp[(3) - (4)].val), nao);
                                    val quasi_items = cons(quasi_var, nil);
                                    (yyval.val) = car(expand_quasi(quasi_items, nil)); } }
    break;

  case 205:

/* Line 1806 of yacc.c  */
#line 863 "parser.y"
    { (yyval.val) = nil;
                                  free((yyvsp[(1) - (2)].lexeme));
                                  yybadtok(yychar, lit("variable spec")); }
    break;

  case 206:

/* Line 1806 of yacc.c  */
#line 869 "parser.y"
    { (yyval.val) = list(var_s, (yyvsp[(3) - (5)].val), (yyvsp[(4) - (5)].val), nao);
                                  rl((yyval.val), num(parser->lineno)); }
    break;

  case 207:

/* Line 1806 of yacc.c  */
#line 871 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("variable spec")); }
    break;

  case 208:

/* Line 1806 of yacc.c  */
#line 876 "parser.y"
    { if (parser->quasi_level > 0 && unquotes_occur((yyvsp[(2) - (2)].val), 0))
                                    (yyval.val) = rlc(cons(vector_lit_s,
                                                   cons((yyvsp[(2) - (2)].val), nil)), (yyvsp[(2) - (2)].val));
                                  else
                                    (yyval.val) = rlc(vec_list((yyvsp[(2) - (2)].val)), (yyvsp[(2) - (2)].val)); }
    break;

  case 209:

/* Line 1806 of yacc.c  */
#line 881 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("unassigned/reserved # notation")); }
    break;

  case 210:

/* Line 1806 of yacc.c  */
#line 885 "parser.y"
    { if (parser->quasi_level > 0 && unquotes_occur((yyvsp[(2) - (2)].val), 0))
                                    (yyval.val) = rl(cons(hash_lit_s, (yyvsp[(2) - (2)].val)), num((yyvsp[(1) - (2)].lineno)));
                                  else
                                    (yyval.val) = rl(hash_construct(first((yyvsp[(2) - (2)].val)),
                                                             rest((yyvsp[(2) - (2)].val))),
                                            num((yyvsp[(1) - (2)].lineno))); }
    break;

  case 211:

/* Line 1806 of yacc.c  */
#line 891 "parser.y"
    { (yyval.val) = nil;
                                    yybadtok(yychar, lit("hash literal")); }
    break;

  case 212:

/* Line 1806 of yacc.c  */
#line 895 "parser.y"
    { if (parser->quasi_level > 0 && unquotes_occur((yyvsp[(2) - (2)].val), 0))
                                    (yyval.val) = rl(cons(struct_lit_s, (yyvsp[(2) - (2)].val)),
                                              num((yyvsp[(1) - (2)].lineno)));
                                  else
                                  { val strct = make_struct_lit(first((yyvsp[(2) - (2)].val)),
                                                                rest((yyvsp[(2) - (2)].val)));
                                    (yyval.val) = rl(strct, num((yyvsp[(1) - (2)].lineno))); } }
    break;

  case 213:

/* Line 1806 of yacc.c  */
#line 902 "parser.y"
    { (yyval.val) = nil;
                                    yybadtok(yychar, lit("struct literal")); }
    break;

  case 214:

/* Line 1806 of yacc.c  */
#line 906 "parser.y"
    { if (length((yyvsp[(2) - (2)].val)) != two)
                                    yyerr("range literal needs two elements");
                                  { val range = rcons(first((yyvsp[(2) - (2)].val)), second((yyvsp[(2) - (2)].val)));
                                    (yyval.val) = rl(range, num((yyvsp[(1) - (2)].lineno))); } }
    break;

  case 215:

/* Line 1806 of yacc.c  */
#line 910 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("range literal")); }
    break;

  case 216:

/* Line 1806 of yacc.c  */
#line 914 "parser.y"
    { if (gt(length((yyvsp[(2) - (2)].val)), three))
                                    yyerr("excess elements in tree node");
                                  { val tn = tnode(first((yyvsp[(2) - (2)].val)), second((yyvsp[(2) - (2)].val)),
                                                   third((yyvsp[(2) - (2)].val)));
                                    (yyval.val) = rl(tn, num((yyvsp[(1) - (2)].lineno))); } }
    break;

  case 217:

/* Line 1806 of yacc.c  */
#line 919 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("tree node literal")); }
    break;

  case 218:

/* Line 1806 of yacc.c  */
#line 923 "parser.y"
    { if (parser->quasi_level > 0 && unquotes_occur((yyvsp[(2) - (2)].val), 0))
                                   (yyval.val) = rl(cons(tree_lit_s, (yyvsp[(2) - (2)].val)), num((yyvsp[(1) - (2)].lineno)));
                                 else
                                 { val opts = first((yyvsp[(2) - (2)].val));
                                   val key_fn_name = pop(&opts);
                                   val less_fn_name = pop(&opts);
                                   val equal_fn_name = pop(&opts);
                                   val key_fn = fname_helper(parser, key_fn_name);
                                   val less_fn = fname_helper(parser, less_fn_name);
                                   val equal_fn = fname_helper(parser, equal_fn_name);
                                   val tr = tree(rest((yyvsp[(2) - (2)].val)), key_fn,
                                                 less_fn, equal_fn);
                                     (yyval.val) = rl(tr, num((yyvsp[(1) - (2)].lineno))); } }
    break;

  case 219:

/* Line 1806 of yacc.c  */
#line 936 "parser.y"
    { (yyval.val) = nil;
                                 yybadtok(yychar, lit("tree node literal")); }
    break;

  case 220:

/* Line 1806 of yacc.c  */
#line 940 "parser.y"
    { (yyval.val) = rl((yyvsp[(2) - (3)].val), num((yyvsp[(1) - (3)].lineno))); }
    break;

  case 221:

/* Line 1806 of yacc.c  */
#line 941 "parser.y"
    { val a = car((yyvsp[(3) - (4)].val));
                                  val ur = uref_helper(parser, a);
                                  if (ur == a)
                                    (yyval.val) = (yyvsp[(3) - (4)].val);
                                  else
                                    (yyval.val) = rlc(cons(ur, cdr((yyvsp[(3) - (4)].val))), ur); }
    break;

  case 222:

/* Line 1806 of yacc.c  */
#line 947 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 223:

/* Line 1806 of yacc.c  */
#line 948 "parser.y"
    { (yyval.val) = (yyvsp[(3) - (4)].val); }
    break;

  case 224:

/* Line 1806 of yacc.c  */
#line 949 "parser.y"
    { (yyval.val) = (yyvsp[(3) - (4)].val); }
    break;

  case 225:

/* Line 1806 of yacc.c  */
#line 950 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("expression")); }
    break;

  case 226:

/* Line 1806 of yacc.c  */
#line 954 "parser.y"
    { if (consp((yyvsp[(2) - (2)].val)))
                                    (yyval.val) = rl(cons(expr_s, cons((yyvsp[(2) - (2)].val), nil)), num((yyvsp[(1) - (2)].lineno)));
                                  else
                                    (yyval.val) = rl(cons(var_s, cons((yyvsp[(2) - (2)].val), nil)),
                                            num((yyvsp[(1) - (2)].lineno))); }
    break;

  case 227:

/* Line 1806 of yacc.c  */
#line 959 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("meta expression")); }
    break;

  case 228:

/* Line 1806 of yacc.c  */
#line 963 "parser.y"
    { if (consp((yyvsp[(2) - (2)].val)))
                                    (yyval.val) = rl(cons(expr_s, cons((yyvsp[(2) - (2)].val), nil)), num((yyvsp[(1) - (2)].chr)));
                                  else
                                    (yyval.val) = rl(cons(var_s, cons((yyvsp[(2) - (2)].val), nil)),
                                            num((yyvsp[(1) - (2)].chr))); }
    break;

  case 229:

/* Line 1806 of yacc.c  */
#line 968 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("meta expression")); }
    break;

  case 230:

/* Line 1806 of yacc.c  */
#line 972 "parser.y"
    { val a = car((yyvsp[(3) - (4)].val));
                                  val ur = uref_helper(parser, a);
                                  (yyval.val) = rlcp_tree(cons(dwim_s,
                                                      cons(ur, cdr((yyvsp[(3) - (4)].val)))), ur); }
    break;

  case 231:

/* Line 1806 of yacc.c  */
#line 976 "parser.y"
    { (yyval.val) = rl(cons(dwim_s, (yyvsp[(2) - (3)].val)), num((yyvsp[(1) - (3)].lineno))); }
    break;

  case 232:

/* Line 1806 of yacc.c  */
#line 977 "parser.y"
    { (yyval.val) = rl(cons(dwim_s, nil), num((yyvsp[(1) - (2)].lineno))); }
    break;

  case 233:

/* Line 1806 of yacc.c  */
#line 978 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("DWIM expression")); }
    break;

  case 237:

/* Line 1806 of yacc.c  */
#line 987 "parser.y"
    { (yyval.val) = rlc(expand_meta((yyvsp[(1) - (1)].val), nil), (yyvsp[(1) - (1)].val)); }
    break;

  case 238:

/* Line 1806 of yacc.c  */
#line 990 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 239:

/* Line 1806 of yacc.c  */
#line 991 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 240:

/* Line 1806 of yacc.c  */
#line 994 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val)->c.cdr;
                                  (yyvsp[(1) - (1)].val)->c.cdr = nil; }
    break;

  case 241:

/* Line 1806 of yacc.c  */
#line 997 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (3)].val)->c.cdr;
                                  (yyvsp[(1) - (3)].val)->c.cdr = (yyvsp[(3) - (3)].val); }
    break;

  case 242:

/* Line 1806 of yacc.c  */
#line 1001 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil);
                                  rlc((yyval.val), (yyvsp[(1) - (1)].val));
                                  (yyval.val)->c.cdr = (yyval.val); }
    break;

  case 243:

/* Line 1806 of yacc.c  */
#line 1004 "parser.y"
    { parser->ignore = 1; }
    break;

  case 244:

/* Line 1806 of yacc.c  */
#line 1005 "parser.y"
    { parser->ignore = 0;
                                  (yyval.val) = cons(nil, nil);
                                  (yyval.val)->c.cdr = (yyval.val); }
    break;

  case 245:

/* Line 1806 of yacc.c  */
#line 1008 "parser.y"
    { parser->ignore = 1; }
    break;

  case 246:

/* Line 1806 of yacc.c  */
#line 1009 "parser.y"
    { parser->ignore = 0;
                                  (yyval.val) = cons(nil, nil);
                                  (yyval.val)->c.cdr = (yyval.val); }
    break;

  case 247:

/* Line 1806 of yacc.c  */
#line 1012 "parser.y"
    { parser->ignore = 1; }
    break;

  case 248:

/* Line 1806 of yacc.c  */
#line 1013 "parser.y"
    { parser->ignore = 0;
                                  (yyval.val) = (yyvsp[(1) - (4)].val); }
    break;

  case 249:

/* Line 1806 of yacc.c  */
#line 1015 "parser.y"
    { parser->ignore = 1; }
    break;

  case 250:

/* Line 1806 of yacc.c  */
#line 1016 "parser.y"
    { parser->ignore = 0;
                                  (yyval.val) = (yyvsp[(1) - (5)].val); }
    break;

  case 251:

/* Line 1806 of yacc.c  */
#line 1018 "parser.y"
    { uses_or2;
                                  (yyval.val) = rlc(cons((yyvsp[(2) - (2)].val), (yyvsp[(1) - (2)].val)->c.cdr), or2((yyvsp[(2) - (2)].val), (yyvsp[(1) - (2)].val)->c.cdr));
                                  (yyvsp[(1) - (2)].val)->c.cdr = (yyval.val); }
    break;

  case 252:

/* Line 1806 of yacc.c  */
#line 1021 "parser.y"
    { (yyval.val) = lastcons(rl((yyvsp[(2) - (2)].val), num((yyvsp[(1) - (2)].lineno))));
                                  (yyval.val)->c.cdr = (yyvsp[(2) - (2)].val); }
    break;

  case 253:

/* Line 1806 of yacc.c  */
#line 1024 "parser.y"
    { (yyval.val) = lastcons(rl((yyvsp[(3) - (3)].val), num((yyvsp[(2) - (3)].lineno))));
                                  (yyval.val)->c.cdr = (yyvsp[(1) - (3)].val)->c.cdr;
                                  (yyvsp[(1) - (3)].val)->c.cdr = (yyvsp[(3) - (3)].val); }
    break;

  case 254:

/* Line 1806 of yacc.c  */
#line 1027 "parser.y"
    { (yyval.val) = lastcons(rl((yyvsp[(2) - (2)].val), num((yyvsp[(1) - (2)].lineno))));
                                  (yyval.val)->c.cdr = (yyvsp[(2) - (2)].val); }
    break;

  case 255:

/* Line 1806 of yacc.c  */
#line 1030 "parser.y"
    { (yyval.val) = lastcons(rl((yyvsp[(3) - (3)].val), num((yyvsp[(2) - (3)].lineno))));
                                  (yyval.val)->c.cdr = (yyvsp[(1) - (3)].val)->c.cdr;
                                  (yyvsp[(1) - (3)].val)->c.cdr = (yyvsp[(3) - (3)].val); }
    break;

  case 256:

/* Line 1806 of yacc.c  */
#line 1035 "parser.y"
    { (yyval.val) = ifnign(symhlpr((yyvsp[(1) - (1)].lexeme), t)); }
    break;

  case 257:

/* Line 1806 of yacc.c  */
#line 1036 "parser.y"
    { (yyval.val) = cons(var_s, cons((yyvsp[(1) - (1)].val), nil));
                                  rl((yyval.val), num(parser->lineno)); }
    break;

  case 258:

/* Line 1806 of yacc.c  */
#line 1038 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 259:

/* Line 1806 of yacc.c  */
#line 1039 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 260:

/* Line 1806 of yacc.c  */
#line 1040 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 261:

/* Line 1806 of yacc.c  */
#line 1041 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 262:

/* Line 1806 of yacc.c  */
#line 1042 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 263:

/* Line 1806 of yacc.c  */
#line 1043 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 264:

/* Line 1806 of yacc.c  */
#line 1044 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 265:

/* Line 1806 of yacc.c  */
#line 1045 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 266:

/* Line 1806 of yacc.c  */
#line 1046 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 267:

/* Line 1806 of yacc.c  */
#line 1047 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 268:

/* Line 1806 of yacc.c  */
#line 1048 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 269:

/* Line 1806 of yacc.c  */
#line 1049 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 270:

/* Line 1806 of yacc.c  */
#line 1050 "parser.y"
    { (yyval.val) = rl((yyvsp[(2) - (2)].val), num((yyvsp[(1) - (2)].lineno))); }
    break;

  case 271:

/* Line 1806 of yacc.c  */
#line 1051 "parser.y"
    { (yyval.val) = rl(cons(quasilist_s, (yyvsp[(2) - (2)].val)), num((yyvsp[(1) - (2)].lineno))); }
    break;

  case 272:

/* Line 1806 of yacc.c  */
#line 1052 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 273:

/* Line 1806 of yacc.c  */
#line 1053 "parser.y"
    { (yyval.val) = rl(rlc(list(quote_s, (yyvsp[(2) - (2)].val), nao), (yyvsp[(2) - (2)].val)),
                                          num(parser->lineno)); }
    break;

  case 274:

/* Line 1806 of yacc.c  */
#line 1055 "parser.y"
    { parser->quasi_level++; }
    break;

  case 275:

/* Line 1806 of yacc.c  */
#line 1056 "parser.y"
    { parser->quasi_level--;
                                  (yyval.val) = rl(rlc(list(sys_qquote_s, (yyvsp[(3) - (3)].val), nao), (yyvsp[(3) - (3)].val)),
                                          num(parser->lineno)); }
    break;

  case 276:

/* Line 1806 of yacc.c  */
#line 1059 "parser.y"
    { parser->quasi_level--; }
    break;

  case 277:

/* Line 1806 of yacc.c  */
#line 1060 "parser.y"
    { parser->quasi_level++;
                                  (yyval.val) = rl(rlc(list(sys_unquote_s, (yyvsp[(3) - (3)].val), nao), (yyvsp[(3) - (3)].val)),
                                          num(parser->lineno)); }
    break;

  case 278:

/* Line 1806 of yacc.c  */
#line 1063 "parser.y"
    { parser->quasi_level--; }
    break;

  case 279:

/* Line 1806 of yacc.c  */
#line 1064 "parser.y"
    { parser->quasi_level++;
                                  (yyval.val) = rl(rlc(list(sys_splice_s, (yyvsp[(3) - (3)].val), nao), (yyvsp[(3) - (3)].val)),
                                          num(parser->lineno)); }
    break;

  case 280:

/* Line 1806 of yacc.c  */
#line 1067 "parser.y"
    { parser_circ_def(parser, (yyvsp[(1) - (1)].val), unique_s); }
    break;

  case 281:

/* Line 1806 of yacc.c  */
#line 1068 "parser.y"
    { parser_circ_def(parser, (yyvsp[(1) - (3)].val), (yyvsp[(3) - (3)].val));
                                  (yyval.val) = (yyvsp[(3) - (3)].val); }
    break;

  case 282:

/* Line 1806 of yacc.c  */
#line 1070 "parser.y"
    { (yyval.val) = parser_circ_ref(parser, (yyvsp[(1) - (1)].val)); }
    break;

  case 283:

/* Line 1806 of yacc.c  */
#line 1073 "parser.y"
    { (yyval.val) = uref_helper(parser, (yyvsp[(2) - (2)].val)); }
    break;

  case 284:

/* Line 1806 of yacc.c  */
#line 1074 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 285:

/* Line 1806 of yacc.c  */
#line 1076 "parser.y"
    { (yyval.val) = ifnign(symhlpr((yyvsp[(1) - (1)].lexeme), t)); }
    break;

  case 286:

/* Line 1806 of yacc.c  */
#line 1077 "parser.y"
    { (yyval.val) = cons(var_s, cons((yyvsp[(1) - (1)].val), nil));
                                  rl((yyval.val), num(parser->lineno)); }
    break;

  case 287:

/* Line 1806 of yacc.c  */
#line 1079 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 288:

/* Line 1806 of yacc.c  */
#line 1080 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 289:

/* Line 1806 of yacc.c  */
#line 1081 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 290:

/* Line 1806 of yacc.c  */
#line 1082 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 291:

/* Line 1806 of yacc.c  */
#line 1083 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 292:

/* Line 1806 of yacc.c  */
#line 1084 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 293:

/* Line 1806 of yacc.c  */
#line 1085 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 294:

/* Line 1806 of yacc.c  */
#line 1086 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 295:

/* Line 1806 of yacc.c  */
#line 1087 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 296:

/* Line 1806 of yacc.c  */
#line 1088 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 297:

/* Line 1806 of yacc.c  */
#line 1089 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 298:

/* Line 1806 of yacc.c  */
#line 1090 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 299:

/* Line 1806 of yacc.c  */
#line 1091 "parser.y"
    { (yyval.val) = rl((yyvsp[(2) - (2)].val), num((yyvsp[(1) - (2)].lineno))); }
    break;

  case 300:

/* Line 1806 of yacc.c  */
#line 1092 "parser.y"
    { (yyval.val) = rl(cons(quasilist_s, (yyvsp[(2) - (2)].val)), num((yyvsp[(1) - (2)].lineno))); }
    break;

  case 301:

/* Line 1806 of yacc.c  */
#line 1093 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 302:

/* Line 1806 of yacc.c  */
#line 1094 "parser.y"
    { (yyval.val) = rl(rlc(list(quote_s, (yyvsp[(2) - (2)].val), nao), (yyvsp[(2) - (2)].val)),
                                          num(parser->lineno)); }
    break;

  case 303:

/* Line 1806 of yacc.c  */
#line 1096 "parser.y"
    { parser->quasi_level++; }
    break;

  case 304:

/* Line 1806 of yacc.c  */
#line 1097 "parser.y"
    { parser->quasi_level--;
                                  (yyval.val) = rl(rlc(list(sys_qquote_s, (yyvsp[(3) - (3)].val), nao), (yyvsp[(3) - (3)].val)),
                                          num(parser->lineno)); }
    break;

  case 305:

/* Line 1806 of yacc.c  */
#line 1100 "parser.y"
    { parser->quasi_level--; }
    break;

  case 306:

/* Line 1806 of yacc.c  */
#line 1101 "parser.y"
    { parser->quasi_level++;
                                  (yyval.val) = rl(rlc(list(sys_unquote_s, (yyvsp[(3) - (3)].val), nao), (yyvsp[(3) - (3)].val)),
                                          num(parser->lineno)); }
    break;

  case 307:

/* Line 1806 of yacc.c  */
#line 1104 "parser.y"
    { parser->quasi_level--; }
    break;

  case 308:

/* Line 1806 of yacc.c  */
#line 1105 "parser.y"
    { parser->quasi_level++;
                                  (yyval.val) = rl(rlc(list(sys_splice_s, (yyvsp[(3) - (3)].val), nao), (yyvsp[(3) - (3)].val)),
                                          num(parser->lineno)); }
    break;

  case 309:

/* Line 1806 of yacc.c  */
#line 1108 "parser.y"
    { uses_or2;
                                  (yyval.val) = rlc(list(rcons_s, (yyvsp[(1) - (3)].val), (yyvsp[(3) - (3)].val), nao),
                                            or2((yyvsp[(1) - (3)].val), (yyvsp[(3) - (3)].val))); }
    break;

  case 310:

/* Line 1806 of yacc.c  */
#line 1112 "parser.y"
    { uses_or2;
                                  (yyval.val) = rlc(list(rcons_s, (yyvsp[(1) - (4)].val),
                                                          uref_helper(parser, (yyvsp[(4) - (4)].val)),
                                                          nao),
                                            or2((yyvsp[(1) - (4)].val), (yyvsp[(4) - (4)].val))); }
    break;

  case 311:

/* Line 1806 of yacc.c  */
#line 1118 "parser.y"
    { uses_or2;
                                  (yyval.val) = rlc(list(rcons_s, (yyvsp[(1) - (3)].val), (yyvsp[(3) - (3)].val), nao),
                                            or2((yyvsp[(1) - (3)].val), (yyvsp[(3) - (3)].val))); }
    break;

  case 312:

/* Line 1806 of yacc.c  */
#line 1122 "parser.y"
    { uses_or2;
                                  (yyval.val) = rlc(list(rcons_s, (yyvsp[(1) - (4)].val),
                                                          uref_helper(parser, (yyvsp[(4) - (4)].val)),
                                                          nao),
                                            or2((yyvsp[(1) - (4)].val), (yyvsp[(4) - (4)].val))); }
    break;

  case 313:

/* Line 1806 of yacc.c  */
#line 1127 "parser.y"
    { (yyval.val) = qref_helper(parser, (yyvsp[(1) - (3)].val), (yyvsp[(3) - (3)].val)); }
    break;

  case 314:

/* Line 1806 of yacc.c  */
#line 1128 "parser.y"
    { (yyval.val) = qref_helper(parser,
                                                   cons(t, cons((yyvsp[(1) - (3)].val), nil)),
                                                        (yyvsp[(3) - (3)].val)); }
    break;

  case 315:

/* Line 1806 of yacc.c  */
#line 1131 "parser.y"
    { (yyval.val) = uref_helper(parser, (yyvsp[(2) - (2)].val)); }
    break;

  case 316:

/* Line 1806 of yacc.c  */
#line 1132 "parser.y"
    { (yyval.val) = uoref_helper(parser, (yyvsp[(2) - (2)].val)); }
    break;

  case 317:

/* Line 1806 of yacc.c  */
#line 1133 "parser.y"
    { parser_circ_def(parser, (yyvsp[(1) - (1)].val), unique_s); }
    break;

  case 318:

/* Line 1806 of yacc.c  */
#line 1134 "parser.y"
    { parser_circ_def(parser, (yyvsp[(1) - (3)].val), (yyvsp[(3) - (3)].val));
                                  (yyval.val) = (yyvsp[(3) - (3)].val); }
    break;

  case 319:

/* Line 1806 of yacc.c  */
#line 1136 "parser.y"
    { (yyval.val) = parser_circ_ref(parser, (yyvsp[(1) - (1)].val)); }
    break;

  case 320:

/* Line 1806 of yacc.c  */
#line 1139 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 321:

/* Line 1806 of yacc.c  */
#line 1140 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 322:

/* Line 1806 of yacc.c  */
#line 1143 "parser.y"
    { (yyval.val) = uref_helper(parser, (yyvsp[(2) - (2)].val)); }
    break;

  case 323:

/* Line 1806 of yacc.c  */
#line 1144 "parser.y"
    { (yyval.val) = uoref_helper(parser, (yyvsp[(2) - (2)].val)); }
    break;

  case 324:

/* Line 1806 of yacc.c  */
#line 1145 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 325:

/* Line 1806 of yacc.c  */
#line 1148 "parser.y"
    { (yyval.val) = regex_compile((yyvsp[(2) - (3)].val), nil);
                                  end_of_regex(scnr);
                                  rl((yyval.val), num(parser->lineno)); }
    break;

  case 326:

/* Line 1806 of yacc.c  */
#line 1151 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("regex"));
                                  end_of_regex(scnr); }
    break;

  case 327:

/* Line 1806 of yacc.c  */
#line 1157 "parser.y"
    { (yyval.val) = regex_compile((yyvsp[(2) - (3)].val), nil);
                                  end_of_regex(scnr);
                                  rl((yyval.val), num(parser->lineno)); }
    break;

  case 328:

/* Line 1806 of yacc.c  */
#line 1161 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("regex"));
                                  end_of_regex(scnr); }
    break;

  case 329:

/* Line 1806 of yacc.c  */
#line 1166 "parser.y"
    { (yyval.val) = if3(cdr((yyvsp[(1) - (1)].val)),
                                                   cons(compound_s, (yyvsp[(1) - (1)].val)),
                                                   car((yyvsp[(1) - (1)].val))); }
    break;

  case 330:

/* Line 1806 of yacc.c  */
#line 1169 "parser.y"
    { (yyval.val) = list(or_s, (yyvsp[(1) - (3)].val), (yyvsp[(3) - (3)].val), nao); }
    break;

  case 331:

/* Line 1806 of yacc.c  */
#line 1170 "parser.y"
    { (yyval.val) = list(and_s, (yyvsp[(1) - (3)].val), (yyvsp[(3) - (3)].val), nao); }
    break;

  case 332:

/* Line 1806 of yacc.c  */
#line 1171 "parser.y"
    { (yyval.val) = list(compl_s, (yyvsp[(2) - (2)].val), nao); }
    break;

  case 333:

/* Line 1806 of yacc.c  */
#line 1172 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 334:

/* Line 1806 of yacc.c  */
#line 1175 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); }
    break;

  case 335:

/* Line 1806 of yacc.c  */
#line 1176 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (2)].val), (yyvsp[(2) - (2)].val)); }
    break;

  case 336:

/* Line 1806 of yacc.c  */
#line 1177 "parser.y"
    { (yyval.val) = list((yyvsp[(1) - (3)].val), list(compl_s, (yyvsp[(3) - (3)].val), nao), nao); }
    break;

  case 337:

/* Line 1806 of yacc.c  */
#line 1180 "parser.y"
    { (yyval.val) = list(zeroplus_s, (yyvsp[(1) - (2)].val), nao); }
    break;

  case 338:

/* Line 1806 of yacc.c  */
#line 1181 "parser.y"
    { (yyval.val) = list(oneplus_s, (yyvsp[(1) - (2)].val), nao); }
    break;

  case 339:

/* Line 1806 of yacc.c  */
#line 1182 "parser.y"
    { (yyval.val) = list(optional_s, (yyvsp[(1) - (2)].val), nao); }
    break;

  case 340:

/* Line 1806 of yacc.c  */
#line 1183 "parser.y"
    { (yyval.val) = list(nongreedy_s, (yyvsp[(1) - (3)].val), (yyvsp[(3) - (3)].val), nao); }
    break;

  case 341:

/* Line 1806 of yacc.c  */
#line 1184 "parser.y"
    { if (first((yyvsp[(2) - (3)].val)) == chr('^'))
                                  { if (rest((yyvsp[(2) - (3)].val)))
                                      (yyval.val) = cons(cset_s, rest((yyvsp[(2) - (3)].val)));
                                    else
                                      (yyval.val) = wild_s; }
                                  else
                                    (yyval.val) = cons(set_s, (yyvsp[(2) - (3)].val)); }
    break;

  case 342:

/* Line 1806 of yacc.c  */
#line 1191 "parser.y"
    { (yyval.val) = cons(set_s, nil); }
    break;

  case 343:

/* Line 1806 of yacc.c  */
#line 1192 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("regex character class")); }
    break;

  case 344:

/* Line 1806 of yacc.c  */
#line 1194 "parser.y"
    { (yyval.val) = wild_s; }
    break;

  case 345:

/* Line 1806 of yacc.c  */
#line 1195 "parser.y"
    { (yyval.val) = chr(']'); }
    break;

  case 346:

/* Line 1806 of yacc.c  */
#line 1196 "parser.y"
    { (yyval.val) = chr('-'); }
    break;

  case 347:

/* Line 1806 of yacc.c  */
#line 1197 "parser.y"
    { (yyval.val) = chr((yyvsp[(1) - (1)].chr)); }
    break;

  case 348:

/* Line 1806 of yacc.c  */
#line 1198 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 349:

/* Line 1806 of yacc.c  */
#line 1199 "parser.y"
    { (yyval.val) = list(compound_s, string_own((yyvsp[(1) - (1)].lexeme)), nao); }
    break;

  case 350:

/* Line 1806 of yacc.c  */
#line 1200 "parser.y"
    { (yyval.val) = (yyvsp[(2) - (3)].val); }
    break;

  case 351:

/* Line 1806 of yacc.c  */
#line 1201 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("regex subexpression")); }
    break;

  case 352:

/* Line 1806 of yacc.c  */
#line 1205 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil); }
    break;

  case 353:

/* Line 1806 of yacc.c  */
#line 1206 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (2)].val), (yyvsp[(2) - (2)].val)); }
    break;

  case 354:

/* Line 1806 of yacc.c  */
#line 1209 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 355:

/* Line 1806 of yacc.c  */
#line 1210 "parser.y"
    { (yyval.val) = chr((yyvsp[(1) - (1)].chr)); }
    break;

  case 356:

/* Line 1806 of yacc.c  */
#line 1211 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 357:

/* Line 1806 of yacc.c  */
#line 1214 "parser.y"
    { (yyval.val) = cons(chr((yyvsp[(1) - (3)].chr)), chr((yyvsp[(3) - (3)].chr))); }
    break;

  case 358:

/* Line 1806 of yacc.c  */
#line 1216 "parser.y"
    { (yyval.chr) = '?'; }
    break;

  case 359:

/* Line 1806 of yacc.c  */
#line 1217 "parser.y"
    { (yyval.chr) = '.'; }
    break;

  case 360:

/* Line 1806 of yacc.c  */
#line 1218 "parser.y"
    { (yyval.chr) = '*'; }
    break;

  case 361:

/* Line 1806 of yacc.c  */
#line 1219 "parser.y"
    { (yyval.chr) = '+'; }
    break;

  case 362:

/* Line 1806 of yacc.c  */
#line 1220 "parser.y"
    { (yyval.chr) = '('; }
    break;

  case 363:

/* Line 1806 of yacc.c  */
#line 1221 "parser.y"
    { (yyval.chr) = ')'; }
    break;

  case 364:

/* Line 1806 of yacc.c  */
#line 1222 "parser.y"
    { (yyval.chr) = '|'; }
    break;

  case 365:

/* Line 1806 of yacc.c  */
#line 1223 "parser.y"
    { (yyval.chr) = '~'; }
    break;

  case 366:

/* Line 1806 of yacc.c  */
#line 1224 "parser.y"
    { (yyval.chr) = '&'; }
    break;

  case 367:

/* Line 1806 of yacc.c  */
#line 1225 "parser.y"
    { (yyval.chr) = '%'; }
    break;

  case 368:

/* Line 1806 of yacc.c  */
#line 1226 "parser.y"
    { (yyval.chr) = '/'; }
    break;

  case 369:

/* Line 1806 of yacc.c  */
#line 1227 "parser.y"
    { (yyval.chr) = (yyvsp[(1) - (1)].chr); }
    break;

  case 370:

/* Line 1806 of yacc.c  */
#line 1230 "parser.y"
    { switch ((yyvsp[(1) - (1)].chr))
                                  { case 's':
                                      (yyval.val) = space_k; break;
                                    case 'S':
                                      (yyval.val) = cspace_k; break;
                                    case 'd':
                                      (yyval.val) = digit_k; break;
                                    case 'D':
                                      (yyval.val) = cdigit_k; break;
                                    case 'w':
                                      (yyval.val) = word_char_k; break;
                                    case 'W':
                                      (yyval.val) = cword_char_k; break; }}
    break;

  case 372:

/* Line 1806 of yacc.c  */
#line 1245 "parser.y"
    { yyerr("newline expected after directive");
                          yyerrok; }
    break;

  case 373:

/* Line 1806 of yacc.c  */
#line 1249 "parser.y"
    { (yyval.val) = null_string; }
    break;

  case 374:

/* Line 1806 of yacc.c  */
#line 1250 "parser.y"
    { (yyval.val) = (yyvsp[(2) - (3)].val);
                                  rl((yyval.val), num(parser->lineno)); }
    break;

  case 375:

/* Line 1806 of yacc.c  */
#line 1252 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("string literal")); }
    break;

  case 376:

/* Line 1806 of yacc.c  */
#line 1256 "parser.y"
    { wchar_t ch;
                                  val str = string_own((yyvsp[(2) - (2)].lexeme));
                                  const wchar_t *cstr = c_str(str);

                                  if (cstr[1] == 0)
                                  { ch = cstr[0]; }
                                  else
                                  { ch = char_from_name(cstr);
                                    if (ch == L'!')
                                    { yyerrorf(scnr, lit("unknown character name: ~a"),
                                               str, nao); }}
                                  end_of_char(scnr);
                                  (yyval.val) = chr(ch); }
    break;

  case 377:

/* Line 1806 of yacc.c  */
#line 1269 "parser.y"
    { (yyval.val) = chr((yyvsp[(2) - (2)].chr));
                                  end_of_char(scnr); }
    break;

  case 378:

/* Line 1806 of yacc.c  */
#line 1271 "parser.y"
    { free((yyvsp[(2) - (2)].lexeme));
                                   yyerrorf(scnr,
                                            lit("invalid UTF-8 used as character name"),
                                            nao); }
    break;

  case 379:

/* Line 1806 of yacc.c  */
#line 1275 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar,
                                             lit("character literal")); }
    break;

  case 380:

/* Line 1806 of yacc.c  */
#line 1280 "parser.y"
    { (yyval.val) = null_string; }
    break;

  case 381:

/* Line 1806 of yacc.c  */
#line 1281 "parser.y"
    { (yyval.val) = cons(quasi_s, (yyvsp[(2) - (3)].val));
                                  rlc((yyval.val), (yyvsp[(2) - (3)].val));
                                  rl((yyval.val), num(parser->lineno)); }
    break;

  case 382:

/* Line 1806 of yacc.c  */
#line 1284 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("quasistring")); }
    break;

  case 383:

/* Line 1806 of yacc.c  */
#line 1288 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (1)].val), nil);
                                          rl((yyval.val), num(parser->lineno)); }
    break;

  case 384:

/* Line 1806 of yacc.c  */
#line 1290 "parser.y"
    { (yyval.val) = cons((yyvsp[(1) - (2)].val), (yyvsp[(2) - (2)].val));
                                          rl((yyval.val), num(parser->lineno)); }
    break;

  case 385:

/* Line 1806 of yacc.c  */
#line 1294 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 386:

/* Line 1806 of yacc.c  */
#line 1295 "parser.y"
    { (yyval.val) = (yyvsp[(1) - (1)].val); }
    break;

  case 387:

/* Line 1806 of yacc.c  */
#line 1296 "parser.y"
    { (yyval.val) = cons(var_s, cons((yyvsp[(1) - (1)].val), nil));
                                  rl((yyval.val), num(parser->lineno)); }
    break;

  case 388:

/* Line 1806 of yacc.c  */
#line 1298 "parser.y"
    { if (integerp((yyvsp[(2) - (2)].val)) || symbolp((yyvsp[(2) - (2)].val)))
                                    (yyval.val) = rlcp_tree(cons(var_s, cons((yyvsp[(2) - (2)].val), nil)),
                                                   (yyvsp[(2) - (2)].val));
                                  else
                                    (yyval.val) = (yyvsp[(2) - (2)].val); }
    break;

  case 389:

/* Line 1806 of yacc.c  */
#line 1305 "parser.y"
    { (yyval.val) = mkstring(one, chr((yyvsp[(1) - (1)].chr))); }
    break;

  case 390:

/* Line 1806 of yacc.c  */
#line 1306 "parser.y"
    { val ch = mkstring(one, chr((yyvsp[(1) - (2)].chr)));
                                  (yyval.val) = string_extend(ch, (yyvsp[(2) - (2)].val)); }
    break;

  case 391:

/* Line 1806 of yacc.c  */
#line 1308 "parser.y"
    { (yyval.val) = string_own((yyvsp[(1) - (1)].lexeme)); }
    break;

  case 392:

/* Line 1806 of yacc.c  */
#line 1309 "parser.y"
    { (yyval.val) = string_extend(string_own((yyvsp[(1) - (2)].lexeme)), (yyvsp[(2) - (2)].val)); }
    break;

  case 393:

/* Line 1806 of yacc.c  */
#line 1312 "parser.y"
    { (yyval.val) = mkstring(one, chr((yyvsp[(1) - (1)].chr))); }
    break;

  case 394:

/* Line 1806 of yacc.c  */
#line 1313 "parser.y"
    { (yyval.val) = string_extend((yyvsp[(1) - (2)].val), chr((yyvsp[(2) - (2)].chr))); }
    break;

  case 395:

/* Line 1806 of yacc.c  */
#line 1314 "parser.y"
    { (yyval.val) = string_own((yyvsp[(1) - (1)].lexeme)); }
    break;

  case 396:

/* Line 1806 of yacc.c  */
#line 1315 "parser.y"
    { (yyval.val) = string_extend((yyvsp[(1) - (2)].val), string_own((yyvsp[(2) - (2)].lexeme))); }
    break;

  case 397:

/* Line 1806 of yacc.c  */
#line 1318 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 398:

/* Line 1806 of yacc.c  */
#line 1319 "parser.y"
    { (yyval.val) = (yyvsp[(2) - (2)].val); }
    break;

  case 399:

/* Line 1806 of yacc.c  */
#line 1320 "parser.y"
    { val word = (yyvsp[(1) - (2)].val);
                                  (yyval.val) = rlc(cons(word, (yyvsp[(2) - (2)].val)), (yyvsp[(1) - (2)].val)); }
    break;

  case 400:

/* Line 1806 of yacc.c  */
#line 1322 "parser.y"
    { (yyval.val) = nil;
                                  yybadtok(yychar, lit("word list")); }
    break;

  case 401:

/* Line 1806 of yacc.c  */
#line 1326 "parser.y"
    { (yyval.val) = nil; }
    break;

  case 402:

/* Line 1806 of yacc.c  */
#line 1327 "parser.y"
    { (yyval.val) = (yyvsp[(2) - (2)].val); }
    break;

  case 403:

/* Line 1806 of yacc.c  */
#line 1328 "parser.y"
    { val qword = cons(quasi_s, (yyvsp[(1) - (2)].val));
                                   (yyval.val) = rlc(cons(qword, nil), (yyvsp[(1) - (2)].val)); }
    break;

  case 404:

/* Line 1806 of yacc.c  */
#line 1332 "parser.y"
    { val qword = cons(quasi_s, (yyvsp[(1) - (3)].val));
                                   (yyval.val) = rlc(cons(qword, (yyvsp[(3) - (3)].val)), (yyvsp[(1) - (3)].val)); }
    break;

  case 405:

/* Line 1806 of yacc.c  */
#line 1336 "parser.y"
    { (yyval.val) = make_buf(zero, nil, nil);
                                           end_of_buflit(scnr); }
    break;

  case 406:

/* Line 1806 of yacc.c  */
#line 1338 "parser.y"
    { end_of_buflit(scnr);
                                           buf_trim((yyvsp[(2) - (3)].val));
                                           (yyval.val) = (yyvsp[(2) - (3)].val); }
    break;

  case 407:

/* Line 1806 of yacc.c  */
#line 1341 "parser.y"
    { yyerr("unterminated buffer literal");
                                           end_of_buflit(scnr);
                                           yyerrok; }
    break;

  case 408:

/* Line 1806 of yacc.c  */
#line 1346 "parser.y"
    { buf_put_u8((yyvsp[(1) - (2)].val), length_buf((yyval.val)), (yyvsp[(2) - (2)].val));
                                          (yyval.val) = (yyvsp[(1) - (2)].val); }
    break;

  case 409:

/* Line 1806 of yacc.c  */
#line 1348 "parser.y"
    { (yyval.val) = make_buf(zero, nil, num_fast(512));
                                          buf_put_u8((yyval.val), zero, (yyvsp[(1) - (1)].val)); }
    break;

  case 410:

/* Line 1806 of yacc.c  */
#line 1352 "parser.y"
    { (yyval.val) = num((yyvsp[(1) - (2)].chr) << 4 | (yyvsp[(2) - (2)].chr)); }
    break;

  case 411:

/* Line 1806 of yacc.c  */
#line 1353 "parser.y"
    { (yyval.val) = zero;
                                          yyerr("unpaired digit in buffer literal");
                                          yyerrok; }
    break;

  case 412:

/* Line 1806 of yacc.c  */
#line 1360 "parser.y"
    { (yyval.val) = mkexp(all_s, nil, num(parser->lineno)); }
    break;

  case 413:

/* Line 1806 of yacc.c  */
#line 1361 "parser.y"
    { (yyval.val) = mkexp(some_s, nil, num(parser->lineno)); }
    break;

  case 414:

/* Line 1806 of yacc.c  */
#line 1362 "parser.y"
    { (yyval.val) = mkexp(none_s, nil, num(parser->lineno)); }
    break;

  case 415:

/* Line 1806 of yacc.c  */
#line 1363 "parser.y"
    { (yyval.val) = mkexp(maybe_s, nil, num(parser->lineno)); }
    break;

  case 416:

/* Line 1806 of yacc.c  */
#line 1364 "parser.y"
    { (yyval.val) = mkexp(cases_s, nil, num(parser->lineno)); }
    break;

  case 417:

/* Line 1806 of yacc.c  */
#line 1365 "parser.y"
    { (yyval.val) = mkexp(and_s, nil, num(parser->lineno)); }
    break;

  case 418:

/* Line 1806 of yacc.c  */
#line 1366 "parser.y"
    { (yyval.val) = mkexp(or_s, nil, num(parser->lineno)); }
    break;

  case 419:

/* Line 1806 of yacc.c  */
#line 1367 "parser.y"
    { (yyval.val) = mkexp(try_s, nil, num(parser->lineno)); }
    break;

  case 420:

/* Line 1806 of yacc.c  */
#line 1368 "parser.y"
    { (yyval.val) = mkexp(finally_s, nil, num(parser->lineno)); }
    break;

  case 421:

/* Line 1806 of yacc.c  */
#line 1370 "parser.y"
    { (yyval.val) = mkexp(block_s, (yyvsp[(2) - (3)].val), nil); }
    break;

  case 422:

/* Line 1806 of yacc.c  */
#line 1372 "parser.y"
    { (yyval.val) = mkexp(choose_s, (yyvsp[(2) - (3)].val), nil); }
    break;

  case 423:

/* Line 1806 of yacc.c  */
#line 1374 "parser.y"
    { (yyval.val) = mkexp(collect_s, (yyvsp[(2) - (3)].val), nil); }
    break;

  case 424:

/* Line 1806 of yacc.c  */
#line 1376 "parser.y"
    { (yyval.val) = mkexp(coll_s, (yyvsp[(2) - (3)].val), nil); }
    break;

  case 425:

/* Line 1806 of yacc.c  */
#line 1378 "parser.y"
    { (yyval.val) = mkexp(gather_s, (yyvsp[(2) - (3)].val), nil); }
    break;

  case 426:

/* Line 1806 of yacc.c  */
#line 1380 "parser.y"
    { (yyval.val) = mkexp(define_s, (yyvsp[(2) - (3)].val), nil); }
    break;

  case 427:

/* Line 1806 of yacc.c  */
#line 1382 "parser.y"
    { (yyval.val) = mkexp(catch_s, (yyvsp[(2) - (3)].val), nil); }
    break;

  case 428:

/* Line 1806 of yacc.c  */
#line 1384 "parser.y"
    { (yyval.val) = mkexp(if_s,
                                                         cons((yyvsp[(2) - (5)].val),
                                                              cons((yyvsp[(3) - (5)].val), (yyvsp[(4) - (5)].val))),
                                                         nil); }
    break;

  case 429:

/* Line 1806 of yacc.c  */
#line 1389 "parser.y"
    { yyerr("@(output) doesn't nest"); }
    break;



/* Line 1806 of yacc.c  */
#line 6569 "y.tab.c"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (scnr, parser, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (scnr, parser, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, scnr, parser);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, scnr, parser);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (scnr, parser, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, scnr, parser);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, scnr, parser);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 2067 of yacc.c  */
#line 1393 "parser.y"


const int have_yydebug = YYDEBUG;

int yylex(YYSTYPE *, yyscan_t scanner);

void yydebug_onoff(int val)
{
#if YYDEBUG
  yydebug = val;
#else
  (void) val;
#endif
}

static void set_syntax_tree(parser_t *parser, val tree)
{
  if (tree == nao)
    parser->syntax_tree = tree;
  else
    set(mkloc(parser->syntax_tree, parser->parser), tree);
}

static val sym_helper(parser_t *parser, wchar_t *lexeme, val meta_allowed)
{
  scanner_t *scnr = parser->scanner;
  int leading_at = *lexeme == L'@';
  wchar_t *tokfree = lexeme;
  wchar_t *colon = wcschr(lexeme, L':');
  val sym;

  if (leading_at) {
    if (!meta_allowed) {
      val tok = string_own(lexeme);
      yyerrorf(scnr, lit("~a: meta variable not allowed in this context"), tok, nao);
      return nil;
    }
    lexeme++;
  }

  if (colon != 0)
    *colon = 0;

  if (colon == lexeme) {
    val sym_name = string(colon + 1);
    scrub_scanner(parser->scanner, SYMTOK, tokfree);
    free(tokfree);
    sym = intern(sym_name, keyword_package);
  } else if (colon != 0) {
    val pkg_name = string(lexeme);
    val sym_name = string(colon + 1);
    scrub_scanner(parser->scanner, SYMTOK, tokfree);
    free(tokfree);
    if (equal(pkg_name, lit("#"))) {
      sym = make_sym(sym_name);
    } else {
      val package = find_package(pkg_name);
      if (!package) {
        yyerrorf(scnr, lit("~a:~a: package ~a not found"),
                 pkg_name, sym_name, pkg_name, nao);
        return nil;
      }
      sym = intern(sym_name, package);
    }
  } else {
    val sym_name = string(lexeme);
    scrub_scanner(parser->scanner, SYMTOK, tokfree);
    free(tokfree);
    sym = intern_fallback(sym_name, cur_package);
  }

  return leading_at ? rl(list(var_s, sym, nao), num(parser->lineno)) : sym;
}

static val expand_repeat_rep_args(val args)
{
  list_collect_decl (out, ptail);
  val exp_pair = nil, exp_pairs = nil;

  for (; args; args = cdr(args)) {
    val arg = car(args);

    if (consp(arg)) {
      if (exp_pairs) {
        list_collect_decl (iout, iptail);
        for (; arg; arg = cdr(arg)) {
          val iarg = car(arg);
          if (consp(iarg)) {
            val sym = first(iarg);
            iptail = list_collect(iptail, list(sym,
                                               expand(second(iarg), nil),
                                               nao));
            match_reg_var(sym);
          } else {
            iptail = list_collect(iptail, iarg);
            match_reg_var(iarg);
          }
        }
        ptail = list_collect(ptail, iout);
      } else if (exp_pair) {
        val sym = first(arg);
        ptail = list_collect(ptail, list(sym,
                                         expand(second(arg), nil),
                                         nao));
        match_reg_var(sym);
      } else {
        ptail = list_collect(ptail, arg);
      }
    } else if (!exp_pair && !exp_pairs) {
      if (arg == counter_k) {
        exp_pair = t;
        ptail = list_collect(ptail, arg);
        continue;
      } else if (arg == vars_k) {
        exp_pairs = t;
        ptail = list_collect(ptail, arg);
        continue;
      }
    } else if (exp_pair) {
      match_reg_var(arg);
    }

    exp_pair = exp_pairs = nil;
    ptail = list_collect(ptail, arg);
  }

  return out;
}

static val extract_vars(val output_spec)
{
  list_collect_decl (vars, tai);

  if (consp(output_spec)) {
    val sym = first(output_spec);
    if (sym == var_s) {
      val expr = second(output_spec);
      val modifiers = third(output_spec);

      if (bindable(expr)) {
        tai = list_collect(tai, expr);
      } else if (opt_compat && opt_compat <= 128) {
        tai = list_collect_nconc(tai, extract_vars(expr));
      } else {
        val frefs = expand_with_free_refs(expr, nil, nil);
        tai = list_collect_nconc(tai, second(frefs));
      }

      for (; modifiers; modifiers = cdr(modifiers)) {
        val mod = car(modifiers);
        if (bindable(mod)) {
          tai = list_collect(tai, mod);
        } else if (consp(mod)) {
          val msym = car(mod);

          if (msym == dwim_s) {
            val arg = second(mod);

            if (bindable(arg)) {
              tai = list_collect(tai, arg);
            } else if (consp(arg) && car(arg) == rcons_s) {
              val f = second(arg);
              val t = third(arg);
              if (bindable(f))
                tai = list_collect(tai, f);
              if (bindable(t))
                tai = list_collect(tai, t);
            }
          }
        }
      }
    } else if (sym == expr_s) {
      val expr = second(output_spec);
      val frefs = expand_with_free_refs(expr, nil, nil);
      tai = list_collect_nconc(tai, second(frefs));
    } else {
      for (; output_spec; output_spec = cdr(output_spec))
        tai = list_collect_nconc(tai, extract_vars(car(output_spec)));
    }
  }

  return vars;
}

static val repeat_rep_helper(val sym, val args, val main, val parts)
{
  uses_or2;
  val exp_args = expand_repeat_rep_args(args);
  val single_parts = nil, single_parts_p = nil;
  val first_parts = nil, first_parts_p = nil;
  val last_parts = nil, last_parts_p = nil;
  val empty_parts = nil, empty_parts_p = nil;
  val mod_parts = nil, mod_parts_p = nil;
  val modlast_parts = nil, modlast_parts_p = nil;
  val occur_vars = nil;
  val iter;

  for (iter = parts; iter != nil; iter = cdr(iter)) {
    val part = car(iter);
    val sym = car(part);
    val clauses = copy_list(cdr(part));

    if (sym == single_s) {
      single_parts = nappend2(single_parts, clauses);
      single_parts_p = t;
    } else if (sym == first_s) {
      first_parts = nappend2(first_parts, clauses);
      first_parts_p = t;
    } else if (sym == last_s) {
      last_parts = nappend2(last_parts, clauses);
      last_parts_p = t;
    } else if (sym == empty_s) {
      empty_parts = nappend2(empty_parts, clauses);
      empty_parts_p = t;
    } else if (sym == mod_s) {
      mod_parts = cons(clauses, mod_parts);
      mod_parts_p = t;
    } else if (sym == modlast_s) {
      modlast_parts = cons(clauses, modlast_parts);
      modlast_parts_p = t;
    } else {
      abort();
    }
  }

  single_parts = or2(single_parts, single_parts_p);
  first_parts = or2(first_parts, first_parts_p);
  last_parts = or2(last_parts, last_parts_p);
  empty_parts = or2(empty_parts, empty_parts_p);
  mod_parts = or2(nreverse(mod_parts), mod_parts_p);
  modlast_parts = or2(nreverse(modlast_parts), modlast_parts_p);

  occur_vars = extract_vars(main);
  occur_vars = nappend2(occur_vars, extract_vars(single_parts));
  occur_vars = nappend2(occur_vars, extract_vars(first_parts));
  occur_vars = nappend2(occur_vars, extract_vars(last_parts));
  occur_vars = nappend2(occur_vars, extract_vars(empty_parts));
  occur_vars = nappend2(occur_vars, extract_vars(mod_parts));
  occur_vars = uniq(occur_vars);

  return list(sym, exp_args, main, single_parts, first_parts,
              last_parts, empty_parts, nreverse(mod_parts),
              nreverse(modlast_parts), occur_vars, nao);
}

static void process_catch_exprs(val exprs)
{
  val params = second(exprs);
  for (; params; params = cdr(params)) {
    val param = first(params);
    if (consp(param))
      match_reg_var(car(param));
    else
      match_reg_var(param);
  }
}

static val define_transform(parser_t *parser, val define_form)
{
  scanner_t *scnr = parser->scanner;
  val sym = first(define_form);
  val args = second(define_form);

  if (define_form == nil)
    return nil;

  assert (sym == define_s);

  if (args == nil) {
    yyerr("define requires arguments");
    return define_form;
  }

  if (!consp(args) || !listp(cdr(args))) {
    yyerr("bad define argument syntax");
    return define_form;
  } else {
    val name = first(args);
    val params = second(args);

    if (!symbolp(name)) {
      yyerr("function name must be a symbol");
      return define_form;
    }

    if (!proper_list_p(params)) {
      yyerr("invalid function parameter list");
      return define_form;
    }

    if (!all_satisfy(params, func_n1(symbolp), nil))
      yyerr("function parameters must be symbols");
  }

  return define_form;
}

static val optimize_text(val text_form)
{
  if (all_satisfy(rest(text_form), func_n1(stringp), nil))
    return cat_str(rest(text_form), lit(""));
  return text_form;
}

static val unquotes_occur(val quoted_form, int level)
{
  uses_or2;

  if (atom(quoted_form)) {
    return nil;
  } else {
    val sym = car(quoted_form);
    if (sym == sys_unquote_s || sym == sys_splice_s)
      return (level == 0) ? t : unquotes_occur(cdr(quoted_form), level - 1);
    if (sym == sys_qquote_s)
      return unquotes_occur(cdr(quoted_form), level + 1);
    return or2(unquotes_occur(sym, level),
               unquotes_occur(cdr(quoted_form), level));
  }
}

val expand_meta(val form, val menv)
{
  val sym;

  if (atom(form))
    return form;

  menv = default_arg(menv, make_env(nil, nil, nil));

  if ((sym = car(form)) == quasi_s) {
    if (opt_compat && opt_compat <= 128) {
      list_collect_decl (out, ptail);

      for (; consp(form); form = cdr(form)) {
        val subform = car(form);
        if (consp(subform) && car(subform) == expr_s)
          ptail = list_collect(ptail, expand_meta(subform, menv));
        else
          ptail = list_collect(ptail, subform);
      }

      ptail = list_collect_nconc(ptail, form);

      return rlcp(out, form);
    }

    return expand(form, nil);
  }

  if ((sym = car(form)) == expr_s) {
    val exp_x = expand(second(form), menv);
    if (!bindable(exp_x))
      return rlcp(cons(sym, cons(exp_x, nil)), form);
    return rlcp(cons(var_s, cons(exp_x, nil)), form);
  }

  if (sym == var_s) {
    val var_x = expand(second(form), menv);
    if (!bindable(var_x))
      return rlcp(cons(expr_s, cons(var_x, nil)), form);
    return rlcp(cons(var_s, cons(var_x, nil)), form);
  }

  {
    list_collect_decl (out, ptail);

    for (; consp(form); form = cdr(form)) {
      loc nptail = list_collect(ptail, expand_meta(car(form), menv));
      rlcp(deref(ptail), form);
      ptail = nptail;
    }

    ptail = list_collect_nconc(ptail, form);

    return out;
  }
}

static val rlviable(val form)
{
  switch (type(form)) {
  case NIL:
  case LIT:
  case CHR:
  case NUM:
  case SYM:
  case BGNUM:
  case FLNUM:
    return nil;
  default:
    return t;
  }
}

val rlset(val form, val info)
{
  if (rlviable(form)) {
    loc place = gethash_l(lit("rlcp"), form_to_ln_hash, form, nulloc);
    if (nilp(deref(place)))
      set(place, info);
  }
  return form;
}

val rlrec(parser_t *parser, val form, val line)
{
  if (parser->rec_source_loc)
    rlset(form, cons(line, parser->name));
  return form;
}

val rlcp_parser(parser_t *parser, val to, val from)
{
  if (parser->rec_source_loc)
    rlset(to, source_loc(from));
  return to;
}

static val rlcp_tree_rec(val to, val from, struct circ_stack *up)
{
  val ret = to;

  while (consp(to)) {
    val a = car(to);
    struct circ_stack rlcs = { up, a };
    rlcp(to, from);
    if (!parser_callgraph_circ_check(up, a))
      break;
    rlcp_tree_rec(a, from, &rlcs);
    to = cdr(to);
    if (!parser_callgraph_circ_check(up, to))
      break;
  }
  return ret;
}


val rlcp_tree(val to, val from)
{
  return rlcp_tree_rec(to, from, 0);
}

static wchar_t char_from_name(const wchar_t *name)
{
  static struct {
    const wchar_t *name;
    const wchar_t ch;
  } map[] = {
    { L"nul", 0 },
    { L"alarm", L'\a' },
    { L"backspace", L'\b' },
    { L"tab", L'\t' },
    { L"linefeed", L'\n' },
    { L"newline", L'\n' },
    { L"vtab", L'\v' },
    { L"page", L'\f' },
    { L"return", L'\r' },
    { L"esc", 27 },
    { L"space", L' ' },
    { L"pnul", 0xDC00 },
    { 0, 0 },
  };
  int i;

  for (i = 0; map[i].name; i++) {
    if (wcscmp(map[i].name, name) == 0)
      return map[i].ch;
  }

  return L'!'; /* code meaning not found */
}

static val make_expr(parser_t *parser, val sym, val rest, val lineno)
{
  val expr = cons(sym, rest);
  val ret = cons(expr_s, cons(expand(expr, nil), nil));

  if (rest) {
    rlc(expr, rest);
    rlc(ret, rest);
  } else {
    rl(expr, lineno);
    rl(ret, lineno);
  }

  return ret;
}

static val check_parse_time_action(val spec_rev)
{
  val line = first(spec_rev);

  if (consp(line)) {
    val elem = first(line);
    if (consp(elem)) {
      val sym = car(elem);
      if (sym == include_s) {
        return nappend2(nreverse(include(line)), rest(spec_rev));
      }
      if (sym == mdo_s) {
        eval_intrinsic(cons(progn_s, cdr(elem)), nil);
        return nil;
      }
      if (sym == in_package_s) {
        eval_intrinsic(elem, nil);
        return nil;
      }
    }
  }
  return spec_rev;
}

static val uref_helper(parser_t *parser, val expr)
{
  if (consp(expr) && car(expr) == qref_s) {
    return rplaca(expr, uref_s);
  } else {
    return rl(rlc(list(uref_s, expr, nao), expr), num(parser->lineno));
  }
}

static val uoref_helper(parser_t *parser, val expr)
{
  val uref = uref_helper(parser, expr);
  rplacd(uref, cons(t, cdr(uref)));
  return uref;
}

static val qref_helper(parser_t *parser, val lexpr, val rexpr)
{
  uses_or2;

  if (consp(rexpr) && car(rexpr) == qref_s) {
    rplacd(rexpr, rlc(cons(lexpr, cdr(rexpr)), lexpr));
    return rl(rexpr, num(parser->lineno));
  } else {
    return rl(rlc(list(qref_s, lexpr, rexpr, nao),
                  or2(lexpr, rexpr)),
                  num(parser->lineno));
  }
}

static val fname_helper(parser_t *parser, val name)
{
  if (!name) {
    return nil;
  } else if (!bindable(name)) {
    yyerrorf(parser->scanner, lit("#T: ~s isn't a function name"),
             name, nao);
  } else if (!memq(name, tree_fun_whitelist)) {
    yyerrorf(parser->scanner, lit("#T: ~s not in *tree-fun-whitelist*"),
             name, nao);
  } else {
    val fbinding = lookup_fun(nil, name);
    if (fbinding)
      return cdr(fbinding);
    yyerrorf(parser->scanner, lit("#T: function named ~s doesn't exist"),
             name, nao);
  }

  return nil;
}

#ifndef YYEOF
#define YYEOF 0
#endif

void yybadtoken(parser_t *parser, int tok, val context)
{
  val problem = nil;
  scanner_t *scnr = parser->scanner;

  switch (tok) {
  case ERRTOK:
    return;
  case SPACE:   problem = lit("space"); break;
  case TEXT:    problem = lit("text"); break;
  case SYMTOK:  problem = lit("symbol-token"); break;
  case METANUM: problem = lit("metanum"); break;
  case ALL:     problem = lit("\"all\""); break;
  case SOME:    problem = lit("\"some\""); break;
  case NONE:    problem = lit("\"none\""); break;
  case MAYBE:   problem = lit("\"maybe\""); break;
  case CASES:   problem = lit("\"cases\""); break;
  case BLOCK:   problem = lit("\"block\""); break;
  case CHOOSE:  problem = lit("\"choose\""); break;
  case GATHER:  problem = lit("\"gather\""); break;
  case AND:     problem = lit("\"and\""); break;
  case OR:      problem = lit("\"or\""); break;
  case END:     problem = lit("\"end\""); break;
  case COLLECT: problem = lit("\"collect\""); break;
  case UNTIL:   problem = lit("\"until\""); break;
  case COLL:    problem = lit("\"coll\""); break;
  case OUTPUT:  problem = lit("\"output\""); break;
  case REPEAT:  problem = lit("\"repeat\""); break;
  case REP:     problem = lit("\"rep\""); break;
  case SINGLE:  problem = lit("\"single\""); break;
  case FIRST:   problem = lit("\"first\""); break;
  case LAST:    problem = lit("\"last\""); break;
  case EMPTY:   problem = lit("\"empty\""); break;
  case MOD:     problem = lit("\"mod\""); break;
  case MODLAST: problem = lit("\"modlast\""); break;
  case DEFINE:  problem = lit("\"define\""); break;
  case TRY:     problem = lit("\"try\""); break;
  case CATCH:   problem = lit("\"catch\""); break;
  case FINALLY: problem = lit("\"finally\""); break;
  case IF:      problem = lit("\"if\""); break;
  case ELIF:    problem = lit("\"elif\""); break;
  case ELSE:    problem = lit("\"else\""); break;
  case NUMBER:  problem = lit("number"); break;
  case REGCHAR: problem = lit("regular expression character"); break;
  case REGTOKEN: problem = lit("regular expression token"); break;
  case LITCHAR: problem = lit("string literal character"); break;
  case SPLICE:  problem = lit("*"); break;
  case CONSDOT:
  case LAMBDOT: problem = lit("consing dot"); break;
  case DOTDOT: problem = lit(".."); break;
  case OLD_DOTDOT:     problem = lit(".."); break;
  case UREFDOT:        problem = lit("referencing dot"); break;
  case OREFDOT:
  case UOREFDOT:       problem = lit("referencing .?"); break;
  case HASH_BACKSLASH: problem = lit("#\\"); break;
  case HASH_SLASH:     problem = lit("#/"); break;
  case HASH_H:         problem = lit("#H"); break;
  case HASH_S:         problem = lit("#S"); break;
  case HASH_R:         problem = lit("#R"); break;
  case HASH_N:         problem = lit("#N"); break;
  case HASH_T:         problem = lit("#T"); break;
  case HASH_SEMI:      problem = lit("#;"); break;
  case HASH_N_EQUALS:  problem = lit("#<n>="); break;
  case HASH_N_HASH:    problem = lit("#<n>#"); break;
  case HASH_B_QUOTE:   problem = lit("#b'"); break;
  case WORDS:   problem = lit("#\""); break;
  case WSPLICE: problem = lit("#*\""); break;
  case QWORDS:         problem = lit("#`"); break;
  case QWSPLICE:       problem = lit("#*`"); break;
  case OLD_AT:         problem = lit("@"); break;
  }

  if (problem != 0)
    if (context)
      yyerrorf(scnr, lit("misplaced ~a in ~a"), problem, context, nao);
    else
      yyerrorf(scnr, lit("unexpected ~a"), problem, nao);
  else
    if (context) /* Byacc sets yychar to 0 */
      if (tok == YYEOF || tok == YYEMPTY)
        yyerrorf(scnr, lit("unterminated ~a"), context, nao);
      else if (tok == '\n')
        yyerrorf(scnr, lit("newline in ~a"), context, nao);
      else
        yyerrorf(scnr, lit("misplaced character ~a in ~a"), chr(tok), context, nao);
    else
      if (tok == YYEOF)
        yyerrorf(scnr, lit("unexpected end of input"), nao);
      else if (tok == YYEMPTY)
        return;
      else
        yyerrorf(scnr, lit("unexpected character ~a"), chr(tok), nao);
}

int parse_once(val self, val stream, val name)
{
  int res = 0;
#if CONFIG_DEBUG_SUPPORT
  unsigned dbg_state = debug_clear(opt_dbg_expansion ? 0 : DBG_ENABLE);
#endif
  val parser_obj = ensure_parser(stream, name);
  parser_t *parser = parser_get_impl(self, parser_obj);
  parser->rec_source_loc = 1;

  uw_catch_begin(cons(error_s, nil), esym, eobj);


  res = yyparse(parser->scanner, parser);

  parser_resolve_circ(parser);

  uw_catch(esym, eobj) {
    yyerrorf(parser->scanner, lit("error exception during parse"), nao);
    uw_throw(esym, eobj);
  }

  uw_unwind {
#if CONFIG_DEBUG_SUPPORT
    debug_set(dbg_state);
#endif
  }

  uw_catch_end;

  return res;
}

int parse(parser_t *parser, val name, enum prime_parser prim)
{
  int res = 0;
  cnum start_line = parser->lineno;

  parser->errors = 0;
  parser->eof = 0;
  parser->ignore = 0;
  parser->prepared_msg = nil;
  parser->circ_ref_hash = nil;
  parser->circ_count = 0;
  parser->syntax_tree = nil;
  parser->quasi_level = 0;

  prime_parser(parser, name, prim);

  uw_catch_begin(cons(error_s, nil), esym, eobj);

  res = yyparse(parser->scanner, parser);

  prime_parser_post(parser, prim);

  parser_resolve_circ(parser);

  uw_catch(esym, eobj) {
    yyerrorf(parser->scanner, lit("error exception during parse"), nao);
    uw_throw(esym, eobj);
  }

  uw_unwind;

  uw_catch_end;

  if (parser->errors && parser->syntax_tree == nil &&
      parser->lineno != start_line)
  {
    yyerrorf(parser->scanner, lit("while parsing form starting at line ~a"),
             num(start_line), nao);
  }

  return res;
}

