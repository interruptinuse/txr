
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 163
#define YY_END_OF_BUFFER 164
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1589] =
    {   0,
       62,   62,   62,   62,   62,   62,   62,   62,  138,  138,
      138,  138,  149,  149,  160,  160,  164,  114,  163,  115,
      163,  115,  163,  113,  163,  117,  163,  114,  163,  114,
      163,  114,  163,  117,  163,   98,   99,  163,   62,   98,
       99,  163,   84,  163,   84,   98,   99,  163,   63,   98,
       99,  163,   98,   99,  163,   55,   98,   99,  163,   61,
       98,   99,  163,   98,   99,  163,   89,   98,   99,  163,
       85,   98,   99,  163,    1,   19,   98,   99,  163,16400,
       97,   98,   99,  163,   83,   98,   99,  163,   19,   98,
       99,  163,16400,   55,   98,   99,  163,   98,   99,  163,

       67,   98,   99,  163,   54,   98,   99,  163,   99,  163,
       99,  163,   99,  163,   99,  163,   62,   98,   99,  163,
       20,   98,   99,  163,16401,   72,   98,   99,  163,   58,
       98,   99,  163,   20,   98,   99,  163,16401,   58,   98,
       99,  163,   89,   98,   99,  163,    1,   20,   98,   99,
      163,16401,   20,   98,   99,  163,16401,   56,   98,   99,
      163,   20,   98,   99,  163,16401,   59,   98,   99,  163,
       99,  163,   99,  163,   99,  163,   62,   98,   99,  163,
       21,   98,   99,  163,16402,   72,   98,   99,  163,   21,
       98,   99,  163,16402,   89,   98,   99,  163,    1,   21,

       98,   99,  163,16402,   21,   98,   99,  163,16402,   56,
       98,   99,  163,   21,   98,   99,  163,16402,   99,  163,
       99,  163,   99,  163,  111,  112,  163,  111,  112,  163,
      105,  163,  105,  111,  112,  163,  107,  111,  112,  163,
      100,  107,  111,  112,  163,  110,  111,  112,  163,  112,
      163,  112,  163,  112,  163,  112,  163,  106,  163,  106,
      111,  112,  163,  146,  152,  163,  146,  152,  163,  132,
      163,  132,  146,  152,  163,  120,  146,  152,  163,  146,
      152,  163,  152,  163,  152,  163,  152,  163,  152,  163,
      131,  146,  152,  163,  133,  163,  133,  146,  152,  163,

      130,  131,  146,  152,  163,  130,  131,  146,  152,  163,
      130,  131,  146,  152,  163,  131,  152,  163,  131,  152,
      163,  131,  152,  163,  131,  152,  163,  134,  163,  134,
      146,  152,  163,  137,  146,  152,  163,  146,  152,  163,
      121,  146,  152,  163,   62,   98,   99,  163,   98,   99,
      163,   98,   99,  163,   89,   98,   99,  163,    1,   10,
       19,   98,   99,  163,16400,   56,   98,   99,  163,   98,
       99,  163,  138,  146,  152,  163,  135,  163,  135,  146,
      152,  163,  146,  152,  163,  146,  152,  163,  151,  163,
      149,  151,  163,  150,  163,  150,  151,  163,  148,  151,

      163,  147,  151,  163,  156,  161,  163,  160,  161,  163,
      159,  163,  156,  159,  161,  163,  157,  158,  161,  162,
      163,  158,  161,  163,  156,  161,  163,  153,  156,  161,
      163,  153,  156,  161,  163,  156,  161,  163,  156,  161,
      163,  146,  163,  145,  163,  145,  146,  163,  139,  146,
      163,  146,  163,  163,  163,  163,  163,  114,  114,  114,
      114,  115,  113,  119,  116,  114,  114,  114,  119,   62,
       88,   84,   68,   66,   64,   70,    1,   87,    4,   90,
        1,   19,16400,   19,16400,   19,16400,   97,   96,   92,
       92,   96,   93,   96,   94,   96,   95,   96,   98,   62,

       88,   20,   22,16401,   20,16401,   20,   22,16401,   20,
    16401,   20,16401,   79,   73,   78,   76,   75,   74,   77,
        1,   20,   22,16401,   57,    4,   20,   22,16401,   20,
       22,16401,   20,16401,   22,   20,16401,   20,16401,   20,
    16401,    9,   20,16401,   92,   20,   98,16401,   62,   88,
       21,   23,16402,   21,16402,   21,   23,16402,   21,16402,
       21,16402,    1,   21,   23,16402,   82,    4,   21,   23,
    16402,   21,   23,16402,   21,16402,   23,   21,16402,   21,
    16402,   21,16402,    9,   21,16402,   21,   98,16402,  105,
      109,  104,  104,  109,  101,  109,  108,  109,  102,  109,

      103,  109,  109,  111,  106,  132,  128,  124,  125,  124,
      125,  128,  122,  128,  126,  128,  127,  128,  146,  133,
      130,  129,  130,  129,  130,  134,  136,    9,  136,  136,
      123,  128,   62,   88,    1,   10,    1,   10,   19,16400,
      138,  135,  125,  125,  128,  149,  150,  156,  160,  159,
      153,  156,  153,  156,  156,  156,  153,  156,  156,  156,
      145,  144,  140,  144,  143,  144,  119,  114,  119,  118,
      118,  119,   86,   91,   69,   71,   65,    2,    2,    2,
       60,    4,    5,    5,    5,    8,    4,    5,    8, 8208,
        5,    8,    5,    8,    4,   19,16400, 8208,   92,   94,

       94,   94,   20,   22,16401,   20,   22,16401,   20,   22,
    16401,   20,   22,16401, 8209,   20,   22,16401,   20,   22,
    16401,   20,   22,16401,   22,   22,   81,   80,   20,   22,
    16401,   20,16401,   20,16401,    4, 8209,    1,   20,   22,
    16401,   20,   22,16401,    6,    4,    6,    6,    6,    6,
        8,    8,    4,    6,    8, 8209,    6,    8,    8,    6,
        8,    8,    8,    8,   20,   22,16401,    4,   20,   22,
    16401,   20,   22,16401,   20,   22,16401,   22,   20,   22,
    16401,   22,   20,   22,16401,   20,16401,   20,16401,    9,
       20,   22,16401,   21,   23,16402,   21,   23,16402,   21,

       23,16402,   21,   23,16402, 8210,   21,   23,16402,   21,
       23,16402,   21,   23,16402,   23,   23,   21,   23,16402,
       21,16402,   21,16402,    4, 8210,    1,   21,   23,16402,
       21,   23,16402,    7,    4,    7,    7,    7,    7,    8,
        8,    4,    7,    8, 8210,    7,    8,    8,    7,    8,
        8,    8,    8,   21,   23,16402,    4,   21,   23,16402,
       21,   23,16402,   21,   23,16402,   23,   21,   23,16402,
       23,   21,   23,16402,   21,16402,   21,16402,    9,   21,
       23,16402,  104,  104,  102,  102,  102,  124,  125,  124,
      125,  126,  126,  126,    9,    2,   14,    2,   12,    8,

     8208,  125,  125,  153,  156,  156,  153,  156,  156,  156,
      118,    5,    4,    2,    3,    3,    2,    3,    2,    3,
       51,   51,   51,   51,   51,   51,   33,    4,    5,    8,
        4,    5,    4,    5, 8208,    4,    5,    4,    5,   19,
    16400,    5,   19,16400,    6,    4,   20,   22,16401,   20,
       22,16401,   20,   22,16401,   20,   22,16401,   20,   22,
    16401,   20,   22,16401,   22,   22,   22,   22,   20,   22,
    16401,   20,   22,16401,   20,   22,16401,    4,    6, 8209,
        6,    6,    6,    6,    6,    4,    6,    6,    6,    6,
        6,    6,    4,    6,    4,    6, 8209,    6,    4,    6,

        6,   20,   22,16401,   20,   22,16401,    4,    6,   20,
       22,16401,    6,   20,   22,16401,   22,   20,   22,16401,
       20,   22,16401,   20,   22,16401,    9,   20,   22,16401,
        7,    4,   21,   23,16402,   21,   23,16402,   21,   23,
    16402,   21,   23,16402,   21,   23,16402,   21,   23,16402,
       23,   23,   23,   23,   21,   23,16402,   21,   23,16402,
       21,   23,16402,    4,    7, 8210,    7,    7,    7,    7,
        7,    4,    7,    7,    7,    7,    7,    7,    4,    7,
        4,    7, 8210,    7,    4,    7,    7,   21,   23,16402,
       21,   23,16402,    4,    7,   21,   23,16402,    7,   21,

       23,16402,   23,   21,   23,16402,   21,   23,16402,   21,
       23,16402,   15,   13,   11,    9,   21,   23,16402,    2,
        3,   14,    2,    3,   12,  156,  156,   24,   32,   34,
       45,   45,   45,   45,   45,   45,   40,   40,   40,   40,
       40,   40,   48,    4,    5, 8208,    4,    6,   20,   22,
    16401,   20,   22,16401,   20,   22,16401,   22,    6,    6,
        6,    6,    6,    4,    6,    4,    6,    6,   20,   22,
    16401,    6,   20,   22,16401,    6,   20,   22,16401,    6,
       20,   22,16401,    6,   20,   22,16401,    6, 8209,    6,
       20,   22,16401,    6,   20,   22,16401,    4,    6,   20,

       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,
        6,   20,   22,16401,    6,   20,   22,16401,    6,   22,
        6,   22,    4,    7,   21,   23,16402,   21,   23,16402,
       21,   23,16402,   23,    7,    7,    7,    7,    7,    4,
        7,    4,    7,    7,   21,   23,16402,    7,   21,   23,
    16402,    7,   21,   23,16402,    7,   21,   23,16402,    7,
       21,   23,16402,    7, 8210,    7,   21,   23,16402,    7,
       21,   23,16402,    4,    7,   21,   23,16402,    7,   21,
       23,16402,    7,   21,   23,16402,    7,   21,   23,16402,
        7,   21,   23,16402,    7,   23,    7,   23,  156,  154,

       36,   36,   36,   36,   36,   36,   52,   52,   52,   52,
       52,   52,   53,   43,   43,   43,   43,   43,   43,   26,
       25,   25,   25,   25,   25,   25,    6,   20,   22,16401,
        6,   20,   22,16401,    6,   20,   22,16401,    6,   20,
       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,
        6, 8209,    6,   20,   22,16401,    6,   20,   22,16401,
        6,   20,   22,16401,    6,   20,   22,16401,    6,   20,
       22,16401,    6,   20,   22,16401,    6,   22,    6,   22,
        6,   22,    6,   22,    7,   21,   23,16402,    7,   21,
       23,16402,    7,   21,   23,16402,    7,   21,   23,16402,

        7,   21,   23,16402,    7,   21,   23,16402,    7, 8210,
        7,   21,   23,16402,    7,   21,   23,16402,    7,   21,
       23,16402,    7,   21,   23,16402,    7,   21,   23,16402,
        7,   21,   23,16402,    7,   23,    7,   23,    7,   23,
        7,   23,  155,  142,  142,   29,   29,   29,   29,   29,
       29,   28,   49,   49,   49,   49,   49,   49,   44,   42,
       27,   37,   37,   37,   37,   37,   37,    6,   20,   22,
    16401,    6,   20,   22,16401,    6,   20,   22,16401,    6,
       20,   22,16401,    6,   20,   22,16401,    6,   20,   22,
    16401,    6,   20,   22,16401,    6,   20,   22,16401,    6,

       20,   22,16401,    6,   22,    7,   21,   23,16402,    7,
       21,   23,16402,    7,   21,   23,16402,    7,   21,   23,
    16402,    7,   21,   23,16402,    7,   21,   23,16402,    7,
       21,   23,16402,    7,   21,   23,16402,    7,   21,   23,
    16402,    7,   23,   30,   30,   30,   30,   30,   30,   47,
       47,   47,   47,   47,   47,   31,   31,   31,   31,   31,
       31,   38,   38,   38,   38,   38,   38,   39,   39,   39,
       39,   39,   39,   41,   35,   35,   35,   35,   35,   35,
       50,   46,   46,   46,   46,   46,   46,  141
    } ;

static const flex_int16_t yy_accept[1640] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   18,   20,   22,   24,   26,   28,   30,   32,   34,
       36,   39,   43,   45,   49,   53,   56,   60,   64,   67,
       71,   75,   81,   85,   89,   94,   98,  101,  105,  109,
      111,  113,  115,  117,  121,  126,  130,  134,  139,  143,
      147,  153,  158,  162,  167,  171,  173,  175,  177,  181,
      186,  190,  195,  199,  205,  210,  214,  219,  221,  223,
      225,  228,  231,  233,  237,  241,  246,  250,  252,  254,

      256,  258,  260,  264,  267,  270,  272,  276,  280,  283,
      285,  287,  289,  291,  295,  297,  301,  306,  311,  316,
      319,  322,  325,  328,  330,  334,  338,  341,  345,  349,
      352,  355,  359,  366,  370,  373,  377,  379,  383,  386,
      389,  391,  394,  396,  399,  402,  405,  408,  411,  413,
      417,  422,  425,  428,  432,  436,  439,  442,  444,  446,
      449,  452,  454,  455,  456,  457,  458,  459,  460,  461,
      462,  463,  464,  464,  465,  466,  467,  468,  469,  469,
      470,  471,  471,  472,  472,  473,  474,  474,  475,  476,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,

      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  478,  479,
      480,  481,  481,  484,  486,  488,  489,  489,  490,  491,
      493,  495,  497,  499,  500,  500,  500,  501,  501,  502,
      502,  505,  507,  507,  510,  510,  512,  512,  512,  512,
      512,  514,  515,  516,  517,  518,  519,  520,  521,  521,
      525,  526,  527,  527,  530,  533,  535,  536,  538,  538,
      538,  538,  540,  540,  542,  545,  545,  545,  545,  546,
      549,  549,  549,  550,  550,  551,  551,  554,  556,  556,
      559,  559,  561,  561,  561,  561,  563,  563,  567,  568,

      569,  569,  572,  575,  577,  578,  580,  580,  580,  580,
      582,  582,  584,  587,  587,  587,  587,  590,  590,  590,
      590,  590,  591,  592,  593,  595,  597,  599,  601,  603,
      604,  605,  605,  605,  606,  606,  606,  607,  608,  610,
      613,  615,  617,  619,  620,  620,  620,  621,  622,  624,
      626,  627,  627,  628,  628,  630,  631,  633,  634,  635,
      635,  635,  637,  637,  641,  641,  642,  642,  643,  644,
      646,  647,  648,  649,  650,  651,  653,  655,  656,  657,
      659,  660,  661,  662,  663,  665,  667,  668,  669,  670,
      671,  673,  674,  675,  675,  675,  676,  677,  678,  678,

      679,  679,  680,  680,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  682,  682,  682,  684,  685,  686,  687,  691,  693,
      695,  695,  698,  699,  700,  701,  702,  703,  703,  703,
      703,  703,  706,  709,  712,  715,  715,  715,  715,  716,
      719,  722,  725,  725,  725,  725,  726,  726,  727,  727,
      727,  727,  727,  727,  728,  729,  732,  734,  736,  736,

      736,  736,  738,  742,  745,  746,  746,  746,  748,  749,
      749,  750,  750,  750,  750,  752,  753,  757,  759,  760,
      762,  763,  764,  765,  768,  772,  775,  778,  779,  782,
      782,  782,  782,  783,  783,  783,  783,  783,  783,  786,
      788,  790,  790,  790,  790,  794,  794,  794,  794,  794,
      794,  794,  797,  800,  803,  806,  806,  806,  806,  807,
      810,  813,  816,  816,  816,  816,  817,  817,  818,  818,
      818,  818,  818,  818,  821,  823,  825,  825,  825,  825,
      827,  831,  834,  835,  835,  835,  837,  838,  838,  839,
      839,  839,  839,  841,  842,  846,  848,  849,  851,  852,

      853,  854,  857,  861,  864,  867,  868,  871,  871,  871,
      871,  872,  872,  872,  872,  872,  872,  875,  877,  879,
      879,  879,  879,  879,  879,  879,  883,  883,  883,  883,
      884,  885,  886,  887,  888,  888,  890,  892,  893,  894,
      895,  895,  896,  896,  898,  898,  900,  900,  902,  903,
      904,  906,  907,  909,  910,  911,  911,  911,  912,  913,
      914,  916,  917,  919,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,

      921,  921,  921,  921,  921,  921,  922,  923,  924,  925,
      926,  927,  927,  927,  927,  927,  927,  928,  928,  928,
      928,  928,  928,  928,  928,  931,  931,  933,  936,  938,
      938,  942,  945,  946,  946,  947,  950,  953,  956,  956,
      956,  956,  956,  956,  959,  962,  965,  965,  965,  965,
      965,  965,  966,  967,  968,  968,  968,  968,  969,  969,
      969,  969,  969,  969,  969,  972,  975,  978,  978,  978,
      978,  978,  978,  981,  982,  983,  983,  983,  983,  984,
      985,  986,  988,  989,  990,  990,  990,  990,  991,  991,
      991,  991,  992,  992,  992,  992,  993,  995,  995,  995,

      998,  999, 1001, 1005, 1008, 1008, 1013, 1017, 1017, 1017,
     1017, 1017, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1021, 1024, 1027, 1027, 1027, 1027, 1027, 1027, 1031,
     1031, 1032, 1032, 1033, 1036, 1039, 1042, 1042, 1042, 1042,
     1042, 1042, 1045, 1048, 1051, 1051, 1051, 1051, 1051, 1051,
     1052, 1053, 1054, 1054, 1054, 1054, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1058, 1061, 1064, 1064, 1064, 1064, 1064,
     1064, 1067, 1068, 1069, 1069, 1069, 1069, 1070, 1071, 1072,
     1074, 1075, 1076, 1076, 1076, 1076, 1077, 1077, 1077, 1077,
     1078, 1078, 1078, 1078, 1079, 1081, 1081, 1081, 1084, 1085,

     1087, 1091, 1094, 1094, 1099, 1103, 1103, 1103, 1103, 1103,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1107,
     1110, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1114, 1114,
     1115, 1115, 1116, 1120, 1120, 1123, 1126, 1127, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1129, 1129,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1131, 1131, 1131, 1131, 1131, 1131, 1132, 1133, 1134,
     1134, 1135, 1136, 1137, 1137, 1137, 1138, 1139, 1140, 1140,

     1141, 1142, 1143, 1143, 1143, 1143, 1144, 1144, 1145, 1147,
     1149, 1152, 1155, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1160, 1160, 1160, 1160, 1160,
     1160, 1161, 1161, 1161, 1161, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1163, 1164, 1164, 1164, 1164, 1164, 1164,
     1166, 1166, 1168, 1172, 1176, 1180, 1184, 1184, 1184, 1184,
     1188, 1190, 1194, 1198, 1203, 1207, 1207, 1207, 1207, 1211,
     1215, 1219, 1219, 1219, 1219, 1221, 1221, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,

     1225, 1228, 1231, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1236, 1236, 1236, 1236, 1236,
     1236, 1237, 1237, 1237, 1237, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1239, 1240, 1240, 1240, 1240, 1240, 1240,
     1242, 1242, 1244, 1248, 1252, 1256, 1260, 1260, 1260, 1260,
     1264, 1266, 1270, 1274, 1279, 1283, 1283, 1283, 1283, 1287,
     1291, 1295, 1295, 1295, 1295, 1297, 1297, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1300, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,

     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1302,
     1303, 1304, 1304, 1305, 1306, 1307, 1307, 1308, 1309, 1310,
     1311, 1312, 1313, 1313, 1314, 1314, 1314, 1314, 1314, 1315,
     1316, 1317, 1318, 1319, 1320, 1320, 1320, 1320, 1321, 1321,
     1321, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1331, 1335, 1339, 1339, 1339, 1339, 1339, 1339, 1343, 1347,
     1351, 1351, 1351, 1351, 1353, 1357, 1361, 1365, 1365, 1365,

     1365, 1365, 1365, 1369, 1373, 1377, 1377, 1377, 1377, 1377,
     1377, 1379, 1381, 1383, 1383, 1383, 1383, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1389, 1393, 1397,
     1397, 1397, 1397, 1397, 1397, 1401, 1405, 1409, 1409, 1409,
     1409, 1411, 1415, 1419, 1423, 1423, 1423, 1423, 1423, 1423,
     1427, 1431, 1435, 1435, 1435, 1435, 1435, 1435, 1437, 1439,
     1441, 1441, 1441, 1441, 1443, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1443, 1444, 1445, 1446, 1446, 1446, 1446, 1446,

     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1452, 1453,
     1454, 1455, 1456, 1457, 1458, 1459, 1459, 1459, 1459, 1459,
     1460, 1460, 1460, 1461, 1461, 1461, 1462, 1462, 1462, 1462,
     1462, 1463, 1464, 1465, 1466, 1467, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1472, 1476, 1480, 1480, 1480, 1480, 1480,
     1480, 1480, 1484, 1488, 1492, 1492, 1492, 1492, 1492, 1492,
     1496, 1500, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506,
     1506, 1506, 1506, 1506, 1506, 1506, 1506, 1510, 1514, 1518,

     1518, 1518, 1518, 1518, 1518, 1518, 1522, 1526, 1530, 1530,
     1530, 1530, 1530, 1530, 1534, 1538, 1542, 1542, 1542, 1542,
     1542, 1542, 1542, 1542, 1542, 1542, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1545, 1546, 1547, 1548, 1549,
     1550, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1556, 1557,
     1558, 1559, 1560, 1561, 1562, 1562, 1563, 1564, 1565, 1566,
     1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1574, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1581, 1582,
     1583, 1584, 1585, 1586, 1587, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1589, 1589
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    6,    9,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,    6,
       25,    6,   26,   27,   28,   28,   29,   30,   31,   29,
       32,   33,   32,   34,   32,   32,   32,   35,   32,   32,
       32,   36,   37,   38,   32,   32,   39,   32,   32,   32,
       40,   41,   42,   43,   32,   44,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   32,   54,   55,   56,   57,
       58,   59,   32,   60,   61,   62,   63,   64,   39,   65,
       66,   32,   67,   68,   69,    9,    1,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   71,   71,   72,   72,   72,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   74,
       74,   74,   74,   74,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71
    } ;

static const YY_CHAR yy_meta[75] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,    6,    9,
       10,    2,    6,   11,   10,   11,   12,   13,   14,   14,
       14,   14,   15,   16,    6,    6,   17,   14,   14,   14,
       14,   18,   18,   18,   18,   18,   18,   18,   18,   10,
        6,    7,   19,    1,   14,   14,   14,   14,   20,   14,
       18,   18,   18,   18,   21,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   10,    1,    7,    1,
        1,   22,   22,   22
    } ;

static const flex_int16_t yy_base[1887] =
    {   0,
        0,    3,   77,    0,  151,    0,  225,    0,  298,  371,
        6,    8,  345,  351,  445,    0,  518,  591,  664,    0,
      357,  527,  706,  779,  852,  901,  950, 1018,  532,  537,
     5405,  232,11170, 5396, 5393,   11,  247,  253,  258,   12,
    11170,   24,11170, 5394,11170,  612, 1086, 5379,   30,   37,
    11170,  383,    0,11170, 5377,11170, 1158,11170,11170,11170,
     5323, 5320, 5319,  544,  616, 1217,11170, 1275, 5373,   12,
        6,  628,  698,  374,11170, 5311, 5304, 5299,  565,  714,
     5343, 1342,  723,  350,  731,  745,  534, 5286, 5281, 5262,
    11170,   13,11170, 5328,11170,11170, 1416,11170, 5260, 5258,

     5257,11170, 5323,11170,  572,11170, 5322,11170, 1488,11170,
     5254, 5252, 5251,11170,11170, 5317,    0,   41, 1535,11170,
     5249, 5248, 5247,11170, 5313, 1578, 1643,11170,  340,  783,
       45,  339,  416, 5307,   18,  626,11170, 5310,  521,   65,
    11170,  331,11170, 5309,11170,11170,    0,  332,11170, 5305,
    11170,11170,  387,  526,  595, 5261, 5245,11170,11170, 5301,
    11170,  829,11170, 5233, 5232, 5231,  454,  568,  576,  622,
    11170, 5295,  722,    0,11170,  548,  719,  725,  808,   67,
      823,  844,  888,  896,11170,11170,  616,11170,11170,11170,
      923,  960,  536,    0,  786, 1664,  936,  912,  990,  915,

      971,  978,  933, 1009, 1001, 1153, 1159,  993, 1170, 1206,
     1024, 1056, 5229, 5225, 5223,  976, 1050, 1150,  341, 1250,
    11170, 1727, 1284, 5275, 1169,    0, 1134,11170,  567,  809,
    11170,  814,    0,11170, 5216, 5215, 1305, 1175, 1265, 1292,
     1328, 1318, 1226, 1488, 1308, 1353, 5213, 5211, 5210, 1368,
     1496,11170,11170,11170,11170,11170,11170,11170, 1375, 1794,
    11170, 1861, 1935, 1592, 1593, 1801,  625, 1822, 5206, 5203,
     5189, 1833, 5234, 2002,    0, 5186, 5185, 5184,  882, 1386,
     5183, 5182, 1635, 1480, 1656, 1611, 2009, 2020, 1390, 2023,
     1502, 2034, 5181, 5180, 5179, 2041, 1521, 2108,11170, 2175,

     2249, 2124, 2094, 2142,  795, 2316, 5178, 5171, 5170, 2319,
      917, 2386,    0, 5169, 5164, 5161, 2324, 5157, 5156,  632,
      700,11170,11170,  578,  923,11170,11170, 1181,11170,    0,
    11170, 5155, 5154,11170,  652,  712,11170,11170,  721, 1052,
    11170, 1269,    0,11170, 5152, 5151,11170,    0,  857, 2442,
    11170,  953,11170, 1605, 1675,    0,11170,  758, 1084, 1813,
      613, 1786, 1832, 1842, 5173, 1208,  748,11170,  727, 1163,
      939,11170,    0, 1088,11170,  777, 1880, 1893, 1902, 2069,
     5163, 5152,11170,11170,11170,  708,    0, 1284,  827,11170,
      891, 1182,11170, 2141, 2051,11170,11170,11170,  983,  995,

     1057, 1154,    0, 2474, 1294, 5144, 5143, 5142,  679, 5156,
      277, 5160, 1273, 5154, 5161, 5152, 5140,  757, 5126, 1146,
     5133,  255, 5121, 5123, 1817, 1499, 1813, 2147, 2075, 1854,
     2103, 2164, 2168, 2031, 2303, 1505, 2524, 2161, 2306, 2131,
     2311, 2343, 2338, 2359, 2347, 2372, 2364, 2378, 5108, 5107,
     1992, 2598,    0, 2523,    0, 2460,11170, 2538,    0, 2492,
     2191, 2209, 2224, 1255, 1497,11170, 5152, 5105, 2403, 2665,
     2557, 2426, 2672, 2683, 2686, 5104, 5102, 5101, 2435, 2700,
     2708, 2725, 5100, 5099, 5090, 2510, 5128, 1270, 5080, 5075,
     5074, 5071, 5070,11170,11170, 2761, 2768, 2779, 5065, 5063,

     5062, 2846, 2913, 2796, 2412, 5105, 2756, 2980, 1305, 2689,
     2865, 5055, 5038, 5034, 2443, 5074, 3047, 1530, 2784, 2877,
     5026, 5025, 5024, 2892, 3114, 2899, 2940, 1607, 2947, 5023,
     5019, 5015, 1774, 5012, 5005, 5004, 4996, 4993, 2952, 3014,
     3019, 4989, 4988, 4958, 3181, 4954, 4946, 4945, 2655, 3248,
     3029, 3072, 3086, 3089, 3100, 4944, 4942, 4941, 2699, 3148,
     3188, 3209, 4938, 4937, 4929, 3075, 4975, 1858, 4920, 4916,
     4912, 4911, 4909, 3220, 3257, 3268, 4907, 4903, 4901, 3335,
     3402, 3163, 2747, 4946, 2920, 3469, 1961, 3052, 3287, 4893,
     4890, 4888, 2752, 4934, 3536, 2050, 3215, 3354, 4886, 4878,

     4877, 3295, 3603, 3363, 3370, 2127, 3375, 4872, 4871, 4867,
     2280, 4865, 4857, 4854, 4850, 4845, 3388, 3442, 3455, 4840,
     4839, 4838, 2789, 3014,  920, 3670, 4837, 4836, 4827, 1263,
     1271, 2840,11170, 4872, 4819, 1381, 1272, 2851,11170, 4861,
     4813, 2817, 2337, 2542,    0, 3726,    0, 2827, 1666, 1501,
     3314, 2882, 2996, 4820, 4821,    0, 2569,11170, 3483, 3503,
     1333,    0, 2662, 3758, 4799, 4798, 4811, 4815, 4798, 1330,
     4797, 4793, 4787,  373, 4777, 4782, 1467, 4760,    0, 4753,
     4744, 4754, 4742, 1617, 4736, 4738, 4730, 4730, 4718, 4720,
     3528, 3559, 3568, 3563, 3582, 3576, 3656, 3591, 3710, 3747,

     3788, 3693, 3810, 3824, 3829,11170, 3833, 3863, 4706, 4705,
     4696, 3865, 3928, 4002, 3948, 2036,11170, 3964, 4076, 3960,
     4090, 3976, 4099, 4695, 3687, 3131, 3435, 3147, 3517, 3705,
     3229, 4744, 4107, 3220, 3872, 3801, 4134, 4151, 4690, 4685,
     4681, 4677, 4667, 4159, 4176, 4187, 4661, 4659, 4644, 4640,
     4636, 3920, 4162, 2693, 4635, 4631, 4630, 2880, 4604, 4597,
     4592, 4591, 4589, 4588, 4220, 4245, 4248, 4555, 4547, 4543,
     4539, 4537, 4315, 2904, 2908, 4527, 4526, 4521, 2932, 2936,
     2966, 4382, 2999, 4281, 4517, 4514, 4513, 3028, 4509, 4496,
     4494, 4234, 4492, 4490, 4487, 3327, 3650, 4486, 4483, 3419,

     4033, 3719, 4256, 4288, 4348, 4449, 4355, 3791, 4478, 4464,
     4450, 3066, 4442, 4441, 4435, 4431, 4425, 4408, 4395, 4390,
     4368, 4389, 4407, 4389, 4369, 4368, 4356, 4353, 4516, 4349,
     4468, 3487, 4477, 4502, 4538, 4550, 4338, 4330, 4326, 4323,
     4322, 4555, 4577, 4591, 4313, 4311, 4310, 4303, 4296, 4371,
     4563, 3161, 4289, 4287, 4263, 3185, 4240, 4239, 4219, 4211,
     4210, 4208, 4625, 4630, 4652, 4204, 4200, 4197, 4188, 4185,
     4719, 3407, 3251, 4184, 4182, 4181, 3265, 3912, 3967, 4786,
     3421, 4671, 4176, 4174, 4159, 3473, 4156, 4139, 4131, 4572,
     4130, 4099, 4096, 4115, 4134, 4090, 4088, 3597, 4661, 4196,

     4705, 4746, 4804, 4871, 4773, 4059, 4070, 4045, 4042, 3579,
     4024, 4019, 3998, 3993, 3981, 3973, 3965, 3961, 4844, 4857,
     4878, 3960, 3958, 3954, 3946, 3938, 1379, 1516, 3663, 3742,
        0,    0, 4945, 3928, 3838, 5001, 3947, 5050,    0,    0,
     3925, 2057, 2107, 3944, 3931, 3928, 3915, 3909, 3906, 3892,
     3892, 3874, 2323, 3887, 3870, 3877, 3860, 3871, 3849, 3851,
     3831, 3838, 3821, 3820, 2369, 3801, 2463,11170, 2544,11170,
     4036, 4024, 4275, 4441, 5119, 4118, 5193, 4684, 3992, 2699,
    11170, 4363, 4444, 4267, 5267, 4454,11170, 4435, 5297, 4598,
     3781, 3778, 3770, 4839, 4529,11170, 4582,    0, 4643, 3762,

     3755, 3747, 4698, 5360, 2788,11170, 4760, 3935, 4265, 5427,
     4911, 4932, 4953, 3740, 3728, 3727, 3715, 3711, 3699, 3694,
     3688, 3683, 3875, 3681, 3667, 3665, 3664, 3662, 3661, 3653,
     3650, 3647, 3644, 3640, 3988, 3618, 3616, 3615, 3610, 3604,
     4124, 3603, 3596, 3592, 4139, 3589, 3577, 3575, 3573, 3569,
     3568, 3558, 4830, 4966, 3557, 3551, 3543, 3537, 3536, 5494,
     3534, 4219, 4970, 5037, 5156, 5215, 3528, 3527, 3525, 5306,
     5014, 5365, 5368, 5561, 5393, 3522, 3520, 3519, 5435, 5452,
     5460, 3513, 3507, 3506, 5033, 3551, 4148, 3502, 3499, 3492,
     3482, 3480, 3479, 3465, 3464, 3461, 3451, 3443, 3441, 5628,

     5519, 5522, 5527, 3440, 3431, 3417, 3413, 3401, 3400, 3398,
     3383, 3364, 4240, 3347, 3342, 3334, 3333, 3324, 3321, 3319,
     3312, 3311, 3297, 3295, 4252, 3294, 3283, 3281, 3262, 3258,
     4271, 3257, 3248, 3234, 4278, 3220, 3216, 3208, 3207, 3203,
     3194, 3175, 5075, 5533, 3174, 3160, 3159, 3157, 3155, 5695,
     3148, 4427, 5594, 5601, 5615, 5653, 3144, 3137, 3127, 5712,
     5080, 5720, 5723, 5790, 5748, 3122, 3120, 3111, 5756, 5808,
     5815, 3108, 3106, 3085, 5567, 3131, 4379, 3072, 3060, 3058,
     3040, 3014, 3012, 3011, 3007, 2993, 2991, 2988, 2977, 5888,
    11170,    0,    0, 2990, 2971, 2946, 2935, 2942, 2927,    0,

     2878, 2900, 2910, 2884, 2896,    0, 2880, 2879, 2903, 2854,
     2865, 2851,    0, 2839, 5957, 6031, 6105, 3367,11170, 2956,
     6135, 3655, 2822, 2819, 2808, 3383,11170, 3102,    0, 2804,
     2792, 2785, 3204,11170, 3789, 3811, 3790, 3874,11170, 3825,
        0, 2773, 2762, 2761, 3837, 4372, 3841,11170, 3956, 3965,
     3866,11170, 3977,    0, 2753, 2744, 2731, 6198, 2724, 2719,
     2716, 2684, 2683,  248,  281,  293,  309,  320,  331,  340,
      350,  370,  463,  472,  477,  501,  506,  577,  582, 5832,
     5849, 5979,  598,  606,  617,  643,  685, 5996, 6068, 6144,
      692,  699,  703, 5093, 6203, 6206, 6220,  715,  730,  737,

      752,  776, 6231, 6273, 6290,  818,  826,  842,  849,  854,
     5687, 5796, 4401,  888,  890,  898, 4458,  907,  913,  934,
      966,  979,  991, 1024, 1031, 1033, 1056, 1087, 1094, 1110,
     1142, 1144, 1146, 1151, 1158, 1164, 1186, 1192, 1230, 1238,
     1250, 1262, 1264, 1276, 1290, 1334, 6298, 6301, 6312, 1343,
     1424, 1442, 1444, 1450, 6315, 6326, 6374, 1456, 1460, 1474,
     5224, 6385, 6388, 6396, 1476, 1479, 1481, 1488, 1489, 6399,
     6410, 6413, 1517, 1520, 1521, 1525, 1526, 5842, 5875, 4496,
     1537, 1545, 1547, 4558, 1564, 1565, 1568, 1569, 1573, 1574,
     1589, 1602,11170,11170, 1633,    0, 4112,    0, 1634, 1638,

     1637, 4264, 1635, 4405, 1631, 4481, 1637, 1637, 1639, 1653,
        0,11170, 4542, 6443, 1634, 1636, 1646, 4614,11170,11170,
     4706,    0, 1648, 1653, 1674, 6506, 4718, 6580, 4707,11170,
     4762, 4747,11170, 6654, 4783,11170, 4837, 6728, 6802, 4799,
    11170, 4838,    0, 1734, 1740, 1742, 1749, 1750, 1752, 1753,
     1756, 1761, 6528, 6602, 6676, 1765, 1768, 1772, 1785, 1787,
     1788, 6750, 6810, 6813, 1800, 1809, 1823, 1828, 1833, 6824,
     6835, 6872, 1834, 1838, 1847, 1849, 1850, 1855, 1882, 1945,
     1946, 4567, 1948, 1950, 1957, 1960, 1969, 1974, 1983, 1985,
     1986, 1990, 2008, 2010, 2015, 2017, 6883, 6894, 6897, 2029,

     2031, 2040, 2050, 2062, 2064, 6905, 6908, 6966, 2066, 2072,
     2082, 2086, 2088, 6977, 6980, 6988, 2094, 2101, 2104, 2108,
     2116, 2118, 2119, 2123, 2137, 4604, 2148, 2153, 2162, 2169,
     2196, 2260, 2261, 2267, 2275,    0, 2278,    0, 2278,    0,
     2287,    0,    0, 4852,11170, 4870,    0, 2280, 2294, 2295,
     7062,11170, 4920,    0, 2299, 2303, 2316, 4921,11170, 4934,
        0, 2329, 2332, 2344, 7136,11170, 4989,    0, 2356, 2357,
     2369,11170, 4990,    0, 2371, 2372, 2377, 4998,11170, 2378,
     2397, 2407, 2408, 2413, 2427, 2431, 2437, 2439, 2440, 2460,
     2467, 2468, 2480, 2482, 2495, 2500, 2504, 2505, 2510, 2511,

     2515, 2516, 2545, 2608, 2609, 2620, 2623, 2692,    0, 5065,
        0,11170, 5066,    0, 2628, 2632, 2635, 5067,11170,11170,
     5079,    0, 2637, 2654, 2658, 2660, 2662, 2664, 2666, 2671,
     2677, 2679, 2680, 5108,    0,    0,11170,11170, 7210, 7232,
     7254, 7276, 7298, 7320, 7342, 7353, 7374, 7396, 7413, 7430,
     7447, 7464, 7481, 7498, 7520, 7529, 7543, 7564, 7586, 7608,
     7630, 3045, 7647, 7658, 7679, 2757, 7696, 7713, 7730, 7747,
     7764, 7781, 7798, 7815, 7832, 7849, 7866, 7883, 7900, 7917,
     7934, 7951, 7968, 7985, 8002, 2830, 2862, 8011, 8019, 3065,
     8040, 8051, 8072, 2911, 8094, 8116, 8138, 8147, 8155, 3091,

     8171, 8182, 3179, 8198, 8215, 8232, 8249, 8266, 8283, 8300,
     8317, 8334, 8351, 8368, 8385, 8402, 8419, 8436, 8453, 8470,
     8487, 8504, 8521, 8538, 8555, 8572, 8589, 8606, 8623, 8640,
     8657, 8674, 8691, 8708, 8725, 8742, 8759, 8776, 8793, 8810,
     8827, 3199, 3282, 3680, 8836, 3150, 8857, 8879, 3252, 3285,
     8891, 8912, 8933, 8944, 8960, 8977, 8994, 9011, 9028, 9045,
     9062, 9079, 9096, 9113, 9130, 9147, 9164, 9181, 9198, 9215,
     9232, 9249, 9266, 9283, 9300, 9317, 9334, 9351, 9368, 9385,
     9402, 9419, 9436, 9453, 9470, 9487, 9504, 9521, 9538, 9555,
     9572, 9589, 9606, 9623, 9640, 9657, 9674, 9691, 3299, 9700,

     9721, 3400, 3432, 9743, 9765, 9782, 9793, 9809, 9826, 9843,
     9860, 9877, 9894, 9911, 9928, 9945, 9962, 9979, 9996,10013,
    10030,10047,10064,10081,10098,10115,10132,10149,10166,10183,
    10200,10217,10234,10251,10268,10285,10302,10319,10336,10353,
    10370,10392, 3444, 3453,10414,10436,10458,10480,10502,10519,
    10536,10553,10570,10587,10604,10621,10638,10655,10672,10689,
    10706,10723,10740,10757,10774,10791,10808,10825,10842,10859,
    10876,10898,10920,10942,10959,10976,10993,11015,11037,11059,
    11081,11103,11125,11147, 3512, 3540
    } ;

static const flex_int16_t yy_def[1887] =
    {   0,
     1639, 1639, 1638,    3, 1638,    5, 1638,    7, 1640, 1640,
       10,   10, 1641, 1641, 1638,   15, 1641, 1641,    3,   19,
     1641, 1641, 1641, 1641, 1642, 1642, 1643, 1643, 1644, 1644,
     1638, 1645, 1638, 1638, 1638, 1638, 1645, 1645, 1645, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1646, 1647, 1638, 1646, 1638, 1648, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1649, 1638, 1638, 1649, 1638, 1638,
       68, 1650, 1651,   68, 1638, 1638, 1638, 1638, 1638, 1652,
       66, 1652, 1638,   82, 1653, 1654,   82, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1655, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1656, 1656, 1656, 1638,
     1638, 1638, 1638, 1638, 1638, 1657, 1655, 1638, 1638, 1638,
     1638, 1638, 1646, 1638, 1638, 1638, 1638, 1638,  127,  127,
     1638, 1638, 1638, 1638, 1638, 1638, 1658, 1638, 1638, 1658,
     1638, 1638, 1658, 1658, 1658, 1658, 1658, 1638, 1638, 1638,
     1638, 1659, 1638, 1638, 1638, 1638, 1645, 1645, 1645, 1645,
     1638, 1638, 1638, 1660, 1638, 1645, 1645, 1645, 1638, 1661,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1662,   47, 1663, 1638, 1663, 1663, 1663, 1663,

     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1664,
     1638, 1638, 1646, 1646, 1646, 1665, 1638, 1638, 1638, 1638,
     1638, 1638, 1666, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1667,   68, 1638, 1668, 1669,   68, 1638, 1638, 1638, 1638,
     1670, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1667,
     1638, 1671, 1638,  260, 1672, 1673, 1674, 1673, 1638, 1638,
     1638, 1675, 1638, 1675,  274, 1638, 1638, 1638, 1638,   68,
     1638, 1638, 1638, 1638, 1638, 1638, 1676, 1677, 1638, 1678,
     1679, 1677, 1638, 1638, 1638, 1680, 1638, 1676, 1638, 1681,

     1638,  298, 1682, 1683, 1684, 1683, 1638, 1638, 1638, 1685,
     1638, 1685,  312, 1638, 1638, 1638, 1677, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1686,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1687, 1638, 1638, 1638, 1638, 1688, 1688, 1688,
     1638, 1638, 1638, 1638, 1689, 1689, 1638, 1638, 1638, 1638,
     1690, 1638, 1691, 1692, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1693, 1638, 1638, 1693, 1693, 1693, 1693, 1693,
     1693, 1693, 1638, 1638, 1638, 1694, 1695, 1696, 1697, 1638,
     1697, 1638, 1638, 1698, 1638, 1638, 1638, 1638, 1638, 1699,

     1638, 1699, 1700, 1699, 1701, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1638, 1638,
     1638, 1638, 1698, 1698, 1698, 1698, 1638, 1698, 1698, 1698,
     1638, 1702, 1638, 1638, 1638, 1638, 1703, 1638, 1638, 1704,
     1638, 1705, 1705, 1706, 1705, 1638, 1638, 1638, 1638, 1707,
     1708, 1708, 1638, 1638, 1638, 1709, 1638, 1710, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1711, 1712, 1712, 1638, 1638,

     1638, 1704, 1705,  503, 1713, 1638, 1704, 1714, 1715, 1716,
     1713, 1638, 1638, 1638, 1713, 1638, 1714, 1715, 1716, 1713,
     1638, 1638, 1638,  503, 1717, 1718, 1718, 1719, 1718, 1638,
     1638, 1638, 1720, 1638, 1638, 1638, 1638, 1638, 1721, 1722,
     1722, 1638, 1638, 1638, 1721, 1638, 1638, 1638, 1638, 1723,
     1638, 1724, 1724, 1725, 1724, 1638, 1638, 1638, 1638, 1726,
     1727, 1727, 1638, 1638, 1638, 1728, 1638, 1729, 1638, 1638,
     1638, 1638, 1638, 1730, 1731, 1731, 1638, 1638, 1638, 1723,
     1724,  581, 1732, 1638, 1723, 1733, 1734, 1735, 1732, 1638,
     1638, 1638, 1732, 1638, 1733, 1734, 1735, 1732, 1638, 1638,

     1638,  581, 1736, 1737, 1737, 1738, 1737, 1638, 1638, 1638,
     1739, 1638, 1638, 1638, 1638, 1638, 1740, 1741, 1741, 1638,
     1638, 1638, 1638, 1638, 1742, 1740, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1743, 1638, 1638, 1638, 1638, 1638, 1744,
     1638, 1638, 1638, 1745, 1746, 1745, 1747, 1638, 1638, 1638,
     1748, 1748, 1748, 1748, 1748, 1749, 1750, 1638, 1751, 1751,
     1745, 1745, 1745, 1745, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1752, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,

     1753, 1753, 1753, 1753, 1753, 1638, 1753, 1638, 1638, 1638,
     1638, 1753, 1753, 1753, 1753, 1638, 1638, 1753, 1753, 1753,
     1753, 1753, 1753, 1638, 1751, 1638,  725,  725,  725, 1751,
     1754, 1754, 1755, 1638, 1756, 1757, 1758, 1758, 1638, 1638,
     1638, 1638, 1638, 1759, 1759, 1759, 1638, 1638, 1638, 1638,
     1638, 1760, 1760, 1761, 1638, 1638, 1638, 1762, 1638, 1638,
     1638, 1638, 1638, 1638, 1763, 1763, 1763, 1638, 1638, 1638,
     1638, 1638, 1764, 1755, 1765, 1638, 1638, 1638, 1766, 1755,
     1755, 1764, 1767, 1755, 1638, 1638, 1638, 1768, 1638, 1638,
     1638, 1769, 1638, 1638, 1638, 1755,  782, 1638, 1638,  782,

     1755,  782, 1770, 1771, 1756, 1772, 1773, 1774, 1638, 1638,
     1638, 1775, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1776, 1776, 1776, 1638, 1638, 1638, 1638, 1638, 1776, 1638,
     1777, 1638, 1778, 1779, 1780, 1780, 1638, 1638, 1638, 1638,
     1638, 1781, 1781, 1781, 1638, 1638, 1638, 1638, 1638, 1782,
     1782, 1783, 1638, 1638, 1638, 1784, 1638, 1638, 1638, 1638,
     1638, 1638, 1785, 1785, 1785, 1638, 1638, 1638, 1638, 1638,
     1786, 1777, 1787, 1638, 1638, 1638, 1788, 1777, 1777, 1786,
     1789, 1777, 1638, 1638, 1638, 1790, 1638, 1638, 1638, 1791,
     1638, 1638, 1638, 1777,  880, 1638, 1638,  880, 1777,  880,

     1792, 1793, 1778, 1794, 1795, 1796, 1638, 1638, 1638, 1797,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1798, 1798,
     1798, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1799, 1799, 1798, 1638, 1800, 1800, 1801, 1801, 1802, 1803,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1804, 1638,
     1638, 1805, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1638,
     1638, 1806, 1806, 1806, 1806, 1806, 1638, 1806, 1638, 1806,
     1638, 1638, 1638, 1806, 1806, 1638, 1806,  989, 1806, 1638,

     1638, 1638, 1806, 1806, 1638, 1638, 1806, 1807, 1807, 1808,
     1809, 1809, 1809, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1810, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1811, 1638, 1638, 1638, 1638, 1638,
     1812, 1638, 1638, 1638, 1813, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1814, 1814, 1638, 1638, 1638, 1638, 1638, 1808,
     1638, 1060, 1815, 1815, 1816, 1815, 1638, 1638, 1638, 1817,
     1818, 1815, 1815, 1819, 1820, 1638, 1638, 1638, 1821, 1822,
     1822, 1638, 1638, 1638, 1823, 1638, 1824, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1825,

     1826, 1826, 1826, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1827, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1828, 1638, 1638, 1638, 1638, 1638,
     1829, 1638, 1638, 1638, 1830, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1831, 1831, 1638, 1638, 1638, 1638, 1638, 1825,
     1638, 1150, 1832, 1832, 1833, 1832, 1638, 1638, 1638, 1834,
     1835, 1832, 1832, 1836, 1837, 1638, 1638, 1638, 1838, 1839,
     1839, 1638, 1638, 1638, 1840, 1638, 1841, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1842,
     1638, 1843, 1844, 1638, 1638, 1638, 1638, 1845, 1638, 1846,

     1638, 1638, 1638, 1638, 1638, 1847, 1638, 1638, 1638, 1638,
     1638, 1638, 1848, 1638, 1849, 1849, 1849, 1216, 1638, 1216,
     1638, 1216, 1638, 1638, 1638, 1216, 1638, 1216, 1221, 1638,
     1638, 1638, 1638, 1638, 1216, 1216, 1216, 1216, 1638, 1216,
     1221, 1638, 1638, 1638, 1216, 1216, 1638, 1638, 1216, 1216,
     1216, 1638, 1216, 1221, 1638, 1638, 1638, 1216, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1850,
     1851, 1851, 1638, 1638, 1638, 1638, 1638, 1852, 1853, 1853,
     1638, 1638, 1638, 1854, 1855, 1856, 1856, 1638, 1638, 1638,

     1638, 1638, 1857, 1857, 1857, 1638, 1638, 1638, 1638, 1638,
     1858, 1858, 1859, 1638, 1638, 1638, 1860, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1861, 1862, 1862, 1638,
     1638, 1638, 1638, 1638, 1863, 1864, 1864, 1638, 1638, 1638,
     1865, 1866, 1867, 1867, 1638, 1638, 1638, 1638, 1638, 1868,
     1868, 1868, 1638, 1638, 1638, 1638, 1638, 1869, 1869, 1870,
     1638, 1638, 1638, 1871, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1872, 1638, 1873, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1874, 1638, 1216, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1216, 1414, 1638, 1638, 1638, 1216, 1216, 1216, 1638, 1638,
     1216, 1638, 1638, 1216, 1638, 1638, 1216, 1216, 1216, 1216,
     1638, 1216, 1414, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1875, 1875, 1875, 1638, 1638, 1638, 1638, 1638,
     1638, 1876, 1876, 1876, 1638, 1638, 1638, 1638, 1638, 1877,
     1877, 1877, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1859, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1861, 1861, 1861, 1638,

     1638, 1638, 1638, 1638, 1638, 1863, 1863, 1863, 1638, 1638,
     1638, 1638, 1638, 1866, 1866, 1866, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1870, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1878, 1638, 1879, 1638, 1880,
     1638, 1881, 1882, 1638, 1638, 1216, 1414, 1638, 1638, 1638,
     1216, 1638, 1216, 1414, 1638, 1638, 1638, 1216, 1638, 1216,
     1414, 1638, 1638, 1638, 1216, 1638, 1216, 1414, 1638, 1638,
     1638, 1638, 1216, 1414, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1883, 1638,
     1884, 1638, 1216, 1414, 1638, 1638, 1638, 1638, 1638, 1638,
     1216, 1414, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1885, 1886, 1638,    0, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638
    } ;

static const flex_int16_t yy_nxt[11245] =
    {   0,
     1638, 1638,   33,   34,   35,   33,   34,   35,  102,  103,
      102,  103,  173,  179,  320,  173,  179,  320,  174,  180,
      229,  279,  263,  175,  175,  181,   36, 1638,  181,   40,
      262,  262,  262,  262,  174,  180,  264,  182,  219,  182,
      183,  219,  184,  184,  184,  184,  217, 1638,  218,  218,
      218,  218, 1638,  321,  264,  220,  220,  220,  220,  349,
      349,  349,  221,  362,  362,  362,  362,  369,  370,  390,
      391,   37,   38,   39,   37,   38,   39,   41,   42,   43,
       44,   42,   41,   45,   46,   41,   41,   47,   48,   41,
       49,   41,   49,   50,   51,   52,   52,   52,   52,   41,

       53,   41,   41,   54,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   56,   57,   48,   41,
       58,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   59,   41,   41,   60,   60,   61,   62,
       63,   41,   64,   43,   44,   64,   65,   45,   66,   65,
       67,   56,   41,   65,   68,   69,   68,   70,   51,   71,
       71,   71,   71,   72,   53,   65,   65,   73,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       56,   74,   41,   67,   58,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   41,   41,   75,
       60,   60,   76,   77,   78,   41,   79,   43,   44,   79,
       80,   45,   81,   80,   67,   56,   48,   80,   82,   69,
       82,   83,   80,   84,   84,   84,   84,   85,   53,   80,
       80,   86,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   56,   87,   48,   67,   58,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   41,   41,   41,   60,   60,   88,   89,   90,   92,

       93,   94,   92,  168,  169,  170,   95,  687,   95,   95,
       95,   95,  688,   95,   95,   96,  176, 1448,  168,  169,
      170,  670,  177,   95,  168,  169,  170,  178,  671,  168,
      169,  170,  371,  374,  672,  371,  374,   95,   97,   95,
      219,  358,  219,  219,  358,  219,  105,  106,  107,  105,
      752,  108,  105,  106,  107,  105,  359,  108,  136,  137,
      138,  136,  758,  108,  221,   95,  301,   98,   98,   99,
      100,  101,   92,   93,   94,   92,  229,  279,  765,   95,
      302,   95,   95,   95,   95,  109,   95,   95,   96, 1035,
      243,  109,  241,  241,  241,  241,   95,  139,  302,  222,

     1449,  223,  223,  223,  223,  376,  377,  377,  377,  774,
       95,   97,   95,  225,  110,  110,  111,  112,  113, 1041,
      110,  110,  111,  112,  113,  950,  110,  110,  111,  112,
      113,  225,  363,  951,  364,  364,  364,  364,   95, 1450,
       98,   98,   99,  100,  101,  114,  104,  115,  116,  104,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  117,  117,  117,  117,  114,  114,  114,
      114,  114,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  114,  114,  114,  114,  114,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,

      117,  117,  118,  117,  117,  117,  117,  117,  117,  119,
      117,  114,  114,  114,  120,  120,  121,  122,  123,  105,
      124,  125,  105,  369,  370,  168,  169,  170,  136,  137,
      138,  136, 1045,  108,  159,  160,  229,  279,  161,  159,
      160, 1451,  378,  161,  126,  237,  780,  338,  237,  403,
      289,  403,  287,  287,  287,  287,  379,  238,  127,  238,
      239,  128,  240,  240,  240,  240,  283,  139,  464,  283,
      788,  464,  162,  335,  379, 1053,  335,  162,  284,  631,
      284,  285,  631,  286,  286,  286,  286,  110,  110,  111,
      112,  113,  105,  124,  125,  105,  110,  110,  111,  112,

      113,  163,  163,  164,  165,  166,  163,  163,  164,  165,
      166,  378,  336,  380,  380,  380,  380,  126,  186,  168,
      169,  170,  396,  242,  187,  379,  645,  366,  645,  188,
      366,  127,  243,  320,  128,  266,  320,  176,  244,  168,
      169,  170,  245,  379,  243,  177, 1452,  168,  169,  170,
      267,  792,  189,  335,  245,  190,  335,  191,  246,  397,
      110,  110,  111,  112,  113,  129,  367, 1280,  129,  192,
      268,  130,  321,   67,   56, 1459,  193,  131,   69,  131,
      132,   41,  133,  133,  133,  133, 1460,  247,  248,  249,
      134,  178,  336,  168,  169,  170,  534,  535,  536,  269,

      270,  271,  324,  630,  135,  273,   67,  136,  137,  138,
      136,  274, 1063,  274,  339,  636,  275,  275,  275,  275,
      251,  288,  637,  173,  219,  637,  173,  219,  650,  174,
      289,  650,  126,  667,  175,  668,  290,  657,  304,  299,
      291,  300,  300,  300,  300,  174,  140,  289,  221,  128,
      369,  649,  311,  305, 1461,  657,  292,  291,  312,  358,
      312, 1288,  358,  313,  313,  313,  313,  296, 1468,  276,
      277,  278, 1469,  306,  359,  110,  110,  111,  112,  113,
      136,  137,  138,  136, 1295,  293,  294,  295,  176,  186,
      168,  169,  170,  378,  388,  187,  168,  169,  170, 1476,

      188,  681,  307,  308,  309,  126, 1477,  379,  196,  179,
      464,  229,  179,  464,  682,  180,  314,  315,  316,  140,
      175, 1072,  128,  189,  181,  379,  190,  181,  191,  390,
      391,  180,  465,  465,  465,  385,  182,  466,  182,  183,
      360,  184,  184,  184,  184, 1478,  385,  361,  110,  110,
      111,  112,  113,  142,  143,  144,  142,  406,  407,  408,
      217,  145,  184,  184,  184,  184,  612,  613,  614,  385,
      146,  146,  146,  146,  385,  349,  349,  349,  385,  146,
      146,  146,  146,  464,  229,  385,  464, 1303,  385,  392,
      385,  386,  392,  658,  391, 1479,  146,  146,  146,  146,

      146,  146,  142,  143,  144,  142,  220,  220,  220,  220,
      145, 1480,  394,  393,  184,  184,  184,  184, 1079,  146,
      146,  146,  146, 1481,  631,  324,  395,  631,  146,  146,
      146,  146,  398,  931,  196,  931,  399,  196,  399,  296,
      371,  400,  400,  371,  395,  146,  146,  146,  146,  146,
      146,  148,  149,  150,  148,  196,  151, 1311,  196, 1486,
      152,  152,  623,  431,  152,  153,  427, 1487,  154,  155,
      155,  155,  152,  401,  624,  401, 1317,  436,  402,  402,
      402,  625, 1488,  406,  407,  408,  406,  407,  408,  152,
      425,  152,  426,  196,  451,  451,  451,  451,  623,  156,

      196,  400,  400, 1489,  406,  407,  408,  406,  407,  408,
      624,  157,  196,  661,  661,  196,  152,  625,  152,  148,
      149,  150,  148,  196,  151,  432,  433,  434,  152,  152,
      435,  196,  152,  153,  428, 1085,  154,  155,  155,  155,
      152,  429,  406,  407,  408,  438,  196,  430, 1490,  406,
      407,  408,  442,  637,  339,  443,  637,  152,  437,  152,
      803,  406,  407,  408,  406,  407,  408,  156,  220,  220,
      220,  220,  406,  407,  408,  402,  402,  402,  196,  157,
      406,  407,  408,  447,  152,  392,  152,  194,  392,  374,
      194,  195,  374,  812,  195,  406,  407,  408,  195,  195,

      821,  195, 1101,  195,  195,  195,  195,  195,  196,  393,
      195,  195,  448,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195, 1491,  195,  406,  407,  408,
      197,  198,  199,  200,  201,  202,  203,  195,  204,  195,
      205,  206,  207,  208,  195,  209,  210,  211,  212,  195,
      195,  195,  463,  463,  463,  463,  834,  213,  214,  215,
      229,  230,  231,  842,  650,  369,  452,  650,  218,  218,
      218,  218,  663,  663,  663,  196,  232,  232,  232, 1113,
      395,  196,  461,  392,  461,  227,  392,  462,  462,  462,
      462,  469,  196,  240,  240,  240,  240,  439,  395,  632,

      632,  632,  231,  231,  633,  684,  231,  231,  685,  366,
      440, 1492,  366,  850,  231,  856,  441,  231,  444,  231,
      863,  231,  233,  186,  406,  407,  408, 1125,  196,  187,
      406,  407,  408, 1493,  188,  250,  250,  250,  250,  251,
      252,  406,  407,  408,  479,  479,  479,  479,  367,  253,
      254,  255,  256,  257,  258,  872,  464,  189,  445,  464,
      190, 1131,  191,  446,  631,  324,  453,  631,  454,  454,
      454,  454,  631,  637,  192,  631,  637,  406,  407,  408,
      456,  193,  242,  262,  262,  262,  262,  638,  638,  638,
      393,  259,  639,  260,  260,  260,  260,  244,  456, 1494,

      222,  245,  223,  223,  223,  223,  237, 1135,  470,  237,
      240,  240,  240,  240,  225,  487,  196,  246,  238, 1495,
      238,  239,  471,  240,  240,  240,  240,  674,  675,  676,
      488,  878,  225,  886,  243,  473,  241,  241,  241,  241,
      471,  759,  760,  761,  243, 1143,  247,  248,  249,  288,
      474,  661,  661,  176,  245,  168,  169,  170,  297, 1496,
      298,  298,  298,  298,  290,  406,  407,  408,  291,  243,
      475,  241,  241,  241,  241,  494,  789,  790,  791,  489,
      490,  491,  637,  339,  292,  637,  250,  250,  250,  250,
      945,  946,  495,  502,  502,  502,  502,  928,  928,  476,

      477,  478,  243,  890,  241,  241,  241,  241,  559,  559,
      559,  559, 1347,  293,  294,  295,  323,  323,  324,  325,
      326,  323,  323,  323,  327,  323,  327,  327,  327,  327,
      323,  327,  327,  327,  328,  328,  328,  323,  323,  323,
      323,  327,  323,  323,  323,  329,  323,  323,  323,  323,
      323,  323,  329,  323,  329,  327,  326,  327,  323,  323,
      326,  326,  323,  329,  326,  326,  323,  323,  323,  323,
      323,  323,  326,  323,  323,  326,  329,  326,  323,  326,
      330,  323,  323,  327,  323,  323,  323,  323,  323,  323,
      339,  340,  341, 1503,  341,  481,  549,  341,  286,  286,

      286,  286,  650,  497,  243,  650,  342,  342,  342,  567,
      267, 1504,  243, 1153,  245,  465,  465,  465,  267, 1505,
      466,  196,  245,  954,  568, 1355,  955,  196,  341, 1512,
      482,  341,  341,  341,  928,  928,  341,  341,  498,  580,
      580,  580,  580, 1513,  341, 1362,  692,  341, 1520,  341,
     1521,  341,  343,  350,  350,  350,  350, 1162, 1522,  483,
      484,  485,  350,  350,  350,  350,  705,  499,  500,  501,
      406,  407,  408,  569,  570,  571,  406,  407,  408,  350,
      350,  350,  350,  350,  350,  352, 1370,  353,  353, 1523,
     1524,  354,  353,  354, 1169, 1525,  355,  355,  355,  355,

      527,  789,  790,  791,  353,  524, 1378,  524,  243,  243,
      525,  525,  525,  525, 1530,  528, 1531,  353,  716,  245,
      353,  716,  472,  642,  642,  642,  642,  550,  717,  286,
      286,  286,  286, 1384, 1532,  529,  283, 1533, 1175,  283,
      472,  551, 1534,  901,  353,  339,  340,  341,  284,  341,
      284,  285,  341,  286,  286,  286,  286,  392,  910,  551,
      392,  342,  342,  342,  530,  531,  532,  650,  369,  357,
      650,  919,  299, 1535,  300,  300,  300,  300,  813,  814,
      815,  393, 1536,  341, 1537, 1538,  341,  341,  341, 1539,
     1540,  341,  341,  355,  355,  355,  355, 1541, 1542,  341,

     1543, 1544,  341,  405,  341,  665,  341,  343,  409,  410,
      411,  412,  413,  414,  415,  666,  416,  405,  417,  418,
      419,  420,  665,  421,  422,  423,  424,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  666,  457,  458,  458,  458,  458,  457,
      457,  457,  457,  457,  459,  459,  459,  460,  459,  459,
      459,  459,  459,  459,  459,  459,  457,  457,  457,  457,
      457,  459,  459,  459,  459,  460,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  457,  457,  457,  457,  457,  457,  457,

      457,  473,  647,  405,  362,  362,  362,  362,  266,  665,
      263,  666,  503,  503,  503,  503,  474,  243, 1011, 1023,
      245, 1035, 1041,  267,  504, 1045,  643,  245,  643,  266,
     1053,  644,  644,  644, 1453,  196,  475, 1580,  243,  196,
      540, 1581,  504,  268,  267,  534,  535,  536,  245,  243,
      648,  648,  648,  648, 1280,  244, 1582, 1063,  363,  245,
      364,  364,  364,  364,  268,  476,  477,  478,  506, 1462,
      693,  691,  269,  270,  271,  541,  196,  507, 1583,  508,
      508,  508,  508,  509,  406,  407,  408,  510,  406,  407,
      408,  511, 1584,  269,  270,  271,  378, 1288,  380,  380,

      380,  380, 1585, 1470,  542,  543,  544, 1586,  697,  511,
      379,  651,  651,  651,  651,  652, 1587,  652, 1295, 1588,
      653,  653,  653,  653, 1072,  406,  407,  408,  379,  857,
      858,  859,  512,  513,  514,  457,  457,  457,  457,  457,
      515,  457,  516,  515,  457,  457,  457,  515,  515,  457,
      515, 1303,  457,  517,  517,  517,  517,  518,  457,  515,
      515,  519,  515,  515,  515,  520,  515,  515,  515,  515,
      515,  515,  515,  515,  457,  515,  457,  457,  457,  515,
      515,  515,  515,  520,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,

      515,  457,  457,  457,  457,  457,  521,  522,  523,  540,
      451,  451,  451,  451, 1589, 1079,  553, 1482,  243, 1590,
      545,  545,  545,  545,  244,  289, 1591,  288,  245, 1311,
      561,  554,  887,  888,  889,  291,  289,  716, 1592,  289,
      716,  288,  290, 1317,  541,  305,  291,  717,  575,  291,
      289,  555, 1593,  196, 1085, 1101,  290,  289,  967, 1113,
      291,  967,  292,  305,  461,  562,  461,  291,  968,  660,
      660,  660,  660,  542,  543,  544,  292, 1125,  702, 1131,
      556,  557,  558,  576, 1135,  378, 1143,  380,  380,  380,
      380,  293,  294,  295,  563,  564,  565,  196, 1497,  379,

     1594,  605,  406,  407,  408,  293,  294,  295,  969, 1595,
      289,  969,  577,  578,  579,  553,  606,  379,  970, 1347,
      291,  887,  888,  889,  301,  196,  581,  581,  581,  581,
      554, 1596,  696, 1153,  291, 1506,  607,  602,  582,  602,
      289, 1597,  603,  603,  603,  603,  406,  407,  408,  304,
      555, 1598,  698,  196,  552, 1355,  582, 1599,  289,  454,
      454,  454,  454, 1514,  305,  608,  609,  610,  291,  196,
     1600,  659,  552, 1601,  406,  407,  408, 1362,  714,  556,
      557,  558,  584,  196,  306, 1602,  196, 1162, 1370,  659,
      196,  585, 1603,  586,  586,  586,  586,  587,  911,  912,

      913,  588,  406,  407,  408,  589, 1169,  694,  695,  660,
      660,  660,  660,  307,  308,  309,  699, 1526,  406,  407,
      408,  712, 1604,  589,  700,  730,  701,  731,  731,  731,
      731, 1605,  406,  407,  408,  406,  407,  408, 1378,  406,
      407,  408,  463,  463,  463,  463,  590,  591,  592,  457,
      457,  457,  457,  457,  593,  457,  594,  593,  457,  457,
      457,  593,  593,  457,  593, 1606,  593,  595,  595,  595,
      595,  596,  457,  593,  593,  597,  593,  593,  593,  598,
      593,  593,  593,  593,  593,  593,  593,  593,  457,  593,
      457,  457,  457,  593,  593,  593,  593,  598,  593,  593,

      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  457,  457,  457,  457,  457,
      599,  600,  601,  304,  980,  196,  618,  980,  196, 1384,
     1607,  288,  289,  196,  981,  289, 1175, 1608,  305, 1609,
      289,  290,  291, 1610,  716,  291,  290,  716, 1611,  405,
      291,  612,  613,  614,  717,  644,  644,  644,  306,  703,
      196,  619,  704,  665,  666,  196,  292,  715,  405,  196,
     1005,  713,  665, 1005,  406,  407,  408,  406,  407,  408,
     1006,  196,  406,  407,  408,  666,  196,  307,  308,  309,
      620,  621,  622,  618,  196,  293,  294,  295,  405,  718,

      196,  665,  289,  720,  626,  626,  626,  626,  290,  406,
      407,  408,  291,  666,  406,  407,  408,  719,  406,  407,
      408,  262,  262,  262,  262,  405,  665,  721,  619,  722,
      406,  407,  408,  473,  775,  406,  407,  408,  666,  723,
      405,  665,  243,  406,  407,  408,  666, 1453,  474,  406,
      407,  408,  245,  479,  479,  479,  479,  620,  621,  622,
      350,  350,  350,  350,  967,  775, 1626,  967,  475,  350,
      350,  350,  350,  726,  968,  726, 1280, 1462,  727,  727,
      727,  727, 1627,  776,  777,  778,  350,  350,  350,  350,
      350,  350,  664,  664,  664,  664, 1288,  476,  477,  478,

     1470,  664,  664,  664,  664,  461, 1628,  461, 1295, 1303,
      729,  729,  729,  729,  776,  777,  778,  753,  664,  664,
      664,  664,  664,  664,  706,  706,  706,  706,  706, 1482,
      706,  707,  754,  706,  706,  706, 1629, 1311,  706,  453,
      706,  454,  454,  454,  454,  969,  708,  706,  969, 1317,
      706, 1497,  753,  456,  453,  970,  728,  728,  728,  728,
      935,  935,  935,  706, 1630,  706,  707,  706,  456, 1347,
      734,  456,  734, 1506, 1631,  735,  735,  735,  735, 1355,
     1514,  755,  756,  757, 1632, 1362,  456,  939,  939,  939,
      706,  706,  706,  706,  706,  709,  710,  711,  457,  457,

      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457, 1370,  457,  725,  725,  725,  725,
      457,  457,  457,  457,  457,  459,  459,  459,  460,  459,
      459,  459,  459,  459,  459,  459,  459,  457,  457,  457,
      457,  457,  459,  459,  459,  459,  460,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  457,  457,  457,  457,  457,  457,
      457,  457,  506,  300,  300,  300,  300, 1526, 1633,  473,
      663,  663,  663,  508,  508,  508,  508,  509,  243, 1378,
      737,  510, 1384,  473,  474,  733,  506,  405,  245,  243,

      980,  665,  243,  980,  666,  267,  405,  745,  474,  245,
      981,  779,  245,  733,  475,  481,  243,  559,  559,  559,
      559, 1634,  528,  665,  243,  738,  245,  666,  475, 1453,
      267, 1462,  481, 1470,  245, 1482,  512,  513,  514, 1634,
     1497,  243,  746,  476,  477,  478, 1506,  267, 1514, 1526,
      482,  245, 1023,  744,  739,  740,  741,  476,  477,  478,
      793,  794,  795,  506, 1024, 1025, 1026,  482,  766,  873,
      467,  747,  748,  749,  873,  497,  467,  243,  509,  483,
      484,  485,  510,  528,  243,  736,  497,  245, 1447, 1005,
      267,  506, 1005, 1011,  245,  243,  483,  484,  485, 1006,

      666,  267,  927,  767,  927,  245,  779,  928,  928,  524,
      498,  524,  243,  665,  525,  525,  525,  525,  874,  875,
      876,  498,  405,  874,  875,  876,  472,  512,  513,  514,
      666,  665,  768,  769,  770,  642,  642,  642,  642,  499,
      500,  501,  405,  634,  472,  463,  463,  463,  463,  634,
      499,  500,  501,  506,  666,  793,  794,  795,  632,  632,
      632,  665,  507,  633,  773,  773,  773,  773,  509,  638,
      638,  638,  510,  405,  639,  640,  511,  666,  796, 1233,
      796,  640, 1233,  797,  797,  797,  797,  775,  665, 1234,
      801,  405,  801, 1411,  511,  802,  802,  802,  802,  775,

      653,  653,  653,  653, 1247, 1410,  527, 1247,  243, 1409,
      525,  525,  525,  525, 1248,  243, 1408,  512,  513,  514,
      473,  528,  472, 1407,  656,  245,  775,  584, 1406,  263,
      656,  503,  503,  503,  503,  474,  776,  777,  778,  245,
      472,  529,  587,  504, 1405, 1404,  588,  527,  776,  777,
      778,  759,  760,  761,  527,  475,  243, 1638,  775,  822,
     1638,  504,  528,  243, 1403, 1402,  245, 1638,  243,  528,
      530,  531,  532,  245,  474,  776,  777,  778,  245, 1036,
     1037, 1038,  529, 1401,  476,  477,  478,  781,  783,  529,
     1400,  590,  591,  592,  823, 1399,  507, 1398,  782,  782,

      782,  782,  783, 1042, 1043, 1044,  510,  776,  777,  778,
      784,  530,  531,  532,  653,  653,  653,  653,  530,  531,
      532,  540,  774,  824,  825,  826,  540,  929,  784,  929,
      243, 1397,  930,  930,  930,  243,  244,  776,  777,  778,
      245,  244,  832, 1396,  832,  245,  617,  833,  833,  833,
      833,  785,  786,  787,  781,  404,  541, 1392,  404,  584,
      919,  541,  611,  507,  404,  800,  800,  800,  800,  783,
     1046, 1047, 1048,  510,  877,  646,  604,  784,  646,  553,
     1391,  910,  851, 1390,  646,  542,  543,  544,  289,  774,
      542,  543,  544,  553,  554,  784,  835,  852,  291,  789,

      790,  791,  289, 1638,  404,  289, 1638,  553,  554,  901,
      404,  305,  291, 1638,  555,  291,  289,  851,  785,  786,
      787,  804,  554,  891,  892,  893,  291, 1389,  555, 1388,
      805,  836,  806,  806,  806,  806,  807,  813,  814,  815,
      808, 1175,  555,  556,  557,  558,  853,  854,  855, 1008,
     1008, 1008, 1008, 1177, 1377,  843,  475,  556,  557,  558,
      837,  838,  839,  646,  289,  728,  728,  728,  728,  646,
      606,  556,  557,  558,  291, 1376,  602, 1169,  602,  289,
     1369,  603,  603,  603,  603,  809,  810,  811,  822, 1368,
      844, 1162,  467,  552,  467,  561, 1354,  243,  467,  829,

      829,  829,  829,  474,  289, 1233, 1353,  245, 1233,  932,
      305,  552,  932, 1153,  291, 1234,  561,  583,  932,  845,
      846,  847,  584,  823, 1346,  289,  890,  864, 1345, 1344,
      562,  305, 1114, 1115, 1116,  291,  289,  877,  735,  735,
      735,  735,  606, 1143, 1343,  730,  291,  731,  731,  731,
      731,  562,  824,  825,  826,  584,  857,  858,  859,  563,
      564,  565,  865,  886,  575,  939,  586,  586,  586,  586,
      587,  939, 1342,  289,  588,  575,  878, 1341,  831,  305,
      563,  564,  565,  291,  289, 1340,  891,  892,  893, 1135,
      305,  866,  867,  868,  291,  634,  831,  634,  940,  576,

      894,  634,  894, 1339,  940,  895,  895,  895,  895,  873,
      576,  289,  932,  603,  603,  603,  603, 1338,  932,  590,
      591,  592, 1126, 1127, 1128,  552, 1131, 1337,  577,  578,
      579,  872,  651,  651,  651,  651, 1132, 1133, 1134,  577,
      578,  579,  584,  552,  379,  797,  797,  797,  797,  775,
     1336,  585, 1335,  871,  871,  871,  871,  587,  874,  875,
      876,  588,  379, 1125,  574,  589, 1334,  899, 1638,  899,
      605, 1638,  900,  900,  900,  900,  873,  605, 1638,  289,
      863,  566,  605,  589, 1638,  606,  289, 1638, 1333,  291,
      856,  289,  606, 1332, 1638,  920,  291,  606,  776,  777,

      778,  291,  850, 1331,  289,  607,  590,  591,  592,  553,
      554, 1330,  607, 1192,  291, 1426, 1113,  607,  301, 1192,
      581,  581,  581,  581,  554,  874,  875,  876,  291,  873,
      921, 1428,  582,  560,  608,  609,  610,  800,  800,  800,
      800,  608,  609,  610,  555, 1193,  608,  609,  610,  618,
      582, 1193, 1329,  727,  727,  727,  727, 1394,  289,  922,
      923,  924,  618, 1394,  290,  455, 1395,  842,  291,  552,
     1328,  289, 1395,  556,  557,  558,  879,  290,  874,  875,
      876,  291,  834,  455,  619,  585, 1327,  880,  880,  880,
      880,  881, 1136, 1137, 1138,  588,  461,  619,  461,  882,

     1326,  729,  729,  729,  729,  833,  833,  833,  833, 1101,
      539,  872, 1325,  620,  621,  622, 1638,  882, 1638,  453,
      821,  729,  729,  729,  729, 1636,  620,  621,  622,  967,
      533, 1636,  967,  526, 1324,  729,  729,  729,  729,  968,
      883,  884,  885,  879,  887,  888,  889,  455,  812, 1323,
      196,  803,  585, 1637,  898,  898,  898,  898,  881, 1637,
      969, 1322,  588,  969, 1638,  455,  882, 1638, 1321, 1638,
      970, 1085, 1638, 1087, 1638, 1310, 1309, 1638,  872, 1638,
     1638,  196, 1079, 1638,  882,  196, 1638, 1638, 1302, 1301,
      196, 1072, 1638, 1638, 1287, 1638, 1286, 1063,  196,  406,

      407,  408, 1638,  505,  196, 1279,  792,  883,  884,  885,
      902,  972, 1278,  196,  971,  898,  898,  898,  898,  903,
     1277,  904,  904,  904,  904,  905, 1053, 1276,  973,  906,
      406,  407,  408,  974,  406,  407,  408,  788, 1275,  406,
      407,  408,  780,  976, 1274,  555, 1273,  406,  407,  408,
      911,  912,  913,  406,  407,  408, 1638, 1638, 1045, 1638,
     1638, 1272,  406,  407,  408, 1271, 1638, 1638, 1060, 1060,
     1060, 1060, 1041, 1270,  907,  908,  909,  920,  196,  774,
      780,  930,  930,  930, 1269, 1268,  289, 1035,  933,  933,
      933,  933,  554,  640,  980,  640,  291,  980,  780,  640,

     1638, 1427, 1638,  453,  981,  454,  454,  454,  454,  496,
      975, 1638,  921, 1267, 1638,  196,  765,  456, 1638,  486,
     1638, 1638, 1266, 1009, 1009, 1009, 1009,  406,  407,  408,
      758, 1265,  196,  752, 1264,  456, 1263, 1062, 1062, 1062,
     1062,  922,  923,  924,  936,  936,  936,  936, 1638,  780,
     1023, 1638,  480,  936,  936,  936,  936, 1262, 1638,  977,
      930,  930,  930,  744,  406,  407,  408,  780,  472,  196,
      936,  936,  936,  936,  936,  936,  664,  664,  664,  664,
     1261,  406,  407,  408,  736,  664,  664,  664,  664, 1638,
     1429, 1432, 1638, 1429, 1432,  978, 1260, 1259, 1086, 1638,

     1430, 1433,  664,  664,  664,  664,  664,  664, 1012, 1011,
      196, 1638, 1638, 1087, 1638, 1638,  666,  243,  406,  407,
      408, 1638, 1638,  528,  665, 1638, 1638,  245, 1638, 1638,
     1638,  405,  196, 1638, 1638, 1638, 1638, 1638, 1435,  666,
     1638, 1435, 1247, 1013, 1638, 1247,  196,  665, 1436,  979,
      405,  196, 1248, 1214,  982,  196,  935,  935,  935,  406,
      407,  408, 1088, 1089, 1090, 1431, 1638, 1638, 1213, 1638,
     1638, 1212, 1014, 1015, 1016, 1638, 1638, 1638, 1638,  506,
      984,  406,  407,  408,  983, 1638, 1211,  196,  507, 1210,
     1010, 1010, 1010, 1010,  509,  406,  407,  408,  510, 1209,

      406,  407,  408, 1208,  406,  407,  408,  409,  410,  411,
      412,  413,  414,  415, 1440,  416, 1207,  417,  418,  419,
      420, 1206,  421,  422,  423,  424,  985,  753, 1205, 1638,
     1204, 1203, 1638, 1434,  873, 1202,  406,  407,  408, 1638,
     1201, 1200,  754,  512,  513,  514, 1024, 1025, 1026, 1638,
      196,  453, 1638,  727,  727,  727,  727, 1638, 1199, 1638,
     1638, 1638,  753, 1198, 1638, 1638, 1638, 1638, 1638, 1638,
      196, 1638, 1197,  986, 1196, 1638, 1638, 1005, 1638, 1195,
     1005, 1638,  196,  874,  875,  876,  196, 1006, 1638,  881,
     1194,  755,  756,  757,  405, 1190,  994,  310,  196,  406,

      407,  408,  987,  987,  987,  987,  987, 1189,  987,  988,
     1003,  987,  987,  987,  196,  617,  987, 1438,  987,  406,
      407,  408,  995, 1188,  989,  987, 1439, 1187,  987,  919,
      303,  406,  407,  408, 1186,  406,  407,  408,  874,  875,
      876,  987,  611,  987,  988,  987,  196,  406,  407,  408,
     1185,  802,  802,  802,  802,  775,  990, 1235,  196, 1036,
     1037, 1038,  604,  406,  407,  408, 1176, 1184,  987,  987,
      987,  987,  987,  991,  992,  993,  996,  996,  996,  996,
      996, 1177,  996,  997, 1216,  996,  996,  996, 1183, 1215,
      996, 1638,  996,  910, 1638,  406,  407,  408,  998,  996,

     1638, 1638,  996, 1638,  776,  777,  778,  406,  407,  408,
     1638, 1182,  196, 1418, 1181,  996, 1418,  996,  997,  996,
      801,  196,  801, 1419,  999,  802,  802,  802,  802,  775,
     1178, 1179, 1180,  895,  895,  895,  895,  873, 1004,  901,
      196,  737,  996,  996,  996,  996,  996, 1000, 1001, 1002,
      243, 1007, 1150, 1150, 1150, 1150,  267, 1151,  737,  583,
      245,  406,  407,  408,  878, 1149,  745,  243, 1148,  753,
      406,  407,  408,  267, 1226,  243,  738,  245,  776,  777,
      778,  528,  878,  745,  754,  245,  874,  875,  876,  406,
      407,  408,  243,  738,  745, 1042, 1043, 1044,  528,  890,

     1142,  746,  245,  243,  753,  739,  740,  741, 1141,  528,
     1046, 1047, 1048,  245, 1152, 1152, 1152, 1152,  746, 1318,
     1319, 1320,  739,  740,  741,  886,  878,  766, 1140,  746,
      747,  748,  749,  755,  756,  757,  243, 1062, 1062, 1062,
     1062, 1054,  528, 1139,  878,  878,  245,  747,  748,  749,
     1130, 1129,  766,  872, 1124,  766,  775,  574,  747,  748,
      749,  243,  767, 1064,  243, 1429, 1123,  528, 1429, 1122,
      528,  245,  243,  863,  245, 1430, 1054,  287, 1065, 1121,
      566, 1638,  245, 1009, 1009, 1009, 1009,  767, 1120,  196,
      767,  768,  769,  770,  796,  473,  796,  196, 1066,  797,

      797,  797,  797,  775,  243, 1055, 1056, 1057, 1119,  856,
     1070, 1114, 1115, 1116,  245, 1238,  768,  769,  770,  768,
      769,  770,  781, 1126, 1127, 1128, 1217, 1067, 1068, 1069,
      475,  507, 1118,  800,  800,  800,  800,  783,  406,  407,
      408,  510, 1132, 1133, 1134,  784,  406,  407,  408, 1136,
     1137, 1138,  776,  777,  778,  506, 1117,  774,  850,  476,
      477,  478, 1080,  784, 1638, 1112, 1071, 1071, 1071, 1071,
      509,  243,  560, 1638,  510,  822, 1638,  267,  851, 1111,
     1110,  245,  842, 1638,  243,  196,  785,  786,  787,  781,
      474, 1109,  552,  852,  245, 1108,  822, 1081,  507, 1107,

      782,  782,  782,  782,  783,  243, 1432,  834,  510, 1432,
      823,  474,  784,  851,  822,  245, 1433, 1236,  272,  512,
      513,  514, 1099,  243,  774,  539, 1082, 1083, 1084,  474,
      784,  823, 1437,  245,  406,  407,  408, 1098, 1097,  824,
      825,  826,  853,  854,  855, 1152, 1152, 1152, 1152,  823,
     1385, 1386, 1387,  785,  786,  787, 1073,  196,  821,  265,
      824,  825,  826,  196, 1096,  805,  196, 1074, 1074, 1074,
     1074, 1075, 1483, 1484, 1485,  808,  196,  533,  824,  825,
      826,  899, 1435,  899,  584, 1435,  900,  900,  900,  900,
      873, 1066, 1436,  585, 1095, 1100, 1100, 1100, 1100,  587,

      526, 1218, 1245,  588, 1094, 1237,  406,  407,  408, 1102,
     1093,  812,  406,  407,  408,  406,  407,  408,  289, 1092,
     1076, 1077, 1078,  822,  606,  406,  407,  408,  291, 1318,
     1319, 1320,  243, 1091,  829,  829,  829,  829,  474,  874,
      875,  876,  245, 1638, 1103,  835, 1638,  803,  590,  591,
      592,  196, 1061, 1638,  289,  505, 1059,  835,  823, 1058,
      305,  792,  843, 1052,  291, 1051,  289, 1527, 1528, 1529,
      851,  289,  305, 1104, 1105, 1106,  291,  606,  788, 1144,
      836,  291, 1050, 1049,  843,  852,  780,  824,  825,  826,
     1040, 1249,  836,  289,  873, 1039,  774,  844,  843,  606,

      406,  407,  408,  291,  196,  851, 1034,  289,  496,  837,
      838,  839, 1033,  606, 1144, 1418, 1032,  291, 1418,  844,
      196,  837,  838,  839,  765, 1419,  845,  846,  847, 1385,
     1386, 1387,  864,  844,  853,  854,  855,  864, 1483, 1484,
     1485,  289, 1246, 1145, 1146, 1147,  289,  606,  845,  846,
      847,  291,  606,  406,  407,  408,  291,  241, 1031,  864,
      486, 1030,  845,  846,  847,  196, 1029,  865,  289,  406,
      407,  408,  865,  758,  606, 1527, 1528, 1529,  291,  900,
      900,  900,  900,  873,  894, 1233,  894, 1250, 1233,  895,
      895,  895,  895,  873,  865, 1234,  866,  867,  868, 1028,

     1027,  866,  867,  868,  752, 1022,  196, 1638, 1429,  480,
     1638, 1429, 1154, 1021,  406,  407,  408, 1638, 1430, 1638,
      196,  289, 1638,  866,  867,  868,  879, 1155, 1020, 1638,
      744,  291,  874,  875,  876,  585, 1019,  898,  898,  898,
      898,  881,  874,  875,  876,  588,  472, 1156, 1432,  882,
     1018, 1432, 1251,  553, 1017,  406,  407,  408, 1433,  736,
      227,  872,  289, 1638,  195,  666, 1638,  882, 1160,  406,
      407,  408,  291, 1638,  665,  405, 1157, 1158, 1159, 1551,
     1170,  966,  196,  965, 1435,  964,  963, 1435,  555,  289,
      883,  884,  885,  879, 1436,  305,  962,  961,  960,  291,

     1578,  959,  585, 1578,  880,  880,  880,  880,  881,  958,
     1579,  584,  588,  957, 1258, 1171,  882,  556,  557,  558,
     1638,  956, 1161, 1161, 1161, 1161,  587, 1558,  872,  953,
      588,  406,  407,  408,  882,  952,  949, 1054, 1638, 1638,
     1247, 1638, 1638, 1247, 1172, 1173, 1174,  948, 1638, 1638,
     1248,  920,  775, 1578,  947,  944, 1578,  883,  884,  885,
      289,  196,  943, 1579,  920,  942,  554,  941,  405,  938,
      291, 1638, 1054,  289, 1638,  590,  591,  592, 1163,  554,
      937, 1638,  344,  291,  639,  920,  921,  903,  331, 1164,
     1164, 1164, 1164, 1165,  289,  633,  317,  906, 1565,  921,

      554, 1055, 1056, 1057,  291,  934,  310,  926,  925,  617,
      406,  407,  408, 1156,  918,  922,  923,  924, 1012,  303,
      921, 1638, 1618,  917, 1638, 1618,  916,  243,  922,  923,
      924, 1638, 1619,  528,  611, 1638,  915,  245, 1638, 1012,
      914,  604, 1166, 1167, 1168, 1638,  897,  896,  243,  922,
      923,  924,  920, 1013,  528,  583,  877,  897,  245,  896,
     1012,  289,  583,  933,  933,  933,  933,  554,  877,  243,
      870,  291,  869, 1054, 1013,  528,  574, 1064,  862,  245,
      287,  861, 1014, 1015, 1016,  860,  243,  921,  775,  566,
     1638, 1638, 1065, 1638, 1638, 1013,  245,  568,  849, 1578,

     1638, 1638, 1578, 1014, 1015, 1016,  848,  560, 1054, 1579,
      841,  840, 1066,  552,  280,  830,  922,  923,  924,  936,
      936,  936,  936,  272, 1014, 1015, 1016,  828,  936,  936,
      936,  936, 1294, 1294, 1294, 1294,  775, 1055, 1056, 1057,
     1312, 1067, 1068, 1069, 1064,  936,  936,  936,  936,  936,
      936, 1191, 1191,  243, 1191, 1313, 1191,  827,  539, 1065,
     1191, 1191,  820,  245, 1191,  265, 1618, 1638, 1618, 1618,
     1638, 1618, 1191,  819,  818, 1312, 1619, 1638, 1619, 1066,
     1638,  533, 1144, 1638,  817,  776,  777,  778,  816, 1191,
     1638, 1191,  526,  799,  798,  505,  779,  873, 1361, 1361,

     1361, 1361,  873,  799, 1314, 1315, 1316,  798, 1067, 1068,
     1069, 1294, 1294, 1294, 1294,  775, 1191, 1144, 1191, 1219,
     1219, 1219, 1219, 1219,  505, 1219, 1220,  779, 1219, 1219,
     1219,  772,  771, 1219,  496, 1219, 1635, 1635, 1635,  764,
      241, 1221, 1219,  763,  762, 1219, 1145, 1146, 1147,  486,
      488,  874,  875,  876, 1635, 1635, 1635, 1635, 1219,  751,
     1219, 1220, 1219, 1281,  776,  777,  778, 1222,  750,  480,
      743,  742,  243,  472,  234,  466,  724,  195,  267,  690,
      689,  686,  245,  683,  680, 1219, 1219, 1219, 1219, 1219,
     1223, 1224, 1225, 1227, 1227, 1227, 1227, 1227, 1282, 1227,

     1228,  679, 1227, 1227, 1227,  678,  677, 1227,  673, 1227,
      669,  666,  665,  405,  655, 1229, 1227,  654,  623, 1227,
      641,  344, 1064,  635,  331,  629,  317, 1283, 1284, 1285,
      628,  243, 1227,  627, 1227, 1228, 1227, 1065,  310,  616,
      615,  245, 1361, 1361, 1361, 1361,  873,  303,  573,  572,
      287,  548,  280,  547,  546,  272,  251, 1066,  538, 1227,
     1227, 1227, 1227, 1227, 1230, 1231, 1232, 1239, 1239, 1239,
     1239, 1239,  537, 1239, 1240,  265, 1239, 1239, 1239,  493,
      492, 1239,  241, 1239,  468,  234, 1067, 1068, 1069, 1241,
     1239,  227,  450, 1239,  449,  874,  875,  876,  195,  172,

      346,  345,  344,  383,  382,  381, 1239,  375, 1239, 1240,
     1239,  372,  368, 1289,  365,  351,  346,  345,  344,  347,
      346,  345,  243,  344,  337,  334,  333,  332,  267,  331,
      322,  319,  245, 1239, 1239, 1239, 1239, 1239, 1242, 1243,
     1244,  409,  410,  411,  412,  413,  414,  415, 1290,  416,
      318,  417,  418,  419,  420,  317,  421,  422,  423,  424,
     1252, 1252, 1252, 1252, 1252,  296, 1252, 1253,  282, 1252,
     1252, 1252, 1064,  281, 1252, 1064, 1252, 1291, 1292, 1293,
      280,  243, 1254, 1252,  243,  261, 1252, 1065,  236,  235,
     1075,  245,  234,  227,  245,  216,  185,  172,  171, 1252,

     1296, 1252, 1253, 1252, 1638, 1638, 1638, 1066, 1638,  243,
     1066, 1638, 1638, 1638, 1638,  267, 1638, 1638, 1638,  245,
     1638, 1638, 1638, 1638, 1638, 1638, 1252, 1252, 1252, 1252,
     1252, 1255, 1256, 1257,  781, 1297, 1067, 1068, 1069, 1067,
     1068, 1069, 1304,  507, 1638, 1062, 1062, 1062, 1062,  783,
     1638,  243, 1638,  510, 1638, 1638, 1638,  528, 1638, 1080,
     1638,  245, 1638, 1638, 1298, 1299, 1300, 1080,  243,  774,
     1638, 1638, 1638, 1638,  267, 1638,  243, 1305,  245, 1638,
     1638, 1638,  267, 1638, 1638, 1638,  245, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1081, 1638, 1638, 1638,  785,  786,

      787,  781, 1081, 1638, 1638, 1638, 1306, 1307, 1308, 1638,
      507, 1638, 1060, 1060, 1060, 1060,  783, 1638, 1638, 1638,
      510, 1638, 1638, 1082, 1083, 1084, 1102, 1638, 1638, 1102,
     1638, 1082, 1083, 1084, 1102,  289,  774, 1638,  289, 1638,
     1144,  606, 1638,  289,  606,  291, 1638, 1638,  291,  606,
     1638, 1638, 1638,  291, 1638,  873, 1638, 1638, 1638, 1638,
     1638, 1103, 1638, 1638, 1103,  785,  786,  787, 1073, 1103,
     1638, 1638, 1638, 1638, 1379, 1144, 1638,  805, 1638, 1074,
     1074, 1074, 1074, 1075, 1638, 1638, 1638,  808, 1638, 1380,
     1104, 1105, 1106, 1104, 1105, 1106, 1638, 1638, 1104, 1105,

     1106, 1154, 1638, 1066, 1145, 1146, 1147, 1638, 1154, 1379,
      289, 1638, 1638, 1638, 1638, 1638, 1155,  289, 1638, 1638,
      291, 1638, 1348, 1155, 1638, 1638, 1638,  291, 1638, 1638,
     1638,  289, 1076, 1077, 1078,  879, 1156,  305, 1381, 1382,
     1383,  291, 1638, 1156,  585, 1638, 1152, 1152, 1152, 1152,
      881, 1638, 1638, 1638,  588, 1638, 1638, 1349, 1638, 1638,
     1154, 1638, 1638, 1638, 1638, 1157, 1158, 1159, 1638,  289,
      872, 1638, 1157, 1158, 1159, 1155, 1638, 1638, 1638,  291,
     1638, 1638, 1638, 1638, 1638, 1638, 1350, 1351, 1352, 1638,
     1638, 1638, 1638, 1638, 1312, 1156, 1638, 1638, 1638,  883,

      884,  885,  879, 1638, 1638, 1638, 1638, 1638, 1638, 1313,
     1638,  585, 1638, 1150, 1150, 1150, 1150,  881, 1638, 1356,
     1638,  588, 1638, 1638, 1157, 1158, 1159, 1154,  289, 1312,
     1154, 1638, 1638, 1638,  305, 1638,  289,  872,  291,  289,
     1638, 1638, 1155, 1638, 1638, 1165,  291, 1638, 1638,  291,
     1638, 1638, 1638, 1638, 1357, 1363, 1638, 1638, 1314, 1315,
     1316, 1638, 1156, 1371,  289, 1156,  883,  884,  885, 1638,
      305, 1638,  289, 1638,  291, 1638, 1638, 1638,  606, 1638,
     1638, 1638,  291, 1358, 1359, 1360, 1638, 1638, 1638, 1638,
     1364, 1157, 1158, 1159, 1157, 1158, 1159, 1163, 1372, 1638,

     1638, 1638, 1638, 1312, 1638, 1638,  903, 1638, 1164, 1164,
     1164, 1164, 1165, 1638, 1638, 1170,  906, 1638, 1313, 1365,
     1366, 1367, 1170, 1638,  289, 1638, 1638, 1373, 1374, 1375,
      305,  289, 1156, 1638,  291, 1638, 1638,  305, 1312, 1454,
     1638,  291, 1638, 1638, 1638, 1638, 1638, 1638,  243, 1379,
     1171, 1638, 1638, 1638,  528, 1638, 1281, 1171,  245, 1638,
     1638, 1166, 1167, 1168, 1380,  243, 1638, 1314, 1315, 1316,
     1638,  267, 1638, 1638, 1455,  245, 1638, 1638, 1638, 1172,
     1173, 1174, 1379, 1638, 1379, 1638, 1172, 1173, 1174, 1393,
     1393, 1282, 1393, 1638, 1393, 1638, 1638, 1380, 1393, 1393,

     1638, 1638, 1393, 1456, 1457, 1458, 1638, 1638, 1638, 1638,
     1393, 1638, 1638, 1381, 1382, 1383, 1638, 1379, 1638, 1638,
     1283, 1284, 1285, 1638, 1638, 1638, 1638, 1393, 1638, 1393,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1381, 1382, 1383, 1638,
     1638, 1638, 1638, 1638, 1393, 1638, 1393, 1412, 1412, 1412,
     1412, 1412, 1638, 1412, 1413, 1638, 1412, 1412, 1412, 1638,
     1638, 1412, 1638, 1412, 1638, 1638, 1638, 1638, 1638, 1414,
     1412, 1638, 1638, 1412, 1638, 1638, 1281, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638,  243, 1412, 1638, 1412, 1413,

     1412,  267, 1638, 1463, 1638,  245, 1638, 1638, 1638, 1638,
     1638, 1638,  243, 1638, 1638, 1638, 1638, 1638,  528, 1638,
     1638, 1282,  245, 1412, 1412, 1412, 1412, 1412, 1415, 1416,
     1417, 1638, 1418, 1638, 1638, 1418, 1638, 1638, 1464, 1638,
     1638, 1638, 1419, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1283, 1284, 1285,  196, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1465, 1466, 1467,
     1638, 1638, 1638, 1638, 1638, 1289, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638,  243, 1638, 1638, 1638, 1638, 1638,
      267, 1638, 1638, 1638,  245, 1638, 1638, 1638, 1638, 1638,

     1638, 1638,  406,  407,  408, 1420, 1420, 1420, 1420, 1420,
     1290, 1420, 1421, 1638, 1420, 1420, 1420, 1638, 1638, 1420,
     1638, 1420, 1638, 1638, 1638, 1638, 1638, 1422, 1420, 1638,
     1638, 1420, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1291,
     1292, 1293, 1638, 1638, 1420, 1638, 1420, 1421, 1420, 1638,
     1638, 1289, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
      243, 1638, 1638, 1638, 1638, 1638,  267, 1638, 1638, 1638,
      245, 1420, 1420, 1420, 1420, 1420, 1423, 1424, 1425,  409,
      410,  411,  412,  413,  414,  415, 1290,  416, 1638,  417,
      418,  419,  420, 1638,  421,  422,  423,  424, 1441, 1441,

     1441, 1441, 1441, 1638, 1441, 1442, 1638, 1441, 1441, 1441,
     1471, 1638, 1441, 1296, 1441, 1291, 1292, 1293, 1638,  243,
     1443, 1441,  243, 1638, 1441,  528, 1638, 1296,  267,  245,
     1638, 1638,  245, 1638, 1638, 1638,  243, 1441, 1304, 1441,
     1442, 1441,  267, 1638, 1638, 1472,  245,  243, 1297, 1638,
     1638, 1638, 1638,  528, 1638, 1638, 1638,  245, 1638, 1638,
     1638, 1638, 1297, 1638, 1441, 1441, 1441, 1441, 1441, 1444,
     1445, 1446, 1638, 1305, 1473, 1474, 1475, 1298, 1299, 1300,
     1304, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,  243,
     1638, 1298, 1299, 1300, 1638,  528, 1638, 1304, 1638,  245,

     1638, 1638, 1306, 1307, 1308, 1498,  243, 1638, 1348, 1638,
     1638, 1638,  528, 1638,  289, 1305,  245,  289, 1638, 1348,
      606, 1638, 1507,  305,  291, 1638, 1638,  291,  289, 1638,
     1638,  289, 1305, 1356,  305, 1638, 1638,  606,  291, 1638,
     1499,  291,  289, 1349, 1306, 1307, 1308, 1638,  305, 1638,
     1638, 1638,  291, 1638, 1349, 1638, 1638, 1508, 1638, 1638,
     1638, 1306, 1307, 1308, 1638, 1638, 1638, 1638, 1357, 1500,
     1501, 1502, 1350, 1351, 1352, 1638, 1638, 1638, 1638, 1638,
     1638, 1356, 1638, 1350, 1351, 1352, 1509, 1510, 1511, 1638,
      289, 1638, 1515, 1638, 1638, 1363,  305, 1358, 1359, 1360,

      291,  289, 1638, 1363,  289, 1638, 1371,  606, 1638, 1638,
      305,  291,  289, 1638,  291,  289, 1357, 1371,  305, 1638,
     1371,  606,  291, 1638, 1638,  291,  289, 1516, 1638,  289,
     1364, 1638,  606, 1638, 1638,  606,  291, 1638, 1364,  291,
     1638, 1372, 1638, 1638, 1638, 1358, 1359, 1360, 1638, 1638,
     1638, 1638, 1372, 1638, 1638, 1372, 1517, 1518, 1519, 1365,
     1366, 1367, 1638, 1638, 1638, 1638, 1638, 1365, 1366, 1367,
     1373, 1374, 1375, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1373, 1374, 1375, 1373, 1374, 1375,  409,  410,  411,
      412,  413,  414,  415, 1638,  416, 1638,  417,  418,  419,

      420, 1638,  421,  422,  423,  424, 1545, 1545, 1545, 1545,
     1545, 1638, 1545, 1546, 1638, 1545, 1545, 1545, 1638, 1638,
     1545, 1638, 1545, 1638, 1638, 1638, 1638, 1638, 1547, 1545,
     1638, 1638, 1545, 1638, 1638, 1454, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638,  243, 1545, 1638, 1545, 1546, 1545,
      528, 1638, 1638, 1638,  245, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1455, 1638, 1545, 1545, 1545, 1545, 1545, 1548, 1549, 1550,
     1552, 1552, 1552, 1552, 1552, 1638, 1552, 1553, 1638, 1552,
     1552, 1552, 1638, 1638, 1552, 1638, 1552, 1638, 1638, 1456,

     1457, 1458, 1554, 1552, 1638, 1638, 1552, 1638, 1638, 1454,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,  243, 1552,
     1638, 1552, 1553, 1552,  528, 1638, 1638, 1638,  245, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1455, 1638, 1552, 1552, 1552, 1552,
     1552, 1555, 1556, 1557, 1559, 1559, 1559, 1559, 1559, 1638,
     1559, 1560, 1638, 1559, 1559, 1559, 1638, 1638, 1559, 1638,
     1559, 1638, 1638, 1456, 1457, 1458, 1561, 1559, 1638, 1638,
     1559, 1638, 1638, 1454, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638,  243, 1559, 1638, 1559, 1560, 1559,  528, 1638,

     1638, 1638,  245, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1455, 1638,
     1559, 1559, 1559, 1559, 1559, 1562, 1563, 1564, 1566, 1566,
     1566, 1566, 1566, 1638, 1566, 1567, 1638, 1566, 1566, 1566,
     1638, 1638, 1566, 1638, 1566, 1638, 1638, 1456, 1457, 1458,
     1568, 1566, 1638, 1638, 1566, 1638, 1638, 1463, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638,  243, 1566, 1638, 1566,
     1567, 1566,  528, 1638, 1638, 1638,  245, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1464, 1638, 1566, 1566, 1566, 1566, 1566, 1569,

     1570, 1571, 1572, 1572, 1572, 1572, 1572, 1638, 1572, 1573,
     1638, 1572, 1572, 1572, 1638, 1638, 1572, 1463, 1572, 1638,
     1463, 1465, 1466, 1467, 1574, 1572,  243, 1638, 1572,  243,
     1638, 1471,  528, 1638, 1638,  528,  245, 1638, 1638,  245,
      243, 1572, 1471, 1572, 1573, 1572,  528, 1638, 1638, 1638,
      245,  243, 1464, 1638, 1638, 1464, 1638,  528, 1638, 1638,
     1638,  245, 1638, 1638, 1638, 1638, 1472, 1638, 1572, 1572,
     1572, 1572, 1572, 1575, 1576, 1577, 1638, 1472, 1638, 1471,
     1638, 1465, 1466, 1467, 1465, 1466, 1467, 1638,  243, 1638,
     1498, 1638, 1638, 1638,  528, 1473, 1474, 1475,  245,  289,

     1638, 1498, 1638, 1638, 1498,  606, 1473, 1474, 1475,  291,
      289, 1638, 1507,  289, 1472, 1507,  606, 1638, 1638,  606,
      291,  289, 1638,  291,  289, 1499, 1638,  606, 1638, 1638,
      606,  291, 1638, 1638,  291, 1638, 1499, 1638, 1638, 1499,
     1638, 1638, 1638, 1473, 1474, 1475, 1638, 1508, 1638, 1638,
     1508, 1638, 1638, 1638, 1500, 1501, 1502, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1500, 1501, 1502, 1500, 1501,
     1502, 1638, 1638, 1507, 1638, 1638, 1509, 1510, 1511, 1509,
     1510, 1511,  289, 1638, 1515, 1638, 1638, 1515,  606, 1638,
     1638, 1638,  291,  289, 1638, 1515,  289, 1638, 1638,  606,

     1638, 1638,  606,  291,  289, 1638,  291, 1638, 1508, 1638,
      606, 1638, 1638, 1638,  291, 1638, 1638, 1638, 1638, 1516,
     1638, 1638, 1516, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1516, 1638, 1638, 1638, 1638, 1638, 1638, 1509, 1510, 1511,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1517, 1518,
     1519, 1517, 1518, 1519, 1638, 1638, 1638, 1638, 1638, 1517,
     1518, 1519, 1612, 1612, 1612, 1612, 1612, 1638, 1612, 1613,
     1638, 1612, 1612, 1612, 1638, 1638, 1612, 1638, 1612, 1638,
     1638, 1638, 1638, 1638, 1614, 1612, 1638, 1638, 1612, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1612, 1638, 1612, 1613, 1612, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1612, 1612,
     1612, 1612, 1612, 1615, 1616, 1617, 1620, 1620, 1620, 1620,
     1620, 1638, 1620, 1621, 1638, 1620, 1620, 1620, 1638, 1638,
     1620, 1638, 1620, 1638, 1638, 1638, 1638, 1638, 1622, 1620,
     1638, 1638, 1620, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1620, 1638, 1620, 1621, 1620,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1620, 1620, 1620, 1620, 1620, 1623, 1624, 1625,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  147,  147,

      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  167,  167, 1638, 1638, 1638,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167, 1638,  167,
      167,  167,  167,  167,  224, 1638,  224, 1638, 1638, 1638,
      224, 1638,  224,  224,  226,  226, 1638, 1638,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  241, 1638,
      241, 1638, 1638,  241,  241, 1638,  241,  241, 1638,  241,
      241,  241,  241,  241,  241,  265, 1638,  265, 1638, 1638,
      265,  265, 1638,  265,  265, 1638,  265,  265,  265,  265,
      265,  265,  272, 1638,  272, 1638, 1638,  272, 1638, 1638,
      272,  272, 1638, 1638,  272, 1638,  272,  272,  272,  287,
     1638,  287, 1638, 1638,  287,  287,  287,  287,  287, 1638,
      287,  287,  287,  287,  287,  287,  303, 1638,  303, 1638,
     1638,  303,  303,  303,  303,  303, 1638,  303,  303,  303,

      303,  303,  303,  310, 1638,  310, 1638, 1638,  310, 1638,
      310,  310,  310, 1638, 1638,  310, 1638,  310,  310,  310,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  348, 1638, 1638, 1638,  348, 1638,  348,  348,
      356,  356,  356,  356, 1638, 1638,  356, 1638, 1638,  356,
      356,  356,  356,  356,  373, 1638, 1638,  373, 1638,  373,
     1638,  373,  373, 1638,  373,  373,  373,  373, 1638,  373,
      373,  373,  373,  373,  373,  373,  384,  384, 1638,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,

      384,  384,  384,  384,  384,  384,  384,  384,  387,  387,
     1638,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  405, 1638,  405, 1638, 1638,  405, 1638,  405,
      405,  405, 1638, 1638,  405,  405,  405,  405,  405,  455,
     1638,  455, 1638, 1638, 1638,  455, 1638,  455,  455,  226,
      226, 1638, 1638,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  472, 1638,  472, 1638, 1638,  472,  472, 1638,  472,
      472, 1638,  472,  472,  472,  472,  472,  472,  480, 1638,
      480, 1638, 1638,  480,  480, 1638,  480,  480, 1638,  480,
      480,  480,  480,  480,  480,  486, 1638,  486, 1638, 1638,
      486, 1638, 1638,  486,  486, 1638, 1638,  486, 1638,  486,
      486,  486,  496, 1638,  496, 1638, 1638,  496,  496, 1638,
      496,  496, 1638,  496,  496,  496,  496,  496,  496,  505,
     1638,  505, 1638, 1638,  505,  505, 1638,  505,  505, 1638,
      505,  505, 1638,  505,  505,  505,  526, 1638,  526, 1638,
     1638,  526,  526, 1638,  526,  526, 1638,  526,  526,  526,

      526,  526,  526,  265, 1638,  265, 1638, 1638,  265,  265,
     1638,  265,  265, 1638,  265,  265,  265,  265,  265,  265,
      533, 1638,  533, 1638, 1638,  533, 1638, 1638,  533, 1638,
     1638, 1638,  533,  533,  533,  533,  533,  539, 1638,  539,
     1638, 1638,  539,  539, 1638,  539,  539, 1638,  539,  539,
      539,  539,  539,  539,  552, 1638,  552, 1638, 1638,  552,
      552,  552,  552,  552, 1638,  552,  552,  552,  552,  552,
      552,  287, 1638,  287, 1638, 1638,  287,  287,  287,  287,
      287, 1638,  287,  287,  287,  287,  287,  287,  560, 1638,
      560, 1638, 1638,  560,  560,  560,  560,  560, 1638,  560,

      560,  560,  560,  560,  560,  566, 1638,  566, 1638, 1638,
      566, 1638,  566,  566,  566, 1638, 1638,  566, 1638,  566,
      566,  566,  574, 1638,  574, 1638, 1638,  574,  574,  574,
      574,  574, 1638,  574,  574,  574,  574,  574,  574,  583,
     1638,  583, 1638, 1638,  583,  583,  583,  583,  583, 1638,
      583,  583, 1638,  583,  583,  583,  604, 1638,  604, 1638,
     1638,  604,  604,  604,  604,  604, 1638,  604,  604,  604,
      604,  604,  604,  303, 1638,  303, 1638, 1638,  303,  303,
      303,  303,  303, 1638,  303,  303,  303,  303,  303,  303,
      611, 1638,  611, 1638, 1638,  611, 1638,  611,  611, 1638,

     1638, 1638,  611,  611,  611,  611,  611,  617, 1638,  617,
     1638, 1638,  617,  617,  617,  617,  617, 1638,  617,  617,
      617,  617,  617,  617,  348, 1638, 1638, 1638,  348, 1638,
      348,  348,  356, 1638, 1638, 1638,  356, 1638,  356,  356,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457, 1638,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  224, 1638,  224, 1638, 1638, 1638,  224, 1638,
      224,  224,  373, 1638, 1638,  373, 1638,  373, 1638,  373,
      373, 1638,  373,  373,  373,  373, 1638,  373,  373,  373,
      373,  373,  373,  373,  387,  387, 1638,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  167,  167, 1638, 1638,
     1638,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167, 1638,  167,  167,  167,  167,  167,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      455, 1638, 1638, 1638,  455, 1638,  455,  455,  662, 1638,
     1638, 1638,  662, 1638,  662,  662,  405, 1638,  405, 1638,
     1638,  405, 1638,  405,  405,  405, 1638, 1638,  405,  405,
      405,  405,  405,  732, 1638,  732, 1638, 1638, 1638,  732,

     1638,  732,  732,  505, 1638,  505, 1638, 1638,  505, 1638,
     1638,  505,  505, 1638,  505,  505, 1638,  505,  505,  505,
      472, 1638,  472, 1638, 1638,  472,  472, 1638,  472,  472,
     1638,  472,  472,  472,  472,  472,  472,  736, 1638,  736,
     1638, 1638,  736,  736, 1638,  736,  736, 1638,  736,  736,
      736,  736,  736,  736,  744, 1638,  744, 1638, 1638,  744,
      744, 1638,  744,  744, 1638,  744,  744,  744,  744,  744,
      744,  480, 1638,  480, 1638, 1638,  480,  480, 1638,  480,
      480, 1638,  480,  480,  480,  480,  480,  480,  752, 1638,
      752, 1638, 1638,  752, 1638, 1638,  752,  752, 1638, 1638,

      752,  752,  752,  752,  752,  758, 1638,  758, 1638, 1638,
      758, 1638, 1638,  758, 1638, 1638, 1638,  758,  758,  758,
      758,  758,  765, 1638,  765, 1638, 1638,  765,  765, 1638,
      765,  765, 1638,  765,  765,  765,  765,  765,  765,  496,
     1638,  496, 1638, 1638,  496,  496, 1638,  496,  496, 1638,
      496,  496,  496,  496,  496,  496,  774, 1638,  774, 1638,
     1638,  774, 1638, 1638,  774,  774, 1638, 1638,  774,  774,
      774,  774,  774,  780, 1638,  780, 1638, 1638,  780,  780,
     1638,  780,  780, 1638,  780,  780,  780,  780,  780,  780,
      788, 1638,  788, 1638, 1638,  788, 1638, 1638,  788, 1638,

     1638, 1638,  788,  788,  788,  788,  788,  792, 1638,  792,
     1638, 1638,  792, 1638, 1638,  792,  792, 1638, 1638,  792,
     1638,  792,  792,  792,  803, 1638,  803, 1638, 1638,  803,
      803, 1638,  803,  803, 1638,  803,  803,  803,  803,  803,
      803,  526, 1638,  526, 1638, 1638,  526,  526, 1638,  526,
      526, 1638,  526,  526,  526,  526,  526,  526,  812, 1638,
      812, 1638, 1638,  812, 1638, 1638,  812, 1638, 1638, 1638,
      812,  812,  812,  812,  812,  533, 1638,  533, 1638, 1638,
      533, 1638, 1638,  533, 1638, 1638, 1638,  533,  533,  533,
      533,  533,  821, 1638,  821, 1638, 1638,  821,  821, 1638,

      821,  821, 1638,  821,  821,  821,  821,  821,  821,  539,
     1638,  539, 1638, 1638,  539,  539, 1638,  539,  539, 1638,
      539,  539,  539,  539,  539,  539,  583, 1638,  583, 1638,
     1638,  583, 1638,  583,  583,  583, 1638,  583,  583, 1638,
      583,  583,  583,  552, 1638,  552, 1638, 1638,  552,  552,
      552,  552,  552, 1638,  552,  552,  552,  552,  552,  552,
      834, 1638,  834, 1638, 1638,  834,  834,  834,  834,  834,
     1638,  834,  834,  834,  834,  834,  834,  842, 1638,  842,
     1638, 1638,  842,  842,  842,  842,  842, 1638,  842,  842,
      842,  842,  842,  842,  560, 1638,  560, 1638, 1638,  560,

      560,  560,  560,  560, 1638,  560,  560,  560,  560,  560,
      560,  850, 1638,  850, 1638, 1638,  850, 1638,  850,  850,
      850, 1638, 1638,  850,  850,  850,  850,  850,  856, 1638,
      856, 1638, 1638,  856, 1638,  856,  856, 1638, 1638, 1638,
      856,  856,  856,  856,  856,  863, 1638,  863, 1638, 1638,
      863,  863,  863,  863,  863, 1638,  863,  863,  863,  863,
      863,  863,  574, 1638,  574, 1638, 1638,  574,  574,  574,
      574,  574, 1638,  574,  574,  574,  574,  574,  574,  872,
     1638,  872, 1638, 1638,  872, 1638,  872,  872,  872, 1638,
     1638,  872,  872,  872,  872,  872,  878, 1638,  878, 1638,

     1638,  878,  878,  878,  878,  878, 1638,  878,  878,  878,
      878,  878,  878,  886, 1638,  886, 1638, 1638,  886, 1638,
      886,  886, 1638, 1638, 1638,  886,  886,  886,  886,  886,
      890, 1638,  890, 1638, 1638,  890, 1638,  890,  890,  890,
     1638, 1638,  890, 1638,  890,  890,  890,  901, 1638,  901,
     1638, 1638,  901,  901,  901,  901,  901, 1638,  901,  901,
      901,  901,  901,  901,  604, 1638,  604, 1638, 1638,  604,
      604,  604,  604,  604, 1638,  604,  604,  604,  604,  604,
      604,  910, 1638,  910, 1638, 1638,  910, 1638,  910,  910,
     1638, 1638, 1638,  910,  910,  910,  910,  910,  611, 1638,

      611, 1638, 1638,  611, 1638,  611,  611, 1638, 1638, 1638,
      611,  611,  611,  611,  611,  919, 1638,  919, 1638, 1638,
      919,  919,  919,  919,  919, 1638,  919,  919,  919,  919,
      919,  919,  617, 1638,  617, 1638, 1638,  617,  617,  617,
      617,  617, 1638,  617,  617,  617,  617,  617,  617,  662,
     1638, 1638, 1638,  662, 1638,  662,  662,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457, 1638,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  373,
     1638, 1638,  373, 1638,  373, 1638,  373,  373, 1638,  373,
      373,  373,  373, 1638,  373,  373,  373,  373,  373,  373,

      373,  455, 1638, 1638,  455, 1638, 1638, 1638,  455, 1638,
      455,  455,  706,  706,  706,  706,  706, 1638,  706,  706,
      706,  706, 1638,  706, 1638, 1638,  706,  706,  706, 1638,
      706, 1638, 1638,  706,  405, 1638, 1638,  405,  405, 1638,
      405, 1638, 1638,  405, 1638,  405,  405,  405, 1638, 1638,
      405,  405,  405,  405,  405,  732, 1638,  732, 1638, 1638,
     1638,  732, 1638,  732,  732,  774, 1638,  774, 1638, 1638,
      774, 1638, 1638,  774,  774, 1638, 1638,  774,  774,  774,
      774,  774,  505, 1638,  505, 1638, 1638,  505,  505, 1638,
      505,  505, 1638,  505,  505, 1638,  505,  505,  505, 1011,

     1638, 1011, 1638, 1638, 1011, 1011, 1638, 1011, 1011, 1638,
     1011, 1011, 1011, 1011, 1011, 1011,  736, 1638,  736, 1638,
     1638,  736,  736, 1638,  736,  736, 1638,  736,  736,  736,
      736,  736,  736,  744, 1638,  744, 1638, 1638,  744,  744,
     1638,  744,  744, 1638,  744,  744,  744,  744,  744,  744,
      752, 1638,  752, 1638, 1638,  752, 1638, 1638,  752,  752,
     1638, 1638,  752,  752,  752,  752,  752, 1023, 1638, 1023,
     1638, 1638, 1023, 1638, 1638, 1023, 1638, 1638, 1638, 1023,
     1023, 1023, 1023, 1023,  758, 1638,  758, 1638, 1638,  758,
     1638, 1638,  758, 1638, 1638, 1638,  758,  758,  758,  758,

      758,  765, 1638,  765, 1638, 1638,  765,  765, 1638,  765,
      765, 1638,  765,  765,  765,  765,  765,  765,  780, 1638,
      780, 1638, 1638,  780,  780, 1638,  780,  780, 1638,  780,
      780,  780,  780,  780,  780, 1035, 1638, 1035, 1638, 1638,
     1035, 1638, 1638, 1035, 1638, 1638, 1638, 1035, 1035, 1035,
     1035, 1035, 1041, 1638, 1041, 1638, 1638, 1041, 1638, 1638,
     1041, 1638, 1638, 1638, 1041, 1041, 1041, 1041, 1041, 1045,
     1638, 1045, 1638, 1638, 1045, 1638, 1638, 1045, 1638, 1638,
     1638, 1045, 1045, 1045, 1045, 1045,  788, 1638,  788, 1638,
     1638,  788, 1638, 1638,  788, 1638, 1638, 1638,  788,  788,

      788,  788,  788, 1053, 1638, 1053, 1638, 1638, 1053, 1638,
     1638, 1053, 1053, 1638, 1638, 1053, 1053, 1053, 1053, 1053,
     1063, 1638, 1063, 1638, 1638, 1063, 1063, 1638, 1063, 1063,
     1638, 1063, 1063, 1063, 1063, 1063, 1063,  472, 1638,  472,
     1638, 1638,  472,  472, 1638,  472,  472, 1638,  472,  472,
      472,  472,  472,  472, 1072, 1638, 1072, 1638, 1638, 1072,
     1072, 1638, 1072, 1072, 1638, 1072, 1072, 1072, 1072, 1072,
     1072, 1079, 1638, 1079, 1638, 1638, 1079, 1079, 1638, 1079,
     1079, 1638, 1079, 1079, 1079, 1079, 1079, 1079, 1085, 1638,
     1085, 1638, 1638, 1085, 1638, 1638, 1085, 1085, 1638, 1638,

     1085, 1638, 1085, 1085, 1085,  812, 1638,  812, 1638, 1638,
      812, 1638, 1638,  812, 1638, 1638, 1638,  812,  812,  812,
      812,  812,  821, 1638,  821, 1638, 1638,  821,  821, 1638,
      821,  821, 1638,  821,  821,  821,  821,  821,  821,  872,
     1638,  872, 1638, 1638,  872, 1638,  872,  872,  872, 1638,
     1638,  872,  872,  872,  872,  872,  583, 1638,  583, 1638,
     1638,  583,  583,  583,  583,  583, 1638,  583,  583, 1638,
      583,  583,  583, 1101, 1638, 1101, 1638, 1638, 1101, 1101,
     1101, 1101, 1101, 1638, 1101, 1101, 1101, 1101, 1101, 1101,
      834, 1638,  834, 1638, 1638,  834,  834,  834,  834,  834,

     1638,  834,  834,  834,  834,  834,  834,  842, 1638,  842,
     1638, 1638,  842,  842,  842,  842,  842, 1638,  842,  842,
      842,  842,  842,  842,  850, 1638,  850, 1638, 1638,  850,
     1638,  850,  850,  850, 1638, 1638,  850,  850,  850,  850,
      850, 1113, 1638, 1113, 1638, 1638, 1113, 1638, 1113, 1113,
     1638, 1638, 1638, 1113, 1113, 1113, 1113, 1113,  856, 1638,
      856, 1638, 1638,  856, 1638,  856,  856, 1638, 1638, 1638,
      856,  856,  856,  856,  856,  863, 1638,  863, 1638, 1638,
      863,  863,  863,  863,  863, 1638,  863,  863,  863,  863,
      863,  863,  878, 1638,  878, 1638, 1638,  878,  878,  878,

      878,  878, 1638,  878,  878,  878,  878,  878,  878, 1125,
     1638, 1125, 1638, 1638, 1125, 1638, 1125, 1125, 1638, 1638,
     1638, 1125, 1125, 1125, 1125, 1125, 1131, 1638, 1131, 1638,
     1638, 1131, 1638, 1131, 1131, 1638, 1638, 1638, 1131, 1131,
     1131, 1131, 1131, 1135, 1638, 1135, 1638, 1638, 1135, 1638,
     1135, 1135, 1638, 1638, 1638, 1135, 1135, 1135, 1135, 1135,
      886, 1638,  886, 1638, 1638,  886, 1638,  886,  886, 1638,
     1638, 1638,  886,  886,  886,  886,  886, 1143, 1638, 1143,
     1638, 1638, 1143, 1638, 1143, 1143, 1143, 1638, 1638, 1143,
     1143, 1143, 1143, 1143, 1153, 1638, 1153, 1638, 1638, 1153,

     1153, 1153, 1153, 1153, 1638, 1153, 1153, 1153, 1153, 1153,
     1153,  552, 1638,  552, 1638, 1638,  552,  552,  552,  552,
      552, 1638,  552,  552,  552,  552,  552,  552, 1162, 1638,
     1162, 1638, 1638, 1162, 1162, 1162, 1162, 1162, 1638, 1162,
     1162, 1162, 1162, 1162, 1162, 1169, 1638, 1169, 1638, 1638,
     1169, 1169, 1169, 1169, 1169, 1638, 1169, 1169, 1169, 1169,
     1169, 1169, 1175, 1638, 1175, 1638, 1638, 1175, 1638, 1175,
     1175, 1175, 1638, 1638, 1175, 1638, 1175, 1175, 1175,  910,
     1638,  910, 1638, 1638,  910, 1638,  910,  910, 1638, 1638,
     1638,  910,  910,  910,  910,  910,  919, 1638,  919, 1638,

     1638,  919,  919,  919,  919,  919, 1638,  919,  919,  919,
      919,  919,  919,  662, 1638, 1638, 1638,  662, 1638,  662,
      662,  373, 1638, 1638,  373, 1638,  373, 1638,  373,  373,
     1638,  373,  373,  373,  373, 1638,  373,  373,  373,  373,
      373,  373,  373,  987,  987,  987,  987,  987, 1638,  987,
      987,  987,  987, 1638,  987, 1638, 1638,  987,  987,  987,
     1638,  987, 1638,  987,  987,  996,  996,  996,  996,  996,
     1638,  996,  996,  996,  996, 1638,  996, 1638, 1638,  996,
      996,  996, 1638,  996,  996, 1638,  996,  405, 1638,  405,
     1638, 1638,  405, 1638,  405,  405,  405, 1638, 1638,  405,

      405,  405,  405,  405,  455, 1638,  455, 1638, 1638, 1638,
      455, 1638,  455,  455,  780, 1638,  780, 1638, 1638,  780,
      780, 1638,  780,  780, 1638,  780,  780,  780,  780,  780,
      780, 1011, 1638, 1011, 1638, 1638, 1011, 1011, 1638, 1011,
     1011, 1638, 1011, 1011, 1011, 1011, 1011, 1011, 1023, 1638,
     1023, 1638, 1638, 1023, 1638, 1638, 1023, 1638, 1638, 1638,
     1023, 1023, 1023, 1023, 1023, 1035, 1638, 1035, 1638, 1638,
     1035, 1638, 1638, 1035, 1638, 1638, 1638, 1035, 1035, 1035,
     1035, 1035, 1041, 1638, 1041, 1638, 1638, 1041, 1638, 1638,
     1041, 1638, 1638, 1638, 1041, 1041, 1041, 1041, 1041, 1045,

     1638, 1045, 1638, 1638, 1045, 1638, 1638, 1045, 1638, 1638,
     1638, 1045, 1045, 1045, 1045, 1045, 1053, 1638, 1053, 1638,
     1638, 1053, 1638, 1638, 1053, 1053, 1638, 1638, 1053, 1053,
     1053, 1053, 1053, 1063, 1638, 1063, 1638, 1638, 1063, 1063,
     1638, 1063, 1063, 1638, 1063, 1063, 1063, 1063, 1063, 1063,
     1280, 1638, 1280, 1638, 1638, 1280, 1280, 1638, 1280, 1280,
     1638, 1280, 1280, 1280, 1280, 1280, 1280, 1288, 1638, 1288,
     1638, 1638, 1288, 1288, 1638, 1288, 1288, 1638, 1288, 1288,
     1288, 1288, 1288, 1288,  774, 1638,  774, 1638, 1638,  774,
     1638, 1638,  774,  774, 1638, 1638,  774,  774,  774,  774,

      774, 1072, 1638, 1072, 1638, 1638, 1072, 1072, 1638, 1072,
     1072, 1638, 1072, 1072, 1072, 1072, 1072, 1072, 1295, 1638,
     1295, 1638, 1638, 1295, 1295, 1638, 1295, 1295, 1638, 1295,
     1295, 1295, 1295, 1295, 1295, 1303, 1638, 1303, 1638, 1638,
     1303, 1303, 1638, 1303, 1303, 1638, 1303, 1303, 1303, 1303,
     1303, 1303, 1079, 1638, 1079, 1638, 1638, 1079, 1079, 1638,
     1079, 1079, 1638, 1079, 1079, 1079, 1079, 1079, 1079, 1311,
     1638, 1311, 1638, 1638, 1311, 1638, 1638, 1311, 1311, 1638,
     1638, 1311, 1311, 1311, 1311, 1311, 1317, 1638, 1317, 1638,
     1638, 1317, 1638, 1638, 1317, 1638, 1638, 1638, 1317, 1317,

     1317, 1317, 1317,  878, 1638,  878, 1638, 1638,  878,  878,
      878,  878,  878, 1638,  878,  878,  878,  878,  878,  878,
     1101, 1638, 1101, 1638, 1638, 1101, 1101, 1101, 1101, 1101,
     1638, 1101, 1101, 1101, 1101, 1101, 1101, 1113, 1638, 1113,
     1638, 1638, 1113, 1638, 1113, 1113, 1638, 1638, 1638, 1113,
     1113, 1113, 1113, 1113, 1125, 1638, 1125, 1638, 1638, 1125,
     1638, 1125, 1125, 1638, 1638, 1638, 1125, 1125, 1125, 1125,
     1125, 1131, 1638, 1131, 1638, 1638, 1131, 1638, 1131, 1131,
     1638, 1638, 1638, 1131, 1131, 1131, 1131, 1131, 1135, 1638,
     1135, 1638, 1638, 1135, 1638, 1135, 1135, 1638, 1638, 1638,

     1135, 1135, 1135, 1135, 1135, 1143, 1638, 1143, 1638, 1638,
     1143, 1638, 1143, 1143, 1143, 1638, 1638, 1143, 1143, 1143,
     1143, 1143, 1153, 1638, 1153, 1638, 1638, 1153, 1153, 1153,
     1153, 1153, 1638, 1153, 1153, 1153, 1153, 1153, 1153, 1347,
     1638, 1347, 1638, 1638, 1347, 1347, 1347, 1347, 1347, 1638,
     1347, 1347, 1347, 1347, 1347, 1347, 1355, 1638, 1355, 1638,
     1638, 1355, 1355, 1355, 1355, 1355, 1638, 1355, 1355, 1355,
     1355, 1355, 1355,  872, 1638,  872, 1638, 1638,  872, 1638,
      872,  872,  872, 1638, 1638,  872,  872,  872,  872,  872,
     1162, 1638, 1162, 1638, 1638, 1162, 1162, 1162, 1162, 1162,

     1638, 1162, 1162, 1162, 1162, 1162, 1162, 1362, 1638, 1362,
     1638, 1638, 1362, 1362, 1362, 1362, 1362, 1638, 1362, 1362,
     1362, 1362, 1362, 1362, 1370, 1638, 1370, 1638, 1638, 1370,
     1370, 1370, 1370, 1370, 1638, 1370, 1370, 1370, 1370, 1370,
     1370, 1169, 1638, 1169, 1638, 1638, 1169, 1169, 1169, 1169,
     1169, 1638, 1169, 1169, 1169, 1169, 1169, 1169, 1378, 1638,
     1378, 1638, 1638, 1378, 1638, 1378, 1378, 1378, 1638, 1638,
     1378, 1378, 1378, 1378, 1378, 1384, 1638, 1384, 1638, 1638,
     1384, 1638, 1384, 1384, 1638, 1638, 1638, 1384, 1384, 1384,
     1384, 1384,  373,  373,  373,  373,  373,  373,  373,  373,

      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373, 1219, 1219, 1219, 1219, 1219, 1638,
     1219, 1219, 1219, 1219, 1638, 1219, 1638, 1638, 1219, 1219,
     1219, 1638, 1219, 1219, 1638, 1219, 1227, 1227, 1227, 1227,
     1227, 1638, 1227, 1227, 1227, 1227, 1638, 1227, 1638, 1638,
     1227, 1227, 1227, 1638, 1227, 1638, 1638, 1227, 1239, 1239,
     1239, 1239, 1239, 1638, 1239, 1239, 1239, 1239, 1638, 1239,
     1638, 1638, 1239, 1239, 1239, 1638, 1239, 1638, 1638, 1239,
     1252, 1252, 1252, 1252, 1252, 1638, 1252, 1252, 1252, 1252,
     1638, 1252, 1638, 1638, 1252, 1252, 1252, 1638, 1252, 1638,

     1638, 1252,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405, 1453, 1638, 1453, 1638, 1638, 1453,
     1453, 1638, 1453, 1453, 1638, 1453, 1453, 1453, 1453, 1453,
     1453, 1280, 1638, 1280, 1638, 1638, 1280, 1280, 1638, 1280,
     1280, 1638, 1280, 1280, 1280, 1280, 1280, 1280, 1462, 1638,
     1462, 1638, 1638, 1462, 1462, 1638, 1462, 1462, 1638, 1462,
     1462, 1462, 1462, 1462, 1462, 1288, 1638, 1288, 1638, 1638,
     1288, 1288, 1638, 1288, 1288, 1638, 1288, 1288, 1288, 1288,
     1288, 1288,  774, 1638,  774, 1638, 1638,  774, 1638, 1638,

      774,  774, 1638, 1638,  774,  774,  774,  774,  774, 1470,
     1638, 1470, 1638, 1638, 1470, 1470, 1638, 1470, 1470, 1638,
     1470, 1470, 1470, 1470, 1470, 1470, 1295, 1638, 1295, 1638,
     1638, 1295, 1295, 1638, 1295, 1295, 1638, 1295, 1295, 1295,
     1295, 1295, 1295, 1303, 1638, 1303, 1638, 1638, 1303, 1303,
     1638, 1303, 1303, 1638, 1303, 1303, 1303, 1303, 1303, 1303,
     1311, 1638, 1311, 1638, 1638, 1311, 1638, 1638, 1311, 1311,
     1638, 1638, 1311, 1311, 1311, 1311, 1311, 1482, 1638, 1482,
     1638, 1638, 1482, 1638, 1638, 1482, 1638, 1638, 1638, 1482,
     1482, 1482, 1482, 1482, 1317, 1638, 1317, 1638, 1638, 1317,

     1638, 1638, 1317, 1638, 1638, 1638, 1317, 1317, 1317, 1317,
     1317, 1497, 1638, 1497, 1638, 1638, 1497, 1497, 1497, 1497,
     1497, 1638, 1497, 1497, 1497, 1497, 1497, 1497, 1347, 1638,
     1347, 1638, 1638, 1347, 1347, 1347, 1347, 1347, 1638, 1347,
     1347, 1347, 1347, 1347, 1347, 1506, 1638, 1506, 1638, 1638,
     1506, 1506, 1506, 1506, 1506, 1638, 1506, 1506, 1506, 1506,
     1506, 1506, 1355, 1638, 1355, 1638, 1638, 1355, 1355, 1355,
     1355, 1355, 1638, 1355, 1355, 1355, 1355, 1355, 1355,  872,
     1638,  872, 1638, 1638,  872, 1638,  872,  872,  872, 1638,
     1638,  872,  872,  872,  872,  872, 1514, 1638, 1514, 1638,

     1638, 1514, 1514, 1514, 1514, 1514, 1638, 1514, 1514, 1514,
     1514, 1514, 1514, 1362, 1638, 1362, 1638, 1638, 1362, 1362,
     1362, 1362, 1362, 1638, 1362, 1362, 1362, 1362, 1362, 1362,
     1370, 1638, 1370, 1638, 1638, 1370, 1370, 1370, 1370, 1370,
     1638, 1370, 1370, 1370, 1370, 1370, 1370, 1378, 1638, 1378,
     1638, 1638, 1378, 1638, 1378, 1378, 1378, 1638, 1638, 1378,
     1378, 1378, 1378, 1378, 1526, 1638, 1526, 1638, 1638, 1526,
     1638, 1526, 1526, 1638, 1638, 1638, 1526, 1526, 1526, 1526,
     1526, 1384, 1638, 1384, 1638, 1638, 1384, 1638, 1384, 1384,
     1638, 1638, 1638, 1384, 1384, 1384, 1384, 1384, 1412, 1412,

     1412, 1412, 1412, 1638, 1412, 1412, 1412, 1412, 1638, 1412,
     1638, 1638, 1412, 1412, 1412, 1638, 1412, 1638, 1638, 1412,
     1420, 1420, 1420, 1420, 1420, 1638, 1420, 1420, 1420, 1420,
     1638, 1420, 1638, 1638, 1420, 1420, 1420, 1638, 1420, 1638,
     1638, 1420, 1441, 1441, 1441, 1441, 1441, 1638, 1441, 1441,
     1441, 1441, 1638, 1441, 1638, 1638, 1441, 1441, 1441, 1638,
     1441, 1638, 1638, 1441, 1453, 1638, 1453, 1638, 1638, 1453,
     1453, 1638, 1453, 1453, 1638, 1453, 1453, 1453, 1453, 1453,
     1453, 1462, 1638, 1462, 1638, 1638, 1462, 1462, 1638, 1462,
     1462, 1638, 1462, 1462, 1462, 1462, 1462, 1462, 1470, 1638,

     1470, 1638, 1638, 1470, 1470, 1638, 1470, 1470, 1638, 1470,
     1470, 1470, 1470, 1470, 1470, 1545, 1545, 1545, 1545, 1545,
     1638, 1545, 1545, 1545, 1545, 1638, 1545, 1638, 1638, 1545,
     1545, 1545, 1638, 1545, 1638, 1638, 1545, 1552, 1552, 1552,
     1552, 1552, 1638, 1552, 1552, 1552, 1552, 1638, 1552, 1638,
     1638, 1552, 1552, 1552, 1638, 1552, 1638, 1638, 1552, 1559,
     1559, 1559, 1559, 1559, 1638, 1559, 1559, 1559, 1559, 1638,
     1559, 1638, 1638, 1559, 1559, 1559, 1638, 1559, 1638, 1638,
     1559, 1566, 1566, 1566, 1566, 1566, 1638, 1566, 1566, 1566,
     1566, 1638, 1566, 1638, 1638, 1566, 1566, 1566, 1638, 1566,

     1638, 1638, 1566, 1572, 1572, 1572, 1572, 1572, 1638, 1572,
     1572, 1572, 1572, 1638, 1572, 1638, 1638, 1572, 1572, 1572,
     1638, 1572, 1638, 1638, 1572, 1612, 1612, 1612, 1612, 1612,
     1638, 1612, 1612, 1612, 1612, 1638, 1612, 1638, 1638, 1612,
     1612, 1612, 1638, 1612, 1638, 1638, 1612, 1620, 1620, 1620,
     1620, 1620, 1638, 1620, 1620, 1620, 1620, 1638, 1620, 1638,
     1638, 1620, 1620, 1620, 1638, 1620, 1638, 1638, 1620,   31,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638
    } ;

static const flex_int16_t yy_chk[11245] =
    {   0,
        0,    0,    1,    1,    1,    2,    2,    2,   11,   11,
       12,   12,   36,   40,   92,   36,   40,   92,   36,   40,
      135,  135,   71,   36,   40,   42,    1,    0,   42,    2,
       70,   70,   70,   70,   36,   40,   71,   42,   50,   42,
       42,   50,   42,   42,   42,   42,   49,    0,   49,   49,
       49,   49,    0,   92,   71,   50,   50,   50,   50,  118,
      118,  118,   50,  131,  131,  131,  131,  140,  140,  180,
      180,    1,    1,    1,    2,    2,    2,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    9,

        9,    9,    9,   32,   32,   32,    9,  422,    9,    9,
        9,    9,  422,    9,    9,    9,   37, 1264,   37,   37,
       37,  411,   38,    9,   38,   38,   38,   39,  411,   39,
       39,   39,  142,  148,  411,  142,  148,    9,    9,    9,
      132,  129,  219,  132,  129,  219,   13,   13,   13,   13,
     1265,   13,   14,   14,   14,   14,  129,   14,   21,   21,
       21,   21, 1266,   21,  132,    9,   84,    9,    9,    9,
        9,    9,   10,   10,   10,   10,   74,   74, 1267,   10,
       84,   10,   10,   10,   10,   13,   10,   10,   10, 1268,
       74,   14,   74,   74,   74,   74,   10,   21,   84,   52,

     1269,   52,   52,   52,   52,  153,  153,  153,  153, 1270,
       10,   10,   10,   52,   13,   13,   13,   13,   13, 1271,
       14,   14,   14,   14,   14,  674,   21,   21,   21,   21,
       21,   52,  133,  674,  133,  133,  133,  133,   10, 1272,
       10,   10,   10,   10,   10,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   17,
       17,   17,   17,  139,  139,  167,  167,  167,   22,   22,
       22,   22, 1273,   22,   29,   29,   87,   87,   29,   30,
       30, 1274,  154,   30,   17,   64, 1275,  139,   64,  193,
       87,  193,   87,   87,   87,   87,  154,   64,   17,   64,
       64,   17,   64,   64,   64,   64,   79,   22,  229,   79,
     1276,  229,   29,  105,  154, 1277,  105,   30,   79,  324,
       79,   79,  324,   79,   79,   79,   79,   17,   17,   17,
       17,   17,   18,   18,   18,   18,   22,   22,   22,   22,

       22,   29,   29,   29,   29,   29,   30,   30,   30,   30,
       30,  155,  105,  155,  155,  155,  155,   18,   46,  176,
      176,  176,  187,   65,   46,  155,  361,  136,  361,   46,
      136,   18,   65,  320,   18,   72,  320,  168,   65,  168,
      168,  168,   65,  155,   72,  169, 1278,  169,  169,  169,
       72, 1279,   46,  335,   72,   46,  335,   46,   65,  187,
       18,   18,   18,   18,   18,   19,  136, 1283,   19,   46,
       72,   19,  320,   19,   19, 1284,   46,   19,   19,   19,
       19,   19,   19,   19,   19,   19, 1285,   65,   65,   65,
       19,  170,  335,  170,  170,  170,  267,  267,  267,   72,

       72,   72,  321,  321,   19,   73,   19,   23,   23,   23,
       23,   73, 1286,   73,  336,  336,   73,   73,   73,   73,
       73,   80,  339,  173,   83,  339,  173,   83,  369,  173,
       80,  369,   23,  409,  173,  409,   80,  386,   85,   83,
       80,   83,   83,   83,   83,  173,   23,   85,   83,   23,
      367,  367,   86,   85, 1287,  386,   80,   85,   86,  358,
       86, 1291,  358,   86,   86,   86,   86,   86, 1292,   73,
       73,   73, 1293,   85,  358,   23,   23,   23,   23,   23,
       24,   24,   24,   24, 1298,   80,   80,   80,  177,  130,
      177,  177,  177,  376,  178,  130,  178,  178,  178, 1299,

      130,  418,   85,   85,   85,   24, 1300,  376,  195,  179,
      230,  230,  179,  230,  418,  179,   86,   86,   86,   24,
      179, 1301,   24,  130,  181,  376,  130,  181,  130,  389,
      389,  179,  232,  232,  232,  162,  181,  232,  181,  181,
      130,  181,  181,  181,  181, 1302,  162,  130,   24,   24,
       24,   24,   24,   25,   25,   25,   25,  195,  195,  195,
      182,   25,  182,  182,  182,  182,  305,  305,  305,  162,
       25,   25,   25,   25,  162,  349,  349,  349,  162,   25,
       25,   25,   25,  279,  279,  162,  279, 1306,  162,  183,
      162,  162,  183,  391,  391, 1307,   25,   25,   25,   25,

       25,   25,   26,   26,   26,   26,  183,  183,  183,  183,
       26, 1308,  184,  183,  184,  184,  184,  184, 1309,   26,
       26,   26,   26, 1310,  325,  325,  184,  325,   26,   26,
       26,   26,  191,  625,  198,  625,  191,  200,  191,  311,
      371,  191,  191,  371,  184,   26,   26,   26,   26,   26,
       26,   27,   27,   27,   27,  203,   27, 1314,  197, 1315,
       27,   27,  311,  200,   27,   27,  198, 1316,   27,   27,
       27,   27,   27,  192,  311,  192, 1318,  203,  192,  192,
      192,  311, 1319,  198,  198,  198,  200,  200,  200,   27,
      197,   27,  197,  201,  216,  216,  216,  216,  352,   27,

      202,  399,  399, 1320,  203,  203,  203,  197,  197,  197,
      352,   27,  199,  400,  400,  208,   27,  352,   27,   28,
       28,   28,   28,  205,   28,  201,  201,  201,   28,   28,
      202,  204,   28,   28,  199, 1321,   28,   28,   28,   28,
       28,  199,  201,  201,  201,  205,  211,  199, 1322,  202,
      202,  202,  208,  340,  340,  208,  340,   28,  204,   28,
     1323,  199,  199,  199,  208,  208,  208,   28,  217,  217,
      217,  217,  205,  205,  205,  401,  401,  401,  212,   28,
      204,  204,  204,  211,   28,  359,   28,   47,  359,  374,
       47,   47,  374, 1324,   47,  211,  211,  211,   47,   47,

     1325,   47, 1326,   47,   47,   47,   47,   47,   47,  359,
       47,   47,  212,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47, 1327,   47,  212,  212,  212,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,  227,  227,  227,  227, 1328,   47,   47,   47,
       57,   57,   57, 1329,  370,  370,  218,  370,  218,  218,
      218,  218,  402,  402,  402,  206,   57,   57,   57, 1330,
      218,  207,  225,  392,  225,  225,  392,  225,  225,  225,
      225,  238,  209,  238,  238,  238,  238,  206,  218,  328,

      328,  328,   57,   57,  328,  420,   57,   57,  420,  366,
      206, 1331,  366, 1332,   57, 1333,  207,   57,  209,   57,
     1334,   57,   57,   66,  206,  206,  206, 1335,  210,   66,
      207,  207,  207, 1336,   66,   66,   66,   66,   66,   66,
       66,  209,  209,  209,  243,  243,  243,  243,  366,   66,
       66,   66,   66,   66,   66, 1337,  464,   66,  210,  464,
       66, 1338,   66,  210,  630,  630,  220,  630,  220,  220,
      220,  220,  631,  637,   66,  631,  637,  210,  210,  210,
      220,   66,   68,  239,  239,  239,  239,  342,  342,  342,
      239,   68,  342,   68,   68,   68,   68,   68,  220, 1339,

      223,   68,  223,  223,  223,  223,  237, 1340,  240,  237,
      240,  240,  240,  240,  223,  245,  405,   68,  237, 1341,
      237,  237,  240,  237,  237,  237,  237,  413,  413,  413,
      245, 1342,  223, 1343,  242,  241,  242,  242,  242,  242,
      240,  488,  488,  488,  241, 1344,   68,   68,   68,   82,
      241,  661,  661,  388,  241,  388,  388,  388,   82, 1345,
       82,   82,   82,   82,   82,  405,  405,  405,   82,  246,
      241,  246,  246,  246,  246,  250,  509,  509,  509,  245,
      245,  245,  636,  636,   82,  636,  250,  250,  250,  250,
      670,  670,  250,  259,  259,  259,  259,  927,  927,  241,

      241,  241,  280, 1346,  280,  280,  280,  280,  289,  289,
      289,  289, 1350,   82,   82,   82,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
      109,  109,  109, 1351,  109,  244,  284,  109,  284,  284,

      284,  284,  650,  251,  244,  650,  109,  109,  109,  291,
      244, 1352,  251, 1353,  244,  465,  465,  465,  251, 1354,
      465,  426,  251,  677,  291, 1358,  677,  436,  109, 1359,
      244,  109,  109,  109,  928,  928,  109,  109,  251,  297,
      297,  297,  297, 1360,  109, 1365,  426,  109, 1366,  109,
     1367,  109,  109,  119,  119,  119,  119, 1368, 1369,  244,
      244,  244,  119,  119,  119,  119,  436,  251,  251,  251,
      426,  426,  426,  291,  291,  291,  436,  436,  436,  119,
      119,  119,  119,  119,  119,  126, 1373,  126,  126, 1374,
     1375,  126,  126,  126, 1376, 1377,  126,  126,  126,  126,

      265,  518,  518,  518,  126,  264, 1381,  264,  264,  265,
      264,  264,  264,  264, 1382,  265, 1383,  126,  684,  265,
      126,  684,  264,  354,  354,  354,  354,  286,  684,  286,
      286,  286,  286, 1385, 1386,  265,  283, 1387, 1388,  283,
      264,  286, 1389, 1390,  126,  127,  127,  127,  283,  127,
      283,  283,  127,  283,  283,  283,  283,  285, 1391,  286,
      285,  127,  127,  127,  265,  265,  265,  649,  649,  127,
      649, 1392,  285, 1395,  285,  285,  285,  285,  528,  528,
      528,  285, 1399,  127, 1400, 1401,  127,  127,  127, 1403,
     1405,  127,  127,  355,  355,  355,  355, 1407, 1408,  127,

     1409, 1410,  127, 1415,  127, 1416,  127,  127,  196,  196,
      196,  196,  196,  196,  196, 1417,  196, 1423,  196,  196,
      196,  196, 1424,  196,  196,  196,  196,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222, 1425,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,

      222,  260,  362, 1444,  362,  362,  362,  362,  266, 1445,
      260, 1446,  260,  260,  260,  260,  260,  266, 1447, 1448,
      260, 1449, 1450,  266,  260, 1451,  360,  266,  360,  268,
     1452,  360,  360,  360, 1456,  427,  260, 1457,  268,  425,
      272, 1458,  260,  266,  268,  533,  533,  533,  268,  272,
      363,  363,  363,  363, 1459,  272, 1460, 1461,  364,  272,
      364,  364,  364,  364,  268,  260,  260,  260,  262, 1465,
      427,  425,  266,  266,  266,  272,  430,  262, 1466,  262,
      262,  262,  262,  262,  427,  427,  427,  262,  425,  425,
      425,  262, 1467,  268,  268,  268,  377, 1468,  377,  377,

      377,  377, 1469, 1473,  272,  272,  272, 1474,  430,  262,
      377,  378,  378,  378,  378,  379, 1475,  379, 1476, 1477,
      379,  379,  379,  379, 1478,  430,  430,  430,  377,  568,
      568,  568,  262,  262,  262,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263, 1479,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,

      263,  263,  263,  263,  263,  263,  263,  263,  263,  274,
      451,  451,  451,  451, 1480, 1481,  287, 1483,  274, 1484,
      274,  274,  274,  274,  274,  287, 1485,  288,  274, 1486,
      290,  287,  587,  587,  587,  287,  288,  716, 1487,  290,
      716,  292,  288, 1488,  274,  290,  288,  716,  296,  290,
      292,  287, 1489,  434, 1490, 1491,  292,  296,  942, 1492,
      292,  942,  288,  296,  395,  290,  395,  296,  942,  395,
      395,  395,  395,  274,  274,  274,  292, 1493,  434, 1494,
      287,  287,  287,  296, 1495,  380, 1496,  380,  380,  380,
      380,  288,  288,  288,  290,  290,  290,  429, 1500,  380,

     1501,  303,  434,  434,  434,  292,  292,  292,  943, 1502,
      303,  943,  296,  296,  296,  298,  303,  380,  943, 1503,
      303,  596,  596,  596,  298,  431,  298,  298,  298,  298,
      298, 1504,  429, 1505,  298, 1509,  303,  302,  298,  302,
      302, 1510,  302,  302,  302,  302,  429,  429,  429,  304,
      298, 1511,  431,  440,  302, 1512,  298, 1513,  304,  394,
      394,  394,  394, 1517,  304,  303,  303,  303,  304,  428,
     1518,  394,  302, 1519,  431,  431,  431, 1520,  440,  298,
      298,  298,  300,  438,  304, 1521,  432, 1522, 1523,  394,
      433,  300, 1524,  300,  300,  300,  300,  300,  606,  606,

      606,  300,  440,  440,  440,  300, 1525,  428,  428,  461,
      461,  461,  461,  304,  304,  304,  432, 1527,  428,  428,
      428,  438, 1528,  300,  432,  462,  433,  462,  462,  462,
      462, 1529,  438,  438,  438,  432,  432,  432, 1530,  433,
      433,  433,  463,  463,  463,  463,  300,  300,  300,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301, 1531,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,

      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  306,  953,  435,  310,  953,  439, 1532,
     1533,  317,  306,  441,  953,  310, 1534, 1535,  306, 1537,
      317,  310,  306, 1539,  442,  310,  317,  442, 1541, 1548,
      317,  611,  611,  611,  442,  643,  643,  643,  306,  435,
      443,  310,  435, 1549, 1550,  442,  317,  441, 1555,  445,
      965,  439, 1556,  965,  435,  435,  435,  439,  439,  439,
      965,  444,  441,  441,  441, 1557,  447,  306,  306,  306,
      310,  310,  310,  312,  446,  317,  317,  317, 1562,  443,

      448, 1563,  312,  445,  312,  312,  312,  312,  312,  443,
      443,  443,  312, 1564,  442,  442,  442,  444,  445,  445,
      445,  469,  469,  469,  469, 1569, 1570,  446,  312,  447,
      444,  444,  444,  472,  505,  447,  447,  447, 1571,  448,
     1575, 1576,  472,  446,  446,  446, 1577, 1580,  472,  448,
      448,  448,  472,  479,  479,  479,  479,  312,  312,  312,
      350,  350,  350,  350,  967,  515, 1581,  967,  472,  350,
      350,  350,  350,  456,  967,  456, 1582, 1583,  456,  456,
      456,  456, 1584,  505,  505,  505,  350,  350,  350,  350,
      350,  350,  404,  404,  404,  404, 1585,  472,  472,  472,

     1586,  404,  404,  404,  404,  460, 1587,  460, 1588, 1589,
      460,  460,  460,  460,  515,  515,  515,  486,  404,  404,
      404,  404,  404,  404,  437,  437,  437,  437,  437, 1590,
      437,  437,  486,  437,  437,  437, 1591, 1592,  437,  454,
      437,  454,  454,  454,  454,  969,  437,  437,  969, 1593,
      437, 1594,  486,  454,  458,  969,  458,  458,  458,  458,
      644,  644,  644,  437, 1595,  437,  437,  437,  458, 1596,
      471,  454,  471, 1597, 1598,  471,  471,  471,  471, 1599,
     1600,  486,  486,  486, 1601, 1602,  458,  657,  657,  657,
      437,  437,  437,  437,  437,  437,  437,  437,  452,  452,

      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452, 1603,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  470,  549,  549,  549,  549, 1604, 1605,  473,
      663,  663,  663,  470,  470,  470,  470,  470,  473, 1606,
      474,  470, 1607,  475,  473,  470,  510, 1615,  473,  474,

      980, 1616,  475,  980, 1617,  474, 1623,  480,  475,  474,
      980,  510,  475,  470,  473,  481,  480,  559,  559,  559,
      559, 1608,  480, 1624,  481,  474,  480, 1625,  475, 1626,
      481, 1627,  482, 1628,  481, 1629,  470,  470,  470, 1608,
     1630,  482,  480,  473,  473,  473, 1631,  482, 1632, 1633,
      481,  482, 1263, 1262,  474,  474,  474,  475,  475,  475,
      510,  510,  510,  507,  754,  754,  754,  482,  496,  583,
     1666,  480,  480,  480,  593,  497, 1666,  496,  507,  481,
      481,  481,  507,  496,  497, 1261,  498,  496, 1260, 1005,
      497,  519, 1005, 1259,  497,  498,  482,  482,  482, 1005,

     1257,  498,  623,  496,  623,  498,  519,  623,  623,  504,
      497,  504,  504, 1256,  504,  504,  504,  504,  583,  583,
      583,  498, 1255,  593,  593,  593,  504,  507,  507,  507,
     1244, 1243,  496,  496,  496,  642,  642,  642,  642,  497,
      497,  497, 1242, 1686,  504,  648,  648,  648,  648, 1686,
      498,  498,  498,  502, 1232,  519,  519,  519,  632,  632,
      632, 1231,  502,  632,  502,  502,  502,  502,  502,  638,
      638,  638,  502, 1230,  638, 1687,  502, 1225,  511, 1201,
      511, 1687, 1201,  511,  511,  511,  511,  511, 1224, 1201,
      520, 1223,  520, 1214,  502,  520,  520,  520,  520,  520,

      652,  652,  652,  652, 1209, 1212,  526, 1209,  524, 1211,
      524,  524,  524,  524, 1209,  526, 1210,  502,  502,  502,
      503,  526,  524, 1208, 1694,  526,  774,  585, 1207,  503,
     1694,  503,  503,  503,  503,  503,  511,  511,  511,  503,
      524,  526,  585,  503, 1205, 1204,  585,  527,  520,  520,
      520,  758,  758,  758,  529,  503,  527, 1220,  780,  539,
     1220,  503,  527,  529, 1203, 1202,  527, 1220,  539,  529,
      526,  526,  526,  529,  539,  774,  774,  774,  539,  775,
      775,  775,  527, 1199,  503,  503,  503,  508,  781,  529,
     1198,  585,  585,  585,  539, 1197,  508, 1196,  508,  508,

      508,  508,  508,  779,  779,  779,  508,  780,  780,  780,
      508,  527,  527,  527,  653,  653,  653,  653,  529,  529,
      529,  540,  508,  539,  539,  539,  541,  624,  508,  624,
      540, 1195,  624,  624,  624,  541,  540,  781,  781,  781,
      540,  541,  551, 1194,  551,  541, 1189,  551,  551,  551,
      551,  508,  508,  508,  517, 1662,  540, 1188, 1662,  588,
     1187,  541, 1186,  517, 1662,  517,  517,  517,  517,  517,
      783,  783,  783,  517,  588, 1690, 1185,  517, 1690,  552,
     1184, 1183,  566, 1182, 1690,  540,  540,  540,  552,  517,
      541,  541,  541,  553,  552,  517,  554,  566,  552,  788,

      788,  788,  553, 1228, 1700,  554, 1228,  555,  553, 1181,
     1700,  554,  553, 1228,  552,  554,  555,  566,  517,  517,
      517,  525,  555,  588,  588,  588,  555, 1180,  553, 1179,
      525,  554,  525,  525,  525,  525,  525,  812,  812,  812,
      525, 1178,  555,  552,  552,  552,  566,  566,  566,  726,
      726,  726,  726, 1176, 1174,  560,  525,  553,  553,  553,
      554,  554,  554, 1746,  560,  728,  728,  728,  728, 1746,
      560,  555,  555,  555,  560, 1173,  582, 1172,  582,  582,
     1168,  582,  582,  582,  582,  525,  525,  525,  545, 1167,
      560, 1166, 1703,  582, 1703,  561, 1159,  545, 1703,  545,

      545,  545,  545,  545,  561, 1233, 1158,  545, 1233, 1742,
      561,  582, 1742, 1157,  561, 1233,  562, 1151, 1742,  560,
      560,  560,  597,  545, 1149,  562, 1148,  574, 1147, 1146,
      561,  562,  852,  852,  852,  562,  574,  597,  734,  734,
      734,  734,  574, 1145, 1142,  731,  574,  731,  731,  731,
      731,  562,  545,  545,  545,  550,  856,  856,  856,  561,
      561,  561,  574, 1141,  575, 1749,  550,  550,  550,  550,
      550, 1749, 1140,  575,  550,  576, 1139, 1138,  550,  575,
      562,  562,  562,  575,  576, 1137,  597,  597,  597, 1136,
      576,  574,  574,  574,  576, 1743,  550, 1743, 1750,  575,

      589, 1743,  589, 1134, 1750,  589,  589,  589,  589,  589,
      576,  602, 1799,  602,  602,  602,  602, 1133, 1799,  550,
      550,  550,  873,  873,  873,  602, 1132, 1130,  575,  575,
      575, 1129,  651,  651,  651,  651,  877,  877,  877,  576,
      576,  576,  580,  602,  651,  796,  796,  796,  796,  796,
     1128,  580, 1127,  580,  580,  580,  580,  580,  589,  589,
      589,  580,  651, 1126, 1124,  580, 1123,  598, 1218,  598,
      604, 1218,  598,  598,  598,  598,  598,  605, 1218,  604,
     1122, 1121,  607,  580, 1226,  604,  605, 1226, 1120,  604,
     1119,  607,  605, 1118, 1226,  617,  605,  607,  796,  796,

      796,  607, 1117, 1116,  617,  604,  580,  580,  580,  581,
      617, 1115,  605, 1802,  617, 1218, 1114,  607,  581, 1802,
      581,  581,  581,  581,  581,  598,  598,  598,  581,  872,
      617, 1226,  581, 1112,  604,  604,  604,  800,  800,  800,
      800,  605,  605,  605,  581, 1803,  607,  607,  607,  618,
      581, 1803, 1111,  727,  727,  727,  727, 1843,  618,  617,
      617,  617,  619, 1843,  618,  727, 1844, 1110,  618, 1109,
     1108,  619, 1844,  581,  581,  581,  586,  619,  872,  872,
      872,  619, 1107,  727,  618,  586, 1106,  586,  586,  586,
      586,  586,  881,  881,  881,  586,  659,  619,  659,  586,

     1105,  659,  659,  659,  659,  832,  832,  832,  832, 1104,
     1099,  586, 1098,  618,  618,  618,  660,  586,  660,  660,
     1097,  660,  660,  660,  660, 1885,  619,  619,  619,  691,
     1096, 1885,  691, 1095, 1094,  729,  729,  729,  729,  691,
      586,  586,  586,  595,  886,  886,  886,  729, 1093, 1092,
      691, 1091,  595, 1886,  595,  595,  595,  595,  595, 1886,
      692, 1090,  595,  692,  694,  729,  595,  694, 1089,  693,
      692, 1088,  693, 1086,  694, 1084, 1083,  696,  595,  693,
      696,  692, 1082,  695,  595,  694,  695,  696, 1078, 1077,
      693, 1076,  698,  695, 1069,  698, 1068, 1067,  696,  691,

      691,  691,  698, 1061,  695, 1059, 1058,  595,  595,  595,
      603,  694, 1057,  698,  693,  898,  898,  898,  898,  603,
     1056,  603,  603,  603,  603,  603, 1055, 1052,  695,  603,
      692,  692,  692,  696,  694,  694,  694, 1051, 1050,  693,
      693,  693, 1049,  698, 1048,  603, 1047,  696,  696,  696,
      910,  910,  910,  695,  695,  695, 1222,  697, 1046, 1222,
      697, 1044,  698,  698,  698, 1043, 1222,  697,  797,  797,
      797,  797, 1042, 1040,  603,  603,  603,  626,  697, 1039,
      797,  929,  929,  929, 1038, 1037,  626, 1036,  626,  626,
      626,  626,  626, 1744,  702, 1744,  626,  702,  797, 1744,

      725, 1222,  725,  725,  702,  725,  725,  725,  725, 1034,
      697,  699,  626, 1033,  699,  702, 1032,  725,  730, 1031,
      730,  699, 1030,  730,  730,  730,  730,  697,  697,  697,
     1029, 1028,  699, 1027, 1026,  725, 1025,  802,  802,  802,
      802,  626,  626,  626,  646,  646,  646,  646,  700,  802,
     1024,  700, 1022,  646,  646,  646,  646, 1021,  700,  699,
      930,  930,  930, 1020,  702,  702,  702,  802, 1019,  700,
      646,  646,  646,  646,  646,  646,  664,  664,  664,  664,
     1018,  699,  699,  699, 1017,  664,  664,  664,  664,  701,
     1235, 1237,  701, 1235, 1237,  700, 1016, 1015,  808,  701,

     1235, 1237,  664,  664,  664,  664,  664,  664,  736, 1014,
      701,  703, 1236,  808,  703, 1236, 1002,  736,  700,  700,
      700,  703, 1236,  736, 1001,  704, 1240,  736,  704, 1240,
      705, 1000,  703,  705,  707,  704, 1240,  707, 1245,  993,
      705, 1245, 1247,  736,  707, 1247,  704,  992, 1245,  701,
      991,  705, 1247,  966,  703,  707,  935,  935,  935,  701,
      701,  701,  808,  808,  808, 1236,  712, 1251,  964,  712,
     1251,  963,  736,  736,  736, 1238,  712, 1251, 1238,  735,
      705,  703,  703,  703,  704, 1238,  962,  712,  735,  961,
      735,  735,  735,  735,  735,  704,  704,  704,  735,  960,

      705,  705,  705,  959,  707,  707,  707,  708,  708,  708,
      708,  708,  708,  708, 1251,  708,  958,  708,  708,  708,
      708,  957,  708,  708,  708,  708,  712,  752,  956,  713,
      955,  954,  713, 1238,  878,  952,  712,  712,  712,  713,
      951,  950,  752,  735,  735,  735, 1023, 1023, 1023,  715,
      713, 1008,  715, 1008, 1008, 1008, 1008, 1249,  949,  715,
     1249,  720,  752,  948,  720,  718, 1250, 1249,  718, 1250,
      715,  720,  947,  713,  946,  718, 1250,  722, 1253,  945,
      722, 1253,  720,  878,  878,  878,  718,  722, 1253,  879,
      944,  752,  752,  752,  941,  937,  715,  934,  722,  713,

      713,  713,  714,  714,  714,  714,  714,  926,  714,  714,
      720,  714,  714,  714,  979,  925,  714, 1249,  714,  715,
      715,  715,  718,  924,  714,  714, 1250,  923,  714,  922,
      918,  720,  720,  720,  917,  718,  718,  718,  879,  879,
      879,  714,  916,  714,  714,  714,  972,  722,  722,  722,
      915,  801,  801,  801,  801,  801,  714,  979,  971, 1035,
     1035, 1035,  914,  979,  979,  979,  906,  913,  714,  714,
      714,  714,  714,  714,  714,  714,  719,  719,  719,  719,
      719,  906,  719,  719,  972,  719,  719,  719,  912,  971,
      719,  721,  719,  911,  721,  972,  972,  972,  719,  719,

      723,  721,  719,  723,  801,  801,  801,  971,  971,  971,
      723,  909,  721, 1397,  908,  719, 1397,  719,  719,  719,
      733,  723,  733, 1397,  719,  733,  733,  733,  733,  733,
      906,  906,  906,  894,  894,  894,  894,  894,  721,  907,
      976,  737,  719,  719,  719,  719,  719,  719,  719,  719,
      737,  723,  895,  895,  895,  895,  737,  897,  738,  896,
      737,  721,  721,  721,  895,  893,  744,  738,  892,  753,
      723,  723,  723,  738,  976,  744,  737,  738,  733,  733,
      733,  744,  895,  745,  753,  744,  894,  894,  894,  976,
      976,  976,  745,  738,  746, 1041, 1041, 1041,  745,  891,

      889,  744,  745,  746,  753,  737,  737,  737,  888,  746,
     1045, 1045, 1045,  746,  900,  900,  900,  900,  745, 1087,
     1087, 1087,  738,  738,  738,  887,  900,  765,  885,  746,
      744,  744,  744,  753,  753,  753,  765, 1062, 1062, 1062,
     1062,  792,  765,  884,  900,  883,  765,  745,  745,  745,
      876,  875,  766,  874,  870,  767,  792,  869,  746,  746,
      746,  766,  765,  803,  767, 1402,  868,  766, 1402,  867,
      767,  766,  803,  866,  767, 1402,  792,  862,  803,  861,
      860, 1009,  803, 1009, 1009, 1009, 1009,  766,  859,  984,
      767,  765,  765,  765,  784,  804,  784,  973,  803,  784,

      784,  784,  784,  784,  804,  792,  792,  792,  858,  857,
      804, 1113, 1113, 1113,  804,  984,  766,  766,  766,  767,
      767,  767,  773, 1125, 1125, 1125,  973,  803,  803,  803,
      804,  773,  855,  773,  773,  773,  773,  773,  984,  984,
      984,  773, 1131, 1131, 1131,  773,  973,  973,  973, 1135,
     1135, 1135,  784,  784,  784,  805,  854,  773,  853,  804,
      804,  804,  807,  773,  805,  849,  805,  805,  805,  805,
      805,  807,  848, 1246,  805,  821, 1246,  807,  850,  847,
      846,  807,  845, 1246,  821,  982,  773,  773,  773,  782,
      821,  841,  840,  850,  821,  839,  822,  807,  782,  838,

      782,  782,  782,  782,  782,  822, 1404,  837,  782, 1404,
      821,  822,  782,  850,  823,  822, 1404,  982,  830,  805,
      805,  805,  828,  823,  782,  827,  807,  807,  807,  823,
      782,  822, 1246,  823,  982,  982,  982,  826,  825,  821,
      821,  821,  850,  850,  850, 1152, 1152, 1152, 1152,  823,
     1177, 1177, 1177,  782,  782,  782,  806,  988,  824,  820,
      822,  822,  822,  974,  819,  806,  983,  806,  806,  806,
      806,  806, 1313, 1313, 1313,  806,  986,  818,  823,  823,
      823,  831, 1406,  831,  833, 1406,  831,  831,  831,  831,
      831,  806, 1406,  833,  817,  833,  833,  833,  833,  833,

      816,  974,  986,  833,  815,  983,  988,  988,  988,  834,
      814,  813,  974,  974,  974,  983,  983,  983,  834,  811,
      806,  806,  806,  829,  834,  986,  986,  986,  834, 1317,
     1317, 1317,  829,  810,  829,  829,  829,  829,  829,  831,
      831,  831,  829, 1413,  834,  835, 1413,  809,  833,  833,
      833,  995,  799, 1413,  835,  798,  795,  836,  829,  794,
      835,  793,  842,  791,  835,  790,  836, 1380, 1380, 1380,
      851,  842,  836,  834,  834,  834,  836,  842,  789,  890,
      835,  842,  787,  786,  843,  851,  785,  829,  829,  829,
      778,  995,  836,  843,  890,  777,  776,  842,  844,  843,

      995,  995,  995,  843,  997,  851,  772,  844,  771,  835,
      835,  835,  770,  844,  890, 1418,  769,  844, 1418,  843,
      990,  836,  836,  836,  768, 1418,  842,  842,  842, 1384,
     1384, 1384,  863,  844,  851,  851,  851,  864, 1482, 1482,
     1482,  863,  990,  890,  890,  890,  864,  863,  843,  843,
      843,  863,  864,  997,  997,  997,  864,  764,  763,  865,
      762,  761,  844,  844,  844,  999,  760,  863,  865,  990,
      990,  990,  864,  759,  865, 1526, 1526, 1526,  865,  899,
      899,  899,  899,  899,  882,  978,  882,  999,  978,  882,
      882,  882,  882,  882,  865,  978,  863,  863,  863,  757,

      756,  864,  864,  864,  755,  751,  978, 1421, 1429,  750,
     1421, 1429,  901,  749,  999,  999,  999, 1421, 1429, 1427,
     1003,  901, 1427,  865,  865,  865,  871,  901,  748, 1427,
      747,  901,  899,  899,  899,  871,  743,  871,  871,  871,
      871,  871,  882,  882,  882,  871,  742,  901, 1432,  871,
      741, 1432, 1003,  902,  740,  978,  978,  978, 1432,  739,
      732,  871,  902, 1431,  724,  711, 1431,  871,  902, 1003,
     1003, 1003,  902, 1431,  710,  709,  901,  901,  901, 1427,
      905,  690, 1007,  689, 1435,  688,  687, 1435,  902,  905,
      871,  871,  871,  880, 1435,  905,  686,  685,  683,  905,

     1440,  682,  880, 1440,  880,  880,  880,  880,  880,  681,
     1440,  903,  880,  680, 1007,  905,  880,  902,  902,  902,
      903,  678,  903,  903,  903,  903,  903, 1431,  880,  676,
      903, 1007, 1007, 1007,  880,  675,  673, 1053, 1437, 1442,
      994, 1437, 1442,  994,  905,  905,  905,  672, 1437, 1442,
      994,  919, 1053, 1544,  671,  669, 1544,  880,  880,  880,
      919,  994,  668, 1544,  920,  667,  919,  666,  665,  655,
      919, 1546, 1053,  920, 1546,  903,  903,  903,  904,  920,
      654, 1546,  641,  920,  640,  921,  919,  904,  635,  904,
      904,  904,  904,  904,  921,  634,  629,  904, 1437,  920,

      921, 1053, 1053, 1053,  921,  628,  627,  622,  621,  620,
      994,  994,  994,  904,  616,  919,  919,  919, 1011,  615,
      921, 1553, 1558,  614, 1553, 1558,  613, 1011,  920,  920,
      920, 1553, 1558, 1011,  612, 1560,  610, 1011, 1560, 1012,
      609,  608,  904,  904,  904, 1560,  601,  600, 1012,  921,
      921,  921,  933, 1011, 1012,  599,  594,  592, 1012,  591,
     1013,  933,  590,  933,  933,  933,  933,  933,  584, 1013,
      579,  933,  578, 1054, 1012, 1013,  577, 1063,  573, 1013,
      572,  571, 1011, 1011, 1011,  570, 1063,  933, 1054,  569,
     1567, 1573, 1063, 1567, 1573, 1013, 1063,  567,  565, 1578,

     1567, 1573, 1578, 1012, 1012, 1012,  564,  563, 1054, 1578,
      558,  557, 1063,  556,  548,  547,  933,  933,  933,  936,
      936,  936,  936,  546, 1013, 1013, 1013,  544,  936,  936,
      936,  936, 1071, 1071, 1071, 1071, 1071, 1054, 1054, 1054,
     1085, 1063, 1063, 1063, 1064,  936,  936,  936,  936,  936,
      936,  938,  938, 1064,  938, 1085,  938,  543,  542, 1064,
      938,  938,  538, 1064,  938,  537, 1610, 1613, 1618, 1610,
     1613, 1618,  938,  536,  535, 1085, 1610, 1613, 1618, 1064,
     1621,  534, 1143, 1621,  532, 1071, 1071, 1071,  531,  938,
     1621,  938,  530,  523,  522,  521,  516, 1143, 1161, 1161,

     1161, 1161, 1161,  514, 1085, 1085, 1085,  513, 1064, 1064,
     1064, 1294, 1294, 1294, 1294, 1294,  938, 1143,  938,  975,
      975,  975,  975,  975,  512,  975,  975,  506,  975,  975,
      975,  501,  500,  975,  499,  975, 1634, 1634, 1634,  493,
      492,  975,  975,  491,  490,  975, 1143, 1143, 1143,  489,
      487, 1161, 1161, 1161, 1634, 1634, 1634, 1634,  975,  485,
      975,  975,  975, 1065, 1294, 1294, 1294,  975,  484,  483,
      478,  477, 1065,  476,  468,  467,  450,  449, 1065,  424,
      423,  421, 1065,  419,  417,  975,  975,  975,  975,  975,
      975,  975,  975,  977,  977,  977,  977,  977, 1065,  977,

      977,  416,  977,  977,  977,  415,  414,  977,  412,  977,
      410,  408,  407,  406,  382,  977,  977,  381,  365,  977,
      346,  345, 1066,  333,  332,  319,  318, 1065, 1065, 1065,
      316, 1066,  977,  315,  977,  977,  977, 1066,  314,  309,
      308, 1066, 1361, 1361, 1361, 1361, 1361,  307,  295,  294,
      293,  282,  281,  278,  277,  276,  273, 1066,  271,  977,
      977,  977,  977,  977,  977,  977,  977,  985,  985,  985,
      985,  985,  270,  985,  985,  269,  985,  985,  985,  249,
      248,  985,  247,  985,  236,  235, 1066, 1066, 1066,  985,
      985,  224,  215,  985,  214, 1361, 1361, 1361,  213,  172,

      166,  165,  164,  160,  157,  156,  985,  150,  985,  985,
      985,  144,  138, 1070,  134,  125,  123,  122,  121,  116,
      113,  112, 1070,  111,  107,  103,  101,  100, 1070,   99,
       94,   90, 1070,  985,  985,  985,  985,  985,  985,  985,
      985,  989,  989,  989,  989,  989,  989,  989, 1070,  989,
       89,  989,  989,  989,  989,   88,  989,  989,  989,  989,
     1004, 1004, 1004, 1004, 1004,   81, 1004, 1004,   78, 1004,
     1004, 1004, 1072,   77, 1004, 1073, 1004, 1070, 1070, 1070,
       76, 1072, 1004, 1004, 1073,   69, 1004, 1072,   63,   62,
     1073, 1072,   61,   55, 1073,   48,   44,   35,   34, 1004,

     1075, 1004, 1004, 1004,   31,    0,    0, 1072,    0, 1075,
     1073,    0,    0,    0,    0, 1075,    0,    0,    0, 1075,
        0,    0,    0,    0,    0,    0, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1010, 1075, 1072, 1072, 1072, 1073,
     1073, 1073, 1079, 1010,    0, 1010, 1010, 1010, 1010, 1010,
        0, 1079,    0, 1010,    0,    0,    0, 1079,    0, 1080,
        0, 1079,    0,    0, 1075, 1075, 1075, 1081, 1080, 1010,
        0,    0,    0,    0, 1080,    0, 1081, 1079, 1080,    0,
        0,    0, 1081,    0,    0,    0, 1081,    0,    0,    0,
        0,    0,    0,    0, 1080,    0,    0,    0, 1010, 1010,

     1010, 1060, 1081,    0,    0,    0, 1079, 1079, 1079,    0,
     1060,    0, 1060, 1060, 1060, 1060, 1060,    0,    0,    0,
     1060,    0,    0, 1080, 1080, 1080, 1101,    0,    0, 1102,
        0, 1081, 1081, 1081, 1103, 1101, 1060,    0, 1102,    0,
     1144, 1101,    0, 1103, 1102, 1101,    0,    0, 1102, 1103,
        0,    0,    0, 1103,    0, 1144,    0,    0,    0,    0,
        0, 1101,    0,    0, 1102, 1060, 1060, 1060, 1074, 1103,
        0,    0,    0,    0, 1175, 1144,    0, 1074,    0, 1074,
     1074, 1074, 1074, 1074,    0,    0,    0, 1074,    0, 1175,
     1101, 1101, 1101, 1102, 1102, 1102,    0,    0, 1103, 1103,

     1103, 1153,    0, 1074, 1144, 1144, 1144,    0, 1154, 1175,
     1153,    0,    0,    0,    0,    0, 1153, 1154,    0,    0,
     1153,    0, 1155, 1154,    0,    0,    0, 1154,    0,    0,
        0, 1155, 1074, 1074, 1074, 1100, 1153, 1155, 1175, 1175,
     1175, 1155,    0, 1154, 1100,    0, 1100, 1100, 1100, 1100,
     1100,    0,    0,    0, 1100,    0,    0, 1155,    0,    0,
     1156,    0,    0,    0,    0, 1153, 1153, 1153,    0, 1156,
     1100,    0, 1154, 1154, 1154, 1156,    0,    0,    0, 1156,
        0,    0,    0,    0,    0,    0, 1155, 1155, 1155,    0,
        0,    0,    0,    0, 1311, 1156,    0,    0,    0, 1100,

     1100, 1100, 1150,    0,    0,    0,    0,    0,    0, 1311,
        0, 1150,    0, 1150, 1150, 1150, 1150, 1150,    0, 1160,
        0, 1150,    0,    0, 1156, 1156, 1156, 1162, 1160, 1311,
     1163,    0,    0,    0, 1160,    0, 1162, 1150, 1160, 1163,
        0,    0, 1162,    0,    0, 1163, 1162,    0,    0, 1163,
        0,    0,    0,    0, 1160, 1165,    0,    0, 1311, 1311,
     1311,    0, 1162, 1169, 1165, 1163, 1150, 1150, 1150,    0,
     1165,    0, 1169,    0, 1165,    0,    0,    0, 1169,    0,
        0,    0, 1169, 1160, 1160, 1160,    0,    0,    0,    0,
     1165, 1162, 1162, 1162, 1163, 1163, 1163, 1164, 1169,    0,

        0,    0,    0, 1312,    0,    0, 1164,    0, 1164, 1164,
     1164, 1164, 1164,    0,    0, 1170, 1164,    0, 1312, 1165,
     1165, 1165, 1171,    0, 1170,    0,    0, 1169, 1169, 1169,
     1170, 1171, 1164,    0, 1170,    0,    0, 1171, 1312, 1280,
        0, 1171,    0,    0,    0,    0,    0,    0, 1280, 1378,
     1170,    0,    0,    0, 1280,    0, 1281, 1171, 1280,    0,
        0, 1164, 1164, 1164, 1378, 1281,    0, 1312, 1312, 1312,
        0, 1281,    0,    0, 1280, 1281,    0,    0,    0, 1170,
     1170, 1170, 1379,    0, 1378,    0, 1171, 1171, 1171, 1190,
     1190, 1281, 1190,    0, 1190,    0,    0, 1379, 1190, 1190,

        0,    0, 1190, 1280, 1280, 1280,    0,    0,    0,    0,
     1190,    0,    0, 1378, 1378, 1378,    0, 1379,    0,    0,
     1281, 1281, 1281,    0,    0,    0,    0, 1190,    0, 1190,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1379, 1379, 1379,    0,
        0,    0,    0,    0, 1190,    0, 1190, 1215, 1215, 1215,
     1215, 1215,    0, 1215, 1215,    0, 1215, 1215, 1215,    0,
        0, 1215,    0, 1215,    0,    0,    0,    0,    0, 1215,
     1215,    0,    0, 1215,    0,    0, 1282,    0,    0,    0,
        0,    0,    0,    0,    0, 1282, 1215,    0, 1215, 1215,

     1215, 1282,    0, 1288,    0, 1282,    0,    0,    0,    0,
        0,    0, 1288,    0,    0,    0,    0,    0, 1288,    0,
        0, 1282, 1288, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1216, 1216, 1216, 1216, 1216,    0, 1216, 1288,    0,
     1216, 1216, 1216,    0,    0, 1216,    0, 1216,    0,    0,
     1282, 1282, 1282, 1216, 1216,    0,    0, 1216,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1288, 1288, 1288,
     1216,    0, 1216,    0, 1216, 1289,    0,    0,    0,    0,
        0,    0,    0,    0, 1289,    0,    0,    0,    0,    0,
     1289,    0,    0,    0, 1289,    0,    0, 1216, 1216, 1216,

     1216, 1216, 1216, 1216, 1216, 1217, 1217, 1217, 1217, 1217,
     1289, 1217, 1217,    0, 1217, 1217, 1217,    0,    0, 1217,
        0, 1217,    0,    0,    0,    0,    0, 1217, 1217,    0,
        0, 1217,    0,    0,    0,    0,    0,    0,    0, 1289,
     1289, 1289,    0,    0, 1217,    0, 1217, 1217, 1217,    0,
        0, 1290,    0,    0,    0,    0,    0,    0,    0,    0,
     1290,    0,    0,    0,    0,    0, 1290,    0,    0,    0,
     1290, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1290, 1221,    0, 1221,
     1221, 1221, 1221,    0, 1221, 1221, 1221, 1221, 1258, 1258,

     1258, 1258, 1258,    0, 1258, 1258,    0, 1258, 1258, 1258,
     1295,    0, 1258, 1296, 1258, 1290, 1290, 1290,    0, 1295,
     1258, 1258, 1296,    0, 1258, 1295,    0, 1297, 1296, 1295,
        0,    0, 1296,    0,    0,    0, 1297, 1258, 1303, 1258,
     1258, 1258, 1297,    0,    0, 1295, 1297, 1303, 1296,    0,
        0,    0,    0, 1303,    0,    0,    0, 1303,    0,    0,
        0,    0, 1297,    0, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258,    0, 1303, 1295, 1295, 1295, 1296, 1296, 1296,
     1304,    0,    0,    0,    0,    0,    0,    0,    0, 1304,
        0, 1297, 1297, 1297,    0, 1304,    0, 1305,    0, 1304,

        0,    0, 1303, 1303, 1303, 1347, 1305,    0, 1348,    0,
        0,    0, 1305,    0, 1347, 1304, 1305, 1348,    0, 1349,
     1347,    0, 1355, 1348, 1347,    0,    0, 1348, 1349,    0,
        0, 1355, 1305, 1356, 1349,    0,    0, 1355, 1349,    0,
     1347, 1355, 1356, 1348, 1304, 1304, 1304,    0, 1356,    0,
        0,    0, 1356,    0, 1349,    0,    0, 1355,    0,    0,
        0, 1305, 1305, 1305,    0,    0,    0,    0, 1356, 1347,
     1347, 1347, 1348, 1348, 1348,    0,    0,    0,    0,    0,
        0, 1357,    0, 1349, 1349, 1349, 1355, 1355, 1355,    0,
     1357,    0, 1362,    0,    0, 1363, 1357, 1356, 1356, 1356,

     1357, 1362,    0, 1364, 1363,    0, 1370, 1362,    0,    0,
     1363, 1362, 1364,    0, 1363, 1370, 1357, 1371, 1364,    0,
     1372, 1370, 1364,    0,    0, 1370, 1371, 1362,    0, 1372,
     1363,    0, 1371,    0,    0, 1372, 1371,    0, 1364, 1372,
        0, 1370,    0,    0,    0, 1357, 1357, 1357,    0,    0,
        0,    0, 1371,    0,    0, 1372, 1362, 1362, 1362, 1363,
     1363, 1363,    0,    0,    0,    0,    0, 1364, 1364, 1364,
     1370, 1370, 1370,    0,    0,    0,    0,    0,    0,    0,
        0, 1371, 1371, 1371, 1372, 1372, 1372, 1414, 1414, 1414,
     1414, 1414, 1414, 1414,    0, 1414,    0, 1414, 1414, 1414,

     1414,    0, 1414, 1414, 1414, 1414, 1426, 1426, 1426, 1426,
     1426,    0, 1426, 1426,    0, 1426, 1426, 1426,    0,    0,
     1426,    0, 1426,    0,    0,    0,    0,    0, 1426, 1426,
        0,    0, 1426,    0,    0, 1453,    0,    0,    0,    0,
        0,    0,    0,    0, 1453, 1426,    0, 1426, 1426, 1426,
     1453,    0,    0,    0, 1453,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1453,    0, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1428, 1428, 1428, 1428, 1428,    0, 1428, 1428,    0, 1428,
     1428, 1428,    0,    0, 1428,    0, 1428,    0,    0, 1453,

     1453, 1453, 1428, 1428,    0,    0, 1428,    0,    0, 1454,
        0,    0,    0,    0,    0,    0,    0,    0, 1454, 1428,
        0, 1428, 1428, 1428, 1454,    0,    0,    0, 1454,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1454,    0, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1434, 1434, 1434, 1434, 1434,    0,
     1434, 1434,    0, 1434, 1434, 1434,    0,    0, 1434,    0,
     1434,    0,    0, 1454, 1454, 1454, 1434, 1434,    0,    0,
     1434,    0,    0, 1455,    0,    0,    0,    0,    0,    0,
        0,    0, 1455, 1434,    0, 1434, 1434, 1434, 1455,    0,

        0,    0, 1455,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1455,    0,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1438, 1438,
     1438, 1438, 1438,    0, 1438, 1438,    0, 1438, 1438, 1438,
        0,    0, 1438,    0, 1438,    0,    0, 1455, 1455, 1455,
     1438, 1438,    0,    0, 1438,    0,    0, 1462,    0,    0,
        0,    0,    0,    0,    0,    0, 1462, 1438,    0, 1438,
     1438, 1438, 1462,    0,    0,    0, 1462,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1462,    0, 1438, 1438, 1438, 1438, 1438, 1438,

     1438, 1438, 1439, 1439, 1439, 1439, 1439,    0, 1439, 1439,
        0, 1439, 1439, 1439,    0,    0, 1439, 1463, 1439,    0,
     1464, 1462, 1462, 1462, 1439, 1439, 1463,    0, 1439, 1464,
        0, 1470, 1463,    0,    0, 1464, 1463,    0,    0, 1464,
     1470, 1439, 1471, 1439, 1439, 1439, 1470,    0,    0,    0,
     1470, 1471, 1463,    0,    0, 1464,    0, 1471,    0,    0,
        0, 1471,    0,    0,    0,    0, 1470,    0, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439,    0, 1471,    0, 1472,
        0, 1463, 1463, 1463, 1464, 1464, 1464,    0, 1472,    0,
     1497,    0,    0,    0, 1472, 1470, 1470, 1470, 1472, 1497,

        0, 1498,    0,    0, 1499, 1497, 1471, 1471, 1471, 1497,
     1498,    0, 1506, 1499, 1472, 1507, 1498,    0,    0, 1499,
     1498, 1506,    0, 1499, 1507, 1497,    0, 1506,    0,    0,
     1507, 1506,    0,    0, 1507,    0, 1498,    0,    0, 1499,
        0,    0,    0, 1472, 1472, 1472,    0, 1506,    0,    0,
     1507,    0,    0,    0, 1497, 1497, 1497,    0,    0,    0,
        0,    0,    0,    0,    0, 1498, 1498, 1498, 1499, 1499,
     1499,    0,    0, 1508,    0,    0, 1506, 1506, 1506, 1507,
     1507, 1507, 1508,    0, 1514,    0,    0, 1515, 1508,    0,
        0,    0, 1508, 1514,    0, 1516, 1515,    0,    0, 1514,

        0,    0, 1515, 1514, 1516,    0, 1515,    0, 1508,    0,
     1516,    0,    0,    0, 1516,    0,    0,    0,    0, 1514,
        0,    0, 1515,    0,    0,    0,    0,    0,    0,    0,
     1516,    0,    0,    0,    0,    0,    0, 1508, 1508, 1508,
        0,    0,    0,    0,    0,    0,    0,    0, 1514, 1514,
     1514, 1515, 1515, 1515,    0,    0,    0,    0,    0, 1516,
     1516, 1516, 1551, 1551, 1551, 1551, 1551,    0, 1551, 1551,
        0, 1551, 1551, 1551,    0,    0, 1551,    0, 1551,    0,
        0,    0,    0,    0, 1551, 1551,    0,    0, 1551,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 1551,    0, 1551, 1551, 1551,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1565, 1565, 1565, 1565,
     1565,    0, 1565, 1565,    0, 1565, 1565, 1565,    0,    0,
     1565,    0, 1565,    0,    0,    0,    0,    0, 1565, 1565,
        0,    0, 1565,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1565,    0, 1565, 1565, 1565,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1641, 1641, 1641, 1641, 1641, 1641,
     1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641,
     1641, 1641, 1641, 1641, 1641, 1641, 1642, 1642, 1642, 1642,
     1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642,
     1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1643, 1643,

     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1645, 1645,    0,    0,    0, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,    0, 1645,
     1645, 1645, 1645, 1645, 1646,    0, 1646,    0,    0,    0,
     1646,    0, 1646, 1646, 1647, 1647,    0,    0, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1648, 1648, 1648, 1648,

     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1649,    0,
     1649,    0,    0, 1649, 1649,    0, 1649, 1649,    0, 1649,
     1649, 1649, 1649, 1649, 1649, 1650,    0, 1650,    0,    0,
     1650, 1650,    0, 1650, 1650,    0, 1650, 1650, 1650, 1650,
     1650, 1650, 1651,    0, 1651,    0,    0, 1651,    0,    0,
     1651, 1651,    0,    0, 1651,    0, 1651, 1651, 1651, 1652,
        0, 1652,    0,    0, 1652, 1652, 1652, 1652, 1652,    0,
     1652, 1652, 1652, 1652, 1652, 1652, 1653,    0, 1653,    0,
        0, 1653, 1653, 1653, 1653, 1653,    0, 1653, 1653, 1653,

     1653, 1653, 1653, 1654,    0, 1654,    0,    0, 1654,    0,
     1654, 1654, 1654,    0,    0, 1654,    0, 1654, 1654, 1654,
     1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655,
     1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655,
     1655, 1655, 1656,    0,    0,    0, 1656,    0, 1656, 1656,
     1657, 1657, 1657, 1657,    0,    0, 1657,    0,    0, 1657,
     1657, 1657, 1657, 1657, 1658,    0,    0, 1658,    0, 1658,
        0, 1658, 1658,    0, 1658, 1658, 1658, 1658,    0, 1658,
     1658, 1658, 1658, 1658, 1658, 1658, 1659, 1659,    0, 1659,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,

     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1660, 1660,
        0, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660,
     1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1663,    0, 1663,    0,    0, 1663,    0, 1663,
     1663, 1663,    0,    0, 1663, 1663, 1663, 1663, 1663, 1664,
        0, 1664,    0,    0,    0, 1664,    0, 1664, 1664, 1665,
     1665,    0,    0, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
     1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,

     1665, 1667,    0, 1667,    0,    0, 1667, 1667,    0, 1667,
     1667,    0, 1667, 1667, 1667, 1667, 1667, 1667, 1668,    0,
     1668,    0,    0, 1668, 1668,    0, 1668, 1668,    0, 1668,
     1668, 1668, 1668, 1668, 1668, 1669,    0, 1669,    0,    0,
     1669,    0,    0, 1669, 1669,    0,    0, 1669,    0, 1669,
     1669, 1669, 1670,    0, 1670,    0,    0, 1670, 1670,    0,
     1670, 1670,    0, 1670, 1670, 1670, 1670, 1670, 1670, 1671,
        0, 1671,    0,    0, 1671, 1671,    0, 1671, 1671,    0,
     1671, 1671,    0, 1671, 1671, 1671, 1672,    0, 1672,    0,
        0, 1672, 1672,    0, 1672, 1672,    0, 1672, 1672, 1672,

     1672, 1672, 1672, 1673,    0, 1673,    0,    0, 1673, 1673,
        0, 1673, 1673,    0, 1673, 1673, 1673, 1673, 1673, 1673,
     1674,    0, 1674,    0,    0, 1674,    0,    0, 1674,    0,
        0,    0, 1674, 1674, 1674, 1674, 1674, 1675,    0, 1675,
        0,    0, 1675, 1675,    0, 1675, 1675,    0, 1675, 1675,
     1675, 1675, 1675, 1675, 1676,    0, 1676,    0,    0, 1676,
     1676, 1676, 1676, 1676,    0, 1676, 1676, 1676, 1676, 1676,
     1676, 1677,    0, 1677,    0,    0, 1677, 1677, 1677, 1677,
     1677,    0, 1677, 1677, 1677, 1677, 1677, 1677, 1678,    0,
     1678,    0,    0, 1678, 1678, 1678, 1678, 1678,    0, 1678,

     1678, 1678, 1678, 1678, 1678, 1679,    0, 1679,    0,    0,
     1679,    0, 1679, 1679, 1679,    0,    0, 1679,    0, 1679,
     1679, 1679, 1680,    0, 1680,    0,    0, 1680, 1680, 1680,
     1680, 1680,    0, 1680, 1680, 1680, 1680, 1680, 1680, 1681,
        0, 1681,    0,    0, 1681, 1681, 1681, 1681, 1681,    0,
     1681, 1681,    0, 1681, 1681, 1681, 1682,    0, 1682,    0,
        0, 1682, 1682, 1682, 1682, 1682,    0, 1682, 1682, 1682,
     1682, 1682, 1682, 1683,    0, 1683,    0,    0, 1683, 1683,
     1683, 1683, 1683,    0, 1683, 1683, 1683, 1683, 1683, 1683,
     1684,    0, 1684,    0,    0, 1684,    0, 1684, 1684,    0,

        0,    0, 1684, 1684, 1684, 1684, 1684, 1685,    0, 1685,
        0,    0, 1685, 1685, 1685, 1685, 1685,    0, 1685, 1685,
     1685, 1685, 1685, 1685, 1688,    0,    0,    0, 1688,    0,
     1688, 1688, 1689,    0,    0,    0, 1689,    0, 1689, 1689,
     1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691,
     1691,    0, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691,
     1691, 1691, 1692,    0, 1692,    0,    0,    0, 1692,    0,
     1692, 1692, 1693,    0,    0, 1693,    0, 1693,    0, 1693,
     1693,    0, 1693, 1693, 1693, 1693,    0, 1693, 1693, 1693,
     1693, 1693, 1693, 1693, 1695, 1695,    0, 1695, 1695, 1695,

     1695, 1695, 1695, 1695, 1695, 1695, 1695, 1695, 1695, 1695,
     1695, 1695, 1695, 1695, 1695, 1695, 1696, 1696,    0,    0,
        0, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696,    0, 1696, 1696, 1696, 1696, 1696, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1698,    0,    0,    0, 1698,    0, 1698, 1698, 1699,    0,
        0,    0, 1699,    0, 1699, 1699, 1701,    0, 1701,    0,
        0, 1701,    0, 1701, 1701, 1701,    0,    0, 1701, 1701,
     1701, 1701, 1701, 1702,    0, 1702,    0,    0,    0, 1702,

        0, 1702, 1702, 1704,    0, 1704,    0,    0, 1704,    0,
        0, 1704, 1704,    0, 1704, 1704,    0, 1704, 1704, 1704,
     1705,    0, 1705,    0,    0, 1705, 1705,    0, 1705, 1705,
        0, 1705, 1705, 1705, 1705, 1705, 1705, 1706,    0, 1706,
        0,    0, 1706, 1706,    0, 1706, 1706,    0, 1706, 1706,
     1706, 1706, 1706, 1706, 1707,    0, 1707,    0,    0, 1707,
     1707,    0, 1707, 1707,    0, 1707, 1707, 1707, 1707, 1707,
     1707, 1708,    0, 1708,    0,    0, 1708, 1708,    0, 1708,
     1708,    0, 1708, 1708, 1708, 1708, 1708, 1708, 1709,    0,
     1709,    0,    0, 1709,    0,    0, 1709, 1709,    0,    0,

     1709, 1709, 1709, 1709, 1709, 1710,    0, 1710,    0,    0,
     1710,    0,    0, 1710,    0,    0,    0, 1710, 1710, 1710,
     1710, 1710, 1711,    0, 1711,    0,    0, 1711, 1711,    0,
     1711, 1711,    0, 1711, 1711, 1711, 1711, 1711, 1711, 1712,
        0, 1712,    0,    0, 1712, 1712,    0, 1712, 1712,    0,
     1712, 1712, 1712, 1712, 1712, 1712, 1713,    0, 1713,    0,
        0, 1713,    0,    0, 1713, 1713,    0,    0, 1713, 1713,
     1713, 1713, 1713, 1714,    0, 1714,    0,    0, 1714, 1714,
        0, 1714, 1714,    0, 1714, 1714, 1714, 1714, 1714, 1714,
     1715,    0, 1715,    0,    0, 1715,    0,    0, 1715,    0,

        0,    0, 1715, 1715, 1715, 1715, 1715, 1716,    0, 1716,
        0,    0, 1716,    0,    0, 1716, 1716,    0,    0, 1716,
        0, 1716, 1716, 1716, 1717,    0, 1717,    0,    0, 1717,
     1717,    0, 1717, 1717,    0, 1717, 1717, 1717, 1717, 1717,
     1717, 1718,    0, 1718,    0,    0, 1718, 1718,    0, 1718,
     1718,    0, 1718, 1718, 1718, 1718, 1718, 1718, 1719,    0,
     1719,    0,    0, 1719,    0,    0, 1719,    0,    0,    0,
     1719, 1719, 1719, 1719, 1719, 1720,    0, 1720,    0,    0,
     1720,    0,    0, 1720,    0,    0,    0, 1720, 1720, 1720,
     1720, 1720, 1721,    0, 1721,    0,    0, 1721, 1721,    0,

     1721, 1721,    0, 1721, 1721, 1721, 1721, 1721, 1721, 1722,
        0, 1722,    0,    0, 1722, 1722,    0, 1722, 1722,    0,
     1722, 1722, 1722, 1722, 1722, 1722, 1723,    0, 1723,    0,
        0, 1723,    0, 1723, 1723, 1723,    0, 1723, 1723,    0,
     1723, 1723, 1723, 1724,    0, 1724,    0,    0, 1724, 1724,
     1724, 1724, 1724,    0, 1724, 1724, 1724, 1724, 1724, 1724,
     1725,    0, 1725,    0,    0, 1725, 1725, 1725, 1725, 1725,
        0, 1725, 1725, 1725, 1725, 1725, 1725, 1726,    0, 1726,
        0,    0, 1726, 1726, 1726, 1726, 1726,    0, 1726, 1726,
     1726, 1726, 1726, 1726, 1727,    0, 1727,    0,    0, 1727,

     1727, 1727, 1727, 1727,    0, 1727, 1727, 1727, 1727, 1727,
     1727, 1728,    0, 1728,    0,    0, 1728,    0, 1728, 1728,
     1728,    0,    0, 1728, 1728, 1728, 1728, 1728, 1729,    0,
     1729,    0,    0, 1729,    0, 1729, 1729,    0,    0,    0,
     1729, 1729, 1729, 1729, 1729, 1730,    0, 1730,    0,    0,
     1730, 1730, 1730, 1730, 1730,    0, 1730, 1730, 1730, 1730,
     1730, 1730, 1731,    0, 1731,    0,    0, 1731, 1731, 1731,
     1731, 1731,    0, 1731, 1731, 1731, 1731, 1731, 1731, 1732,
        0, 1732,    0,    0, 1732,    0, 1732, 1732, 1732,    0,
        0, 1732, 1732, 1732, 1732, 1732, 1733,    0, 1733,    0,

        0, 1733, 1733, 1733, 1733, 1733,    0, 1733, 1733, 1733,
     1733, 1733, 1733, 1734,    0, 1734,    0,    0, 1734,    0,
     1734, 1734,    0,    0,    0, 1734, 1734, 1734, 1734, 1734,
     1735,    0, 1735,    0,    0, 1735,    0, 1735, 1735, 1735,
        0,    0, 1735,    0, 1735, 1735, 1735, 1736,    0, 1736,
        0,    0, 1736, 1736, 1736, 1736, 1736,    0, 1736, 1736,
     1736, 1736, 1736, 1736, 1737,    0, 1737,    0,    0, 1737,
     1737, 1737, 1737, 1737,    0, 1737, 1737, 1737, 1737, 1737,
     1737, 1738,    0, 1738,    0,    0, 1738,    0, 1738, 1738,
        0,    0,    0, 1738, 1738, 1738, 1738, 1738, 1739,    0,

     1739,    0,    0, 1739,    0, 1739, 1739,    0,    0,    0,
     1739, 1739, 1739, 1739, 1739, 1740,    0, 1740,    0,    0,
     1740, 1740, 1740, 1740, 1740,    0, 1740, 1740, 1740, 1740,
     1740, 1740, 1741,    0, 1741,    0,    0, 1741, 1741, 1741,
     1741, 1741,    0, 1741, 1741, 1741, 1741, 1741, 1741, 1745,
        0,    0,    0, 1745,    0, 1745, 1745, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,    0, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1748,
        0,    0, 1748,    0, 1748,    0, 1748, 1748,    0, 1748,
     1748, 1748, 1748,    0, 1748, 1748, 1748, 1748, 1748, 1748,

     1748, 1751,    0,    0, 1751,    0,    0,    0, 1751,    0,
     1751, 1751, 1752, 1752, 1752, 1752, 1752,    0, 1752, 1752,
     1752, 1752,    0, 1752,    0,    0, 1752, 1752, 1752,    0,
     1752,    0,    0, 1752, 1753,    0,    0, 1753, 1753,    0,
     1753,    0,    0, 1753,    0, 1753, 1753, 1753,    0,    0,
     1753, 1753, 1753, 1753, 1753, 1754,    0, 1754,    0,    0,
        0, 1754,    0, 1754, 1754, 1755,    0, 1755,    0,    0,
     1755,    0,    0, 1755, 1755,    0,    0, 1755, 1755, 1755,
     1755, 1755, 1756,    0, 1756,    0,    0, 1756, 1756,    0,
     1756, 1756,    0, 1756, 1756,    0, 1756, 1756, 1756, 1757,

        0, 1757,    0,    0, 1757, 1757,    0, 1757, 1757,    0,
     1757, 1757, 1757, 1757, 1757, 1757, 1758,    0, 1758,    0,
        0, 1758, 1758,    0, 1758, 1758,    0, 1758, 1758, 1758,
     1758, 1758, 1758, 1759,    0, 1759,    0,    0, 1759, 1759,
        0, 1759, 1759,    0, 1759, 1759, 1759, 1759, 1759, 1759,
     1760,    0, 1760,    0,    0, 1760,    0,    0, 1760, 1760,
        0,    0, 1760, 1760, 1760, 1760, 1760, 1761,    0, 1761,
        0,    0, 1761,    0,    0, 1761,    0,    0,    0, 1761,
     1761, 1761, 1761, 1761, 1762,    0, 1762,    0,    0, 1762,
        0,    0, 1762,    0,    0,    0, 1762, 1762, 1762, 1762,

     1762, 1763,    0, 1763,    0,    0, 1763, 1763,    0, 1763,
     1763,    0, 1763, 1763, 1763, 1763, 1763, 1763, 1764,    0,
     1764,    0,    0, 1764, 1764,    0, 1764, 1764,    0, 1764,
     1764, 1764, 1764, 1764, 1764, 1765,    0, 1765,    0,    0,
     1765,    0,    0, 1765,    0,    0,    0, 1765, 1765, 1765,
     1765, 1765, 1766,    0, 1766,    0,    0, 1766,    0,    0,
     1766,    0,    0,    0, 1766, 1766, 1766, 1766, 1766, 1767,
        0, 1767,    0,    0, 1767,    0,    0, 1767,    0,    0,
        0, 1767, 1767, 1767, 1767, 1767, 1768,    0, 1768,    0,
        0, 1768,    0,    0, 1768,    0,    0,    0, 1768, 1768,

     1768, 1768, 1768, 1769,    0, 1769,    0,    0, 1769,    0,
        0, 1769, 1769,    0,    0, 1769, 1769, 1769, 1769, 1769,
     1770,    0, 1770,    0,    0, 1770, 1770,    0, 1770, 1770,
        0, 1770, 1770, 1770, 1770, 1770, 1770, 1771,    0, 1771,
        0,    0, 1771, 1771,    0, 1771, 1771,    0, 1771, 1771,
     1771, 1771, 1771, 1771, 1772,    0, 1772,    0,    0, 1772,
     1772,    0, 1772, 1772,    0, 1772, 1772, 1772, 1772, 1772,
     1772, 1773,    0, 1773,    0,    0, 1773, 1773,    0, 1773,
     1773,    0, 1773, 1773, 1773, 1773, 1773, 1773, 1774,    0,
     1774,    0,    0, 1774,    0,    0, 1774, 1774,    0,    0,

     1774,    0, 1774, 1774, 1774, 1775,    0, 1775,    0,    0,
     1775,    0,    0, 1775,    0,    0,    0, 1775, 1775, 1775,
     1775, 1775, 1776,    0, 1776,    0,    0, 1776, 1776,    0,
     1776, 1776,    0, 1776, 1776, 1776, 1776, 1776, 1776, 1777,
        0, 1777,    0,    0, 1777,    0, 1777, 1777, 1777,    0,
        0, 1777, 1777, 1777, 1777, 1777, 1778,    0, 1778,    0,
        0, 1778, 1778, 1778, 1778, 1778,    0, 1778, 1778,    0,
     1778, 1778, 1778, 1779,    0, 1779,    0,    0, 1779, 1779,
     1779, 1779, 1779,    0, 1779, 1779, 1779, 1779, 1779, 1779,
     1780,    0, 1780,    0,    0, 1780, 1780, 1780, 1780, 1780,

        0, 1780, 1780, 1780, 1780, 1780, 1780, 1781,    0, 1781,
        0,    0, 1781, 1781, 1781, 1781, 1781,    0, 1781, 1781,
     1781, 1781, 1781, 1781, 1782,    0, 1782,    0,    0, 1782,
        0, 1782, 1782, 1782,    0,    0, 1782, 1782, 1782, 1782,
     1782, 1783,    0, 1783,    0,    0, 1783,    0, 1783, 1783,
        0,    0,    0, 1783, 1783, 1783, 1783, 1783, 1784,    0,
     1784,    0,    0, 1784,    0, 1784, 1784,    0,    0,    0,
     1784, 1784, 1784, 1784, 1784, 1785,    0, 1785,    0,    0,
     1785, 1785, 1785, 1785, 1785,    0, 1785, 1785, 1785, 1785,
     1785, 1785, 1786,    0, 1786,    0,    0, 1786, 1786, 1786,

     1786, 1786,    0, 1786, 1786, 1786, 1786, 1786, 1786, 1787,
        0, 1787,    0,    0, 1787,    0, 1787, 1787,    0,    0,
        0, 1787, 1787, 1787, 1787, 1787, 1788,    0, 1788,    0,
        0, 1788,    0, 1788, 1788,    0,    0,    0, 1788, 1788,
     1788, 1788, 1788, 1789,    0, 1789,    0,    0, 1789,    0,
     1789, 1789,    0,    0,    0, 1789, 1789, 1789, 1789, 1789,
     1790,    0, 1790,    0,    0, 1790,    0, 1790, 1790,    0,
        0,    0, 1790, 1790, 1790, 1790, 1790, 1791,    0, 1791,
        0,    0, 1791,    0, 1791, 1791, 1791,    0,    0, 1791,
     1791, 1791, 1791, 1791, 1792,    0, 1792,    0,    0, 1792,

     1792, 1792, 1792, 1792,    0, 1792, 1792, 1792, 1792, 1792,
     1792, 1793,    0, 1793,    0,    0, 1793, 1793, 1793, 1793,
     1793,    0, 1793, 1793, 1793, 1793, 1793, 1793, 1794,    0,
     1794,    0,    0, 1794, 1794, 1794, 1794, 1794,    0, 1794,
     1794, 1794, 1794, 1794, 1794, 1795,    0, 1795,    0,    0,
     1795, 1795, 1795, 1795, 1795,    0, 1795, 1795, 1795, 1795,
     1795, 1795, 1796,    0, 1796,    0,    0, 1796,    0, 1796,
     1796, 1796,    0,    0, 1796,    0, 1796, 1796, 1796, 1797,
        0, 1797,    0,    0, 1797,    0, 1797, 1797,    0,    0,
        0, 1797, 1797, 1797, 1797, 1797, 1798,    0, 1798,    0,

        0, 1798, 1798, 1798, 1798, 1798,    0, 1798, 1798, 1798,
     1798, 1798, 1798, 1800,    0,    0,    0, 1800,    0, 1800,
     1800, 1801,    0,    0, 1801,    0, 1801,    0, 1801, 1801,
        0, 1801, 1801, 1801, 1801,    0, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1804, 1804, 1804, 1804, 1804,    0, 1804,
     1804, 1804, 1804,    0, 1804,    0,    0, 1804, 1804, 1804,
        0, 1804,    0, 1804, 1804, 1805, 1805, 1805, 1805, 1805,
        0, 1805, 1805, 1805, 1805,    0, 1805,    0,    0, 1805,
     1805, 1805,    0, 1805, 1805,    0, 1805, 1806,    0, 1806,
        0,    0, 1806,    0, 1806, 1806, 1806,    0,    0, 1806,

     1806, 1806, 1806, 1806, 1807,    0, 1807,    0,    0,    0,
     1807,    0, 1807, 1807, 1808,    0, 1808,    0,    0, 1808,
     1808,    0, 1808, 1808,    0, 1808, 1808, 1808, 1808, 1808,
     1808, 1809,    0, 1809,    0,    0, 1809, 1809,    0, 1809,
     1809,    0, 1809, 1809, 1809, 1809, 1809, 1809, 1810,    0,
     1810,    0,    0, 1810,    0,    0, 1810,    0,    0,    0,
     1810, 1810, 1810, 1810, 1810, 1811,    0, 1811,    0,    0,
     1811,    0,    0, 1811,    0,    0,    0, 1811, 1811, 1811,
     1811, 1811, 1812,    0, 1812,    0,    0, 1812,    0,    0,
     1812,    0,    0,    0, 1812, 1812, 1812, 1812, 1812, 1813,

        0, 1813,    0,    0, 1813,    0,    0, 1813,    0,    0,
        0, 1813, 1813, 1813, 1813, 1813, 1814,    0, 1814,    0,
        0, 1814,    0,    0, 1814, 1814,    0,    0, 1814, 1814,
     1814, 1814, 1814, 1815,    0, 1815,    0,    0, 1815, 1815,
        0, 1815, 1815,    0, 1815, 1815, 1815, 1815, 1815, 1815,
     1816,    0, 1816,    0,    0, 1816, 1816,    0, 1816, 1816,
        0, 1816, 1816, 1816, 1816, 1816, 1816, 1817,    0, 1817,
        0,    0, 1817, 1817,    0, 1817, 1817,    0, 1817, 1817,
     1817, 1817, 1817, 1817, 1818,    0, 1818,    0,    0, 1818,
        0,    0, 1818, 1818,    0,    0, 1818, 1818, 1818, 1818,

     1818, 1819,    0, 1819,    0,    0, 1819, 1819,    0, 1819,
     1819,    0, 1819, 1819, 1819, 1819, 1819, 1819, 1820,    0,
     1820,    0,    0, 1820, 1820,    0, 1820, 1820,    0, 1820,
     1820, 1820, 1820, 1820, 1820, 1821,    0, 1821,    0,    0,
     1821, 1821,    0, 1821, 1821,    0, 1821, 1821, 1821, 1821,
     1821, 1821, 1822,    0, 1822,    0,    0, 1822, 1822,    0,
     1822, 1822,    0, 1822, 1822, 1822, 1822, 1822, 1822, 1823,
        0, 1823,    0,    0, 1823,    0,    0, 1823, 1823,    0,
        0, 1823, 1823, 1823, 1823, 1823, 1824,    0, 1824,    0,
        0, 1824,    0,    0, 1824,    0,    0,    0, 1824, 1824,

     1824, 1824, 1824, 1825,    0, 1825,    0,    0, 1825, 1825,
     1825, 1825, 1825,    0, 1825, 1825, 1825, 1825, 1825, 1825,
     1826,    0, 1826,    0,    0, 1826, 1826, 1826, 1826, 1826,
        0, 1826, 1826, 1826, 1826, 1826, 1826, 1827,    0, 1827,
        0,    0, 1827,    0, 1827, 1827,    0,    0,    0, 1827,
     1827, 1827, 1827, 1827, 1828,    0, 1828,    0,    0, 1828,
        0, 1828, 1828,    0,    0,    0, 1828, 1828, 1828, 1828,
     1828, 1829,    0, 1829,    0,    0, 1829,    0, 1829, 1829,
        0,    0,    0, 1829, 1829, 1829, 1829, 1829, 1830,    0,
     1830,    0,    0, 1830,    0, 1830, 1830,    0,    0,    0,

     1830, 1830, 1830, 1830, 1830, 1831,    0, 1831,    0,    0,
     1831,    0, 1831, 1831, 1831,    0,    0, 1831, 1831, 1831,
     1831, 1831, 1832,    0, 1832,    0,    0, 1832, 1832, 1832,
     1832, 1832,    0, 1832, 1832, 1832, 1832, 1832, 1832, 1833,
        0, 1833,    0,    0, 1833, 1833, 1833, 1833, 1833,    0,
     1833, 1833, 1833, 1833, 1833, 1833, 1834,    0, 1834,    0,
        0, 1834, 1834, 1834, 1834, 1834,    0, 1834, 1834, 1834,
     1834, 1834, 1834, 1835,    0, 1835,    0,    0, 1835,    0,
     1835, 1835, 1835,    0,    0, 1835, 1835, 1835, 1835, 1835,
     1836,    0, 1836,    0,    0, 1836, 1836, 1836, 1836, 1836,

        0, 1836, 1836, 1836, 1836, 1836, 1836, 1837,    0, 1837,
        0,    0, 1837, 1837, 1837, 1837, 1837,    0, 1837, 1837,
     1837, 1837, 1837, 1837, 1838,    0, 1838,    0,    0, 1838,
     1838, 1838, 1838, 1838,    0, 1838, 1838, 1838, 1838, 1838,
     1838, 1839,    0, 1839,    0,    0, 1839, 1839, 1839, 1839,
     1839,    0, 1839, 1839, 1839, 1839, 1839, 1839, 1840,    0,
     1840,    0,    0, 1840,    0, 1840, 1840, 1840,    0,    0,
     1840, 1840, 1840, 1840, 1840, 1841,    0, 1841,    0,    0,
     1841,    0, 1841, 1841,    0,    0,    0, 1841, 1841, 1841,
     1841, 1841, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842,

     1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842,
     1842, 1842, 1842, 1842, 1845, 1845, 1845, 1845, 1845,    0,
     1845, 1845, 1845, 1845,    0, 1845,    0,    0, 1845, 1845,
     1845,    0, 1845, 1845,    0, 1845, 1846, 1846, 1846, 1846,
     1846,    0, 1846, 1846, 1846, 1846,    0, 1846,    0,    0,
     1846, 1846, 1846,    0, 1846,    0,    0, 1846, 1847, 1847,
     1847, 1847, 1847,    0, 1847, 1847, 1847, 1847,    0, 1847,
        0,    0, 1847, 1847, 1847,    0, 1847,    0,    0, 1847,
     1848, 1848, 1848, 1848, 1848,    0, 1848, 1848, 1848, 1848,
        0, 1848,    0,    0, 1848, 1848, 1848,    0, 1848,    0,

        0, 1848, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849,
     1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849,
     1849, 1849, 1849, 1849, 1850,    0, 1850,    0,    0, 1850,
     1850,    0, 1850, 1850,    0, 1850, 1850, 1850, 1850, 1850,
     1850, 1851,    0, 1851,    0,    0, 1851, 1851,    0, 1851,
     1851,    0, 1851, 1851, 1851, 1851, 1851, 1851, 1852,    0,
     1852,    0,    0, 1852, 1852,    0, 1852, 1852,    0, 1852,
     1852, 1852, 1852, 1852, 1852, 1853,    0, 1853,    0,    0,
     1853, 1853,    0, 1853, 1853,    0, 1853, 1853, 1853, 1853,
     1853, 1853, 1854,    0, 1854,    0,    0, 1854,    0,    0,

     1854, 1854,    0,    0, 1854, 1854, 1854, 1854, 1854, 1855,
        0, 1855,    0,    0, 1855, 1855,    0, 1855, 1855,    0,
     1855, 1855, 1855, 1855, 1855, 1855, 1856,    0, 1856,    0,
        0, 1856, 1856,    0, 1856, 1856,    0, 1856, 1856, 1856,
     1856, 1856, 1856, 1857,    0, 1857,    0,    0, 1857, 1857,
        0, 1857, 1857,    0, 1857, 1857, 1857, 1857, 1857, 1857,
     1858,    0, 1858,    0,    0, 1858,    0,    0, 1858, 1858,
        0,    0, 1858, 1858, 1858, 1858, 1858, 1859,    0, 1859,
        0,    0, 1859,    0,    0, 1859,    0,    0,    0, 1859,
     1859, 1859, 1859, 1859, 1860,    0, 1860,    0,    0, 1860,

        0,    0, 1860,    0,    0,    0, 1860, 1860, 1860, 1860,
     1860, 1861,    0, 1861,    0,    0, 1861, 1861, 1861, 1861,
     1861,    0, 1861, 1861, 1861, 1861, 1861, 1861, 1862,    0,
     1862,    0,    0, 1862, 1862, 1862, 1862, 1862,    0, 1862,
     1862, 1862, 1862, 1862, 1862, 1863,    0, 1863,    0,    0,
     1863, 1863, 1863, 1863, 1863,    0, 1863, 1863, 1863, 1863,
     1863, 1863, 1864,    0, 1864,    0,    0, 1864, 1864, 1864,
     1864, 1864,    0, 1864, 1864, 1864, 1864, 1864, 1864, 1865,
        0, 1865,    0,    0, 1865,    0, 1865, 1865, 1865,    0,
        0, 1865, 1865, 1865, 1865, 1865, 1866,    0, 1866,    0,

        0, 1866, 1866, 1866, 1866, 1866,    0, 1866, 1866, 1866,
     1866, 1866, 1866, 1867,    0, 1867,    0,    0, 1867, 1867,
     1867, 1867, 1867,    0, 1867, 1867, 1867, 1867, 1867, 1867,
     1868,    0, 1868,    0,    0, 1868, 1868, 1868, 1868, 1868,
        0, 1868, 1868, 1868, 1868, 1868, 1868, 1869,    0, 1869,
        0,    0, 1869,    0, 1869, 1869, 1869,    0,    0, 1869,
     1869, 1869, 1869, 1869, 1870,    0, 1870,    0,    0, 1870,
        0, 1870, 1870,    0,    0,    0, 1870, 1870, 1870, 1870,
     1870, 1871,    0, 1871,    0,    0, 1871,    0, 1871, 1871,
        0,    0,    0, 1871, 1871, 1871, 1871, 1871, 1872, 1872,

     1872, 1872, 1872,    0, 1872, 1872, 1872, 1872,    0, 1872,
        0,    0, 1872, 1872, 1872,    0, 1872,    0,    0, 1872,
     1873, 1873, 1873, 1873, 1873,    0, 1873, 1873, 1873, 1873,
        0, 1873,    0,    0, 1873, 1873, 1873,    0, 1873,    0,
        0, 1873, 1874, 1874, 1874, 1874, 1874,    0, 1874, 1874,
     1874, 1874,    0, 1874,    0,    0, 1874, 1874, 1874,    0,
     1874,    0,    0, 1874, 1875,    0, 1875,    0,    0, 1875,
     1875,    0, 1875, 1875,    0, 1875, 1875, 1875, 1875, 1875,
     1875, 1876,    0, 1876,    0,    0, 1876, 1876,    0, 1876,
     1876,    0, 1876, 1876, 1876, 1876, 1876, 1876, 1877,    0,

     1877,    0,    0, 1877, 1877,    0, 1877, 1877,    0, 1877,
     1877, 1877, 1877, 1877, 1877, 1878, 1878, 1878, 1878, 1878,
        0, 1878, 1878, 1878, 1878,    0, 1878,    0,    0, 1878,
     1878, 1878,    0, 1878,    0,    0, 1878, 1879, 1879, 1879,
     1879, 1879,    0, 1879, 1879, 1879, 1879,    0, 1879,    0,
        0, 1879, 1879, 1879,    0, 1879,    0,    0, 1879, 1880,
     1880, 1880, 1880, 1880,    0, 1880, 1880, 1880, 1880,    0,
     1880,    0,    0, 1880, 1880, 1880,    0, 1880,    0,    0,
     1880, 1881, 1881, 1881, 1881, 1881,    0, 1881, 1881, 1881,
     1881,    0, 1881,    0,    0, 1881, 1881, 1881,    0, 1881,

        0,    0, 1881, 1882, 1882, 1882, 1882, 1882,    0, 1882,
     1882, 1882, 1882,    0, 1882,    0,    0, 1882, 1882, 1882,
        0, 1882,    0,    0, 1882, 1883, 1883, 1883, 1883, 1883,
        0, 1883, 1883, 1883, 1883,    0, 1883,    0,    0, 1883,
     1883, 1883,    0, 1883,    0,    0, 1883, 1884, 1884, 1884,
     1884, 1884,    0, 1884, 1884, 1884, 1884,    0, 1884,    0,
        0, 1884, 1884, 1884,    0, 1884,    0,    0, 1884, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parser.l"
/* Copyright 2009-2021
 * Kaz Kylheku <kaz@kylheku.com>
 * Vancouver, Canada
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#line 29 "parser.l"

#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <stdlib.h>
#include <limits.h>
#include <wchar.h>
#include <signal.h>
#include "config.h"
#include "lib.h"
#include "gc.h"
#include "stream.h"
#include "utf8.h"
#include "signal.h"
#include "unwind.h"
#include "hash.h"
#include "y.tab.h"
#include "parser.h"
#include "txr.h"

#define YY_INPUT(buf, result, max_size)                                 \
  do {                                                                  \
    val self = lit("parser");                                           \
    val n = get_bytes(self, yyextra->stream,                            \
                      coerce(mem_t *, buf), max_size);                  \
    result = c_num(n, self);                                            \
  } while (0)

#define YY_DECL \
  static int yylex_impl(YYSTYPE *yylval_param, yyscan_t yyscanner)

int opt_loglevel = 1;   /* 0 - quiet; 1 - normal; 2 - verbose */

val form_to_ln_hash;

static int directive_tok(scanner_t *yyg, int tok, int state);

#define FLEX_NUM_VERSION 10000*YY_FLEX_MAJOR_VERSION + \
                         100*YY_FLEX_MINOR_VERSION + \
                         YY_FLEX_SUBMINOR_VERSION

#if FLEX_NUM_VERSION < 20509
int yylex_destroy(void)
{
  return 0;
}
#endif

/* Missing prototypes not generated by flex. */
int yyget_column(yyscan_t);
void yyset_column (int column_no, yyscan_t yyscanner);

/* The following function is all that libflex provides.
   By providing it here, we eliminate the need to link libflex. */
#define YY_SKIP_YYWRAP
INLINE int yywrap(yyscan_t scanner)
{
  (void) scanner;
  return 1;
}

void yyerror(scanner_t *scanner, parser_t *parser, const char *s)
{
  yyerrorf(scanner, lit("~a"), string_utf8(s), nao);
  if (parser->prepared_msg) {
    yyerrorf(scanner, lit("~a"), parser->prepared_msg, nao);
    parser->prepared_msg = nil;
  }
}

void yyerrorf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    if (opt_compat && opt_compat <= 114)
      format(std_error, lit("~a: (~a:~d): "), prog_string,
             parser->name, num(parser->lineno), nao);
    else
      format(std_error, lit("~a:~d: "),
             parser->name, num(parser->lineno), nao);

    vformat(std_error, fmt, vl);
    put_char(chr('\n'), std_error);
    va_end (vl);
  }
  parser->errors++;
}

static void yyerrprepf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    set(mkloc(parser->prepared_msg, parser->parser),
        vformat_to_string(fmt, vl));
    va_end (vl);
  }
}

static void out_of_range_float(scanner_t *scanner, val tok)
{
    yyerrorf(scanner, lit("out-of-range floating-point literal: ~a"),
             tok, nao);
}

static wchar_t char_esc(int letter)
{
  switch (letter) {
  case ' ': return L' ';
  case 'a': return L'\a';
  case 'b': return L'\b';
  case 't': return L'\t';
  case 'n': return L'\n';
  case 'v': return L'\v';
  case 'f': return L'\f';
  case 'r': return L'\r';
  case 'e': return 27;
  case '"': return L'"';
  case '\'': return L'\'';
  case '`': return L'`';
  case '/': return L'/';
  case '@': return L'@';
  case '\\': return L'\\';
  }

  internal_error("unhandled escape character");
}

static wchar_t num_esc(scanner_t *scn, char *num)
{
  long val = 0;

  if (num[0] == 'x' || num[0] == 'u') {
    if (strlen(num) > 7)
      yyerror(scn, yyget_extra(scn), "too many digits in hex character escape");
    else
      val = strtol(num + 1, 0, 16);
  } else {
    if (num[0] == 'o')
      num++;
    if (strlen(num) > 8)
      yyerror(scn, yyget_extra(scn), "too many digits in octal character escape");
    else
      val = strtol(num, 0, 8);
  }

  if (val < 0 || val > 0x10FFFF || convert(wchar_t, val) != val) {
    yyerror(scn, yyget_extra(scn), "numeric character escape out of range");
    val = 0;
  }

  return val;
}

static wchar_t *unicode_ident(scanner_t *scn, const char *lex)
{
  wchar_t *wlex = utf8_dup_from(lex), *ptr = wlex, wch;

  while ((wch = *ptr++)) {
    if (wch < 0x1680 || (wch >= 0x3000 && wch < 0xdc00))
      continue;

    if ((wch >= 0xdc00 && wch <= 0xdcff) ||
        (wch >= 0xd800 && wch <= 0xdbff) ||
#if FULL_UNICODE
        (wch >= 0xf0000 && wch <= 0xffffd) ||
        (wch >= 0x100000 && wch <= 0x10fffd) ||
#endif
        (wch >= 0xe000 && wch <= 0xf8ff) ||
        (wch == 0xfffe) ||
        (wch == 0xffff))
    {
      yyerror(scn, yyget_extra(scn),
              "disallowed Unicode character in identifier");
      break;
    }

    switch (wch) {
    case 0x1680: case 0x180e: case 0x2000: case 0x2001: case 0x2002:
    case 0x2003: case 0x2004: case 0x2005: case 0x2006: case 0x2007:
    case 0x2008: case 0x2009: case 0x200a: case 0x2028: case 0x2029:
    case 0x205f: case 0x3000:
      yyerror(scn, yyget_extra(scn),
              "Unicode space occurs in identifier");
      break;
    default:
      continue;
    }

    break;
  }

  return wlex;
}

#line 3914 "lex.yy.c"
#define YY_NO_INPUT 1

#line 3917 "lex.yy.c"

#define INITIAL 0
#define SPECIAL 1
#define BRACED 2
#define NESTED 3
#define REGEX 4
#define SREGEX 5
#define STRLIT 6
#define CHRLIT 7
#define QSILIT 8
#define QSPECIAL 9
#define WLIT 10
#define QWLIT 11
#define BUFLIT 12
#define JSON 13
#define JLIT 14

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE parser_t *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		/* Create the reject buffer large enough to save one state per allowed character. */
		if ( ! yyg->yy_state_buf )
			yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
		if ( ! yyg->yy_state_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 290 "parser.l"


#line 4232 "lex.yy.c"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1639 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1638 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 292 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num(10));
  return NUMBER;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 304 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 2));
  int base;

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 323 "parser.l"
{
  int base = 0;
  val str = string_own(utf8_dup_from(yytext + 2));

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  yyerrorf(yyg, lit("trailing junk in numeric literal: ~a~a~a"),
           chr(yytext[0]), chr(yytext[1]), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 345 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);

  return NUMBER;
}
	YY_BREAK
case 5:
#line 360 "parser.l"
case 6:
#line 361 "parser.l"
case 7:
YY_RULE_SETUP
#line 361 "parser.l"
{
  val str = string_utf8(yytext);

  yyerrorf(yyg, lit("trailing junk in floating-point literal: ~a"), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);

  return NUMBER;
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 377 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);

  return NUMBER;
}
	YY_BREAK
case 9:
#line 392 "parser.l"
case 10:
YY_RULE_SETUP
#line 392 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(10));
  return METANUM;
}
	YY_BREAK
case 11:
#line 404 "parser.l"
case 12:
YY_RULE_SETUP
#line 404 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(16));
  return METANUM;
}
	YY_BREAK
case 13:
#line 416 "parser.l"
case 14:
YY_RULE_SETUP
#line 416 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(8));
  return METANUM;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 427 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(2));
  return METANUM;
}
	YY_BREAK
case 16:
#line 439 "parser.l"
case 17:
#line 440 "parser.l"
case 18:
YY_RULE_SETUP
#line 440 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 19:
#line 457 "parser.l"
case 20:
#line 458 "parser.l"
case 21:
YY_RULE_SETUP
#line 458 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 22:
#line 469 "parser.l"
case 23:
YY_RULE_SETUP
#line 469 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yyerrorf(yyg, lit("bad token: ~a"),
                    string_own(utf8_dup_from(yytext)),
                    nao);
  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 482 "parser.l"
{
  return directive_tok(yyg, ALL, 0);
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 486 "parser.l"
{
  return directive_tok(yyg, SOME, NESTED);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 490 "parser.l"
{
  return directive_tok(yyg, NONE, 0);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 494 "parser.l"
{
  return directive_tok(yyg, MAYBE, 0);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 498 "parser.l"
{
  return directive_tok(yyg, CASES, 0);
}
	YY_BREAK
case 29:
/* rule 29 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 502 "parser.l"
{
  return directive_tok(yyg, BLOCK, NESTED);
}
	YY_BREAK
case 30:
/* rule 30 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 506 "parser.l"
{
  return directive_tok(yyg, CHOOSE, NESTED);
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 510 "parser.l"
{
  return directive_tok(yyg, GATHER, NESTED);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 514 "parser.l"
{
  return directive_tok(yyg, AND, 0);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 518 "parser.l"
{
  return directive_tok(yyg, OR, 0);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 522 "parser.l"
{
  return directive_tok(yyg, END, 0);
}
	YY_BREAK
case 35:
/* rule 35 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 526 "parser.l"
{
  return directive_tok(yyg, COLLECT, NESTED);
}
	YY_BREAK
case 36:
/* rule 36 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 530 "parser.l"
{
  return directive_tok(yyg, COLL, NESTED);
}
	YY_BREAK
case 37:
/* rule 37 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 534 "parser.l"
{
  return directive_tok(yyg, UNTIL, NESTED);
}
	YY_BREAK
case 38:
/* rule 38 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 538 "parser.l"
{
  return directive_tok(yyg, OUTPUT, NESTED);
}
	YY_BREAK
case 39:
/* rule 39 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 542 "parser.l"
{
  return directive_tok(yyg, REPEAT, NESTED);
}
	YY_BREAK
case 40:
/* rule 40 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 546 "parser.l"
{
  return directive_tok(yyg, REP, NESTED);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 550 "parser.l"
{
  return directive_tok(yyg, SINGLE, 0);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 554 "parser.l"
{
  return directive_tok(yyg, FIRST, 0);
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 558 "parser.l"
{
  return directive_tok(yyg, LAST, NESTED);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 562 "parser.l"
{
  return directive_tok(yyg, EMPTY, 0);
}
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 566 "parser.l"
{
  return directive_tok(yyg, MOD, NESTED);
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 570 "parser.l"
{
  return directive_tok(yyg, MODLAST, NESTED);
}
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 574 "parser.l"
{
  return directive_tok(yyg, DEFINE, NESTED);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 578 "parser.l"
{
  return directive_tok(yyg, TRY, 0);
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 582 "parser.l"
{
  return directive_tok(yyg, CATCH, NESTED);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 586 "parser.l"
{
  return directive_tok(yyg, FINALLY, 0);
}
	YY_BREAK
case 51:
/* rule 51 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 590 "parser.l"
{
  return directive_tok(yyg, IF, NESTED);
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 594 "parser.l"
{
  return directive_tok(yyg, ELIF, NESTED);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 598 "parser.l"
{
  return directive_tok(yyg, ELSE, 0);
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 602 "parser.l"
{
  yy_push_state(BRACED, yyscanner);
  yylval->lineno = yyextra->lineno;
  return yytext[0];
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 608 "parser.l"
{
 yy_push_state(NESTED, yyscanner);
 yylval->lineno = yyextra->lineno;
 return yytext[0];
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 614 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 248) ? OLD_AT : '@';
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 619 "parser.l"
{
  yylval->chr = '*';
  return SPLICE;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 624 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 629 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 60:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 638 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space or 0 needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 653 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 662 "parser.l"
{
  /* Eat whitespace in directive */
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 666 "parser.l"
{
  yy_push_state(STRLIT, yyscanner);
  return '"';
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 671 "parser.l"
{
  yy_push_state(CHRLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_BACKSLASH;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 677 "parser.l"
{
  yy_push_state(BUFLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_B_QUOTE;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 683 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_SLASH;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 689 "parser.l"
{
  yy_push_state(QSILIT, yyscanner);
  return '`';
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 694 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WORDS;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 700 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WSPLICE;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 706 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWORDS;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 712 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWSPLICE;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 718 "parser.l"
{
  return '#';
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 722 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_H;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 727 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_S;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 732 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_R;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 737 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_N;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 742 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_T;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 747 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  yy_push_state(JSON, yyscanner);
  return HASH_J;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 753 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_SEMI;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 758 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));
  yylval->val = int_str(str, num(10));
  return HASH_N_EQUALS;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 764 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));
  yylval->val = int_str(str, num(10));
  return HASH_N_HASH;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 770 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 185) ? OLD_DOTDOT : DOTDOT;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 775 "parser.l"
{
  yy_pop_state(yyscanner);
  yylval->lexeme = chk_strdup(L"@");
  return TEXT;
}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 781 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 785 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  return '/';
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 790 "parser.l"
{
  yylval->chr = '.';
  return CONSDOT;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 795 "parser.l"
{
  yylval->chr = '.';
  return LAMBDOT;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 800 "parser.l"
{
  yylval->chr = '.';
  return UREFDOT;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 805 "parser.l"
{
  yylval->chr = '.';
  return '.';
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 810 "parser.l"
{
  yylval->chr = '.';
  return OREFDOT;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 815 "parser.l"
{
  yylval->chr = '.';
  return UOREFDOT;
}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 820 "parser.l"
{
  if (YYSTATE == SPECIAL)
    yy_pop_state(yyscanner);  /* @\ continuation */
  yyextra->lineno++;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 826 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = char_esc(yytext[1]);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);
  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 835 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = num_esc(yyg, yytext + 1);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);

  {
    char lastchar = yytext[yyleng-1];
    if (lastchar == ';' && opt_compat && opt_compat <= 109)
      unput(lastchar);
  }

  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 851 "parser.l"
{
  yyerrorf(yyg, lit("\\x escape without digits"), nao);
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 855 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 859 "parser.l"
{
  /* comment */
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 863 "parser.l"
{
  val ch = chr_str(string_utf8(yytext), zero);
  if (chr_isspace(ch))
    yyerrprepf(yyg, lit("unexpected whitespace character #\\x~,02x"),
               ch, nao);
  else if (chr_isunisp(ch))
    yyerrprepf(yyg, lit("unexpected Unicode space character #\\x~,02x"),
               ch, nao);
  else if (chr_iscntrl(ch))
    yyerrprepf(yyg, lit("unexpected control character #\\x~,02x"),
               ch, nao);
  else
    yyerrprepf(yyg, lit("unexpected character #\\~a"),
               ch, nao);
  return ERRTOK;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 880 "parser.l"
{
  yyerrprepf(yyg, lit("non-UTF-8 byte #x~02x in directive"),
             num(convert(unsigned char, yytext[0])), nao);
  return ERRTOK;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 886 "parser.l"
{
  yylval->chr = '/';
  return (YYSTATE == SREGEX) ? REGCHAR : '/';
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 891 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return REGCHAR;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 896 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext + 1);
  return REGCHAR;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 901 "parser.l"
{
  yylval->chr = yytext[1];
  return REGTOKEN;
}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 906 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 910 "parser.l"
{
  yyextra->lineno++;
  yyerrprepf(yyg, lit("newline in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 916 "parser.l"
{
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return REGCHAR;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 922 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 927 "parser.l"
{
  yylval->chr = yytext[1];
  return REGCHAR;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 932 "parser.l"
{
  if (opt_compat && opt_compat <= 105) {
    yylval->chr = yytext[1];
    return REGCHAR;
  }

  if (yytext[1] == 'x')
    yyerrprepf(yyg, lit("\\x escape without digits in regex"), nao);
  else
    yyerrprepf(yyg, lit("unrecognized escape in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 945 "parser.l"
{
  yyerrprepf(yyg, lit("dangling backslash in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 950 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yylval->lexeme = chk_strdup(wchr);
    return TEXT;
  }
  yylval->chr = wchr[0];
  return REGCHAR;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 960 "parser.l"
{
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return REGCHAR;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 965 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SPACE;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 970 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return TEXT;
}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 975 "parser.l"
{
  yyextra->lineno++;
  return '\n';
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 980 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
  return '*';
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 985 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 989 "parser.l"
{
  /* eat whole line comment */
  yyextra->lineno++;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 994 "parser.l"
{
  /* comment to end of line */
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 998 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1003 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1008 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1013 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 1018 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 1022 "parser.l"
{
  yyextra->lineno++;

  if (!opt_compat || opt_compat > 109)
    return ' ';
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1030 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext+1);
  return LITCHAR;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1035 "parser.l"
{
  yyerrorf(yyg, lit("\\x escape without digits"), nao);
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1039 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape: \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1043 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext);
  return LITCHAR;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1048 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1053 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK; /* hack */
}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1058 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1065 "parser.l"
{
  yyerrprepf(yyg, lit("newline in character literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 1072 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string quasiliteral"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 1079 "parser.l"
{
  yyextra->lineno++;

  if (opt_compat && opt_compat <= 109)
    return ' ';

  yyerrprepf(yyg, lit("newline in word list literal"), nao);
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 136:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1090 "parser.l"
{
  yy_push_state(QSPECIAL, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1095 "parser.l"
{
  yyerrprepf(yyg, lit("malformed @ expression in quasiliteral"), nao);
  return ERRTOK;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1100 "parser.l"
{
  return ' ';
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1104 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1109 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1114 "parser.l"
{
  wchar_t ch0, ch1;
  yytext[6] = 0;
  ch0 = num_esc(yyg, yytext + 1);
  ch1 = num_esc(yyg, yytext + 7);
  yylval->chr = ((ch0 - 0xD800) << 10 | (ch1 - 0xDC00)) + 0x10000;
  return LITCHAR;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1123 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext + 1);
  return LITCHAR;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1128 "parser.l"
{
  yyerrorf(yyg, lit("JSON \\u escape needs four digits"), nao);
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1132 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized JSON escape: \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 1136 "parser.l"
{
  yyerrprepf(yyg, lit("newline in JSON string"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1143 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yylval->lexeme = chk_strdup(wchr);
    return TEXT;
  }
  yylval->chr = wchr[0];
  return LITCHAR;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1153 "parser.l"
{
  yylval->chr = strtol(yytext, 0, 16);
  return LITCHAR;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1158 "parser.l"
{
  return '\'';
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1162 "parser.l"
{
}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 1165 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1169 "parser.l"
{
  yyerrorf(yyg, lit("bad character ~s in buffer literal"),
           chr(yytext[0]), nao);
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1174 "parser.l"
{
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return LITCHAR;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1179 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));
  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);
  return NUMBER;
}
	YY_BREAK
case 154:
/* rule 154 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1186 "parser.l"
{
  yylval->val = t;
  return JSKW;
}
	YY_BREAK
case 155:
/* rule 155 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1191 "parser.l"
{
  yylval->val = nil;
  return JSKW;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1196 "parser.l"
{
  if (strcmp("true", yytext) == 0) {
    yylval->val = t;
    return JSKW;
  }

  if (strcmp("false", yytext) == 0) {
    yylval->val = nil;
    return JSKW;
  }

  {
    val str = string_own(utf8_dup_from(yytext));
    yyerrorf(yyg, lit("unrecognized JSON syntax: ~a"), str, nao);
  }
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1213 "parser.l"
{
  yy_push_state(JLIT, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1218 "parser.l"
{
  return yytext[0];
}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 1222 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1226 "parser.l"
{
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1229 "parser.l"
{
  yyerrorf(yyg, lit("bad character ~s in JSON literal"),
           chr(yytext[0]), nao);
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1234 "parser.l"
{
  yy_push_state(JLIT, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1239 "parser.l"
ECHO;
	YY_BREAK
#line 5850 "lex.yy.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(SPECIAL):
			case YY_STATE_EOF(BRACED):
			case YY_STATE_EOF(NESTED):
			case YY_STATE_EOF(REGEX):
			case YY_STATE_EOF(SREGEX):
			case YY_STATE_EOF(STRLIT):
			case YY_STATE_EOF(CHRLIT):
			case YY_STATE_EOF(QSILIT):
			case YY_STATE_EOF(QSPECIAL):
			case YY_STATE_EOF(WLIT):
			case YY_STATE_EOF(QWLIT):
			case YY_STATE_EOF(BUFLIT):
			case YY_STATE_EOF(JSON):
			case YY_STATE_EOF(JLIT):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1639 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1639 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1638);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1239 "parser.l"


static int directive_tok(scanner_t *yyscanner, int tok, int state)
{
  struct yyguts_t *yyg = convert(struct yyguts_t *, yyscanner);
  char *pstart = yytext + 1 + strspn(yytext + 1, " \t");
  char *pcolon = strchr(pstart, ':');
  char *pend = pstart + strspn(pstart, ":-abcdefghijklmnopqrstuvwxyz");

  *pend = 0;

  if (pcolon != 0) {
    val pkgname = string_utf8((*pcolon = 0, pstart));
    val package = if3(pstart[0], find_package(pkgname), keyword_package);
    if (!package) {
      yyerrprepf(yyg, lit("package ~a not found"), pkgname, nao);
      tok = ERRTOK;
    }
    if (package != user_package && package != keyword_package) {
      val sym = string_utf8(pcolon + 1);
      yyerrprepf(yyg, lit("~a:~a: original usr package expected, not ~a"),
                 pkgname, sym, pkgname, nao);
      tok = ERRTOK;
    }
  } else {
    val symname = string_utf8(pstart);
    val sym = intern_fallback(symname, cur_package);
    val package = symbol_package(sym);

    if (package != user_package && package != keyword_package) {
      yyerrprepf(yyg, lit("~a: this is ~a:~a, not usr:~a"),
                 symname, package_name(package), symname, symname, nao);
      tok = ERRTOK;
    }
  }

  if (state != 0)
    yy_push_state(state, yyscanner);
  else
    yy_pop_state(yyscanner);
  yylval->lineno = yyextra->lineno;
  return tok;
}

void end_of_regex(scanner_t *yyg)
{
  if (YYSTATE != REGEX && YYSTATE != SREGEX)
    internal_error("end_of_regex called in wrong scanner state");

  yy_pop_state(yyg);

  if (YYSTATE != INITIAL) {
    if (yy_top_state(yyg) == INITIAL
      || yy_top_state(yyg) == QSILIT
      || yy_top_state(yyg) == QWLIT)
      yy_pop_state(yyg);
  }
}

void end_of_char(scanner_t *yyg)
{
  if (YYSTATE != CHRLIT)
    internal_error("end_of_char called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_buflit(scanner_t *yyg)
{
  if (YYSTATE != BUFLIT)
    internal_error("end_of_buflit called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_json(scanner_t *yyg)
{
  if (YYSTATE == JLIT)
    yy_pop_state(yyg);

  if (YYSTATE != JSON)
    internal_error("end_of_json called in wrong scanner state");

  yy_pop_state(yyg);
}

val source_loc(val form)
{
  return gethash(form_to_ln_hash, form);
}

val source_loc_str(val form, val alt)
{
  cons_bind (line, file, gethash(form_to_ln_hash, form));
  if (missingp(alt))
    alt = lit("source location n/a");
  return if3(line, format(nil, lit("~a:~d"), file, line, nao), alt);
}

int yylex(YYSTYPE *yylval_param, yyscan_t yyscanner)
{
  struct yyguts_t * yyg = convert(struct yyguts_t *, yyscanner);
  int yy_char;

  if (yyextra->tok_idx > 0) {
    struct yy_token *tok = &yyextra->tok_pushback[--yyextra->tok_idx];
    yyextra->recent_tok = *tok;
    *yylval_param = tok->yy_lval;
    if (tok->yy_lex_state && tok->yy_lex_state != YYSTATE)
      yy_push_state(tok->yy_lex_state, yyg);
    return tok->yy_char;
  }

  yy_char = yyextra->recent_tok.yy_char = yylex_impl(yylval_param, yyscanner);
  yyextra->recent_tok.yy_lval = *yylval_param;
  yyextra->recent_tok.yy_lex_state = YYSTATE;

  return yy_char;
}

void prime_scanner(scanner_t *yyg, enum prime_parser prim)
{
  while (YYSTATE != INITIAL)
    yy_pop_state(yyg);

  switch (prim) {
  case prime_lisp:
  case prime_interactive:
    yy_push_state(SPECIAL, yyg);
    yy_push_state(NESTED, yyg);
    yy_push_state(NESTED, yyg);
    break;
  case prime_regex:
    yy_push_state(SREGEX, yyg);
    break;
  }
}

void scrub_scanner(scanner_t *yyg, int yy_char, wchar_t *lexeme)
{
  struct yy_token *rtok = &yyextra->recent_tok;

  if (rtok->yy_char == yy_char && rtok->yy_lval.lexeme == lexeme) {
    rtok->yy_char = 0;
    rtok->yy_lval.lexeme = 0;
  }
}

void parser_l_init(void)
{
  prot1(&form_to_ln_hash);
  form_to_ln_hash = make_eq_hash(t, nil);
}

