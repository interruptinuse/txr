
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 144
#define YY_END_OF_BUFFER 145
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1524] =
    {   0,
       62,   62,   62,   62,   62,   62,   62,   62,  136,  136,
      136,  136,  140,  140,  145,  113,  144,  114,  144,  114,
      144,  112,  144,  116,  144,  113,  144,  113,  144,  113,
      144,  116,  144,   96,   97,  144,   62,   96,   97,  144,
       83,  144,   83,   96,   97,  144,   63,   96,   97,  144,
       96,   97,  144,   55,   96,   97,  144,   61,   96,   97,
      144,   96,   97,  144,   88,   96,   97,  144,   84,   96,
       97,  144,    1,   19,   96,   97,  144,16400,   95,   96,
       97,  144,   82,   96,   97,  144,   19,   96,   97,  144,
    16400,   55,   96,   97,  144,   96,   97,  144,   67,   96,

       97,  144,   54,   96,   97,  144,   97,  144,   97,  144,
       97,  144,   97,  144,   62,   96,   97,  144,   20,   96,
       97,  144,16401,   72,   96,   97,  144,   58,   96,   97,
      144,   20,   96,   97,  144,16401,   58,   96,   97,  144,
       88,   96,   97,  144,    1,   20,   96,   97,  144,16401,
       20,   96,   97,  144,16401,   56,   96,   97,  144,   20,
       96,   97,  144,16401,   59,   96,   97,  144,   97,  144,
       97,  144,   97,  144,   62,   96,   97,  144,   21,   96,
       97,  144,16402,   72,   96,   97,  144,   21,   96,   97,
      144,16402,   88,   96,   97,  144,    1,   21,   96,   97,

      144,16402,   21,   96,   97,  144,16402,   56,   96,   97,
      144,   21,   96,   97,  144,16402,   97,  144,   97,  144,
       97,  144,  109,  111,  144,  109,  111,  144,  103,  144,
      103,  109,  111,  144,  105,  109,  111,  144,   98,  105,
      109,  111,  144,  108,  109,  111,  144,  111,  144,  111,
      144,  111,  144,  111,  144,  109,  110,  144,  109,  110,
      144,  104,  144,  104,  109,  110,  144,  105,  109,  110,
      144,   98,  105,  109,  110,  144,  108,  109,  110,  144,
      110,  144,  110,  144,  110,  144,  110,  144,  137,  143,
      144,  137,  143,  144,  130,  144,  130,  137,  143,  144,

      119,  137,  143,  144,  137,  143,  144,  143,  144,  143,
      144,  143,  144,  143,  144,  129,  137,  143,  144,  131,
      144,  131,  137,  143,  144,  128,  129,  137,  143,  144,
      128,  129,  137,  143,  144,  128,  129,  137,  143,  144,
      129,  143,  144,  129,  143,  144,  129,  143,  144,  129,
      143,  144,  132,  144,  132,  137,  143,  144,  135,  137,
      143,  144,  137,  143,  144,  120,  137,  143,  144,   62,
       96,   97,  144,   96,   97,  144,   96,   97,  144,   88,
       96,   97,  144,    1,   10,   19,   96,   97,  144,16400,
       56,   96,   97,  144,   96,   97,  144,  136,  137,  143,

      144,  133,  144,  133,  137,  143,  144,  137,  143,  144,
      137,  143,  144,  142,  144,  140,  142,  144,  141,  144,
      141,  142,  144,  139,  142,  144,  138,  142,  144,  113,
      113,  113,  113,  114,  112,  118,  115,  113,  113,  113,
      118,   62,   87,   83,   68,   66,   64,   70,    1,   86,
        4,   89,    1,   19,16400,   19,16400,   19,16400,   95,
       94,   91,   91,   94,   92,   94,   93,   94,   94,   96,
       62,   87,   20,   22,16401,   20,16401,   20,   22,16401,
       20,16401,   20,16401,   78,   73,   76,   75,   74,   77,
        1,   20,   22,16401,   57,    4,   20,   22,16401,   20,

       22,16401,   20,16401,   22,   20,16401,   20,16401,   20,
    16401,    9,   20,16401,   91,   20,   96,16401,   62,   87,
       21,   23,16402,   21,16402,   21,   23,16402,   21,16402,
       21,16402,    1,   21,   23,16402,   81,    4,   21,   23,
    16402,   21,   23,16402,   21,16402,   23,   21,16402,   21,
    16402,   21,16402,    9,   21,16402,   21,   96,16402,  103,
      107,  102,  102,  107,   99,  107,  106,  107,  100,  107,
      101,  107,  107,  109,  104,  130,  126,  123,  124,  123,
      124,  126,  121,  126,  125,  126,  126,  137,  131,  128,
      127,  128,  127,  128,  132,  134,    9,  134,  134,  122,

      126,   62,   87,    1,   10,    1,   10,   19,16400,  136,
      133,  124,  124,  126,  140,  141,  118,  113,  118,  117,
      117,  118,   85,   90,   69,   71,   65,    2,    2,    2,
       60,    4,    5,    5,    5,    8,    4,    5,    8, 8208,
        5,    8,    5,    8,    4,   19,16400, 8208,   91,   93,
       93,   93,   20,   22,16401,   20,   22,16401,   20,   22,
    16401,   20,   22,16401, 8209,   20,   22,16401,   20,   22,
    16401,   20,   22,16401,   22,   22,   80,   79,   20,   22,
    16401,   20,16401,   20,16401,    4, 8209,    1,   20,   22,
    16401,   20,   22,16401,    6,    4,    6,    6,    6,    6,

        8,    8,    4,    6,    8, 8209,    6,    8,    8,    6,
        8,    8,    8,    8,   20,   22,16401,    4,   20,   22,
    16401,   20,   22,16401,   20,   22,16401,   22,   20,   22,
    16401,   22,   20,   22,16401,   20,16401,   20,16401,    9,
       20,   22,16401,   21,   23,16402,   21,   23,16402,   21,
       23,16402,   21,   23,16402, 8210,   21,   23,16402,   21,
       23,16402,   21,   23,16402,   23,   23,   21,   23,16402,
       21,16402,   21,16402,    4, 8210,    1,   21,   23,16402,
       21,   23,16402,    7,    4,    7,    7,    7,    7,    8,
        8,    4,    7,    8, 8210,    7,    8,    8,    7,    8,

        8,    8,    8,   21,   23,16402,    4,   21,   23,16402,
       21,   23,16402,   21,   23,16402,   23,   21,   23,16402,
       23,   21,   23,16402,   21,16402,   21,16402,    9,   21,
       23,16402,  102,  102,  100,  100,  100,  123,  124,  123,
      124,  125,  125,  125,    9,    2,   14,    2,   12,    8,
     8208,  124,  124,  117,    5,    4,    2,    3,    3,    2,
        3,    2,    3,   51,   51,   51,   51,   51,   51,   33,
        4,    5,    8,    4,    5,    4,    5, 8208,    4,    5,
        4,    5,   19,16400,    5,   19,16400,    6,    4,   20,
       22,16401,   20,   22,16401,   20,   22,16401,   20,   22,

    16401,   20,   22,16401,   20,   22,16401,   22,   22,   22,
       22,   20,   22,16401,   20,   22,16401,   20,   22,16401,
        4,    6, 8209,    6,    6,    6,    6,    6,    4,    6,
        6,    6,    6,    6,    6,    4,    6,    4,    6, 8209,
        6,    4,    6,    6,   20,   22,16401,   20,   22,16401,
        4,    6,   20,   22,16401,    6,   20,   22,16401,   22,
       20,   22,16401,   20,   22,16401,   20,   22,16401,    9,
       20,   22,16401,    7,    4,   21,   23,16402,   21,   23,
    16402,   21,   23,16402,   21,   23,16402,   21,   23,16402,
       21,   23,16402,   23,   23,   23,   23,   21,   23,16402,

       21,   23,16402,   21,   23,16402,    4,    7, 8210,    7,
        7,    7,    7,    7,    4,    7,    7,    7,    7,    7,
        7,    4,    7,    4,    7, 8210,    7,    4,    7,    7,
       21,   23,16402,   21,   23,16402,    4,    7,   21,   23,
    16402,    7,   21,   23,16402,   23,   21,   23,16402,   21,
       23,16402,   21,   23,16402,   15,   13,   11,    9,   21,
       23,16402,    2,    3,   14,    2,    3,   12,   24,   32,
       34,   45,   45,   45,   45,   45,   45,   40,   40,   40,
       40,   40,   40,   48,    4,    5, 8208,    4,    6,   20,
       22,16401,   20,   22,16401,   20,   22,16401,   22,    6,

        6,    6,    6,    6,    4,    6,    4,    6,    6,   20,
       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,
        6,   20,   22,16401,    6,   20,   22,16401,    6, 8209,
        6,   20,   22,16401,    6,   20,   22,16401,    4,    6,
       20,   22,16401,    6,   20,   22,16401,    6,   20,   22,
    16401,    6,   20,   22,16401,    6,   20,   22,16401,    6,
       22,    6,   22,    4,    7,   21,   23,16402,   21,   23,
    16402,   21,   23,16402,   23,    7,    7,    7,    7,    7,
        4,    7,    4,    7,    7,   21,   23,16402,    7,   21,
       23,16402,    7,   21,   23,16402,    7,   21,   23,16402,

        7,   21,   23,16402,    7, 8210,    7,   21,   23,16402,
        7,   21,   23,16402,    4,    7,   21,   23,16402,    7,
       21,   23,16402,    7,   21,   23,16402,    7,   21,   23,
    16402,    7,   21,   23,16402,    7,   23,    7,   23,   36,
       36,   36,   36,   36,   36,   52,   52,   52,   52,   52,
       52,   53,   43,   43,   43,   43,   43,   43,   26,   25,
       25,   25,   25,   25,   25,    6,   20,   22,16401,    6,
       20,   22,16401,    6,   20,   22,16401,    6,   20,   22,
    16401,    6,   20,   22,16401,    6,   20,   22,16401,    6,
     8209,    6,   20,   22,16401,    6,   20,   22,16401,    6,

       20,   22,16401,    6,   20,   22,16401,    6,   20,   22,
    16401,    6,   20,   22,16401,    6,   22,    6,   22,    6,
       22,    6,   22,    7,   21,   23,16402,    7,   21,   23,
    16402,    7,   21,   23,16402,    7,   21,   23,16402,    7,
       21,   23,16402,    7,   21,   23,16402,    7, 8210,    7,
       21,   23,16402,    7,   21,   23,16402,    7,   21,   23,
    16402,    7,   21,   23,16402,    7,   21,   23,16402,    7,
       21,   23,16402,    7,   23,    7,   23,    7,   23,    7,
       23,   29,   29,   29,   29,   29,   29,   28,   49,   49,
       49,   49,   49,   49,   44,   42,   27,   37,   37,   37,

       37,   37,   37,    6,   20,   22,16401,    6,   20,   22,
    16401,    6,   20,   22,16401,    6,   20,   22,16401,    6,
       20,   22,16401,    6,   20,   22,16401,    6,   20,   22,
    16401,    6,   20,   22,16401,    6,   20,   22,16401,    6,
       22,    7,   21,   23,16402,    7,   21,   23,16402,    7,
       21,   23,16402,    7,   21,   23,16402,    7,   21,   23,
    16402,    7,   21,   23,16402,    7,   21,   23,16402,    7,
       21,   23,16402,    7,   21,   23,16402,    7,   23,   30,
       30,   30,   30,   30,   30,   47,   47,   47,   47,   47,
       47,   31,   31,   31,   31,   31,   31,   38,   38,   38,

       38,   38,   38,   39,   39,   39,   39,   39,   39,   41,
       35,   35,   35,   35,   35,   35,   50,   46,   46,   46,
       46,   46,   46
    } ;

static const flex_int16_t yy_accept[1586] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   18,   20,
       22,   24,   26,   28,   30,   32,   34,   37,   41,   43,
       47,   51,   54,   58,   62,   65,   69,   73,   79,   83,
       87,   92,   96,   99,  103,  107,  109,  111,  113,  115,
      119,  124,  128,  132,  137,  141,  145,  151,  156,  160,
      165,  169,  171,  173,  175,  179,  184,  188,  193,  197,
      203,  208,  212,  217,  219,  221,  223,  226,  229,  231,
      235,  239,  244,  248,  250,  252,  254,  256,  259,  262,

      264,  268,  272,  277,  281,  283,  285,  287,  289,  292,
      295,  297,  301,  305,  308,  310,  312,  314,  316,  320,
      322,  326,  331,  336,  341,  344,  347,  350,  353,  355,
      359,  363,  366,  370,  374,  377,  380,  384,  391,  395,
      398,  402,  404,  408,  411,  414,  416,  419,  421,  424,
      427,  430,  431,  432,  433,  434,  435,  436,  436,  437,
      438,  439,  440,  441,  441,  442,  443,  443,  444,  444,
      445,  446,  446,  447,  448,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  450,  451,  452,  453,  453,  456,  458,
      460,  461,  461,  462,  463,  465,  467,  469,  470,  471,
      471,  471,  472,  472,  473,  473,  476,  478,  478,  481,
      481,  483,  483,  483,  483,  483,  485,  486,  487,  488,
      489,  490,  491,  491,  495,  496,  497,  497,  500,  503,
      505,  506,  508,  508,  508,  508,  510,  510,  512,  515,
      515,  515,  515,  516,  519,  519,  519,  520,  520,  521,
      521,  524,  526,  526,  529,  529,  531,  531,  531,  531,
      533,  533,  537,  538,  539,  539,  542,  545,  547,  548,
      550,  550,  550,  550,  552,  552,  554,  557,  557,  557,

      557,  560,  560,  560,  560,  560,  561,  562,  563,  565,
      567,  569,  571,  573,  574,  575,  575,  575,  576,  576,
      576,  577,  578,  580,  583,  585,  587,  588,  589,  589,
      589,  590,  591,  593,  595,  596,  596,  597,  597,  599,
      600,  602,  603,  604,  604,  604,  606,  606,  610,  610,
      611,  611,  612,  613,  615,  616,  617,  618,  619,  620,
      621,  623,  624,  625,  625,  625,  626,  627,  628,  628,
      629,  629,  630,  630,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,

      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  632,  632,  632,  634,  635,  636,  637,  641,  643,
      645,  645,  648,  649,  650,  651,  652,  653,  653,  653,
      653,  653,  656,  659,  662,  665,  665,  665,  665,  666,
      669,  672,  675,  675,  675,  675,  676,  676,  677,  677,
      677,  677,  677,  677,  678,  679,  682,  684,  686,  686,
      686,  686,  688,  692,  695,  696,  696,  696,  698,  699,
      699,  700,  700,  700,  700,  702,  703,  707,  709,  710,
      712,  713,  714,  715,  718,  722,  725,  728,  729,  732,

      732,  732,  732,  733,  733,  733,  733,  733,  733,  736,
      738,  740,  740,  740,  740,  744,  744,  744,  744,  744,
      744,  744,  747,  750,  753,  756,  756,  756,  756,  757,
      760,  763,  766,  766,  766,  766,  767,  767,  768,  768,
      768,  768,  768,  768,  771,  773,  775,  775,  775,  775,
      777,  781,  784,  785,  785,  785,  787,  788,  788,  789,
      789,  789,  789,  791,  792,  796,  798,  799,  801,  802,
      803,  804,  807,  811,  814,  817,  818,  821,  821,  821,
      821,  822,  822,  822,  822,  822,  822,  825,  827,  829,
      829,  829,  829,  829,  829,  829,  833,  833,  833,  833,

      834,  835,  836,  837,  838,  838,  840,  842,  843,  844,
      845,  845,  846,  846,  848,  848,  850,  850,  852,  853,
      854,  855,  856,  857,  859,  860,  862,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  865,
      866,  867,  868,  869,  870,  870,  870,  870,  870,  870,
      871,  871,  871,  871,  871,  871,  871,  871,  874,  874,
      876,  879,  881,  881,  885,  888,  889,  889,  890,  893,

      896,  899,  899,  899,  899,  899,  899,  902,  905,  908,
      908,  908,  908,  908,  908,  909,  910,  911,  911,  911,
      911,  912,  912,  912,  912,  912,  912,  912,  915,  918,
      921,  921,  921,  921,  921,  921,  924,  925,  926,  926,
      926,  926,  927,  928,  929,  931,  932,  933,  933,  933,
      933,  934,  934,  934,  934,  935,  935,  935,  935,  936,
      938,  938,  938,  941,  942,  944,  948,  951,  951,  956,
      960,  960,  960,  960,  960,  961,  961,  961,  961,  961,
      961,  961,  961,  961,  964,  967,  970,  970,  970,  970,
      970,  970,  974,  974,  975,  975,  976,  979,  982,  985,

      985,  985,  985,  985,  985,  988,  991,  994,  994,  994,
      994,  994,  994,  995,  996,  997,  997,  997,  997,  998,
      998,  998,  998,  998,  998,  998, 1001, 1004, 1007, 1007,
     1007, 1007, 1007, 1007, 1010, 1011, 1012, 1012, 1012, 1012,
     1013, 1014, 1015, 1017, 1018, 1019, 1019, 1019, 1019, 1020,
     1020, 1020, 1020, 1021, 1021, 1021, 1021, 1022, 1024, 1024,
     1024, 1027, 1028, 1030, 1034, 1037, 1037, 1042, 1046, 1046,
     1046, 1046, 1046, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1050, 1053, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1057, 1057, 1058, 1058, 1059, 1063, 1063, 1066, 1069,

     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1070, 1070, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1072, 1072, 1072, 1072, 1072, 1072, 1073, 1074, 1075, 1075,
     1076, 1077, 1078, 1078, 1078, 1079, 1080, 1081, 1081, 1082,
     1083, 1084, 1084, 1084, 1084, 1085, 1085, 1086, 1088, 1090,
     1093, 1096, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1099, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1101, 1101, 1101, 1101, 1101, 1101,

     1102, 1102, 1102, 1102, 1103, 1103, 1103, 1103, 1103, 1103,
     1103, 1103, 1104, 1105, 1105, 1105, 1105, 1105, 1105, 1107,
     1107, 1109, 1113, 1117, 1121, 1125, 1125, 1125, 1125, 1129,
     1131, 1135, 1139, 1144, 1148, 1148, 1148, 1148, 1152, 1156,
     1160, 1160, 1160, 1160, 1162, 1162, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1166,
     1169, 1172, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1177, 1177, 1177, 1177, 1177, 1177,
     1178, 1178, 1178, 1178, 1179, 1179, 1179, 1179, 1179, 1179,

     1179, 1179, 1180, 1181, 1181, 1181, 1181, 1181, 1181, 1183,
     1183, 1185, 1189, 1193, 1197, 1201, 1201, 1201, 1201, 1205,
     1207, 1211, 1215, 1220, 1224, 1224, 1224, 1224, 1228, 1232,
     1236, 1236, 1236, 1236, 1238, 1238, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1241, 1242, 1243, 1243, 1244, 1245,
     1246, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1252, 1253,
     1253, 1253, 1253, 1253, 1254, 1255, 1256, 1257, 1258, 1259,

     1259, 1259, 1259, 1260, 1260, 1260, 1260, 1261, 1262, 1263,
     1264, 1265, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1270, 1274, 1278, 1278, 1278,
     1278, 1278, 1278, 1282, 1286, 1290, 1290, 1290, 1290, 1292,
     1296, 1300, 1304, 1304, 1304, 1304, 1304, 1304, 1308, 1312,
     1316, 1316, 1316, 1316, 1316, 1316, 1318, 1320, 1322, 1322,
     1322, 1322, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,

     1324, 1324, 1328, 1332, 1336, 1336, 1336, 1336, 1336, 1336,
     1340, 1344, 1348, 1348, 1348, 1348, 1350, 1354, 1358, 1362,
     1362, 1362, 1362, 1362, 1362, 1366, 1370, 1374, 1374, 1374,
     1374, 1374, 1374, 1376, 1378, 1380, 1380, 1380, 1380, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
     1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1395, 1395,
     1395, 1395, 1396, 1396, 1396, 1397, 1397, 1397, 1398, 1398,
     1398, 1398, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1404,

     1404, 1404, 1404, 1404, 1404, 1408, 1412, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1420, 1424, 1428, 1428, 1428, 1428,
     1428, 1428, 1432, 1436, 1440, 1440, 1440, 1440, 1440, 1440,
     1440, 1440, 1440, 1440, 1442, 1442, 1442, 1442, 1442, 1442,
     1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1446,
     1450, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1458, 1462,
     1466, 1466, 1466, 1466, 1466, 1466, 1470, 1474, 1478, 1478,
     1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1480, 1480,
     1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480,
     1480, 1480, 1480, 1480, 1480, 1480, 1481, 1482, 1483, 1484,

     1485, 1486, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1492,
     1493, 1494, 1495, 1496, 1497, 1498, 1498, 1499, 1500, 1501,
     1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1510,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1517, 1518,
     1519, 1520, 1521, 1522, 1523, 1524, 1524, 1524, 1524, 1524,
     1524, 1524, 1524, 1524, 1524
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    6,    9,    9,   10,   11,
       12,   13,   14,   15,   14,   16,   17,   18,   18,   19,
       19,   19,   19,   19,   19,   20,   20,   21,   22,    6,
       23,    6,   24,   25,   26,   26,   26,   27,   28,   26,
       29,   30,   29,   29,   29,   29,   29,   31,   29,   29,
       29,   32,   33,   34,   29,   29,   35,   29,   29,   29,
       36,   37,   38,   39,   29,   40,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   29,   50,   51,   52,   53,
       54,   55,   29,   56,   57,   58,   59,   60,   35,   61,
       62,   29,   63,   64,   65,    9,    1,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   67,   67,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   70,
       70,   70,   70,   70,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67
    } ;

static const YY_CHAR yy_meta[71] =
    {   0,
        1,    2,    3,    4,    5,    6,    1,    7,    6,    8,
        8,    2,    6,    9,    8,   10,   11,   12,   12,   12,
       13,   14,    6,    6,   15,   12,   12,   12,   16,   16,
       16,   16,   16,   16,   16,    8,    6,    1,   17,    1,
       12,   12,   12,   12,   18,   12,   16,   16,   16,   16,
       19,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,    8,    1,    1,    1,    1,   20,   20,   20
    } ;

static const flex_int16_t yy_base[1816] =
    {   0,
        0,    3,   73,    0,  143,    0,  213,    0,  282,  351,
      420,  489,  558,  627,  697,    0,  766,  835,  904,    0,
      942, 1011, 1080, 1149, 1218, 1263, 4907,  220,10320, 4903,
     4900,    7,  234,  239,  244,    8,10320,   17,10320, 4901,
    10320,  527, 1308, 4887,   22,   41,10320,  312,    0,10320,
     4886,10320, 1376,10320,10320,10320, 4835, 4832, 4822,  319,
      358, 1431,10320, 1485, 4871,   29,   11,  370,  382,  443,
    10320, 4815, 4801, 4800,  462,  503, 4844, 1548,  513,  299,
      568,  452,  532, 4797, 4796, 4795,10320,   21,10320, 4854,
    10320,10320, 1618,10320, 4790, 4789, 4788,10320,  321,10320,

     4836,10320,10320,    0,10320, 4770, 4768, 4752,10320,  340,
    10320, 4811,10320, 1686,10320, 4731, 4730, 4729,10320,10320,
     4784,    0,   26, 1730,10320, 4712, 4702, 4700,10320, 4761,
     1769, 1830,10320,   48,  561,  351,  380,  392, 4754,   14,
      379,10320, 4758,  369,   48,10320,    9,10320, 4751,10320,
    10320,  337,  477,  517,  536,10320, 4748,  637,    0,10320,
      373,  542,  548,  638,   51,  647,  637,  666,  756,10320,
    10320,   17,10320,10320,10320,  435,   48, 4738,    0,  427,
     1851,  756,  759,  800,  774,  794,  781,  857,  612,  866,
      896,  862,  797,  907,  918,  892,  887, 4683, 4682, 4663,

      489,  572,  769,  320,  866,10320, 1910,  962, 4711,  656,
        0,  601,10320,  463,  472,10320,  578,    0,10320, 4660,
     4659, 1015,  763,  659,  976, 1020,  774,  669, 1030,  930,
      780, 4658, 4657, 4656,  872, 1087,10320,10320,10320,10320,
    10320,10320,  793, 1973,10320, 2036, 2106, 1042, 1093, 1103,
      789, 1162, 4652, 4648, 4647, 1172, 4691, 2169,    0, 4645,
     4637, 4636,  536, 1006, 4635, 4634, 1111, 1024, 1047, 1149,
     1187, 1377,  950, 1388, 1065, 1451, 4633, 4628, 4623, 1458,
      965, 2232,10320, 2295, 2365, 1256, 1461, 1473,  933, 1524,
     4621, 4615, 4607, 1536,  338, 2428,    0, 4602, 4600, 4596,

     1691, 4592, 4585,  512,  313,10320,10320,  575,  871,10320,
    10320,  786,10320,    0,10320, 4573, 4572,10320,  815,  410,
    10320,10320,  577,  894,10320, 1035,    0,10320, 4567, 4566,
    10320,    0,  436, 2481,10320,  462,10320, 1056, 1073,    0,
    10320, 1105,  969,  940, 4616, 1120, 1125, 1180, 4583, 1177,
      644,10320,  639, 1202, 1025,10320,    0, 1181,  688,10320,
      819, 1045,10320, 1267, 1215,10320,10320,10320, 4606, 4605,
      870,  987,    0, 2510, 1250, 4555, 4553, 4547,  283, 4559,
     1334, 4554, 1107, 4548, 4555, 4549, 4552,  458, 4537, 1038,
     4545,  243, 4528, 4529, 1466, 1303, 1371, 1490, 1516, 1529,

     1544, 1439, 1541, 1685, 1742, 1745, 2556, 1749, 1731, 1699,
     1775, 1998, 1783, 1761, 1961, 1757, 1964, 1967, 4510, 4504,
     1172, 2626,    0, 1563,    0, 1234,10320, 1717,    0, 1274,
     1259, 1280, 1371, 1179, 1191,10320, 4547, 4502, 1381, 2689,
     1392, 2175, 2194, 2197, 2260, 4498, 4497, 4493, 1495, 2266,
     2434, 2444, 4492, 4490, 4489, 1978, 4533, 1508, 4481, 4476,
     4475, 4473, 4472,10320,10320, 2450, 2697, 2703, 4471, 4469,
     4468, 2766, 2829, 1840, 1981, 4512, 2003, 2892, 1532, 2019,
     2210, 4464, 4453, 4450, 2024, 4494, 2955, 1632, 2226, 2472,
     4448, 4440, 4438, 1861, 3018, 2729, 2739, 1640, 2754, 4436,

     4433, 4427, 1645, 4425, 4419, 4407, 4406, 4405, 2794, 2857,
     2864, 4404, 4397, 4390, 3081, 4389, 4385, 4384, 1699, 3144,
     1772, 2920, 2927, 2977, 2983, 4379, 4377, 4376, 1802, 2993,
     3056, 3059, 4375, 4373, 4372, 2285, 4416, 1793, 4370, 4364,
     4363, 4362, 4358, 3114, 3152, 3171, 4356, 4355, 4354, 3234,
     3297, 2460, 2032, 4389, 2818, 3360, 1796, 2276, 2529, 4327,
     4325, 4323, 2157, 4366, 3423, 1927, 2464, 2937, 4319, 4315,
     4306, 2058, 3486, 3177, 3259, 1936, 3262, 4304, 4303, 4301,
     1939, 4299, 4292, 4291, 4283, 4280, 3269, 3325, 3332, 4279,
     4276, 4271,  329, 1297, 4322, 3549, 4268, 4265, 4257, 1222,

     1328, 1365,10320, 4300, 4253, 1421, 1403, 1676,10320, 4293,
     4242, 2002, 1104, 1157,    0, 3602,    0, 2040, 1428, 1473,
    10320, 2065, 2179, 4285,    0, 1284, 3631, 4231, 4218, 4231,
     4237, 4226, 1357, 4220, 4222, 4223,  605, 4213, 4223, 1446,
     4207,    0, 4203, 4196, 4210, 4200, 1834, 4187, 4188, 4189,
     4188, 4177, 4176, 2854, 3064, 3135, 3223, 3349, 3401, 3444,
     3452, 3477, 3514, 3522, 3527, 3611, 3666, 3539,10320, 3680,
     3710, 4166, 4165, 4164, 3707, 3703, 3777, 3789, 1845,10320,
     3806, 3876, 3802, 3861, 3888, 3905, 4162, 2684, 2077, 2323,
     2707, 2342, 2290, 2270, 4210, 3089, 2161, 3585, 3897, 3912,

     3939, 4159, 4153, 4151, 4145, 4139, 3963, 3975, 3978, 4138,
     4137, 4133, 4132, 4128, 3075, 3365, 2186, 4127, 4125, 4124,
     2249, 4123, 4116, 4111, 4110, 4108, 4107, 3985, 3997, 4013,
     4106, 4104, 4103, 4102, 4099, 4076, 2447, 2257, 4085, 4084,
     4083, 2263, 2514, 2518, 4139, 2279, 3406, 4075, 4073, 4071,
     2282, 4068, 4062, 4060, 3594, 4054, 4042, 4032, 2720, 2785,
     4025, 4020, 2419, 3188, 2873, 4048, 4054, 4111, 4202, 4117,
     2748, 4019, 4014, 4011, 2393, 4008, 4006, 3997, 3995, 3994,
     3991, 3985, 3984, 4127, 4167, 4208, 3974, 3969, 3959, 3957,
     3954, 4271, 3949, 3557, 2526, 4230, 4236, 4286, 4293, 3946,

     3945, 3938, 3932, 3929, 4305, 4308, 4327, 3926, 3923, 3919,
     3911, 3910, 3782, 4020, 2505, 3906, 3904, 3903, 2521, 3902,
     3897, 3896, 3895, 3887, 3884, 4343, 4363, 4378, 3882, 3872,
     3869, 3866, 3859, 4441, 2541, 2532, 3857, 3853, 3845, 2535,
     2544, 2548, 4504, 2538, 3620, 3842, 3838, 3837, 2662, 3836,
     3833, 3830, 4132, 3829, 3828, 3823, 3390, 3093, 3819, 3803,
     2809, 4093, 3254, 4384, 4419, 4476, 4567, 4482, 2960, 3802,
     3801, 3799, 2772, 3798, 3796, 3790, 3789, 3788, 3787, 3782,
     3773, 4492, 4532, 4573, 3772, 3771, 3770, 3769, 3767, 3814,
     3813, 1401, 1424,    0,    0, 4636, 3764, 1436, 4689, 3760,

     2011, 2199, 3782, 3779, 3777, 3758, 3758, 3757, 3759, 3755,
     3728, 2204, 3742, 3717, 3722, 3702, 3716, 3696, 3701, 3689,
     3688, 3682, 3677, 2230, 3665, 2452,10320, 2482,10320, 2990,
     2837, 3023, 3047, 4735, 3196, 4805, 4037, 2951, 2741,10320,
     3275, 2846, 2909, 4875, 3290,10320, 3328, 4905, 3440, 3645,
     3641, 3640, 4413, 3494,10320, 3368,    0, 3662, 3636, 3634,
     3632, 3648, 4964, 2937,10320, 3670, 3181, 3211, 5027, 4595,
     4601, 4651, 3630, 3629, 3627, 3620, 3618, 3604, 3595, 3594,
     3590, 2783, 3576, 3565, 3558, 3548, 3546, 3545, 3528, 3523,
     3520, 3519, 3515, 2801, 3513, 3506, 3500, 3495, 3492, 2980,

     3486, 3484, 3483, 2986, 3476, 3471, 3470, 3452, 3451, 3434,
     3430, 4497, 4610, 3424, 3414, 3412, 3411, 3406, 5090, 3401,
     3156, 4985, 5000, 5051, 5063, 3400, 3397, 3387, 5066, 4194,
     5078, 5129, 5192, 5136, 3386, 3384, 3381, 5155, 5170, 5211,
     3379, 3374, 3366, 4720, 3402, 3164, 3355, 3346, 3341, 3325,
     3324, 3321, 3311, 3309, 3308, 3306, 3303, 3297, 5274, 5233,
     5248, 5289, 3290, 3281, 3268, 3258, 3257, 3248, 3246, 3244,
     3243, 3168, 3240, 3229, 3223, 3222, 3220, 3215, 3210, 3205,
     3203, 3197, 3195, 3251, 3194, 3185, 3182, 3177, 3160, 3314,
     3158, 3157, 3153, 3346, 3152, 3149, 3145, 3129, 3120, 3115,

     3114, 4755, 4825, 3105, 3104, 3101, 3100, 3095, 5352, 3089,
     3465, 5311, 5314, 5330, 5380, 3088, 3082, 3080, 5386, 4458,
     5402, 5408, 5471, 5436, 3076, 3075, 3070, 5443, 5477, 5493,
     3065, 3057, 3053, 4914, 3097, 3418, 3039, 3028, 3024, 3016,
     3013, 3012, 3008, 3007, 3004, 2999, 2976, 2975, 2985, 2976,
     2983, 2970, 2972, 2962,    0, 3295, 2950, 2959, 2945, 2947,
        0, 2942, 2945, 3350, 2925, 2941, 2919,    0, 2918, 5563,
     5633, 5703, 3528,10320, 3526, 5733, 3817, 2901, 2899, 2898,
     3692,10320, 3708,    0, 2884, 2872, 2863, 3922,10320, 3947,
     4025, 3985, 4098,10320, 4014,    0, 2855, 2853, 2843, 4066,

     4281, 4097,10320, 4254, 4348, 4283,10320, 4315,    0, 2836,
     2829, 2810, 5792, 2794, 2780, 2778, 2755, 2746, 2730,  235,
      245,  263,  275,  295,  310,  327,  332,  364,  369,  403,
      413,  417,  419,  444, 5512, 5802, 5808,  464,  488,  500,
      504,  509, 5827, 5859, 5865,  528,  533,  543, 4559, 5884,
     5891, 5916,  547,  557,  569,  603,  607, 5923, 5942, 5948,
      707,  712,  720,  750,  765, 5054, 5104, 3530,  789,  795,
      805, 3567,  811,  813,  815,  827,  834,  844,  867,  876,
      887,  897,  907,  923,  925,  931,  953,  957,  966,  971,
      973,  998, 1002, 1006, 1030, 1036, 1038, 1040, 1049, 1071,

     1075, 5958, 5974, 5980, 1098, 1100, 1119, 1136, 1140, 5999,
     6014, 6038, 1173, 1177, 1192, 4627, 6049, 6064, 6070, 1203,
     1214, 1231, 1257, 1278, 6089, 6104, 6128, 1280, 1282, 1308,
     1320, 1331, 5175, 5207, 3597, 1337, 1341, 1362, 3657, 1369,
     1404, 1414, 1418, 1425, 1429, 1450, 1452,    0, 4378,    0,
     1477, 1480, 1480, 4396, 1482, 4402, 1482, 4414, 1482, 1488,
     1493, 1526,    0,10320, 4462,    0, 1506, 1508, 1522, 4463,
    10320,10320, 4602,    0, 1523, 1529, 1537, 6198, 4686, 6268,
     4603,10320, 4648, 4672,10320, 6338, 4680,10320, 4753, 6408,
     6478, 4681,10320, 4765,    0, 1541, 1549, 1626, 1631, 1637,

     1645, 1655, 1656, 1658, 6488, 6494, 6513, 1659, 1668, 1672,
     1674, 1675, 1685, 6545, 6551, 6570, 1698, 1699, 1715, 1719,
     1731, 6577, 6602, 6609, 1736, 1741, 1757, 1758, 1772, 1776,
     1803, 1807, 1808, 3673, 1812, 1816, 1818, 1821, 1833, 1835,
     1860, 1917, 1918, 1921, 1924, 1949, 1972, 1973, 6628, 6634,
     6644, 1996, 1997, 1999, 2003, 2004, 2009, 6660, 6666, 6685,
     2014, 2016, 2024, 2025, 2032, 6700, 6724, 6735, 2033, 2056,
     2116, 2118, 2120, 2126, 2137, 2141, 2146, 3727, 2151, 2154,
     2155, 2157, 2175, 2180, 2183, 2192,    0, 2201,    0, 2199,
        0, 2211,    0,    0, 4767,10320, 4779,    0, 2204, 2206,

     2207, 6805,10320, 4780,    0, 2209, 2217, 2226, 4781,10320,
     4817,    0, 2232, 2241, 2246, 6875,10320, 4826,    0, 2255,
     2256, 2272,10320, 4830,    0, 2291, 2293, 2315, 4835,10320,
     2374, 2375, 2377, 2379, 2385, 2390, 2404, 2411, 2415, 2416,
     2429, 2440, 2444, 2445, 2455, 2465, 2504, 2510, 2513, 2514,
     2519, 2527, 2549, 2576, 2633, 2635, 2640, 2649,    0, 4846,
        0,10320, 4847,    0, 2650, 2654, 2667, 4848,10320,10320,
     4887,    0, 2678, 2682, 2683, 2685, 2695, 2697, 2710, 2711,
     2714, 2715, 2717,10320, 6945, 6965, 6985, 7005, 7025, 7045,
     7056, 7075, 7095, 7110, 7125, 7140, 7155, 7170, 7185, 7205,

     7214, 7227, 7246, 7266, 2783, 7281, 7292, 2788, 7306, 7321,
     7336, 7351, 7366, 7381, 7396, 7411, 7426, 7441, 7456, 7471,
     7486, 7501, 7516, 7531, 7546, 7561, 7576, 2802, 2813, 7585,
     7593, 2872, 7612, 7623, 7642, 7662, 7682, 7691, 7699, 2820,
     7713, 7724, 2865, 7738, 7753, 7768, 7783, 7798, 7813, 7828,
     7843, 7858, 7873, 7888, 7903, 7918, 7933, 7948, 7963, 7978,
     7993, 8008, 8023, 8038, 8053, 8068, 8083, 8098, 8113, 8128,
     8143, 8158, 8173, 8188, 8203, 8218, 8233, 8248, 8263, 8278,
     8293, 2935, 3176, 3485, 8302, 2843, 8321, 8333, 8352, 8371,
     8382, 8396, 8411, 8426, 8441, 8456, 8471, 8486, 8501, 8516,

     8531, 8546, 8561, 8576, 8591, 8606, 8621, 8636, 8651, 8666,
     8681, 8696, 8711, 8726, 8741, 8756, 8771, 8786, 8801, 8816,
     8831, 8846, 8861, 8876, 8891, 8906, 8921, 8936, 8951, 8966,
     8981, 8996, 9011, 9026, 9041, 2928, 9050, 9069, 9089, 9104,
     9115, 9129, 9144, 9159, 9174, 9189, 9204, 9219, 9234, 9249,
     9264, 9279, 9294, 9309, 9324, 9339, 9354, 9369, 9384, 9399,
     9414, 9429, 9444, 9459, 9474, 9489, 9504, 9519, 9534, 9549,
     9564, 9579, 9594, 9609, 9624, 9644, 9664, 9684, 9704, 9724,
     9739, 9754, 9769, 9784, 9799, 9814, 9829, 9844, 9859, 9874,
     9889, 9904, 9919, 9934, 9949, 9964, 9979, 9994,10009,10024,

    10039,10054,10074,10094,10114,10129,10144,10159,10179,10199,
    10219,10239,10259,10279,10299
    } ;

static const flex_int16_t yy_def[1816] =
    {   0,
     1585, 1585, 1584,    3, 1584,    5, 1584,    7, 1586, 1586,
     1587, 1587, 1588, 1588, 1584,   15, 1588, 1588,    3,   19,
     1588, 1588, 1588, 1588, 1589, 1589, 1584, 1590, 1584, 1584,
     1584, 1584, 1590, 1590, 1590, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1591, 1592, 1584,
     1591, 1584, 1593, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1594, 1584, 1584, 1594, 1584, 1584,   64, 1595, 1596,   64,
     1584, 1584, 1584, 1584, 1584, 1597,   62, 1597, 1584,   78,
     1598, 1599,   78, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,

     1584, 1584, 1584,   93, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1600, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1601, 1601, 1601, 1584, 1584, 1584, 1584, 1584, 1584,
     1602, 1600, 1584, 1584, 1584, 1584, 1584, 1591, 1584, 1584,
     1584, 1584, 1584,  132,  132, 1584, 1584, 1584, 1584, 1584,
     1584, 1590, 1590, 1590, 1590, 1584, 1584, 1584, 1603, 1584,
     1590, 1590, 1590, 1584, 1604, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1605,   43, 1606,
     1584, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1584, 1584, 1584,

     1584, 1584, 1584, 1584, 1607, 1584, 1584, 1591, 1591, 1591,
     1592, 1584, 1584, 1584, 1584, 1584, 1584, 1608, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1609,   64, 1584, 1610, 1611,
       64, 1584, 1584, 1584, 1584, 1612, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1609, 1584, 1613, 1584,  244, 1614, 1615,
     1616, 1615, 1584, 1584, 1584, 1617, 1584, 1617,  258, 1584,
     1584, 1584, 1584,   64, 1584, 1584, 1584, 1584, 1584, 1584,
     1618, 1619, 1584, 1620, 1621, 1619, 1584, 1584, 1584, 1622,
     1584, 1618, 1584, 1623, 1584,  282, 1624, 1625, 1626, 1625,
     1584, 1584, 1584, 1627, 1584, 1627,  296, 1584, 1584, 1584,

     1619, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1628, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1629, 1584, 1584, 1584,
     1584, 1630, 1630, 1630, 1584, 1584, 1584, 1584, 1631, 1631,
     1584, 1584, 1584, 1584, 1632, 1584, 1633, 1634, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1635, 1636, 1637, 1584,
     1637, 1584, 1584, 1638, 1584, 1584, 1584, 1584, 1584, 1639,
     1584, 1639, 1640, 1639, 1641, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1641, 1641, 1641, 1641, 1641, 1641,

     1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641,
     1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1584, 1584,
     1584, 1584, 1638, 1638, 1638, 1638, 1584, 1638, 1638, 1638,
     1584, 1642, 1584, 1584, 1584, 1584, 1643, 1584, 1584, 1644,
     1584, 1645, 1645, 1646, 1645, 1584, 1584, 1584, 1584, 1647,
     1648, 1648, 1584, 1584, 1584, 1649, 1584, 1650, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1651, 1652, 1652, 1584, 1584,
     1584, 1644, 1645,  473, 1653, 1584, 1644, 1654, 1655, 1656,
     1653, 1584, 1584, 1584, 1653, 1584, 1654, 1655, 1656, 1653,
     1584, 1584, 1584,  473, 1657, 1658, 1658, 1659, 1658, 1584,

     1584, 1584, 1660, 1584, 1584, 1584, 1584, 1584, 1661, 1662,
     1662, 1584, 1584, 1584, 1661, 1584, 1584, 1584, 1584, 1663,
     1584, 1664, 1664, 1665, 1664, 1584, 1584, 1584, 1584, 1666,
     1667, 1667, 1584, 1584, 1584, 1668, 1584, 1669, 1584, 1584,
     1584, 1584, 1584, 1670, 1671, 1671, 1584, 1584, 1584, 1663,
     1664,  551, 1672, 1584, 1663, 1673, 1674, 1675, 1672, 1584,
     1584, 1584, 1672, 1584, 1673, 1674, 1675, 1672, 1584, 1584,
     1584,  551, 1676, 1677, 1677, 1678, 1677, 1584, 1584, 1584,
     1679, 1584, 1584, 1584, 1584, 1584, 1680, 1681, 1681, 1584,
     1584, 1584, 1584, 1584, 1682, 1680, 1584, 1584, 1584, 1584,

     1584, 1584, 1584, 1683, 1584, 1584, 1584, 1584, 1584, 1684,
     1584, 1584, 1584, 1685, 1686, 1685, 1687, 1584, 1584, 1584,
     1584, 1688, 1688, 1685, 1685, 1685, 1685, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1689, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1584, 1690,
     1584, 1584, 1584, 1584, 1690, 1690, 1690, 1690, 1584, 1584,
     1690, 1690, 1690, 1690, 1690, 1690, 1584, 1688, 1584, 1688,
     1688, 1688, 1688, 1691, 1691, 1692, 1584, 1693, 1694, 1695,

     1695, 1584, 1584, 1584, 1584, 1584, 1696, 1696, 1696, 1584,
     1584, 1584, 1584, 1584, 1697, 1697, 1698, 1584, 1584, 1584,
     1699, 1584, 1584, 1584, 1584, 1584, 1584, 1700, 1700, 1700,
     1584, 1584, 1584, 1584, 1584, 1701, 1692, 1702, 1584, 1584,
     1584, 1703, 1692, 1692, 1701, 1704, 1692, 1584, 1584, 1584,
     1705, 1584, 1584, 1584, 1706, 1584, 1584, 1584, 1692,  745,
     1584, 1584,  745, 1692,  745, 1707, 1708, 1693, 1709, 1710,
     1711, 1584, 1584, 1584, 1712, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1713, 1713, 1713, 1584, 1584, 1584, 1584,
     1584, 1713, 1584, 1714, 1584, 1715, 1716, 1717, 1717, 1584,

     1584, 1584, 1584, 1584, 1718, 1718, 1718, 1584, 1584, 1584,
     1584, 1584, 1719, 1719, 1720, 1584, 1584, 1584, 1721, 1584,
     1584, 1584, 1584, 1584, 1584, 1722, 1722, 1722, 1584, 1584,
     1584, 1584, 1584, 1723, 1714, 1724, 1584, 1584, 1584, 1725,
     1714, 1714, 1723, 1726, 1714, 1584, 1584, 1584, 1727, 1584,
     1584, 1584, 1728, 1584, 1584, 1584, 1714,  843, 1584, 1584,
      843, 1714,  843, 1729, 1730, 1715, 1731, 1732, 1733, 1584,
     1584, 1584, 1734, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1735, 1735, 1735, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1736, 1736, 1735, 1584, 1737, 1737, 1584,

     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1738, 1584, 1584,
     1739, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1584, 1584,
     1740, 1740, 1740, 1740, 1740, 1584, 1740, 1584, 1740, 1584,
     1584, 1584, 1740, 1740, 1584, 1740,  948, 1740, 1584, 1584,
     1584, 1740, 1740, 1584, 1584, 1740, 1741, 1741, 1742, 1743,
     1743, 1743, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1744, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1745, 1584, 1584, 1584, 1584, 1584, 1746,

     1584, 1584, 1584, 1747, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1748, 1748, 1584, 1584, 1584, 1584, 1584, 1742, 1584,
     1019, 1749, 1749, 1750, 1749, 1584, 1584, 1584, 1751, 1752,
     1749, 1749, 1753, 1754, 1584, 1584, 1584, 1755, 1756, 1756,
     1584, 1584, 1584, 1757, 1584, 1758, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1759, 1760,
     1760, 1760, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1761, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1762, 1584, 1584, 1584, 1584, 1584, 1763,
     1584, 1584, 1584, 1764, 1584, 1584, 1584, 1584, 1584, 1584,

     1584, 1765, 1765, 1584, 1584, 1584, 1584, 1584, 1759, 1584,
     1109, 1766, 1766, 1767, 1766, 1584, 1584, 1584, 1768, 1769,
     1766, 1766, 1770, 1771, 1584, 1584, 1584, 1772, 1773, 1773,
     1584, 1584, 1584, 1774, 1584, 1775, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1776, 1584, 1777, 1584, 1584, 1584, 1584, 1584,
     1778, 1584, 1584, 1584, 1584, 1584, 1584, 1779, 1584, 1780,
     1780, 1780, 1171, 1584, 1171, 1584, 1171, 1584, 1584, 1584,
     1171, 1584, 1171, 1176, 1584, 1584, 1584, 1584, 1584, 1171,
     1171, 1171, 1171, 1584, 1171, 1176, 1584, 1584, 1584, 1171,

     1171, 1584, 1584, 1171, 1171, 1171, 1584, 1171, 1176, 1584,
     1584, 1584, 1171, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1781, 1782, 1782, 1584, 1584, 1584,
     1584, 1584, 1783, 1784, 1784, 1584, 1584, 1584, 1785, 1786,
     1787, 1787, 1584, 1584, 1584, 1584, 1584, 1788, 1788, 1788,
     1584, 1584, 1584, 1584, 1584, 1789, 1789, 1790, 1584, 1584,
     1584, 1791, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,

     1584, 1792, 1793, 1793, 1584, 1584, 1584, 1584, 1584, 1794,
     1795, 1795, 1584, 1584, 1584, 1796, 1797, 1798, 1798, 1584,
     1584, 1584, 1584, 1584, 1799, 1799, 1799, 1584, 1584, 1584,
     1584, 1584, 1800, 1800, 1801, 1584, 1584, 1584, 1802, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1803, 1584, 1804,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1805, 1584, 1171, 1176, 1584, 1584, 1584, 1584,
     1584, 1584, 1171, 1176, 1584, 1584, 1584, 1171, 1171, 1171,
     1584, 1584, 1171, 1584, 1584, 1171, 1584, 1584, 1171, 1171,
     1171, 1171, 1584, 1171, 1176, 1584, 1584, 1584, 1584, 1584,

     1584, 1584, 1584, 1584, 1806, 1806, 1806, 1584, 1584, 1584,
     1584, 1584, 1584, 1807, 1807, 1807, 1584, 1584, 1584, 1584,
     1584, 1808, 1808, 1808, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1790, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1792, 1792,
     1792, 1584, 1584, 1584, 1584, 1584, 1584, 1794, 1794, 1794,
     1584, 1584, 1584, 1584, 1584, 1797, 1797, 1797, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1801, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1809, 1584, 1810, 1584,
     1811, 1584, 1812, 1813, 1584, 1584, 1171, 1176, 1584, 1584,

     1584, 1171, 1584, 1171, 1176, 1584, 1584, 1584, 1171, 1584,
     1171, 1176, 1584, 1584, 1584, 1171, 1584, 1171, 1176, 1584,
     1584, 1584, 1584, 1171, 1176, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1814, 1584,
     1815, 1584, 1171, 1176, 1584, 1584, 1584, 1584, 1584, 1584,
     1171, 1176, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584,    0, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,

     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,

     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,

     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584
    } ;

static const flex_int16_t yy_nxt[10391] =
    {   0,
     1584, 1584,   29,   30,   31,   29,   30,   31,  158,  164,
      355,  158,  164,  355,  159,  165,  214,  263,  166,  160,
      160,  166,  304,  366,   32,  304,  247,   36,  159,  165,
      167, 1584,  168, 1584,  169,  169,  169,  202,  248,  203,
      203,  203,  204,  333,  333,  204,  246,  246,  246,  342,
      353,  354,  342,  360,  361,  248,  367,  305,  205,  205,
      205,  371, 1584,  343,  206,  372,  372,   33,   34,   35,
       33,   34,   35,   37,   38,   39,   40,   38,   37,   41,
       42,   37,   37,   43,   44,   37,   45,   37,   46,   47,
       48,   48,   48,   37,   49,   37,   37,   50,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   52,   53,
       44,   37,   54,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   55,   37,   37,   56,   56,
       57,   58,   59,   37,   60,   39,   40,   60,   61,   41,
       62,   61,   63,   52,   37,   61,   64,   65,   66,   47,
       67,   67,   67,   68,   49,   61,   61,   69,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   52,   70,
       37,   63,   54,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   37,   37,   71,   56,   56,
       72,   73,   74,   37,   75,   39,   40,   75,   76,   41,
       77,   76,   63,   52,   44,   76,   78,   65,   79,   76,
       80,   80,   80,   81,   49,   76,   76,   82,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   52,   83,
       44,   63,   54,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   37,   37,   37,   56,   56,
       84,   85,   86,   88,   89,   90,   88,  153,  154,  155,
       91,  650,   91,   91,   91,   91,  651,   91,   92,  161,

      715,  153,  154,  155,  162,   91,  153,  154,  155,  163,
      721,  153,  154,  155,  285,  308,  600,   91,   93,   91,
      222,  204,  304,  222,  204,  304,  286,  207,  728,  208,
      208,  208,  223,  630,  224,  631,  225,  225,  225,  210,
      994,  319,  890,  286,  319,   91,  891,   94,   94,   95,
       96,   97,   88,   89,   90,   88,  210,  305,  280,   91,
     1401,   91,   91,   91,   91,  227,   91,   92,  346,  346,
      346,  353,  354,  228,   91,  737,  320,  250,  229,  593,
      350,  204,  230,  350,  204,  228,   91,   93,   91,  257,
      251,  594, 1000,  322,  230,  258,  231, 1402,  595,  259,

      259,  259,  236,  206,  153,  154,  155,  347,  252,  348,
      348,  348,  323,  606,   91,  351,   94,   94,   95,   96,
       97,   99,  100,  101,   99,  232,  233,  234,  102, 1004,
      102,  102,  102,  102, 1403,  102,  103,  253,  254,  255,
      153,  154,  155,  102,  368,  214,  263,  181,  369,  260,
      261,  262,  370,  333,  333,  102,  104,  102,  228,  295,
      226,  226,  226,  267,  434,  296,  267,  434,  743,  297,
      297,  297,  280,  434,  214,  268,  434,  269,  751,  270,
      270,  270, 1012,  102, 1404,  105,  105,  106,  107,  108,
       99,  100,  101,   99,  376,  377,  378,  102,  644,  102,

      102,  102,  102,  593,  102,  103,  421,  421,  421,  755,
      272,  645,  102,  304,  204,  594,  304,  204,  273,  298,
      299,  300,  595,  274,  102,  104,  102,  275,  283, 1235,
      284,  284,  284,  171,  214,  263,  206,  434,  214,  172,
      434,  276,  161,  173,  153,  154,  155,  273,  305,  271,
      271,  271,  102, 1411,  105,  105,  106,  107,  108,  110,
      111,  112,  110,  174,  113, 1412,  175,  171,  176, 1022,
      277,  278,  279,  172, 1413,  288,  601,  173,  607,  601,
      177,  607,  162,  273,  153,  154,  155,  178,  289,  205,
      205,  205,  275, 1243,  114,  435,  435,  174, 1420,  436,

      175,  163,  176,  153,  154,  155,  290,  161, 1421,  153,
      154,  155, 1250,  358,  344,  153,  154,  155,  433,  433,
      433,  345, 1428,  115,  115,  116,  117,  118,  110,  111,
      112,  110,  181,  113, 1429,  291,  292,  293,  158,  164,
      620,  158,  164,  620,  159,  165,  353,  619,  166,  160,
      160,  166,  202,  909,  169,  169,  169,  407,  159,  165,
      167,  910,  168,  114,  169,  169,  169,  362, 1031,  431,
      362,  212, 1430,  432,  432,  432,  246,  246,  246,  376,
      377,  378,  363,  205,  205,  205,  449,  449,  449,  363,
      360,  361,  115,  115,  116,  117,  118,  119,  109,  120,

      121,  109,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  122,  122,  122,  119,  119,  119,
      119,  119,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  119,  119,  119,  119,  119,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      123,  122,  122,  122,  122,  122,  122,  124,  122,  119,
      119,  119,  125,  125,  126,  127,  128,  110,  129,  130,
      110,  364, 1258,  169,  169,  169,  181, 1431,  439,  181,
      225,  225,  225,  365,  422, 1432,  203,  203,  203,  228,
      131,  226,  226,  226,  181,  228,  365,  226,  226,  226,

      365,  181,  132,  602,  602,  133,  395,  603,  396,  397,
      472,  472,  472,  365,  181, 1038,  319,  181,  401,  319,
      181,  621,  361,  376,  377,  378,  376,  377,  378,  405,
     1433,  115,  115,  116,  117,  118,  110,  129,  130,  110,
      398,  376,  377,  378,  402,  403,  404,  399,  376,  377,
      378,  320,  412,  400, 1266,  413,  504,  505,  506,  131,
     1438,  376,  377,  378,  376,  377,  378,  376,  377,  378,
     1439,  132,  601,  308,  133,  601, 1272,  181, 1440,  464,
     1441,  423,  181,  424,  424,  424,  181,  372,  372,  235,
      235,  235, 1044,  426,  465,  607,  323,  406,  607, 1442,

      115,  115,  116,  117,  118,  134,  408,  181,  134,  766,
      426,  135,  181,   63,   52,  411,  181,  136,   65,  137,
       37,  138,  138,  138,  376,  377,  378,  181,  139,  376,
      377,  378,  775,  376,  377,  378,  409,  457,  181,  418,
      140,  784,   63,  141,  142,  143,  141,  417,  113,  410,
      458,  414, 1060,  613,  376,  377,  378,  614,  614,  376,
      377,  378, 1443,  376,  377,  378,  415,  529,  529,  529,
      362,  416,  797,  362,  376,  377,  378,  207,  144,  208,
      208,  208,  550,  550,  550,  376,  377,  378,  805,  210,
     1072,  440,  363,  225,  225,  225, 1444,  459,  460,  461,

      582,  583,  584,  441,  626,  626,  210,  115,  115,  116,
      117,  118,  141,  142,  143,  141,  222,  113,  813,  222,
      441,  228,  819,  226,  226,  226,  355,  443,  223,  355,
      224,  826,  225,  225,  225,  228, 1084,  451, 1445,  519,
      444,  270,  270,  270,  230,  228,  362,  144,  362,  362,
      251,  362,  608,  608,  230,  494,  609,  228,  445,  495,
      495,  495,  283,  835,  284,  284,  284, 1090,  452,  442,
      363, 1446,  537,  612,  612,  612,  115,  115,  116,  117,
      118,  141,  142,  143,  141,  538,  442,  446,  447,  448,
      339,  339,  339,  647,  467, 1094,  648,  453,  454,  455,

      497, 1447,  228,  841,  131,  849,  342,  251,  228,  342,
      250,  230,  267,  498, 1102,  267,  145,  230,  228,  133,
      343,  614,  614,  251,  268,  468,  269,  230,  270,  270,
      270,  499,  539,  540,  541,  617, 1448,  346,  346,  346,
      853,  252,  618,  618,  618,  115,  115,  116,  117,  118,
      141,  142,  143,  141,  469,  470,  471,  637,  638,  639,
      500,  501,  502, 1302,  520, 1455,  270,  270,  270,  250,
      253,  254,  255,  131,  898,  898,  521,  228,  350,  510,
      434,  350,  251,  434, 1456,  145,  230,  228,  133,  421,
      421,  421,  229,  521,  523,  347,  230,  348,  348,  348,

      252, 1112,  273,  620,  353, 1457,  620,  524,  435,  435,
      511,  275,  436,  351,  115,  115,  116,  117,  118,  147,
      148,  149,  147,  601,  308,  525,  601,  150,  431,  253,
      254,  255,  623,  623,  623,  151,  151,  151, 1310,  512,
      513,  514, 1464,  151,  151,  151,  161,  689,  153,  154,
      155,  690,  690,  690,  526,  527,  528, 1465,  151,  151,
      151,  151,  151,  151,  147,  148,  149,  147, 1317,  572,
      181,  273,  150,  573,  573,  573,  623,  623,  623, 1472,
      151,  151,  151,  522,  424,  424,  424,  431,  151,  151,
      151,  692,  692,  692,  622,  693, 1473,  694,  694,  694,

      522,  626,  626,  151,  151,  151,  151,  151,  151,  179,
      892,  622,  179,  180,  893,  893,  180,  376,  377,  378,
      180,  180, 1121,  181,  180,  180,  180,  180,  181,  601,
      180,  180,  601,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180, 1474,  180, 1325,  655, 1475,  182,  183,
      184,  185,  186,  187,  188,  180,  189,  180,  190,  191,
      192,  193,  180,  194,  195,  196,  197,  180,  180,  180,
      376,  377,  378, 1476,  633,  198,  199,  200,  214,  215,
      216,  634,  602,  602,  272, 1128,  603,  635,  433,  433,
      433,  181,  273,  217,  217,  531, 1477,  274,  246,  246,

      246,  275, 1333,  273,  607,  697, 1482,  607,  289,  698,
      698,  698,  275,  904,  905,  276,  216,  216,  893,  893,
      216,  216,  607,  323,  656,  607,  532, 1483,  216,  620,
      353,  216,  620,  216, 1339,  216,  218,  171,  376,  377,
      378,  893,  893,  172,  277,  278,  279,  173,  235,  235,
      235,  236,  237,  898,  898,  533,  534,  535,  272,  181,
      238,  239,  240,  241,  242,  545,  273,  174,  575, 1484,
      175,  274,  176,  273,  620,  275,  273,  620,  289, 1485,
      288,  576,  275, 1134,  177,  275,  181,  662,  273,  276,
     1486,  178,  227,  289,  864,  663,  546,  275,  913,  577,

      243,  914,  244,  244,  244,  229,  376,  377,  378,  230,
      181,  290,  449,  449,  449,  873,  654,  882,  277,  278,
      279, 1487, 1488,  231, 1489,  547,  548,  549,  578,  579,
      580,  288, 1490,  376,  377,  378,  181, 1491, 1492,  273,
      291,  292,  293,  588,  289, 1493,  657,  658,  275,  181,
     1494,  273,  232,  233,  234,  272,  274,  376,  377,  378,
      275,  181,  290,  281,  181,  282,  282,  282,  274,  659,
     1495,  375,  275,  628,  589,  722,  723,  724,  423,  660,
      424,  424,  424,  376,  377,  378,  276,  629,  375,  661,
      426,  291,  292,  293,  628,  664,  376,  377,  378,  752,

      753,  754,  629,  590,  591,  592,  375,  426,  376,  377,
      378,  376,  377,  378,  628,  277,  278,  279,  307,  307,
      308,  309,  310,  307,  307,  307,  311,  307,  311,  311,
      311,  311,  307,  311,  311,  312,  312,  307,  307,  307,
      307,  311,  307,  307,  313,  307,  307,  307,  307,  307,
      313,  307,  313,  311,  310,  311,  307,  307,  310,  310,
      307,  313,  310,  310,  307,  307,  307,  307,  307,  307,
      310,  307,  307,  310,  313,  310,  307,  310,  314,  307,
      307,  311,  307,  307,  307,  307,  307,  307,  323,  324,
      325,  629,  325,  608,  608,  325,  970,  609,  272,  752,

      753,  754,  982,  326,  326,  181,  273,  776,  777,  778,
      994,  274,  504,  505,  506,  275,  284,  284,  284,  181,
     1000, 1004,  325, 1012, 1405,  325,  325,  325,  665,  276,
      325,  325,  423, 1531,  691,  691,  691, 1532,  325, 1235,
     1533,  325,  677,  325,  426,  325,  327,  334,  334,  334,
     1022,  181,  376,  377,  378,  334,  334,  334,  277,  278,
      279,  426,  181, 1414, 1534,  181,  376,  377,  378,  181,
      334,  334,  334,  334,  334,  334,  336,  181,  337,  337,
     1535,  181,  338,  337, 1243,  795,  339,  339,  339,  796,
      796,  796,  676,  337,  666,  181, 1536,  667,  376,  377,

      378, 1422,  668,  181,  337,  675, 1537,  337,  684,  376,
      377,  378,  376,  377,  378,  682,  376,  377,  378,  529,
      529,  529, 1538, 1250,  376,  377,  378,  678,  376,  377,
      378,  337,  323,  324,  325,  679,  325, 1539,  679,  325,
      681, 1031,  376,  377,  378,  680,  679,  326,  326,  679,
      376,  377,  378,  494,  341,  228,  680,  495,  495,  495,
      820,  821,  822,  850,  851,  852,  325,  442, 1258,  325,
      325,  325, 1540, 1038,  325,  325,  228, 1434,  495,  495,
      495, 1541,  325, 1542,  442,  325, 1266,  325,  442,  325,
      327,  379,  380,  381,  382,  383,  384,  385, 1543,  386,

     1272,  387,  388,  389,  390,  442,  391,  392,  393,  394,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427, 1544,  427,  428,  428,  428,
      427,  427,  427,  427,  427,  429,  429,  430,  429,  429,
      429,  429,  429,  429,  429,  427,  427,  427,  427,  427,
      429,  429,  429,  429,  430,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  427,  427,  427,  427,  427,  427,  427,  427,
      443,  181, 1044, 1060,  181,  716, 1072,  181,  247, 1084,
      473,  473,  473,  444,  850,  851,  852,  230,  717,  679,

      474,  738,  679,  874,  875,  876,  582,  583,  584,  680,
      476,  445,  926,  683, 1090,  926,  716,  474,  181,  612,
      612,  612,  927,  479,  686,  685,  476,  480,  376,  377,
      378,  376,  377,  378,  376,  377,  378, 1094, 1102,  742,
      446,  447,  448,  476,  738,  718,  719,  720,  739,  740,
      741,  477,  836,  478,  478,  478,  479,  433,  433,  433,
      480, 1449, 1545,  481, 1546,  376,  377,  378, 1302, 1547,
      482,  483,  484,  273, 1112,  573,  573,  573,  431, 1458,
      481, 1548,  692,  692,  692,  522,  756,  757,  758, 1549,
     1310,  739,  740,  741,  967,  967,  967, 1550, 1466,  837,

      838,  839,  522,  482,  483,  484,  427,  427,  427,  427,
      427,  485,  427,  486,  485,  427,  427,  427,  485,  485,
      427, 1551,  427,  487,  487,  487,  488,  427,  485,  485,
      489,  485,  485,  490,  485,  485,  485,  485,  485,  485,
      485,  427,  485,  427,  427,  427,  485,  485,  485,  485,
      490,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  427,  427,
      427,  427,  427,  491,  492,  493,  510,  836,  698,  698,
      698, 1552,  443, 1317,  228, 1553,  515,  515,  515,  229,
      228, 1121, 1584,  230,  423,  444,  692,  692,  692,  230,

      928,  443, 1325,  928,  700,  939, 1554,  511,  939,  228,
      929, 1128,  228,  445,  444,  940, 1478,  251,  230, 1555,
     1556,  230, 1333,  759,  837,  838,  839,  760,  760,  760,
      738,  964,  445,  476,  964,  701,  512,  513,  514,  523,
     1557,  965,  446,  447,  448, 1339,  742,  285, 1558,  551,
      551,  551,  524,  983,  984,  985,  275, 1134, 1559,  552,
     1560,  446,  447,  448,  702,  703,  704,  443, 1561,  375,
      525,  628,  629,  708,  375,  228,  552,  739,  740,  741,
      444,  228,  628,  554,  230,  693,  498,  694,  694,  694,
      230,  629,  814,  756,  757,  758,  840,  375,  445,  526,

      527,  528,  554, 1584,  709,  815,  628,  968,  968,  968,
      555,  629,  556,  556,  556,  557,  722,  723,  724,  558,
      375,  628,  559,  814,  995,  996,  997,  446,  447,  448,
     1001, 1002, 1003,  710,  711,  712, 1584,  629,  423,  559,
      690,  690,  690,  854,  855,  856, 1005, 1006, 1007,  752,
      753,  754,  816,  817,  818, 1584,  375,  423,  628,  692,
      692,  692,  560,  561,  562,  427,  427,  427,  427,  427,
      563,  427,  564,  563,  427,  427,  427,  563,  563,  427,
      629,  563,  565,  565,  565,  566,  427,  563,  563,  567,
      563,  563,  568,  563,  563,  563,  563,  563,  563,  563,

      427,  563,  427,  427,  427,  563,  563,  563,  563,  568,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  427,  427,  427,
      427,  427,  569,  570,  571,  588,  763,  763,  763, 1405,
     1576,  451, 1235,  273, 1414,  596,  596,  596,  274,  228,
     1577,  451,  275,  926,  251, 1243,  926,  729,  230,  228,
      776,  777,  778,  927,  251,  228,  589,  738,  230, 1422,
      498,  554,  452,  572,  230,  273, 1578,  573,  573,  573,
     1250, 1258,  452,  928,  840,  764,  928,  522,  730,  765,
      765,  765,  738,  929, 1434,  590,  591,  592,  334,  334,

      334,  453,  454,  455,  522, 1579,  334,  334,  334, 1266,
     1272,  453,  454,  455,  739,  740,  741,  731,  732,  733,
     1449,  334,  334,  334,  334,  334,  334,  627,  627,  627,
     1580,  854,  855,  856,  738,  627,  627,  627,  746,  739,
      740,  741,  857,  796,  796,  796,  858,  858,  858,  836,
      627,  627,  627,  627,  627,  627,  669,  669,  669,  669,
      669,  836,  669,  670,  836,  669,  669,  669,  844, 1302,
      669,  669, 1073, 1074, 1075, 1458,  671,  669, 1581, 1310,
      669,  739,  740,  741, 1466,  739,  740,  741,  820,  821,
      822,  669, 1582,  669,  670,  669,  837,  838,  839, 1085,

     1086, 1087, 1091, 1092, 1093, 1095, 1096, 1097,  837,  838,
      839,  837,  838,  839, 1317,  837,  838,  839,  669,  669,
      669,  669,  669,  672,  673,  674,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427, 1325,  427,  688,  688,  688,  427,  427,  427,  427,
      427,  429,  429,  430,  429,  429,  429,  429,  429,  429,
      429,  427,  427,  427,  427,  427,  429,  429,  429,  429,
      430,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  427,  427,
      427,  427,  427,  427,  427,  427,  476, 1584, 1478,  423,

     1583,  424,  424,  424,  467, 1333,  478,  478,  478,  479,
      467,  426,  228,  480, 1339,  375,  696,  251,  228,  628,
     1584,  230,  423,  251,  691,  691,  691,  230,  426,  850,
      851,  852,  629,  696,  426,  468,  497,  760,  760,  760,
      738,  468,  939,  375,  228,  939,  497,  628,  629,  498,
     1405,  426,  940,  230,  228, 1045,  482,  483,  484,  498,
     1414,  497, 1422,  230,  469,  470,  471,  499, 1046,  228,
      469,  470,  471,  476,  498, 1434, 1449,  499,  230, 1458,
     1466,  477, 1478,  736,  736,  736,  479,  739,  740,  741,
      480,  374,  499,  481,  374, 1400,  500,  501,  502,  437,

      374,  785, 1019, 1019, 1019,  437,  500,  501,  502,  228,
      481,  982,  743,  604,  444, 1047, 1048, 1049,  230,  604,
      707,  500,  501,  502,  610,  554,  861,  861,  861,  743,
      610,  374,  786,  482,  483,  484,  443,  374,  557,  874,
      875,  876,  558,  699,  247, 1399,  473,  473,  473,  444,
      983,  984,  985,  230,  616,  926,  474,  181,  926,  970,
      616,  787,  788,  789,  510,  927,  181,  445,  995,  996,
      997,  510,  228,  474,  181,  629,  437,  229,  437,  228,
      616,  230,  437,  616,  229,  560,  561,  562,  230,  616,
     1021, 1021, 1021, 1171,  628,  511,  446,  447,  448,  744,

      743,  375,  511, 1192,  376,  377,  378,  477,  629,  745,
      745,  745,  746,  376,  377,  378,  480,  743,  628,  747,
      375,  376,  377,  378,  512,  513,  514,  523,  629,  181,
      737,  512,  513,  514,  523,  273,  747,  628,  964,  895,
      524,  964,  273,  895,  275,  895,  895,  524,  965,  375,
      862,  275,  895, 1193,  863,  863,  863,  836,  525,  748,
      749,  750,  744,  629,  628,  525,  375, 1135, 1363, 1362,
      477,  181,  763,  763,  763,  746,  376,  377,  378,  480,
     1136, 1361,  747, 1360,  798, 1359, 1358,  526,  527,  528,
      523, 1357,  273,  737,  526,  527,  528,  289,  273,  747,

      806,  275, 1356,  524,  837,  838,  839,  275,  273, 1355,
      181, 1354, 1190,  576, 1353,  799, 1352,  275,  376,  377,
      378,  525,  748,  749,  750,  767, 1351, 1137, 1138, 1139,
     1350,  807, 1349,  768, 1348,  769,  769,  769,  770, 1170,
      587, 1347,  771,  181,  800,  801,  802, 1001, 1002, 1003,
      526,  527,  528, 1005, 1006, 1007,  445,  376,  377,  378,
      808,  809,  810,  531,  882,  928,  531,  181,  928,  581,
     1172,  273,  574, 1346,  273,  929,  289,  873, 1345,  289,
      275,  864,  716,  275,  181,  772,  773,  774,  785, 1344,
      376,  377,  378, 1343,  532,  717,  228,  532,  792,  792,

      792,  444,  764, 1173, 1134,  230,  765,  765,  765,  738,
     1109, 1109, 1109,  716,  376,  377,  378, 1136, 1332,  786,
      841,  827, 1331,  533,  534,  535,  533,  534,  535,  273,
     1128,  376,  377,  378,  576, 1324, 1584,  841,  275, 1584,
     1323, 1121,  718,  719,  720, 1309, 1584, 1308,  787,  788,
      789,  554,  828, 1112,  553,  181,  739,  740,  741,  545,
     1301,  556,  556,  556,  557,  853, 1300,  273,  558, 1299,
     1102,  794,  289, 1021, 1021, 1021,  275,  930,  545, 1298,
      849,  829,  830,  831,  575, 1297,  273,  604,  794,  604,
      546,  289,  273,  604,  841,  275,  423,  576,  690,  690,

      690,  275,  376,  377,  378,  765,  765,  765,  738,  546,
     1296,  560,  561,  562, 1295,  577,  181, 1094, 1294,  547,
      548,  549, 1293, 1090, 1584, 1292, 1584, 1584,  968,  968,
      968, 1273, 1274, 1275, 1584, 1073, 1074, 1075,  547,  548,
      549,  554,  835,  181,  578,  579,  580, 1291, 1181,  555,
     1290,  834,  834,  834,  557,  739,  740,  741,  558, 1084,
      544,  559, 1289,  376,  377,  378,  575,  931,  826,  575,
      536, 1111, 1111, 1111,  273, 1288,  883,  273,  559,  576,
      819,  841,  576,  275,  273, 1287,  275,  813, 1286,  524,
      376,  377,  378,  275, 1285,  181, 1188,  577,  841, 1188,

      577,  560,  561,  562,  523, 1072, 1189,  884,  530, 1284,
      181,  805,  285,  522,  551,  551,  551,  524, 1085, 1086,
     1087,  275, 1283,  797,  552, 1191,  578,  579,  580,  578,
      579,  580,  588, 1282, 1200,  525,  885,  886,  887,  588,
      273,  552,  376,  377,  378,  274, 1281,  273,  181,  275,
     1584, 1202,  274, 1584, 1202, 1060,  275,  376,  377,  378,
     1584, 1203,  509,  589,  526,  527,  528,  842, 1280,  181,
      589,  784,  716,  503,  496,  555, 1279,  843,  843,  843,
      844, 1091, 1092, 1093,  558,  717,  775,  845,  181, 1278,
      766,  932,  590,  591,  592,  376,  377,  378,  835,  590,

      591,  592, 1584,  716,  845, 1584, 1277,  858,  858,  858,
      836, 1276, 1584, 1095, 1096, 1097,  376,  377,  378,  759,
     1044,  181, 1046,  760,  760,  760,  738,  846,  847,  848,
      842, 1265,  718,  719,  720,  376,  377,  378,  555, 1264,
      861,  861,  861,  844, 1038, 1584, 1257,  558, 1584, 1256,
      845, 1031, 1242, 1584,  933, 1584, 1584,  837,  838,  839,
      181,  835, 1241, 1584,  181, 1022,  475,  845,  376,  377,
      378, 1234,  181,  739,  740,  741,  755, 1233, 1584, 1232,
     1201, 1584, 1111, 1111, 1111, 1340, 1341, 1342, 1584, 1012,
      846,  847,  848,  865,  934, 1231,  610,  181,  610,  751,

      935,  866,  610,  867,  867,  867,  868,  376,  377,  378,
      869,  376,  377,  378,  181, 1584, 1230,  743, 1584,  376,
      377,  378,  936, 1584,  525, 1584, 1584, 1584,  939, 1584,
     1584,  939, 1584, 1584,  181, 1229, 1228, 1584,  940, 1584,
     1584, 1004,  181, 1584,  376,  377,  378,  181, 1227, 1226,
     1584, 1000, 1204,  870,  871,  872,  883, 1225,  937,  181,
      737,  376,  377,  378,  273, 1224,  896,  896,  896,  524,
      862, 1223, 1378,  275,  863,  863,  863,  836,  994,  938,
      466,  376,  377,  378, 1222,  728,  943,  884,  456,  376,
      377,  378,  476, 1221,  376,  377,  378, 1435, 1436, 1437,

      477, 1013,  969,  969,  969,  479,  376,  377,  378,  480,
      721, 1220, 1584,  715,  738, 1584,  885,  886,  887,  899,
      899,  899, 1584, 1219,  837,  838,  839,  899,  899,  899,
     1218,  181, 1013,  857, 1273, 1274, 1275,  858,  858,  858,
      836,  982,  899,  899,  899,  899,  899,  899,  627,  627,
      627,  941,  482,  483,  484,  450,  627,  627,  627, 1217,
      707, 1014, 1015, 1016, 1479, 1480, 1481, 1584,  181,  442,
     1584,  627,  627,  627,  627,  627,  627, 1584,  376,  377,
      378, 1584,  181, 1216, 1584,  699,  181,  837,  838,  839,
      181, 1584, 1215, 1584, 1214,  970, 1584,  629, 1206,  628,

      181,  375, 1205, 1584, 1584,  629,  628, 1584, 1584, 1584,
      375, 1584, 1584, 1169, 1584,  376,  377,  378, 1584, 1584,
     1213, 1168,  942,  181, 1340, 1341, 1342,  181, 1167,  376,
      377,  378, 1166,  376,  377,  378, 1380,  376,  377,  378,
     1435, 1436, 1437, 1165,  945, 1164, 1163,  376,  377,  378,
      379,  380,  381,  382,  383,  384,  385, 1162,  386, 1161,
      387,  388,  389,  390,  944,  391,  392,  393,  394, 1160,
      376,  377,  378, 1159,  376,  377,  378,  946,  946,  946,
      946,  946, 1158,  946,  947, 1157,  946,  946,  946,  814,
     1584,  946,  946, 1584, 1479, 1480, 1481,  948,  946, 1156,

     1584,  946,  815, 1584, 1155, 1154, 1584, 1584, 1153,  181,
     1584, 1152,  946, 1584,  946,  947,  946, 1584, 1584, 1151,
      814, 1584,  181, 1150, 1149,  375,  181,  949, 1584,  294,
      891,  891, 1148,  953,  587, 1147, 1146,  882,  287,  946,
      946,  946,  946,  946,  950,  951,  952, 1145,  962,  816,
      817,  818,  581, 1144,  574, 1143,  376,  377,  378, 1379,
      954, 1142, 1584,  873, 1141, 1584, 1140,  864, 1110,  376,
      377,  378, 1584,  376,  377,  378,  955,  955,  955,  955,
      955,  181,  955,  956,  553,  955,  955,  955, 1108,  964,
      955,  955,  964, 1107,  853, 1101,  957,  955, 1100,  965,

      955,  849, 1099, 1098,  971,  963, 1584,  841,  181, 1584,
     1089,  955,  228,  955,  956,  955, 1584,  498, 1088,  700,
      958,  230,  835, 1188, 1083,  181, 1188,  228,  376,  377,
      378,  544,  251, 1189, 1082,  972,  230, 1081,  955,  955,
      955,  955,  955,  959,  960,  961,  700,  826, 1381,  271,
      701, 1381, 1080,  966,  228,  376,  377,  378, 1382,  251,
      536, 1079, 1078,  230,  973,  974,  975,  819, 1077, 1076,
      708,  813,  376,  377,  378, 1071,  530,  701,  228,  702,
      703,  704,  708,  498, 1070,  708, 1384,  230, 1069, 1384,
      228,  805,  729,  228, 1068,  498, 1385,  522,  498,  230,

      228,  709,  230, 1067,  729,  498,  702,  703,  704,  230,
     1066,  797,  228,  709,  256, 1584,  709,  498, 1584, 1058,
      729,  230,  509,  730, 1057, 1584, 1584,  814,  228, 1584,
      710,  711,  712,  498, 1056,  730, 1584,  230, 1188,  784,
      815, 1188,  710,  711,  712,  710,  711,  712, 1189,  249,
     1055,  730,  731,  732,  733, 1023,  503,  181,  814, 1054,
      496,  443, 1053,  228,  731,  732,  733, 1387, 1024,  228,
     1387, 1052,  230,  775, 1029, 1383, 1051, 1388,  230, 1050,
      731,  732,  733,  744,  766, 1020, 1025,  816,  817,  818,
      475,  477,  445,  763,  763,  763,  746, 1018, 1202, 1584,

      480, 1202, 1584,  747,  376,  377,  378, 1017, 1203, 1584,
      863,  863,  863,  836,  737, 1026, 1027, 1028,  476,  755,
      747,  446,  447,  448, 1039, 1011, 1584, 1010, 1030, 1030,
     1030,  479,  228,  751,  785,  480, 1009,  251, 1008, 1103,
      743,  230,  228,  748,  749,  750,  744,  444,  999,  998,
      737,  230,  836, 1386,  477, 1040,  745,  745,  745,  746,
      837,  838,  839,  480,  993,  786,  747,  466,  992,  991,
     1103,  728,  226,  990,  785,  456,  989,  737,  482,  483,
      484,  988,  228,  747, 1041, 1042, 1043,  444,  721,  987,
      986,  230,  715,  981,  787,  788,  789,  450,  980, 1104,

     1105, 1106,  979,  707,  978,  786,  748,  749,  750, 1032,
      442, 1249, 1249, 1249,  738,  785,  977,  768,  976, 1033,
     1033, 1033, 1034,  228,  699,  212,  771,  180,  444,  629,
      628,  375,  230,  925,  787,  788,  789,  554,  924,  923,
     1025,  922,  921, 1061,  920,  555,  786, 1059, 1059, 1059,
      557,  273,  919,  918,  558, 1584,  576,  917, 1584,  916,
      275,  739,  740,  741,  915, 1584,  912,  911,  908, 1035,
     1036, 1037,  907,  906, 1062,  787,  788,  789,  785,  903,
      902,  901, 1584,  900, 1584, 1584,  228, 1584,  792,  792,
      792,  444, 1584,  798, 1584,  230,  375,  560,  561,  562,

      798,  273,  624, 1063, 1064, 1065,  289,  328,  273,  786,
      275, 1390,  806,  289,  609,  806, 1584,  275,  315, 1584,
      273,  603,  301,  273,  799,  576, 1584, 1392,  576,  275,
      897,  799,  275,  294,  806,  894,  889, 1389,  787,  788,
      789,  888,  273,  807,  587,  881,  807,  576,  287, 1584,
      827,  275, 1584,  800,  801,  802,  880,  879,  273, 1584,
      800,  801,  802,  576,  581,  807,  878,  275,  877,  574,
      827,  860,  808,  809,  810,  808,  809,  810,  273, 1370,
      859,  828, 1370,  576,  553,  827,  840,  275,  860, 1371,
      859, 1113,  553,  273,  808,  809,  810, 1381,  576,  273,

     1381,  828,  275, 1384, 1114, 1391, 1384, 1382,  275,  840,
      829,  830,  831, 1385, 1202, 1387,  828, 1202, 1387,  833,
      832,  544, 1115,  825, 1203, 1388,  523,  271,  824,  823,
      829,  830,  831,  181,  273,  536,  538,  812,  811, 1119,
      530,  804,  803,  275,  522,  829,  830,  831,  842,  264,
      793, 1116, 1117, 1118,  256,  791,  555,  525,  861,  861,
      861,  844,  790, 1584, 1370,  558, 1584, 1370,  845,  509,
      783,  249,  782, 1584, 1371, 1316, 1316, 1316,  836,  835,
      376,  377,  378,  554,  781,  845,  526,  527,  528, 1129,
      503, 1584,  780, 1120, 1120, 1120,  557,  273,  779,  883,

      558,  496,  289,  762, 1013,  761,  275,  273,  846,  847,
      848,  842,  524,  475,  742,  762,  275,  738,  761,  555,
     1130,  843,  843,  843,  844,  837,  838,  839,  558,  475,
      884,  845,  742,  735,  734, 1013,  466,  727,  226,  883,
      726,  725,  835,  560,  561,  562,  456,  273,  845, 1131,
     1132, 1133,  524,  458,  714,  713,  275,  450,  706,  885,
      886,  887,  705,  442, 1014, 1015, 1016,  219,  436,  687,
      884,  846,  847,  848, 1122,  180, 1249, 1249, 1249,  738,
      883,  653,  866,  652, 1123, 1123, 1123, 1124,  273,  649,
      646,  869,  643,  524,  642,  641,  640,  275,  636,  885,

      886,  887,  971, 1584, 1381, 1115, 1584, 1381,  971,  632,
      228,  884,  629, 1584, 1382,  498,  228, 1013,  628,  230,
      375,  498,  624,  370,  593,  230,  739,  740,  741,  615,
      738,  611,  328,  972, 1125, 1126, 1127,  605,  315,  972,
      885,  886,  887,  883, 1316, 1316, 1316,  836, 1013, 1584,
      599,  273, 1584,  896,  896,  896,  524,  301,  971, 1584,
      275,  598,  973,  974,  975,  597,  228,  294,  973,  974,
      975,  498,  586, 1384,  884,  230, 1384, 1014, 1015, 1016,
      585, 1387, 1529, 1385, 1387, 1529,  287, 1584,  543,  972,
     1584, 1388, 1530,  542,  837,  838,  839, 1584,  271,  518,

      264,  517,  516,  885,  886,  887,  899,  899,  899, 1509,
      256,  236,  508,  507,  899,  899,  899,  249,  973,  974,
      975,  463,  462,  226,  438,  219,  212, 1267,  420,  899,
      899,  899,  899,  899,  899, 1174, 1174, 1174, 1174, 1174,
     1268, 1174, 1175, 1502, 1174, 1174, 1174,  419,  180, 1174,
     1174,  373,  157,  356, 1584, 1176, 1174, 1584, 1267, 1174,
      352,  349, 1103,  335, 1584,  330, 1584,  329, 1529, 1584,
     1174, 1529, 1174, 1175, 1174,  836, 1584,  328, 1530, 1177,
     1584, 1584, 1568, 1584, 1584, 1568,  331, 1269, 1270, 1271,
     1584, 1584, 1569, 1103,  330,  329,  328, 1174, 1174, 1174,

     1174, 1174, 1178, 1179, 1180, 1182, 1182, 1182, 1182, 1182,
     1516, 1182, 1183,  321, 1182, 1182, 1182,  317, 1584, 1182,
     1182, 1584, 1104, 1105, 1106, 1184, 1182, 1584, 1584, 1182,
     1584, 1584, 1103,  316, 1584,  315, 1529, 1584,  318, 1529,
     1182, 1584, 1182, 1183, 1182,  836, 1530, 1568, 1584, 1568,
     1568, 1584, 1568,  317,  316,  315,  306, 1569, 1584, 1569,
      303,  302,  301, 1103,  280,  266,  265, 1182, 1182, 1182,
     1182, 1182, 1185, 1186, 1187, 1194, 1194, 1194, 1194, 1194,
      264, 1194, 1195,  245, 1194, 1194, 1194,  221, 1584, 1194,
     1194, 1584, 1104, 1105, 1106, 1196, 1194,  220, 1584, 1194,

      219,  212,  201,  170,  157,  156, 1584, 1584, 1584, 1584,
     1194, 1584, 1194, 1195, 1194, 1584, 1584, 1584, 1584, 1584,
     1584, 1334, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1335, 1584, 1584, 1194, 1194, 1194,
     1194, 1194, 1197, 1198, 1199,  379,  380,  381,  382,  383,
      384,  385, 1334,  386, 1584,  387,  388,  389,  390, 1584,
      391,  392,  393,  394, 1207, 1207, 1207, 1207, 1207, 1584,
     1207, 1208, 1584, 1207, 1207, 1207, 1584, 1584, 1207, 1207,
     1584, 1336, 1337, 1338, 1209, 1207, 1584, 1584, 1207, 1584,
     1584, 1584, 1023, 1584, 1584, 1584, 1584, 1584, 1584, 1207,

      228, 1207, 1208, 1207, 1584, 1024, 1584, 1023, 1584,  230,
     1584, 1584, 1584, 1584, 1584,  228, 1584, 1584, 1584, 1584,
     1024, 1584, 1584, 1025,  230, 1584, 1207, 1207, 1207, 1207,
     1207, 1210, 1211, 1212,  744, 1584, 1584, 1584, 1025, 1584,
     1584, 1584,  477, 1584, 1021, 1021, 1021,  746, 1584, 1584,
     1584,  480, 1026, 1027, 1028, 1584, 1584, 1584, 1236, 1584,
     1584, 1267, 1584, 1584, 1584,  737,  228, 1026, 1027, 1028,
     1023,  251, 1584, 1244, 1268,  230, 1584, 1584,  228, 1584,
     1584,  228, 1584, 1024, 1584, 1023,  251,  230, 1584, 1237,
      230, 1584, 1267,  228,  748,  749,  750,  744, 1024, 1584,

     1584, 1025,  230, 1584, 1245,  477, 1584, 1019, 1019, 1019,
      746, 1267, 1584, 1584,  480, 1584, 1025, 1584, 1238, 1239,
     1240, 1269, 1270, 1271, 1268, 1584, 1584, 1584,  737, 1584,
     1026, 1027, 1028, 1246, 1247, 1248, 1023, 1584, 1584, 1584,
     1584, 1584, 1267, 1251,  228, 1026, 1027, 1028, 1584, 1034,
     1584,  228, 1584,  230, 1584, 1584,  251,  748,  749,  750,
      230, 1584, 1259, 1584, 1584, 1584, 1584, 1025, 1584, 1584,
      228, 1269, 1270, 1271, 1252,  498, 1584, 1039, 1584,  230,
     1584, 1584, 1334, 1584, 1584,  228, 1584, 1584, 1584, 1584,
      251, 1584, 1584, 1260,  230, 1335, 1026, 1027, 1028, 1032,

     1584, 1584, 1584, 1253, 1254, 1255, 1584,  768, 1040, 1033,
     1033, 1033, 1034, 1334, 1334, 1584,  771, 1584, 1039, 1584,
     1584, 1584, 1261, 1262, 1263, 1584,  228, 1335, 1584, 1584,
     1025,  251, 1584, 1584, 1584,  230, 1584, 1041, 1042, 1043,
     1061, 1584, 1336, 1337, 1338, 1334, 1584, 1584,  273, 1040,
     1584, 1584, 1584,  576, 1584, 1061, 1584,  275, 1584, 1035,
     1036, 1037, 1584,  273, 1584, 1584, 1584, 1584,  576, 1584,
     1584, 1062,  275, 1584, 1336, 1337, 1338, 1584, 1041, 1042,
     1043,  842, 1584, 1584, 1584, 1584, 1062, 1584, 1584,  555,
     1584, 1111, 1111, 1111,  844, 1584, 1061, 1584,  558, 1584,

     1063, 1064, 1065, 1584,  273, 1584, 1584, 1584, 1584,  576,
     1584, 1584,  835,  275, 1584, 1063, 1064, 1065, 1113, 1584,
     1584, 1113, 1584, 1584, 1584, 1584,  273, 1062, 1584,  273,
     1584, 1114, 1584, 1584, 1114,  275, 1584, 1303,  275, 1584,
     1584,  846,  847,  848, 1584,  273, 1584, 1584, 1584, 1115,
      289, 1584, 1115, 1584,  275, 1584, 1063, 1064, 1065,  842,
     1584, 1584, 1584, 1584, 1584, 1584, 1584,  555, 1304, 1109,
     1109, 1109,  844, 1584, 1584, 1584,  558, 1584, 1116, 1117,
     1118, 1116, 1117, 1118, 1584, 1584, 1584, 1113, 1584, 1584,
      835, 1584, 1584, 1311, 1584,  273, 1584, 1305, 1306, 1307,

     1114,  273, 1584, 1584,  275, 1584,  289, 1584, 1584, 1113,
      275, 1584, 1584, 1584, 1584, 1113, 1584,  273, 1115,  846,
      847,  848, 1114,  273, 1312, 1584,  275, 1584, 1124, 1584,
     1584, 1584,  275, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1115, 1584, 1584, 1318, 1584, 1584, 1115, 1116, 1117, 1118,
     1326,  273, 1584, 1313, 1314, 1315,  289, 1584,  273, 1584,
      275, 1584, 1584,  576, 1584, 1584, 1584,  275, 1584, 1116,
     1117, 1118, 1584, 1584, 1319, 1116, 1117, 1118, 1122, 1584,
     1584, 1327, 1584, 1584, 1129, 1584,  866, 1584, 1123, 1123,
     1123, 1124,  273, 1584, 1584,  869, 1584,  289, 1584, 1584,

     1129,  275, 1584, 1320, 1321, 1322, 1584, 1584,  273, 1115,
     1328, 1329, 1330,  289, 1584, 1130, 1584,  275, 1584, 1406,
     1584, 1584, 1584, 1584, 1584, 1584, 1584,  228, 1584, 1584,
     1584, 1130,  498, 1584, 1584, 1584,  230, 1584, 1125, 1126,
     1127, 1584, 1584, 1584, 1131, 1132, 1133, 1584, 1584, 1584,
     1407, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1131, 1132, 1133, 1364, 1364, 1364, 1364, 1364, 1584, 1364,
     1365, 1584, 1364, 1364, 1364, 1584, 1584, 1364, 1364, 1408,
     1409, 1410, 1584, 1366, 1364, 1584, 1584, 1364, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1364, 1584,

     1364, 1365, 1364, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1364, 1364, 1364, 1364, 1364,
     1367, 1368, 1369, 1584, 1370, 1584, 1584, 1370, 1584, 1584,
     1584, 1584, 1584, 1584, 1371, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584,  181, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,

      376,  377,  378, 1372, 1372, 1372, 1372, 1372, 1584, 1372,
     1373, 1584, 1372, 1372, 1372, 1584, 1584, 1372, 1372, 1584,
     1584, 1584, 1584, 1374, 1372, 1584, 1584, 1372, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1372, 1584,
     1372, 1373, 1372, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1372, 1372, 1372, 1372, 1372,
     1375, 1376, 1377,  379,  380,  381,  382,  383,  384,  385,
     1584,  386, 1584,  387,  388,  389,  390, 1584,  391,  392,
      393,  394, 1393, 1393, 1393, 1393, 1393, 1584, 1393, 1394,

     1584, 1393, 1393, 1393, 1584, 1584, 1393, 1393, 1584, 1236,
     1584, 1584, 1395, 1393, 1584, 1236, 1393,  228, 1584, 1584,
     1584, 1584,  251,  228, 1584, 1584,  230, 1393,  251, 1393,
     1394, 1393,  230, 1584, 1415, 1584, 1584, 1584, 1584, 1584,
     1237, 1584,  228, 1584, 1584, 1584, 1237,  498, 1584, 1584,
     1584,  230, 1584, 1584, 1393, 1393, 1393, 1393, 1393, 1396,
     1397, 1398, 1584, 1584, 1584, 1416, 1244, 1584, 1584, 1238,
     1239, 1240, 1244, 1584,  228, 1238, 1239, 1240, 1584,  251,
      228, 1584, 1584,  230, 1584,  251, 1584, 1584, 1584,  230,
     1584, 1423, 1584, 1584, 1417, 1418, 1419, 1245, 1251,  228,

     1584, 1584, 1584, 1245,  498, 1584,  228, 1584,  230, 1584,
     1584,  251, 1584, 1584, 1584,  230, 1584, 1584, 1584, 1584,
     1584, 1584, 1424, 1251, 1584, 1584, 1246, 1247, 1248, 1252,
     1259,  228, 1246, 1247, 1248, 1584,  251, 1584,  228, 1584,
      230, 1584, 1584,  498, 1584, 1584, 1584,  230, 1584, 1259,
     1584, 1425, 1426, 1427, 1252, 1259, 1584,  228, 1253, 1254,
     1255, 1260,  498,  228, 1584, 1450,  230, 1584,  498, 1584,
     1584, 1584,  230,  273, 1584, 1584, 1584, 1584,  576, 1584,
     1260, 1303,  275, 1253, 1254, 1255, 1260, 1303, 1584,  273,
     1261, 1262, 1263, 1584,  289,  273, 1451, 1584,  275, 1584,

      289, 1584, 1584, 1584,  275, 1584, 1459, 1584, 1584, 1261,
     1262, 1263, 1304, 1584,  273, 1261, 1262, 1263, 1304,  576,
     1584, 1311, 1584,  275, 1584, 1452, 1453, 1454, 1584,  273,
     1584, 1584, 1584, 1584,  289, 1584, 1584, 1460,  275, 1584,
     1584, 1305, 1306, 1307, 1584, 1311, 1584, 1305, 1306, 1307,
     1584, 1584, 1312,  273, 1584, 1584, 1467, 1584,  289, 1584,
     1584, 1584,  275, 1584,  273, 1584, 1461, 1462, 1463,  576,
     1584, 1318, 1584,  275, 1584, 1584, 1312, 1318, 1584,  273,
     1584, 1313, 1314, 1315,  289,  273, 1584, 1468,  275, 1584,
      289, 1584, 1584, 1584,  275, 1584, 1326, 1584, 1584, 1584,

     1584, 1584, 1319, 1584,  273, 1313, 1314, 1315, 1319,  576,
     1584, 1326, 1584,  275, 1584, 1584, 1469, 1470, 1471,  273,
     1584, 1584, 1584, 1584,  576, 1584, 1584, 1327,  275, 1584,
     1584, 1320, 1321, 1322, 1584, 1326, 1584, 1320, 1321, 1322,
     1584, 1584, 1327,  273, 1584, 1584, 1584, 1584,  576, 1584,
     1584, 1584,  275, 1584, 1584, 1584, 1328, 1329, 1330, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1327, 1584, 1584, 1584,
     1584, 1328, 1329, 1330, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1328, 1329, 1330, 1496, 1496,

     1496, 1496, 1496, 1584, 1496, 1497, 1584, 1496, 1496, 1496,
     1584, 1584, 1496, 1496, 1584, 1584, 1584, 1584, 1498, 1496,
     1584, 1584, 1496, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1496, 1584, 1496, 1497, 1496, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1496, 1496, 1496, 1496, 1496, 1499, 1500, 1501, 1503, 1503,
     1503, 1503, 1503, 1584, 1503, 1504, 1584, 1503, 1503, 1503,
     1584, 1584, 1503, 1503, 1584, 1584, 1584, 1584, 1505, 1503,
     1584, 1584, 1503, 1584, 1584, 1584, 1584, 1584, 1584, 1584,

     1584, 1584, 1584, 1503, 1584, 1503, 1504, 1503, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1503, 1503, 1503, 1503, 1503, 1506, 1507, 1508, 1510, 1510,
     1510, 1510, 1510, 1584, 1510, 1511, 1584, 1510, 1510, 1510,
     1584, 1584, 1510, 1510, 1584, 1584, 1584, 1584, 1512, 1510,
     1584, 1584, 1510, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1510, 1584, 1510, 1511, 1510, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,

     1510, 1510, 1510, 1510, 1510, 1513, 1514, 1515, 1517, 1517,
     1517, 1517, 1517, 1584, 1517, 1518, 1584, 1517, 1517, 1517,
     1584, 1584, 1517, 1517, 1584, 1584, 1584, 1584, 1519, 1517,
     1584, 1584, 1517, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1517, 1584, 1517, 1518, 1517, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1517, 1517, 1517, 1517, 1517, 1520, 1521, 1522, 1523, 1523,
     1523, 1523, 1523, 1584, 1523, 1524, 1584, 1523, 1523, 1523,
     1584, 1584, 1523, 1523, 1584, 1406, 1584, 1584, 1525, 1523,

     1584, 1406, 1523,  228, 1584, 1584, 1584, 1584,  498,  228,
     1584, 1584,  230, 1523,  498, 1523, 1524, 1523,  230, 1584,
     1406, 1584, 1584, 1584, 1584, 1584, 1407, 1584,  228, 1584,
     1584, 1584, 1407,  498, 1584, 1584, 1584,  230, 1584, 1584,
     1523, 1523, 1523, 1523, 1523, 1526, 1527, 1528, 1584, 1584,
     1584, 1407, 1415, 1584, 1584, 1408, 1409, 1410, 1415, 1584,
      228, 1408, 1409, 1410, 1584,  498,  228, 1584, 1584,  230,
     1584,  498, 1584, 1584, 1584,  230, 1584, 1415, 1584, 1584,
     1408, 1409, 1410, 1416, 1423,  228, 1584, 1584, 1584, 1416,
      498, 1584,  228, 1584,  230, 1584, 1584,  498, 1584, 1584,

     1584,  230, 1584, 1584, 1584, 1584, 1584, 1584, 1416, 1423,
     1584, 1584, 1417, 1418, 1419, 1424, 1423,  228, 1417, 1418,
     1419, 1584,  498, 1584,  228, 1584,  230, 1584, 1584,  498,
     1584, 1584, 1584,  230, 1584, 1450, 1584, 1417, 1418, 1419,
     1424, 1450, 1584,  273, 1425, 1426, 1427, 1424,  576,  273,
     1584, 1450,  275, 1584,  576, 1584, 1584, 1584,  275,  273,
     1584, 1584, 1584, 1584,  576, 1584, 1451, 1459,  275, 1425,
     1426, 1427, 1451, 1459, 1584,  273, 1425, 1426, 1427, 1584,
      576,  273, 1451, 1584,  275, 1584,  576, 1584, 1584, 1584,
      275, 1584, 1459, 1584, 1584, 1452, 1453, 1454, 1460, 1584,

      273, 1452, 1453, 1454, 1460,  576, 1584, 1467, 1584,  275,
     1584, 1452, 1453, 1454, 1584,  273, 1584, 1584, 1584, 1584,
      576, 1584, 1584, 1460,  275, 1584, 1584, 1461, 1462, 1463,
     1584, 1467, 1584, 1461, 1462, 1463, 1584, 1584, 1468,  273,
     1584, 1584, 1467, 1584,  576, 1584, 1584, 1584,  275, 1584,
      273, 1584, 1461, 1462, 1463,  576, 1584, 1584, 1584,  275,
     1584, 1584, 1468, 1584, 1584, 1584, 1584, 1469, 1470, 1471,
     1584, 1584, 1584, 1468, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1469, 1470, 1471, 1584, 1584, 1584, 1584, 1584, 1584,

     1584, 1584, 1469, 1470, 1471, 1562, 1562, 1562, 1562, 1562,
     1584, 1562, 1563, 1584, 1562, 1562, 1562, 1584, 1584, 1562,
     1562, 1584, 1584, 1584, 1584, 1564, 1562, 1584, 1584, 1562,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1562, 1584, 1562, 1563, 1562, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1562, 1562, 1562,
     1562, 1562, 1565, 1566, 1567, 1570, 1570, 1570, 1570, 1570,
     1584, 1570, 1571, 1584, 1570, 1570, 1570, 1584, 1584, 1570,
     1570, 1584, 1584, 1584, 1584, 1572, 1570, 1584, 1584, 1570,

     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1570, 1584, 1570, 1571, 1570, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1570, 1570, 1570,
     1570, 1570, 1573, 1574, 1575,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  152,  152, 1584, 1584, 1584,
      152,  152,  152,  152,  152,  152,  152,  152,  152, 1584,
      152,  152,  152,  152,  152,  209, 1584,  209, 1584, 1584,
     1584,  209, 1584,  209,  209,  211,  211, 1584, 1584,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  213,  213,  213,  213,  213,

      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  226,  226, 1584,  226,  226,
     1584,  226,  226, 1584,  226,  226,  226,  226,  226,  226,
      249,  249, 1584,  249,  249, 1584,  249,  249, 1584,  249,
      249,  249,  249,  249,  249,  256,  256, 1584,  256, 1584,
     1584,  256,  256, 1584, 1584,  256, 1584,  256,  256,  256,
      271,  271, 1584,  271,  271,  271,  271,  271, 1584,  271,
      271,  271,  271,  271,  271,  287,  287, 1584,  287,  287,
      287,  287,  287, 1584,  287,  287,  287,  287,  287,  287,
      294,  294, 1584,  294, 1584,  294,  294,  294, 1584, 1584,

      294, 1584,  294,  294,  294,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  332, 1584, 1584, 1584,  332,
     1584,  332,  332,  340,  340,  340, 1584, 1584,  340, 1584,
     1584,  340,  340,  340,  340,  340,  357,  357, 1584,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  375,  375, 1584,  375,
     1584,  375,  375,  375, 1584, 1584,  375,  375,  375,  375,

      375,  425, 1584,  425, 1584, 1584, 1584,  425, 1584,  425,
      425,  442,  442, 1584,  442,  442, 1584,  442,  442, 1584,
      442,  442,  442,  442,  442,  442,  450,  450, 1584,  450,
      450, 1584,  450,  450, 1584,  450,  450,  450,  450,  450,
      450,  456,  456, 1584,  456, 1584, 1584,  456,  456, 1584,
     1584,  456, 1584,  456,  456,  456,  466,  466, 1584,  466,
      466, 1584,  466,  466, 1584,  466,  466,  466,  466,  466,
      466,  475,  475, 1584,  475,  475, 1584,  475,  475, 1584,
      475,  475, 1584,  475,  475,  475,  496,  496, 1584,  496,
      496, 1584,  496,  496, 1584,  496,  496,  496,  496,  496,

      496,  249,  249, 1584,  249,  249, 1584,  249,  249, 1584,
      249,  249,  249,  249,  249,  249,  503,  503, 1584,  503,
     1584, 1584,  503, 1584, 1584, 1584,  503,  503,  503,  503,
      503,  509,  509, 1584,  509,  509, 1584,  509,  509, 1584,
      509,  509,  509,  509,  509,  509,  522,  522, 1584,  522,
      522,  522,  522,  522, 1584,  522,  522,  522,  522,  522,
      522,  271,  271, 1584,  271,  271,  271,  271,  271, 1584,
      271,  271,  271,  271,  271,  271,  530,  530, 1584,  530,
      530,  530,  530,  530, 1584,  530,  530,  530,  530,  530,
      530,  536,  536, 1584,  536, 1584,  536,  536,  536, 1584,

     1584,  536, 1584,  536,  536,  536,  544,  544, 1584,  544,
      544,  544,  544,  544, 1584,  544,  544,  544,  544,  544,
      544,  553,  553, 1584,  553,  553,  553,  553,  553, 1584,
      553,  553, 1584,  553,  553,  553,  574,  574, 1584,  574,
      574,  574,  574,  574, 1584,  574,  574,  574,  574,  574,
      574,  287,  287, 1584,  287,  287,  287,  287,  287, 1584,
      287,  287,  287,  287,  287,  287,  581,  581, 1584,  581,
     1584,  581,  581, 1584, 1584, 1584,  581,  581,  581,  581,
      581,  587,  587, 1584,  587,  587,  587,  587,  587, 1584,
      587,  587,  587,  587,  587,  587,  332, 1584, 1584, 1584,

      332, 1584,  332,  332,  340, 1584, 1584, 1584,  340, 1584,
      340,  340,  427,  427,  427,  427,  427,  427,  427,  427,
      427, 1584,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  209, 1584,  209, 1584, 1584, 1584,  209, 1584,
      209,  209,  357,  357, 1584,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  152,  152, 1584, 1584, 1584,  152,  152,  152,
      152,  152,  152,  152,  152,  152, 1584,  152,  152,  152,
      152,  152,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,

      359,  359,  425, 1584, 1584, 1584,  425, 1584,  425,  425,
      625, 1584, 1584, 1584,  625, 1584,  625,  625,  375,  375,
     1584,  375, 1584,  375,  375,  375, 1584, 1584,  375,  375,
      375,  375,  375,  695, 1584,  695, 1584, 1584, 1584,  695,
     1584,  695,  695,  475,  475, 1584,  475, 1584, 1584,  475,
      475, 1584,  475,  475, 1584,  475,  475,  475,  442,  442,
     1584,  442,  442, 1584,  442,  442, 1584,  442,  442,  442,
      442,  442,  442,  699,  699, 1584,  699,  699, 1584,  699,
      699, 1584,  699,  699,  699,  699,  699,  699,  707,  707,
     1584,  707,  707, 1584,  707,  707, 1584,  707,  707,  707,

      707,  707,  707,  450,  450, 1584,  450,  450, 1584,  450,
      450, 1584,  450,  450,  450,  450,  450,  450,  715,  715,
     1584,  715, 1584, 1584,  715,  715, 1584, 1584,  715,  715,
      715,  715,  715,  721,  721, 1584,  721, 1584, 1584,  721,
     1584, 1584, 1584,  721,  721,  721,  721,  721,  728,  728,
     1584,  728,  728, 1584,  728,  728, 1584,  728,  728,  728,
      728,  728,  728,  466,  466, 1584,  466,  466, 1584,  466,
      466, 1584,  466,  466,  466,  466,  466,  466,  737,  737,
     1584,  737, 1584, 1584,  737,  737, 1584, 1584,  737,  737,
      737,  737,  737,  743,  743, 1584,  743,  743, 1584,  743,

      743, 1584,  743,  743,  743,  743,  743,  743,  751,  751,
     1584,  751, 1584, 1584,  751, 1584, 1584, 1584,  751,  751,
      751,  751,  751,  755,  755, 1584,  755, 1584, 1584,  755,
      755, 1584, 1584,  755, 1584,  755,  755,  755,  766,  766,
     1584,  766,  766, 1584,  766,  766, 1584,  766,  766,  766,
      766,  766,  766,  496,  496, 1584,  496,  496, 1584,  496,
      496, 1584,  496,  496,  496,  496,  496,  496,  775,  775,
     1584,  775, 1584, 1584,  775, 1584, 1584, 1584,  775,  775,
      775,  775,  775,  503,  503, 1584,  503, 1584, 1584,  503,
     1584, 1584, 1584,  503,  503,  503,  503,  503,  784,  784,

     1584,  784,  784, 1584,  784,  784, 1584,  784,  784,  784,
      784,  784,  784,  509,  509, 1584,  509,  509, 1584,  509,
      509, 1584,  509,  509,  509,  509,  509,  509,  553,  553,
     1584,  553, 1584,  553,  553,  553, 1584,  553,  553, 1584,
      553,  553,  553,  522,  522, 1584,  522,  522,  522,  522,
      522, 1584,  522,  522,  522,  522,  522,  522,  797,  797,
     1584,  797,  797,  797,  797,  797, 1584,  797,  797,  797,
      797,  797,  797,  805,  805, 1584,  805,  805,  805,  805,
      805, 1584,  805,  805,  805,  805,  805,  805,  530,  530,
     1584,  530,  530,  530,  530,  530, 1584,  530,  530,  530,

      530,  530,  530,  813,  813, 1584,  813, 1584,  813,  813,
      813, 1584, 1584,  813,  813,  813,  813,  813,  819,  819,
     1584,  819, 1584,  819,  819, 1584, 1584, 1584,  819,  819,
      819,  819,  819,  826,  826, 1584,  826,  826,  826,  826,
      826, 1584,  826,  826,  826,  826,  826,  826,  544,  544,
     1584,  544,  544,  544,  544,  544, 1584,  544,  544,  544,
      544,  544,  544,  835,  835, 1584,  835, 1584,  835,  835,
      835, 1584, 1584,  835,  835,  835,  835,  835,  841,  841,
     1584,  841,  841,  841,  841,  841, 1584,  841,  841,  841,
      841,  841,  841,  849,  849, 1584,  849, 1584,  849,  849,

     1584, 1584, 1584,  849,  849,  849,  849,  849,  853,  853,
     1584,  853, 1584,  853,  853,  853, 1584, 1584,  853, 1584,
      853,  853,  853,  864,  864, 1584,  864,  864,  864,  864,
      864, 1584,  864,  864,  864,  864,  864,  864,  574,  574,
     1584,  574,  574,  574,  574,  574, 1584,  574,  574,  574,
      574,  574,  574,  873,  873, 1584,  873, 1584,  873,  873,
     1584, 1584, 1584,  873,  873,  873,  873,  873,  581,  581,
     1584,  581, 1584,  581,  581, 1584, 1584, 1584,  581,  581,
      581,  581,  581,  882,  882, 1584,  882,  882,  882,  882,
      882, 1584,  882,  882,  882,  882,  882,  882,  587,  587,

     1584,  587,  587,  587,  587,  587, 1584,  587,  587,  587,
      587,  587,  587,  625, 1584, 1584, 1584,  625, 1584,  625,
      625,  427,  427,  427,  427,  427,  427,  427,  427,  427,
     1584,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  425, 1584, 1584,  425, 1584, 1584, 1584,  425, 1584,
      425,  425,  669,  669,  669,  669,  669, 1584,  669,  669,
     1584,  669, 1584, 1584,  669,  669,  669, 1584,  669, 1584,
     1584,  669,  375, 1584, 1584,  375,  375,  375, 1584,  375,
     1584,  375,  375,  375, 1584, 1584,  375,  375,  375,  375,
      375,  695, 1584,  695, 1584, 1584, 1584,  695, 1584,  695,

      695,  737,  737, 1584,  737, 1584, 1584,  737,  737, 1584,
     1584,  737,  737,  737,  737,  737,  475,  475, 1584,  475,
      475, 1584,  475,  475, 1584,  475,  475, 1584,  475,  475,
      475,  970,  970, 1584,  970,  970, 1584,  970,  970, 1584,
      970,  970,  970,  970,  970,  970,  699,  699, 1584,  699,
      699, 1584,  699,  699, 1584,  699,  699,  699,  699,  699,
      699,  707,  707, 1584,  707,  707, 1584,  707,  707, 1584,
      707,  707,  707,  707,  707,  707,  715,  715, 1584,  715,
     1584, 1584,  715,  715, 1584, 1584,  715,  715,  715,  715,
      715,  982,  982, 1584,  982, 1584, 1584,  982, 1584, 1584,

     1584,  982,  982,  982,  982,  982,  721,  721, 1584,  721,
     1584, 1584,  721, 1584, 1584, 1584,  721,  721,  721,  721,
      721,  728,  728, 1584,  728,  728, 1584,  728,  728, 1584,
      728,  728,  728,  728,  728,  728,  743,  743, 1584,  743,
      743, 1584,  743,  743, 1584,  743,  743,  743,  743,  743,
      743,  994,  994, 1584,  994, 1584, 1584,  994, 1584, 1584,
     1584,  994,  994,  994,  994,  994, 1000, 1000, 1584, 1000,
     1584, 1584, 1000, 1584, 1584, 1584, 1000, 1000, 1000, 1000,
     1000, 1004, 1004, 1584, 1004, 1584, 1584, 1004, 1584, 1584,
     1584, 1004, 1004, 1004, 1004, 1004,  751,  751, 1584,  751,

     1584, 1584,  751, 1584, 1584, 1584,  751,  751,  751,  751,
      751, 1012, 1012, 1584, 1012, 1584, 1584, 1012, 1012, 1584,
     1584, 1012, 1012, 1012, 1012, 1012, 1022, 1022, 1584, 1022,
     1022, 1584, 1022, 1022, 1584, 1022, 1022, 1022, 1022, 1022,
     1022,  442,  442, 1584,  442,  442, 1584,  442,  442, 1584,
      442,  442,  442,  442,  442,  442, 1031, 1031, 1584, 1031,
     1031, 1584, 1031, 1031, 1584, 1031, 1031, 1031, 1031, 1031,
     1031, 1038, 1038, 1584, 1038, 1038, 1584, 1038, 1038, 1584,
     1038, 1038, 1038, 1038, 1038, 1038, 1044, 1044, 1584, 1044,
     1584, 1584, 1044, 1044, 1584, 1584, 1044, 1584, 1044, 1044,

     1044,  775,  775, 1584,  775, 1584, 1584,  775, 1584, 1584,
     1584,  775,  775,  775,  775,  775,  784,  784, 1584,  784,
      784, 1584,  784,  784, 1584,  784,  784,  784,  784,  784,
      784,  835,  835, 1584,  835, 1584,  835,  835,  835, 1584,
     1584,  835,  835,  835,  835,  835,  553,  553, 1584,  553,
      553,  553,  553,  553, 1584,  553,  553, 1584,  553,  553,
      553, 1060, 1060, 1584, 1060, 1060, 1060, 1060, 1060, 1584,
     1060, 1060, 1060, 1060, 1060, 1060,  797,  797, 1584,  797,
      797,  797,  797,  797, 1584,  797,  797,  797,  797,  797,
      797,  805,  805, 1584,  805,  805,  805,  805,  805, 1584,

      805,  805,  805,  805,  805,  805,  813,  813, 1584,  813,
     1584,  813,  813,  813, 1584, 1584,  813,  813,  813,  813,
      813, 1072, 1072, 1584, 1072, 1584, 1072, 1072, 1584, 1584,
     1584, 1072, 1072, 1072, 1072, 1072,  819,  819, 1584,  819,
     1584,  819,  819, 1584, 1584, 1584,  819,  819,  819,  819,
      819,  826,  826, 1584,  826,  826,  826,  826,  826, 1584,
      826,  826,  826,  826,  826,  826,  841,  841, 1584,  841,
      841,  841,  841,  841, 1584,  841,  841,  841,  841,  841,
      841, 1084, 1084, 1584, 1084, 1584, 1084, 1084, 1584, 1584,
     1584, 1084, 1084, 1084, 1084, 1084, 1090, 1090, 1584, 1090,

     1584, 1090, 1090, 1584, 1584, 1584, 1090, 1090, 1090, 1090,
     1090, 1094, 1094, 1584, 1094, 1584, 1094, 1094, 1584, 1584,
     1584, 1094, 1094, 1094, 1094, 1094,  849,  849, 1584,  849,
     1584,  849,  849, 1584, 1584, 1584,  849,  849,  849,  849,
      849, 1102, 1102, 1584, 1102, 1584, 1102, 1102, 1102, 1584,
     1584, 1102, 1102, 1102, 1102, 1102, 1112, 1112, 1584, 1112,
     1112, 1112, 1112, 1112, 1584, 1112, 1112, 1112, 1112, 1112,
     1112,  522,  522, 1584,  522,  522,  522,  522,  522, 1584,
      522,  522,  522,  522,  522,  522, 1121, 1121, 1584, 1121,
     1121, 1121, 1121, 1121, 1584, 1121, 1121, 1121, 1121, 1121,

     1121, 1128, 1128, 1584, 1128, 1128, 1128, 1128, 1128, 1584,
     1128, 1128, 1128, 1128, 1128, 1128, 1134, 1134, 1584, 1134,
     1584, 1134, 1134, 1134, 1584, 1584, 1134, 1584, 1134, 1134,
     1134,  873,  873, 1584,  873, 1584,  873,  873, 1584, 1584,
     1584,  873,  873,  873,  873,  873,  882,  882, 1584,  882,
      882,  882,  882,  882, 1584,  882,  882,  882,  882,  882,
      882,  625, 1584, 1584, 1584,  625, 1584,  625,  625,  946,
      946,  946,  946,  946, 1584,  946,  946, 1584,  946, 1584,
     1584,  946,  946,  946, 1584,  946, 1584,  946,  946,  955,
      955,  955,  955,  955, 1584,  955,  955, 1584,  955, 1584,

     1584,  955,  955,  955, 1584,  955,  955, 1584,  955,  375,
      375, 1584,  375, 1584,  375,  375,  375, 1584, 1584,  375,
      375,  375,  375,  375,  425, 1584,  425, 1584, 1584, 1584,
      425, 1584,  425,  425,  743,  743, 1584,  743,  743, 1584,
      743,  743, 1584,  743,  743,  743,  743,  743,  743,  970,
      970, 1584,  970,  970, 1584,  970,  970, 1584,  970,  970,
      970,  970,  970,  970,  982,  982, 1584,  982, 1584, 1584,
      982, 1584, 1584, 1584,  982,  982,  982,  982,  982,  994,
      994, 1584,  994, 1584, 1584,  994, 1584, 1584, 1584,  994,
      994,  994,  994,  994, 1000, 1000, 1584, 1000, 1584, 1584,

     1000, 1584, 1584, 1584, 1000, 1000, 1000, 1000, 1000, 1004,
     1004, 1584, 1004, 1584, 1584, 1004, 1584, 1584, 1584, 1004,
     1004, 1004, 1004, 1004, 1012, 1012, 1584, 1012, 1584, 1584,
     1012, 1012, 1584, 1584, 1012, 1012, 1012, 1012, 1012, 1022,
     1022, 1584, 1022, 1022, 1584, 1022, 1022, 1584, 1022, 1022,
     1022, 1022, 1022, 1022, 1235, 1235, 1584, 1235, 1235, 1584,
     1235, 1235, 1584, 1235, 1235, 1235, 1235, 1235, 1235, 1243,
     1243, 1584, 1243, 1243, 1584, 1243, 1243, 1584, 1243, 1243,
     1243, 1243, 1243, 1243,  737,  737, 1584,  737, 1584, 1584,
      737,  737, 1584, 1584,  737,  737,  737,  737,  737, 1031,

     1031, 1584, 1031, 1031, 1584, 1031, 1031, 1584, 1031, 1031,
     1031, 1031, 1031, 1031, 1250, 1250, 1584, 1250, 1250, 1584,
     1250, 1250, 1584, 1250, 1250, 1250, 1250, 1250, 1250, 1258,
     1258, 1584, 1258, 1258, 1584, 1258, 1258, 1584, 1258, 1258,
     1258, 1258, 1258, 1258, 1038, 1038, 1584, 1038, 1038, 1584,
     1038, 1038, 1584, 1038, 1038, 1038, 1038, 1038, 1038, 1266,
     1266, 1584, 1266, 1584, 1584, 1266, 1266, 1584, 1584, 1266,
     1266, 1266, 1266, 1266, 1272, 1272, 1584, 1272, 1584, 1584,
     1272, 1584, 1584, 1584, 1272, 1272, 1272, 1272, 1272,  841,
      841, 1584,  841,  841,  841,  841,  841, 1584,  841,  841,

      841,  841,  841,  841, 1060, 1060, 1584, 1060, 1060, 1060,
     1060, 1060, 1584, 1060, 1060, 1060, 1060, 1060, 1060, 1072,
     1072, 1584, 1072, 1584, 1072, 1072, 1584, 1584, 1584, 1072,
     1072, 1072, 1072, 1072, 1084, 1084, 1584, 1084, 1584, 1084,
     1084, 1584, 1584, 1584, 1084, 1084, 1084, 1084, 1084, 1090,
     1090, 1584, 1090, 1584, 1090, 1090, 1584, 1584, 1584, 1090,
     1090, 1090, 1090, 1090, 1094, 1094, 1584, 1094, 1584, 1094,
     1094, 1584, 1584, 1584, 1094, 1094, 1094, 1094, 1094, 1102,
     1102, 1584, 1102, 1584, 1102, 1102, 1102, 1584, 1584, 1102,
     1102, 1102, 1102, 1102, 1112, 1112, 1584, 1112, 1112, 1112,

     1112, 1112, 1584, 1112, 1112, 1112, 1112, 1112, 1112, 1302,
     1302, 1584, 1302, 1302, 1302, 1302, 1302, 1584, 1302, 1302,
     1302, 1302, 1302, 1302, 1310, 1310, 1584, 1310, 1310, 1310,
     1310, 1310, 1584, 1310, 1310, 1310, 1310, 1310, 1310,  835,
      835, 1584,  835, 1584,  835,  835,  835, 1584, 1584,  835,
      835,  835,  835,  835, 1121, 1121, 1584, 1121, 1121, 1121,
     1121, 1121, 1584, 1121, 1121, 1121, 1121, 1121, 1121, 1317,
     1317, 1584, 1317, 1317, 1317, 1317, 1317, 1584, 1317, 1317,
     1317, 1317, 1317, 1317, 1325, 1325, 1584, 1325, 1325, 1325,
     1325, 1325, 1584, 1325, 1325, 1325, 1325, 1325, 1325, 1128,

     1128, 1584, 1128, 1128, 1128, 1128, 1128, 1584, 1128, 1128,
     1128, 1128, 1128, 1128, 1333, 1333, 1584, 1333, 1584, 1333,
     1333, 1333, 1584, 1584, 1333, 1333, 1333, 1333, 1333, 1339,
     1339, 1584, 1339, 1584, 1339, 1339, 1584, 1584, 1584, 1339,
     1339, 1339, 1339, 1339, 1174, 1174, 1174, 1174, 1174, 1584,
     1174, 1174, 1584, 1174, 1584, 1584, 1174, 1174, 1174, 1584,
     1174, 1174, 1584, 1174, 1182, 1182, 1182, 1182, 1182, 1584,
     1182, 1182, 1584, 1182, 1584, 1584, 1182, 1182, 1182, 1584,
     1182, 1584, 1584, 1182, 1194, 1194, 1194, 1194, 1194, 1584,
     1194, 1194, 1584, 1194, 1584, 1584, 1194, 1194, 1194, 1584,

     1194, 1584, 1584, 1194, 1207, 1207, 1207, 1207, 1207, 1584,
     1207, 1207, 1584, 1207, 1584, 1584, 1207, 1207, 1207, 1584,
     1207, 1584, 1584, 1207,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375, 1405, 1405, 1584, 1405, 1405, 1584,
     1405, 1405, 1584, 1405, 1405, 1405, 1405, 1405, 1405, 1235,
     1235, 1584, 1235, 1235, 1584, 1235, 1235, 1584, 1235, 1235,
     1235, 1235, 1235, 1235, 1414, 1414, 1584, 1414, 1414, 1584,
     1414, 1414, 1584, 1414, 1414, 1414, 1414, 1414, 1414, 1243,
     1243, 1584, 1243, 1243, 1584, 1243, 1243, 1584, 1243, 1243,

     1243, 1243, 1243, 1243,  737,  737, 1584,  737, 1584, 1584,
      737,  737, 1584, 1584,  737,  737,  737,  737,  737, 1422,
     1422, 1584, 1422, 1422, 1584, 1422, 1422, 1584, 1422, 1422,
     1422, 1422, 1422, 1422, 1250, 1250, 1584, 1250, 1250, 1584,
     1250, 1250, 1584, 1250, 1250, 1250, 1250, 1250, 1250, 1258,
     1258, 1584, 1258, 1258, 1584, 1258, 1258, 1584, 1258, 1258,
     1258, 1258, 1258, 1258, 1266, 1266, 1584, 1266, 1584, 1584,
     1266, 1266, 1584, 1584, 1266, 1266, 1266, 1266, 1266, 1434,
     1434, 1584, 1434, 1584, 1584, 1434, 1584, 1584, 1584, 1434,
     1434, 1434, 1434, 1434, 1272, 1272, 1584, 1272, 1584, 1584,

     1272, 1584, 1584, 1584, 1272, 1272, 1272, 1272, 1272, 1449,
     1449, 1584, 1449, 1449, 1449, 1449, 1449, 1584, 1449, 1449,
     1449, 1449, 1449, 1449, 1302, 1302, 1584, 1302, 1302, 1302,
     1302, 1302, 1584, 1302, 1302, 1302, 1302, 1302, 1302, 1458,
     1458, 1584, 1458, 1458, 1458, 1458, 1458, 1584, 1458, 1458,
     1458, 1458, 1458, 1458, 1310, 1310, 1584, 1310, 1310, 1310,
     1310, 1310, 1584, 1310, 1310, 1310, 1310, 1310, 1310,  835,
      835, 1584,  835, 1584,  835,  835,  835, 1584, 1584,  835,
      835,  835,  835,  835, 1466, 1466, 1584, 1466, 1466, 1466,
     1466, 1466, 1584, 1466, 1466, 1466, 1466, 1466, 1466, 1317,

     1317, 1584, 1317, 1317, 1317, 1317, 1317, 1584, 1317, 1317,
     1317, 1317, 1317, 1317, 1325, 1325, 1584, 1325, 1325, 1325,
     1325, 1325, 1584, 1325, 1325, 1325, 1325, 1325, 1325, 1333,
     1333, 1584, 1333, 1584, 1333, 1333, 1333, 1584, 1584, 1333,
     1333, 1333, 1333, 1333, 1478, 1478, 1584, 1478, 1584, 1478,
     1478, 1584, 1584, 1584, 1478, 1478, 1478, 1478, 1478, 1339,
     1339, 1584, 1339, 1584, 1339, 1339, 1584, 1584, 1584, 1339,
     1339, 1339, 1339, 1339, 1364, 1364, 1364, 1364, 1364, 1584,
     1364, 1364, 1584, 1364, 1584, 1584, 1364, 1364, 1364, 1584,
     1364, 1584, 1584, 1364, 1372, 1372, 1372, 1372, 1372, 1584,

     1372, 1372, 1584, 1372, 1584, 1584, 1372, 1372, 1372, 1584,
     1372, 1584, 1584, 1372, 1393, 1393, 1393, 1393, 1393, 1584,
     1393, 1393, 1584, 1393, 1584, 1584, 1393, 1393, 1393, 1584,
     1393, 1584, 1584, 1393, 1405, 1405, 1584, 1405, 1405, 1584,
     1405, 1405, 1584, 1405, 1405, 1405, 1405, 1405, 1405, 1414,
     1414, 1584, 1414, 1414, 1584, 1414, 1414, 1584, 1414, 1414,
     1414, 1414, 1414, 1414, 1422, 1422, 1584, 1422, 1422, 1584,
     1422, 1422, 1584, 1422, 1422, 1422, 1422, 1422, 1422, 1496,
     1496, 1496, 1496, 1496, 1584, 1496, 1496, 1584, 1496, 1584,
     1584, 1496, 1496, 1496, 1584, 1496, 1584, 1584, 1496, 1503,

     1503, 1503, 1503, 1503, 1584, 1503, 1503, 1584, 1503, 1584,
     1584, 1503, 1503, 1503, 1584, 1503, 1584, 1584, 1503, 1510,
     1510, 1510, 1510, 1510, 1584, 1510, 1510, 1584, 1510, 1584,
     1584, 1510, 1510, 1510, 1584, 1510, 1584, 1584, 1510, 1517,
     1517, 1517, 1517, 1517, 1584, 1517, 1517, 1584, 1517, 1584,
     1584, 1517, 1517, 1517, 1584, 1517, 1584, 1584, 1517, 1523,
     1523, 1523, 1523, 1523, 1584, 1523, 1523, 1584, 1523, 1584,
     1584, 1523, 1523, 1523, 1584, 1523, 1584, 1584, 1523, 1562,
     1562, 1562, 1562, 1562, 1584, 1562, 1562, 1584, 1562, 1584,
     1584, 1562, 1562, 1562, 1584, 1562, 1584, 1584, 1562, 1570,

     1570, 1570, 1570, 1570, 1584, 1570, 1570, 1584, 1570, 1584,
     1584, 1570, 1570, 1570, 1584, 1570, 1584, 1584, 1570,   27,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584
    } ;

static const flex_int16_t yy_chk[10391] =
    {   0,
        0,    0,    1,    1,    1,    2,    2,    2,   32,   36,
      147,   32,   36,  147,   32,   36,  140,  140,   38,   32,
       36,   38,   88,  172,    1,   88,   67,    2,   32,   36,
       38,    0,   38,    0,   38,   38,   38,   45,   67,   45,
       45,   45,   46,  123,  123,   46,   66,   66,   66,  134,
      145,  145,  134,  165,  165,   67,  172,   88,   46,   46,
       46,  177,    0,  134,   46,  177,  177,    1,    1,    1,
        2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    9,    9,    9,    9,   28,   28,   28,
        9,  392,    9,    9,    9,    9,  392,    9,    9,   33,

     1220,   33,   33,   33,   34,    9,   34,   34,   34,   35,
     1221,   35,   35,   35,   80,  305,  305,    9,    9,    9,
       60,  204,   99,   60,  204,   99,   80,   48, 1222,   48,
       48,   48,   60,  379,   60,  379,   60,   60,   60,   48,
     1223,  110,  593,   80,  110,    9,  593,    9,    9,    9,
        9,    9,   10,   10,   10,   10,   48,   99,  295,   10,
     1224,   10,   10,   10,   10,   61,   10,   10,  136,  136,
      136,  144,  144,   61,   10, 1225,  110,   68,   61,  295,
      141,  137,   61,  141,  137,   68,   10,   10,   10,   69,
       68,  295, 1226,  144,   68,   69,   61, 1227,  295,   69,

       69,   69,   69,  137,  152,  152,  152,  138,   68,  138,
      138,  138,  320,  320,   10,  141,   10,   10,   10,   10,
       10,   11,   11,   11,   11,   61,   61,   61,   11, 1228,
       11,   11,   11,   11, 1229,   11,   11,   68,   68,   68,
      161,  161,  161,   11,  176,   70,   70,  180,  176,   69,
       69,   69,  176,  333,  333,   11,   11,   11,   70,   82,
       70,   70,   70,   75,  214,   82,   75,  214, 1230,   82,
       82,   82,   82,  215,  215,   75,  215,   75, 1231,   75,
       75,   75, 1232,   11, 1233,   11,   11,   11,   11,   11,
       12,   12,   12,   12,  180,  180,  180,   12,  388,   12,

       12,   12,   12,  336,   12,   12,  201,  201,  201, 1234,
       76,  388,   12,  304,   79,  336,  304,   79,   76,   82,
       82,   82,  336,   76,   12,   12,   12,   76,   79, 1238,
       79,   79,   79,   42,   83,   83,   79,  263,  263,   42,
      263,   76,  153,   42,  153,  153,  153,   83,  304,   83,
       83,   83,   12, 1239,   12,   12,   12,   12,   12,   13,
       13,   13,   13,   42,   13, 1240,   42,  135,   42, 1241,
       76,   76,   76,  135, 1242,   81,  308,  135,  323,  308,
       42,  323,  154,   81,  154,  154,  154,   42,   81,  202,
      202,  202,   81, 1246,   13,  217,  217,  135, 1247,  217,

      135,  155,  135,  155,  155,  155,   81,  162, 1248,  162,
      162,  162, 1253,  163,  135,  163,  163,  163,  212,  212,
      212,  135, 1254,   13,   13,   13,   13,   13,   14,   14,
       14,   14,  189,   14, 1255,   81,   81,   81,  158,  164,
      353,  158,  164,  353,  158,  164,  351,  351,  166,  158,
      164,  166,  167,  637,  167,  167,  167,  189,  158,  164,
      166,  637,  166,   14,  166,  166,  166,  168, 1256,  210,
      168,  210, 1257,  210,  210,  210,  224,  224,  224,  189,
      189,  189,  224,  168,  168,  168,  228,  228,  228,  168,
      359,  359,   14,   14,   14,   14,   14,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   17,   17,   17,
       17,  169, 1261,  169,  169,  169,  182, 1262,  223,  183,
      223,  223,  223,  169,  203, 1263,  203,  203,  203,  227,
       17,  227,  227,  227,  185,  231,  203,  231,  231,  231,

      169,  187,   17,  312,  312,   17,  182,  312,  182,  183,
      243,  243,  243,  203,  186, 1264,  319,  193,  185,  319,
      184,  361,  361,  182,  182,  182,  183,  183,  183,  187,
     1265,   17,   17,   17,   17,   17,   18,   18,   18,   18,
      184,  185,  185,  185,  186,  186,  186,  184,  187,  187,
      187,  319,  193,  184, 1269,  193,  251,  251,  251,   18,
     1270,  186,  186,  186,  193,  193,  193,  184,  184,  184,
     1271,   18,  309,  309,   18,  309, 1273,  188, 1274,  235,
     1275,  205,  192,  205,  205,  205,  190,  371,  371,  235,
      235,  235, 1276,  205,  235,  324,  324,  188,  324, 1277,

       18,   18,   18,   18,   18,   19,  190,  197,   19, 1278,
      205,   19,  196,   19,   19,  192,  191,   19,   19,   19,
       19,   19,   19,   19,  188,  188,  188,  194,   19,  192,
      192,  192, 1279,  190,  190,  190,  191,  230,  195,  197,
       19, 1280,   19,   21,   21,   21,   21,  196,   21,  191,
      230,  194, 1281,  344,  197,  197,  197,  344,  344,  196,
      196,  196, 1282,  191,  191,  191,  195,  273,  273,  273,
      343,  195, 1283,  343,  194,  194,  194,  208,   21,  208,
      208,  208,  281,  281,  281,  195,  195,  195, 1284,  208,
     1285,  225,  343,  225,  225,  225, 1286,  230,  230,  230,

      289,  289,  289,  225,  372,  372,  208,   21,   21,   21,
       21,   21,   22,   22,   22,   22,  222,   22, 1287,  222,
      225,  264, 1288,  264,  264,  264,  355,  226,  222,  355,
      222, 1289,  222,  222,  222,  226, 1290,  229, 1291,  268,
      226,  268,  268,  268,  226,  229,  362,   22,  269,  362,
      229,  269,  326,  326,  229,  248,  326,  248,  226,  248,
      248,  248,  269, 1292,  269,  269,  269, 1293,  229,  248,
      269, 1294,  275,  338,  338,  338,   22,   22,   22,   22,
       22,   23,   23,   23,   23,  275,  248,  226,  226,  226,
      339,  339,  339,  390,  236, 1295,  390,  229,  229,  229,

      249, 1296,  236, 1297,   23, 1298,  342,  236,  249,  342,
      250,  236,  267,  249, 1299,  267,   23,  249,  250,   23,
      342,  613,  613,  250,  267,  236,  267,  250,  267,  267,
      267,  249,  275,  275,  275,  346, 1300,  346,  346,  346,
     1301,  250,  347,  347,  347,   23,   23,   23,   23,   23,
       24,   24,   24,   24,  236,  236,  236,  383,  383,  383,
      249,  249,  249, 1305,  270, 1306,  270,  270,  270,  252,
      250,  250,  250,   24,  614,  614,  270,  252,  350,  256,
      434,  350,  252,  434, 1307,   24,  252,  256,   24,  421,
      421,  421,  256,  270,  271,  348,  256,  348,  348,  348,

      252, 1308,  271,  354,  354, 1309,  354,  271,  435,  435,
      256,  271,  435,  350,   24,   24,   24,   24,   24,   25,
       25,   25,   25,  600,  600,  271,  600,   25,  365,  252,
      252,  252,  365,  365,  365,   25,   25,   25, 1313,  256,
      256,  256, 1314,   25,   25,   25,  358,  426,  358,  358,
      358,  426,  426,  426,  271,  271,  271, 1315,   25,   25,
       25,   25,   25,   25,   26,   26,   26,   26, 1320,  286,
      375,  286,   26,  286,  286,  286,  431,  431,  431, 1321,
       26,   26,   26,  286,  364,  364,  364,  430,   26,   26,
       26,  430,  430,  430,  364,  432, 1322,  432,  432,  432,

      286,  626,  626,   26,   26,   26,   26,   26,   26,   43,
      594,  364,   43,   43,  594,  594,   43,  375,  375,  375,
       43,   43, 1323,  396,   43,   43,   43,   43,   43,  601,
       43,   43,  601,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43, 1324,   43, 1328,  396, 1329,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
      396,  396,  396, 1330,  381,   43,   43,   43,   53,   53,
       53,  381,  602,  602,  272, 1331,  602,  381,  433,  433,
      433,  397,  272,   53,   53,  274, 1332,  272,  439,  439,

      439,  272, 1336,  274,  607,  441, 1337,  607,  274,  441,
      441,  441,  274,  633,  633,  272,   53,   53,  892,  892,
       53,   53,  606,  606,  397,  606,  274, 1338,   53,  619,
      619,   53,  619,   53, 1340,   53,   53,   62,  397,  397,
      397,  893,  893,   62,  272,  272,  272,   62,   62,   62,
       62,   62,   62,  898,  898,  274,  274,  274,  276,  402,
       62,   62,   62,   62,   62,  280,  276,   62,  287, 1341,
       62,  276,   62,  280,  620,  276,  287,  620,  280, 1342,
      288,  287,  280, 1343,   62,  287,  395,  402,  288,  276,
     1344,   62,   64,  288, 1345,  402,  280,  288,  640,  287,

       64,  640,   64,   64,   64,   64,  402,  402,  402,   64,
      398,  288,  449,  449,  449, 1346,  395, 1347,  276,  276,
      276, 1351, 1352,   64, 1353,  280,  280,  280,  287,  287,
      287,  290, 1355,  395,  395,  395,  399, 1357, 1359,  290,
      288,  288,  288,  294,  290, 1360,  398,  398,  290,  400,
     1361,  294,   64,   64,   64,   78,  294,  398,  398,  398,
      294,  403,  290,   78,  401,   78,   78,   78,   78,  399,
     1362, 1367,   78, 1368,  294,  458,  458,  458,  424,  400,
      424,  424,  424,  399,  399,  399,   78, 1369, 1375,  401,
      424,  290,  290,  290, 1376,  403,  400,  400,  400,  479,

      479,  479, 1377,  294,  294,  294, 1396,  424,  403,  403,
      403,  401,  401,  401, 1397,   78,   78,   78,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,  114,  114,
      114, 1398,  114,  608,  608,  114, 1399,  608,  301,  488,

      488,  488, 1400,  114,  114,  404,  301,  498,  498,  498,
     1401,  301,  503,  503,  503,  301,  519,  519,  519,  410,
     1402, 1403,  114, 1404, 1408,  114,  114,  114,  404,  301,
      114,  114,  428, 1409,  428,  428,  428, 1410,  114, 1411,
     1412,  114,  410,  114,  428,  114,  114,  124,  124,  124,
     1413,  409,  404,  404,  404,  124,  124,  124,  301,  301,
      301,  428,  405, 1417, 1418,  406,  410,  410,  410,  408,
      124,  124,  124,  124,  124,  124,  131,  416,  131,  131,
     1419,  414,  131,  131, 1420,  521,  131,  131,  131,  521,
      521,  521,  409,  131,  405,  411, 1421,  405,  409,  409,

      409, 1425,  406,  413,  131,  408, 1426,  131,  416,  405,
      405,  405,  406,  406,  406,  414,  408,  408,  408,  529,
      529,  529, 1427, 1428,  416,  416,  416,  411,  414,  414,
      414,  131,  132,  132,  132,  647,  132, 1429,  647,  132,
      413, 1430,  411,  411,  411,  647,  679,  132,  132,  679,
      413,  413,  413,  474,  132,  474,  679,  474,  474,  474,
      538,  538,  538,  557,  557,  557,  132,  474, 1431,  132,
      132,  132, 1432, 1433,  132,  132,  494, 1435,  494,  494,
      494, 1436,  132, 1437,  474,  132, 1438,  132,  494,  132,
      132,  181,  181,  181,  181,  181,  181,  181, 1439,  181,

     1440,  181,  181,  181,  181,  494,  181,  181,  181,  181,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207, 1441,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      244,  415, 1442, 1443,  417,  456, 1444,  418,  244, 1445,
      244,  244,  244,  244,  566,  566,  566,  244,  456,  412,

      244,  475,  412,  576,  576,  576,  581,  581,  581,  412,
      477,  244,  901,  415, 1446,  901,  456,  244,  412,  612,
      612,  612,  901,  477,  418,  417,  480,  477,  415,  415,
      415,  417,  417,  417,  418,  418,  418, 1447, 1448,  480,
      244,  244,  244,  246,  485,  456,  456,  456,  475,  475,
      475,  246,  553,  246,  246,  246,  246,  618,  618,  618,
      246, 1452, 1453,  246, 1454,  412,  412,  412, 1455, 1456,
      477,  477,  477,  572, 1457,  572,  572,  572,  622, 1461,
      246, 1462,  622,  622,  622,  572,  480,  480,  480, 1463,
     1464,  485,  485,  485,  689,  689,  689, 1465, 1469,  553,

      553,  553,  572,  246,  246,  246,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247, 1470,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  258,  563,  697,  697,
      697, 1471,  442, 1472,  258, 1473,  258,  258,  258,  258,
      442, 1474,  623,  258,  623,  442,  623,  623,  623,  442,

      902,  443, 1475,  902,  444,  912, 1476,  258,  912,  443,
      902, 1477,  444,  442,  443,  912, 1479,  444,  443, 1480,
     1481,  444, 1482,  481,  563,  563,  563,  481,  481,  481,
      481,  924,  443,  489,  924,  444,  258,  258,  258,  282,
     1483,  924,  442,  442,  442, 1484,  489,  282, 1485,  282,
      282,  282,  282,  717,  717,  717,  282, 1486, 1488,  282,
     1490,  443,  443,  443,  444,  444,  444,  445, 1492, 1499,
      282, 1500, 1501,  450, 1506,  445,  282,  481,  481,  481,
      445,  450, 1507,  558,  445,  694,  450,  694,  694,  694,
      450, 1508,  536,  489,  489,  489,  558, 1513,  445,  282,

      282,  282,  284,  693,  450,  536, 1514,  693,  693,  693,
      284, 1515,  284,  284,  284,  284,  721,  721,  721,  284,
     1520, 1521,  284,  536,  738,  738,  738,  445,  445,  445,
      742,  742,  742,  450,  450,  450,  690, 1522,  690,  284,
      690,  690,  690,  558,  558,  558,  746,  746,  746,  751,
      751,  751,  536,  536,  536,  692, 1526,  692, 1527,  692,
      692,  692,  284,  284,  284,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
     1528,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,

      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  296,  763,  763,  763, 1531,
     1532,  451, 1533,  296, 1534,  296,  296,  296,  296,  451,
     1535,  452,  296,  926,  451, 1536,  926,  466,  451,  452,
      775,  775,  775,  926,  452,  466,  296,  737,  452, 1537,
      466,  567,  451,  552,  466,  552, 1538,  552,  552,  552,
     1539, 1540,  452,  928,  567,  490,  928,  552,  466,  490,
      490,  490,  490,  928, 1541,  296,  296,  296,  334,  334,

      334,  451,  451,  451,  552, 1542,  334,  334,  334, 1543,
     1544,  452,  452,  452,  737,  737,  737,  466,  466,  466,
     1545,  334,  334,  334,  334,  334,  334,  374,  374,  374,
     1546,  567,  567,  567,  743,  374,  374,  374,  744,  490,
      490,  490,  559,  795,  795,  795,  559,  559,  559,  559,
      374,  374,  374,  374,  374,  374,  407,  407,  407,  407,
      407,  835,  407,  407,  841,  407,  407,  407,  842, 1547,
      407,  407,  815,  815,  815, 1548,  407,  407, 1549, 1550,
      407,  743,  743,  743, 1551,  744,  744,  744,  819,  819,
      819,  407, 1552,  407,  407,  407,  559,  559,  559,  836,

      836,  836,  840,  840,  840,  844,  844,  844,  835,  835,
      835,  841,  841,  841, 1553,  842,  842,  842,  407,  407,
      407,  407,  407,  407,  407,  407,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422, 1554,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  440,  688, 1555,  688,

     1556,  688,  688,  688,  467, 1557,  440,  440,  440,  440,
      468,  688,  467,  440, 1558, 1565,  440,  467,  468, 1566,
      691,  467,  691,  468,  691,  691,  691,  468,  688,  849,
      849,  849, 1567,  440,  691,  467,  496,  759,  759,  759,
      759,  468,  939, 1573,  496,  939,  497, 1574, 1575,  496,
     1576,  691,  939,  496,  497,  771,  440,  440,  440,  497,
     1577,  499, 1578,  497,  467,  467,  467,  496,  771,  499,
      468,  468,  468,  472,  499, 1579, 1580,  497,  499, 1581,
     1582,  472, 1583,  472,  472,  472,  472,  759,  759,  759,
      472, 1605,  499,  472, 1605, 1219,  496,  496,  496, 1608,

     1605,  509,  760,  760,  760, 1608,  497,  497,  497,  509,
      472, 1218,  760, 1628,  509,  771,  771,  771,  509, 1628,
     1217,  499,  499,  499, 1629,  555,  861,  861,  861,  760,
     1629, 1640,  509,  472,  472,  472,  473, 1640,  555,  873,
      873,  873,  555, 1216,  473, 1215,  473,  473,  473,  473,
      982,  982,  982,  473, 1686,  654,  473,  931,  654, 1214,
     1686,  509,  509,  509,  510,  654,  942,  473,  994,  994,
      994,  511,  510,  473,  654, 1212, 1643,  510, 1643,  511,
     1632,  510, 1643, 1632,  511,  555,  555,  555,  511, 1632,
      765,  765,  765,  931, 1211,  510,  473,  473,  473,  478,

      765, 1210,  511,  942,  931,  931,  931,  478, 1199,  478,
      478,  478,  478,  942,  942,  942,  478,  765, 1198,  478,
     1197,  654,  654,  654,  510,  510,  510,  522, 1187,  943,
      478,  511,  511,  511,  523,  522,  478, 1186,  964, 1736,
      522,  964,  523, 1682,  522, 1736, 1682,  523,  964, 1185,
      568,  523, 1682,  943,  568,  568,  568,  568,  522,  478,
      478,  478,  487, 1180, 1179,  523, 1178,  869, 1169, 1167,
      487,  938,  487,  487,  487,  487,  943,  943,  943,  487,
      869, 1166,  487, 1165,  524, 1163, 1162,  522,  522,  522,
      525, 1160,  524,  487,  523,  523,  523,  524,  525,  487,

      530,  524, 1159,  525,  568,  568,  568,  525,  530, 1158,
      930, 1157,  938,  530, 1154,  524, 1153,  530,  938,  938,
      938,  525,  487,  487,  487,  495, 1152,  869,  869,  869,
     1151,  530, 1150,  495, 1149,  495,  495,  495,  495,  930,
     1148, 1147,  495,  932,  524,  524,  524, 1000, 1000, 1000,
      525,  525,  525, 1004, 1004, 1004,  495,  930,  930,  930,
      530,  530,  530,  531, 1146,  655,  532,  933,  655, 1145,
      932,  531, 1144, 1143,  532,  655,  531, 1142, 1141,  532,
      531, 1140,  715,  532,  655,  495,  495,  495,  515, 1139,
      932,  932,  932, 1138,  531,  715,  515,  532,  515,  515,

      515,  515,  696,  933, 1137,  515,  696,  696,  696,  696,
      858,  858,  858,  715,  933,  933,  933, 1135, 1133,  515,
      858,  544, 1132,  531,  531,  531,  532,  532,  532,  544,
     1131,  655,  655,  655,  544, 1127,  656,  858,  544,  656,
     1126, 1125,  715,  715,  715, 1118,  656, 1117,  515,  515,
      515,  520,  544, 1116, 1110,  656,  696,  696,  696,  545,
     1108,  520,  520,  520,  520, 1107, 1106,  545,  520, 1105,
     1104,  520,  545, 1021, 1021, 1021,  545,  656,  546, 1101,
     1100,  544,  544,  544,  574, 1099,  546, 1683,  520, 1683,
      545,  546,  574, 1683, 1098,  546,  967,  574,  967,  967,

      967,  574,  656,  656,  656,  764,  764,  764,  764,  546,
     1097,  520,  520,  520, 1096,  574,  935, 1095, 1093,  545,
      545,  545, 1092, 1091,  657, 1089,  968,  657,  968,  968,
      968, 1046, 1046, 1046,  657, 1072, 1072, 1072,  546,  546,
      546,  550, 1088,  657,  574,  574,  574, 1087,  935,  550,
     1086,  550,  550,  550,  550,  764,  764,  764,  550, 1085,
     1083,  550, 1082,  935,  935,  935,  575,  657, 1081,  577,
     1080,  863,  863,  863,  575, 1079,  587,  577,  550,  575,
     1078,  863,  577,  575,  587, 1077,  577, 1076, 1075,  587,
      657,  657,  657,  587, 1074,  941, 1156,  575,  863, 1156,

      577,  550,  550,  550,  551, 1073, 1156,  587, 1071, 1070,
      945, 1069,  551, 1068,  551,  551,  551,  551, 1084, 1084,
     1084,  551, 1067, 1066,  551,  941,  575,  575,  575,  577,
      577,  577,  588, 1065,  945,  551,  587,  587,  587,  589,
      588,  551,  941,  941,  941,  588, 1064,  589,  947,  588,
      658, 1164,  589,  658, 1164, 1063,  589,  945,  945,  945,
      658, 1164, 1058,  588,  551,  551,  551,  556, 1057,  658,
      589, 1056,  716, 1055, 1054,  556, 1053,  556,  556,  556,
      556, 1090, 1090, 1090,  556,  716, 1052,  556,  956, 1051,
     1050,  658,  588,  588,  588,  947,  947,  947,  556,  589,

      589,  589,  659,  716,  556,  659, 1049,  857,  857,  857,
      857, 1048,  659, 1094, 1094, 1094,  658,  658,  658,  747,
     1047,  659, 1045,  747,  747,  747,  747,  556,  556,  556,
      565, 1043,  716,  716,  716,  956,  956,  956,  565, 1042,
      565,  565,  565,  565, 1041,  660, 1037,  565,  660, 1036,
      565, 1035, 1028,  661,  659,  660,  661,  857,  857,  857,
      949,  565, 1027,  661,  660, 1026, 1020,  565,  659,  659,
      659, 1018,  661,  747,  747,  747, 1017, 1016,  662, 1015,
      949,  662, 1111, 1111, 1111, 1136, 1136, 1136,  662, 1014,
      565,  565,  565,  573,  660, 1011, 1684,  662, 1684, 1010,

      661,  573, 1684,  573,  573,  573,  573,  949,  949,  949,
      573,  660,  660,  660,  954,  663, 1009, 1008,  663,  661,
      661,  661,  662,  664,  573,  663,  664, 1175,  665, 1173,
     1175,  665, 1173,  664,  663, 1007, 1006, 1175,  665, 1173,
      668, 1005,  664,  668,  662,  662,  662,  665, 1003, 1002,
      668, 1001,  954,  573,  573,  573,  596,  999,  663,  668,
      998,  954,  954,  954,  596,  997,  596,  596,  596,  596,
      794,  996, 1173,  596,  794,  794,  794,  794,  995,  664,
      993,  663,  663,  663,  992,  991,  668,  596,  990,  664,
      664,  664,  698,  989,  665,  665,  665, 1268, 1268, 1268,

      698,  755,  698,  698,  698,  698,  668,  668,  668,  698,
      988,  987,  666,  986,  755,  666,  596,  596,  596,  616,
      616,  616,  666,  985,  794,  794,  794,  616,  616,  616,
      984,  666,  755,  845, 1272, 1272, 1272,  845,  845,  845,
      845,  983,  616,  616,  616,  616,  616,  616,  627,  627,
      627,  666,  698,  698,  698,  981,  627,  627,  627,  980,
      979,  755,  755,  755, 1335, 1335, 1335,  667,  962,  978,
      667,  627,  627,  627,  627,  627,  627,  667,  666,  666,
      666,  670,  958,  977,  670,  976,  667,  845,  845,  845,
      966,  670,  975, 1181,  974,  973, 1181,  961,  962,  960,

      670,  959,  958, 1181,  676,  952,  951,  676,  675, 1183,
      950,  675, 1183,  925,  676,  962,  962,  962,  675, 1183,
      966,  923,  667,  676, 1339, 1339, 1339,  675,  922,  958,
      958,  958,  921,  667,  667,  667, 1181,  966,  966,  966,
     1434, 1434, 1434,  920,  676,  919,  918,  670,  670,  670,
      671,  671,  671,  671,  671,  671,  671,  917,  671,  916,
      671,  671,  671,  671,  675,  671,  671,  671,  671,  915,
      676,  676,  676,  914,  675,  675,  675,  677,  677,  677,
      677,  677,  913,  677,  677,  911,  677,  677,  677,  813,
      678,  677,  677,  678, 1478, 1478, 1478,  677,  677,  910,

      678,  677,  813,  683,  909,  908,  683,  681,  907,  678,
      681,  906,  677,  683,  677,  677,  677,  681, 1177,  905,
      813, 1177,  683,  904,  903,  900,  681,  677, 1177,  897,
      891,  890,  889,  678,  888,  887,  886,  885,  881,  677,
      677,  677,  677,  677,  677,  677,  677,  880,  683,  813,
      813,  813,  879,  878,  877,  876,  678,  678,  678, 1177,
      681,  875,  684,  874,  872,  684,  871,  870,  860,  683,
      683,  683,  684,  681,  681,  681,  682,  682,  682,  682,
      682,  684,  682,  682,  859,  682,  682,  682,  856,  685,
      682,  682,  685,  855,  854,  852,  682,  682,  851,  685,

      682,  850,  848,  847,  699,  684,  686,  846,  685,  686,
      839,  682,  699,  682,  682,  682,  686,  699,  838,  700,
      682,  699,  837, 1188,  833,  686, 1188,  700,  684,  684,
      684,  832,  700, 1188,  831,  699,  700,  830,  682,  682,
      682,  682,  682,  682,  682,  682,  701,  829, 1190,  825,
      700, 1190,  824,  686,  701,  685,  685,  685, 1190,  701,
      823,  822,  821,  701,  699,  699,  699,  820,  818,  817,
      707,  816,  686,  686,  686,  812,  811,  701,  707,  700,
      700,  700,  708,  707,  810,  709, 1192,  707,  809, 1192,
      708,  808,  728,  709,  804,  708, 1192,  803,  709,  708,

      728,  707,  709,  802,  729,  728,  701,  701,  701,  728,
      801,  800,  729,  708,  793, 1195,  709,  729, 1195,  791,
      730,  729,  790,  728,  789, 1195, 1191,  814,  730, 1191,
      707,  707,  707,  730,  788,  729, 1191,  730,  937,  787,
      814,  937,  708,  708,  708,  709,  709,  709,  937,  783,
      782,  730,  728,  728,  728,  766,  781,  937,  814,  780,
      779,  767,  778,  766,  729,  729,  729, 1200,  766,  767,
     1200,  777,  766,  776,  767, 1191,  774, 1200,  767,  773,
      730,  730,  730,  736,  772,  762,  766,  814,  814,  814,
      761,  736,  767,  736,  736,  736,  736,  758, 1202, 1193,

      736, 1202, 1193,  736,  937,  937,  937,  757, 1202, 1193,
      862,  862,  862,  862,  736,  766,  766,  766,  768,  756,
      736,  767,  767,  767,  770,  754,  768,  753,  768,  768,
      768,  768,  770,  752,  784,  768,  750,  770,  749,  853,
      748,  770,  784,  736,  736,  736,  745,  784,  741,  740,
      739,  784,  853, 1193,  745,  770,  745,  745,  745,  745,
      862,  862,  862,  745,  735,  784,  745,  734,  733,  732,
      853,  731,  727,  726,  785,  725,  724,  745,  768,  768,
      768,  723,  785,  745,  770,  770,  770,  785,  722,  720,
      719,  785,  718,  714,  784,  784,  784,  713,  712,  853,

      853,  853,  711,  710,  706,  785,  745,  745,  745,  769,
      705, 1030, 1030, 1030, 1030,  786,  704,  769,  703,  769,
      769,  769,  769,  786,  702,  695,  769,  687,  786,  674,
      673,  672,  786,  653,  785,  785,  785,  796,  652,  651,
      769,  650,  649,  797,  648,  796,  786,  796,  796,  796,
      796,  797,  646,  645,  796, 1204,  797,  644, 1204,  643,
      797, 1030, 1030, 1030,  641, 1204,  639,  638,  636,  769,
      769,  769,  635,  634,  797,  786,  786,  786,  792,  632,
      631,  630, 1201,  629, 1206, 1201,  792, 1206,  792,  792,
      792,  792, 1201,  798, 1206,  792,  628,  796,  796,  796,

      799,  798,  624,  797,  797,  797,  798,  611,  799,  792,
      798, 1204,  805,  799,  610,  806, 1208,  799,  605, 1208,
      805,  604,  599,  806,  798,  805, 1208, 1206,  806,  805,
      598,  799,  806,  597,  807,  595,  592, 1201,  792,  792,
      792,  591,  807,  805,  590,  586,  806,  807,  585, 1205,
      826,  807, 1205,  798,  798,  798,  584,  583,  826, 1205,
      799,  799,  799,  826,  582,  807,  580,  826,  579,  578,
      827,  571,  805,  805,  805,  806,  806,  806,  827, 1349,
      570,  826, 1349,  827,  569,  828,  564,  827,  562, 1349,
      561,  864,  560,  828,  807,  807,  807, 1354,  828,  864,

     1354,  827,  828, 1356,  864, 1205, 1356, 1354,  864,  554,
      826,  826,  826, 1356,  953, 1358,  828,  953, 1358,  549,
      548,  547,  864,  543,  953, 1358,  865,  542,  541,  540,
      827,  827,  827,  953,  865,  539,  537,  535,  534,  865,
      533,  528,  527,  865,  526,  828,  828,  828,  834,  518,
      517,  864,  864,  864,  516,  514,  834,  865,  834,  834,
      834,  834,  513, 1365, 1370,  834, 1365, 1370,  834,  512,
      508,  507,  506, 1365, 1370, 1120, 1120, 1120, 1120,  834,
      953,  953,  953,  866,  505,  834,  865,  865,  865,  868,
      504,  866,  502,  866,  866,  866,  866,  868,  501,  882,

      866,  500,  868,  493, 1012,  492,  868,  882,  834,  834,
      834,  843,  882,  491,  486,  484,  882, 1012,  483,  843,
      868,  843,  843,  843,  843, 1120, 1120, 1120,  843,  482,
      882,  843,  476,  471,  470, 1012,  469,  463,  462,  883,
      461,  460,  843,  866,  866,  866,  459,  883,  843,  868,
      868,  868,  883,  457,  455,  454,  883,  453,  448,  882,
      882,  882,  447,  446, 1012, 1012, 1012,  438,  437,  420,
      883,  843,  843,  843,  867,  419, 1249, 1249, 1249, 1249,
      884,  394,  867,  393,  867,  867,  867,  867,  884,  391,
      389,  867,  387,  884,  386,  385,  384,  884,  382,  883,

      883,  883,  970, 1373, 1381,  867, 1373, 1381,  971,  380,
      970,  884,  378, 1373, 1381,  970,  971, 1013,  377,  970,
      376,  971,  370,  369,  349,  971, 1249, 1249, 1249,  345,
     1013,  330,  329,  970,  867,  867,  867,  317,  316,  971,
      884,  884,  884,  896, 1316, 1316, 1316, 1316, 1013, 1383,
      303,  896, 1383,  896,  896,  896,  896,  302,  972, 1383,
      896,  300,  970,  970,  970,  299,  972,  298,  971,  971,
      971,  972,  293, 1384,  896,  972, 1384, 1013, 1013, 1013,
      292, 1387, 1392, 1384, 1387, 1392,  291, 1379,  279,  972,
     1379, 1387, 1392,  278, 1316, 1316, 1316, 1379,  277,  266,

      265,  262,  261,  896,  896,  896,  899,  899,  899, 1383,
      260,  257,  255,  254,  899,  899,  899,  253,  972,  972,
      972,  234,  233,  232,  221,  220,  209, 1044,  200,  899,
      899,  899,  899,  899,  899,  934,  934,  934,  934,  934,
     1044,  934,  934, 1379,  934,  934,  934,  199,  198,  934,
      934,  178,  157,  149, 1389,  934,  934, 1389, 1044,  934,
      143,  139, 1102,  130, 1389,  128, 1394,  127, 1495, 1394,
      934, 1495,  934,  934,  934, 1102, 1394,  126, 1495,  934,
     1497, 1504, 1509, 1497, 1504, 1509,  121, 1044, 1044, 1044,
     1497, 1504, 1509, 1102,  118,  117,  116,  934,  934,  934,

      934,  934,  934,  934,  934,  936,  936,  936,  936,  936,
     1389,  936,  936,  112,  936,  936,  936,  108, 1511,  936,
      936, 1511, 1102, 1102, 1102,  936,  936, 1518, 1511,  936,
     1518, 1524, 1103,  107, 1524,  106, 1529, 1518,  101, 1529,
      936, 1524,  936,  936,  936, 1103, 1529, 1560, 1563, 1568,
     1560, 1563, 1568,   97,   96,   95,   90, 1560, 1563, 1568,
       86,   85,   84, 1103,   77,   74,   73,  936,  936,  936,
      936,  936,  936,  936,  936,  944,  944,  944,  944,  944,
       72,  944,  944,   65,  944,  944,  944,   59, 1571,  944,
      944, 1571, 1103, 1103, 1103,  944,  944,   58, 1571,  944,

       57,   51,   44,   40,   31,   30,   27,    0,    0,    0,
      944,    0,  944,  944,  944,    0,    0,    0,    0,    0,
        0, 1134,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1134,    0,    0,  944,  944,  944,
      944,  944,  944,  944,  944,  948,  948,  948,  948,  948,
      948,  948, 1134,  948,    0,  948,  948,  948,  948,    0,
      948,  948,  948,  948,  963,  963,  963,  963,  963,    0,
      963,  963,    0,  963,  963,  963,    0,    0,  963,  963,
        0, 1134, 1134, 1134,  963,  963,    0,    0,  963,    0,
        0,    0, 1022,    0,    0,    0,    0,    0,    0,  963,

     1022,  963,  963,  963,    0, 1022,    0, 1023,    0, 1022,
        0,    0,    0,    0,    0, 1023,    0,    0,    0,    0,
     1023,    0,    0, 1022, 1023,    0,  963,  963,  963,  963,
      963,  963,  963,  963,  969,    0,    0,    0, 1023,    0,
        0,    0,  969,    0,  969,  969,  969,  969,    0,    0,
        0,  969, 1022, 1022, 1022,    0,    0,    0, 1024,    0,
        0, 1266,    0,    0,    0,  969, 1024, 1023, 1023, 1023,
     1025, 1024,    0, 1029, 1266, 1024,    0,    0, 1025,    0,
        0, 1029,    0, 1025,    0, 1031, 1029, 1025,    0, 1024,
     1029,    0, 1266, 1031,  969,  969,  969, 1019, 1031,    0,

        0, 1025, 1031,    0, 1029, 1019,    0, 1019, 1019, 1019,
     1019, 1267,    0,    0, 1019,    0, 1031,    0, 1024, 1024,
     1024, 1266, 1266, 1266, 1267,    0,    0,    0, 1019,    0,
     1025, 1025, 1025, 1029, 1029, 1029, 1032,    0,    0,    0,
        0,    0, 1267, 1034, 1032, 1031, 1031, 1031,    0, 1032,
        0, 1034,    0, 1032,    0,    0, 1034, 1019, 1019, 1019,
     1034,    0, 1038,    0,    0,    0,    0, 1032,    0,    0,
     1038, 1267, 1267, 1267, 1034, 1038,    0, 1039,    0, 1038,
        0,    0, 1333,    0,    0, 1039,    0,    0,    0,    0,
     1039,    0,    0, 1038, 1039, 1333, 1032, 1032, 1032, 1033,

        0,    0,    0, 1034, 1034, 1034,    0, 1033, 1039, 1033,
     1033, 1033, 1033, 1333, 1334,    0, 1033,    0, 1040,    0,
        0,    0, 1038, 1038, 1038,    0, 1040, 1334,    0,    0,
     1033, 1040,    0,    0,    0, 1040,    0, 1039, 1039, 1039,
     1060,    0, 1333, 1333, 1333, 1334,    0,    0, 1060, 1040,
        0,    0,    0, 1060,    0, 1061,    0, 1060,    0, 1033,
     1033, 1033,    0, 1061,    0,    0,    0,    0, 1061,    0,
        0, 1060, 1061,    0, 1334, 1334, 1334,    0, 1040, 1040,
     1040, 1059,    0,    0,    0,    0, 1061,    0,    0, 1059,
        0, 1059, 1059, 1059, 1059,    0, 1062,    0, 1059,    0,

     1060, 1060, 1060,    0, 1062,    0,    0,    0,    0, 1062,
        0,    0, 1059, 1062,    0, 1061, 1061, 1061, 1112,    0,
        0, 1113,    0,    0,    0,    0, 1112, 1062,    0, 1113,
        0, 1112,    0,    0, 1113, 1112,    0, 1114, 1113,    0,
        0, 1059, 1059, 1059,    0, 1114,    0,    0,    0, 1112,
     1114,    0, 1113,    0, 1114,    0, 1062, 1062, 1062, 1109,
        0,    0,    0,    0,    0,    0,    0, 1109, 1114, 1109,
     1109, 1109, 1109,    0,    0,    0, 1109,    0, 1112, 1112,
     1112, 1113, 1113, 1113,    0,    0,    0, 1115,    0,    0,
     1109,    0,    0, 1119,    0, 1115,    0, 1114, 1114, 1114,

     1115, 1119,    0,    0, 1115,    0, 1119,    0,    0, 1121,
     1119,    0,    0,    0,    0, 1122,    0, 1121, 1115, 1109,
     1109, 1109, 1121, 1122, 1119,    0, 1121,    0, 1122,    0,
        0,    0, 1122,    0,    0,    0,    0,    0,    0,    0,
     1121,    0,    0, 1124,    0,    0, 1122, 1115, 1115, 1115,
     1128, 1124,    0, 1119, 1119, 1119, 1124,    0, 1128,    0,
     1124,    0,    0, 1128,    0,    0,    0, 1128,    0, 1121,
     1121, 1121,    0,    0, 1124, 1122, 1122, 1122, 1123,    0,
        0, 1128,    0,    0, 1129,    0, 1123,    0, 1123, 1123,
     1123, 1123, 1129,    0,    0, 1123,    0, 1129,    0,    0,

     1130, 1129,    0, 1124, 1124, 1124,    0,    0, 1130, 1123,
     1128, 1128, 1128, 1130,    0, 1129,    0, 1130,    0, 1235,
        0,    0,    0,    0,    0,    0,    0, 1235,    0,    0,
        0, 1130, 1235,    0,    0,    0, 1235,    0, 1123, 1123,
     1123,    0,    0,    0, 1129, 1129, 1129,    0,    0,    0,
     1235,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1130, 1130, 1130, 1170, 1170, 1170, 1170, 1170,    0, 1170,
     1170,    0, 1170, 1170, 1170,    0,    0, 1170, 1170, 1235,
     1235, 1235,    0, 1170, 1170,    0,    0, 1170,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1170,    0,

     1170, 1170, 1170,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1171, 1171, 1171, 1171, 1171,    0, 1171,
        0,    0, 1171, 1171, 1171,    0,    0, 1171, 1171,    0,
        0,    0,    0, 1171, 1171,    0,    0, 1171,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1171,    0,
     1171,    0, 1171,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1171, 1171, 1171, 1171, 1171,

     1171, 1171, 1171, 1172, 1172, 1172, 1172, 1172,    0, 1172,
     1172,    0, 1172, 1172, 1172,    0,    0, 1172, 1172,    0,
        0,    0,    0, 1172, 1172,    0,    0, 1172,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1172,    0,
     1172, 1172, 1172,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
        0, 1176,    0, 1176, 1176, 1176, 1176,    0, 1176, 1176,
     1176, 1176, 1213, 1213, 1213, 1213, 1213,    0, 1213, 1213,

        0, 1213, 1213, 1213,    0,    0, 1213, 1213,    0, 1236,
        0,    0, 1213, 1213,    0, 1237, 1213, 1236,    0,    0,
        0,    0, 1236, 1237,    0,    0, 1236, 1213, 1237, 1213,
     1213, 1213, 1237,    0, 1243,    0,    0,    0,    0,    0,
     1236,    0, 1243,    0,    0,    0, 1237, 1243,    0,    0,
        0, 1243,    0,    0, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213,    0,    0,    0, 1243, 1244,    0,    0, 1236,
     1236, 1236, 1245,    0, 1244, 1237, 1237, 1237,    0, 1244,
     1245,    0,    0, 1244,    0, 1245,    0,    0,    0, 1245,
        0, 1250,    0,    0, 1243, 1243, 1243, 1244, 1251, 1250,

        0,    0,    0, 1245, 1250,    0, 1251,    0, 1250,    0,
        0, 1251,    0,    0,    0, 1251,    0,    0,    0,    0,
        0,    0, 1250, 1252,    0,    0, 1244, 1244, 1244, 1251,
     1258, 1252, 1245, 1245, 1245,    0, 1252,    0, 1258,    0,
     1252,    0,    0, 1258,    0,    0,    0, 1258,    0, 1259,
        0, 1250, 1250, 1250, 1252, 1260,    0, 1259, 1251, 1251,
     1251, 1258, 1259, 1260,    0, 1302, 1259,    0, 1260,    0,
        0,    0, 1260, 1302,    0,    0,    0,    0, 1302,    0,
     1259, 1303, 1302, 1252, 1252, 1252, 1260, 1304,    0, 1303,
     1258, 1258, 1258,    0, 1303, 1304, 1302,    0, 1303,    0,

     1304,    0,    0,    0, 1304,    0, 1310,    0,    0, 1259,
     1259, 1259, 1303,    0, 1310, 1260, 1260, 1260, 1304, 1310,
        0, 1311,    0, 1310,    0, 1302, 1302, 1302,    0, 1311,
        0,    0,    0,    0, 1311,    0,    0, 1310, 1311,    0,
        0, 1303, 1303, 1303,    0, 1312,    0, 1304, 1304, 1304,
        0,    0, 1311, 1312,    0,    0, 1317,    0, 1312,    0,
        0,    0, 1312,    0, 1317,    0, 1310, 1310, 1310, 1317,
        0, 1318,    0, 1317,    0,    0, 1312, 1319,    0, 1318,
        0, 1311, 1311, 1311, 1318, 1319,    0, 1317, 1318,    0,
     1319,    0,    0,    0, 1319,    0, 1325,    0,    0,    0,

        0,    0, 1318,    0, 1325, 1312, 1312, 1312, 1319, 1325,
        0, 1326,    0, 1325,    0,    0, 1317, 1317, 1317, 1326,
        0,    0,    0,    0, 1326,    0,    0, 1325, 1326,    0,
        0, 1318, 1318, 1318,    0, 1327,    0, 1319, 1319, 1319,
        0,    0, 1326, 1327,    0,    0,    0,    0, 1327,    0,
        0,    0, 1327,    0,    0,    0, 1325, 1325, 1325,    0,
        0,    0,    0,    0,    0,    0, 1327,    0,    0,    0,
        0, 1326, 1326, 1326,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1327, 1327, 1327, 1378, 1378,

     1378, 1378, 1378,    0, 1378, 1378,    0, 1378, 1378, 1378,
        0,    0, 1378, 1378,    0,    0,    0,    0, 1378, 1378,
        0,    0, 1378,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1378,    0, 1378, 1378, 1378,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1380, 1380,
     1380, 1380, 1380,    0, 1380, 1380,    0, 1380, 1380, 1380,
        0,    0, 1380, 1380,    0,    0,    0,    0, 1380, 1380,
        0,    0, 1380,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 1380,    0, 1380, 1380, 1380,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1386, 1386,
     1386, 1386, 1386,    0, 1386, 1386,    0, 1386, 1386, 1386,
        0,    0, 1386, 1386,    0,    0,    0,    0, 1386, 1386,
        0,    0, 1386,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1386,    0, 1386, 1386, 1386,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1390, 1390,
     1390, 1390, 1390,    0, 1390, 1390,    0, 1390, 1390, 1390,
        0,    0, 1390, 1390,    0,    0,    0,    0, 1390, 1390,
        0,    0, 1390,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1390,    0, 1390, 1390, 1390,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1391, 1391,
     1391, 1391, 1391,    0, 1391, 1391,    0, 1391, 1391, 1391,
        0,    0, 1391, 1391,    0, 1405,    0,    0, 1391, 1391,

        0, 1406, 1391, 1405,    0,    0,    0,    0, 1405, 1406,
        0,    0, 1405, 1391, 1406, 1391, 1391, 1391, 1406,    0,
     1407,    0,    0,    0,    0,    0, 1405,    0, 1407,    0,
        0,    0, 1406, 1407,    0,    0,    0, 1407,    0,    0,
     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,    0,    0,
        0, 1407, 1414,    0,    0, 1405, 1405, 1405, 1415,    0,
     1414, 1406, 1406, 1406,    0, 1414, 1415,    0,    0, 1414,
        0, 1415,    0,    0,    0, 1415,    0, 1416,    0,    0,
     1407, 1407, 1407, 1414, 1422, 1416,    0,    0,    0, 1415,
     1416,    0, 1422,    0, 1416,    0,    0, 1422,    0,    0,

        0, 1422,    0,    0,    0,    0,    0,    0, 1416, 1423,
        0,    0, 1414, 1414, 1414, 1422, 1424, 1423, 1415, 1415,
     1415,    0, 1423,    0, 1424,    0, 1423,    0,    0, 1424,
        0,    0,    0, 1424,    0, 1449,    0, 1416, 1416, 1416,
     1423, 1450,    0, 1449, 1422, 1422, 1422, 1424, 1449, 1450,
        0, 1451, 1449,    0, 1450,    0,    0,    0, 1450, 1451,
        0,    0,    0,    0, 1451,    0, 1449, 1458, 1451, 1423,
     1423, 1423, 1450, 1459,    0, 1458, 1424, 1424, 1424,    0,
     1458, 1459, 1451,    0, 1458,    0, 1459,    0,    0,    0,
     1459,    0, 1460,    0,    0, 1449, 1449, 1449, 1458,    0,

     1460, 1450, 1450, 1450, 1459, 1460,    0, 1466,    0, 1460,
        0, 1451, 1451, 1451,    0, 1466,    0,    0,    0,    0,
     1466,    0,    0, 1460, 1466,    0,    0, 1458, 1458, 1458,
        0, 1467,    0, 1459, 1459, 1459,    0,    0, 1466, 1467,
        0,    0, 1468,    0, 1467,    0,    0,    0, 1467,    0,
     1468,    0, 1460, 1460, 1460, 1468,    0,    0,    0, 1468,
        0,    0, 1467,    0,    0,    0,    0, 1466, 1466, 1466,
        0,    0,    0, 1468,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1467, 1467, 1467,    0,    0,    0,    0,    0,    0,

        0,    0, 1468, 1468, 1468, 1502, 1502, 1502, 1502, 1502,
        0, 1502, 1502,    0, 1502, 1502, 1502,    0,    0, 1502,
     1502,    0,    0,    0,    0, 1502, 1502,    0,    0, 1502,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1502,    0, 1502, 1502, 1502,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1516, 1516, 1516, 1516, 1516,
        0, 1516, 1516,    0, 1516, 1516, 1516,    0,    0, 1516,
     1516,    0,    0,    0,    0, 1516, 1516,    0,    0, 1516,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1516,    0, 1516, 1516, 1516,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1516, 1585, 1585, 1585, 1585, 1585,
     1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585,
     1585, 1585, 1585, 1585, 1585, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1587, 1587, 1587, 1587, 1587,
     1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587,

     1587, 1587, 1587, 1587, 1587, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1589, 1589, 1589, 1589, 1589,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,
     1589, 1589, 1589, 1589, 1589, 1590, 1590,    0,    0,    0,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,    0,
     1590, 1590, 1590, 1590, 1590, 1591,    0, 1591,    0,    0,
        0, 1591,    0, 1591, 1591, 1592, 1592,    0,    0, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1593, 1593, 1593, 1593, 1593,

     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1594, 1594,    0, 1594, 1594,
        0, 1594, 1594,    0, 1594, 1594, 1594, 1594, 1594, 1594,
     1595, 1595,    0, 1595, 1595,    0, 1595, 1595,    0, 1595,
     1595, 1595, 1595, 1595, 1595, 1596, 1596,    0, 1596,    0,
        0, 1596, 1596,    0,    0, 1596,    0, 1596, 1596, 1596,
     1597, 1597,    0, 1597, 1597, 1597, 1597, 1597,    0, 1597,
     1597, 1597, 1597, 1597, 1597, 1598, 1598,    0, 1598, 1598,
     1598, 1598, 1598,    0, 1598, 1598, 1598, 1598, 1598, 1598,
     1599, 1599,    0, 1599,    0, 1599, 1599, 1599,    0,    0,

     1599,    0, 1599, 1599, 1599, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1601,    0,    0,    0, 1601,
        0, 1601, 1601, 1602, 1602, 1602,    0,    0, 1602,    0,
        0, 1602, 1602, 1602, 1602, 1602, 1603, 1603,    0, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1606, 1606,    0, 1606,
        0, 1606, 1606, 1606,    0,    0, 1606, 1606, 1606, 1606,

     1606, 1607,    0, 1607,    0,    0,    0, 1607,    0, 1607,
     1607, 1609, 1609,    0, 1609, 1609,    0, 1609, 1609,    0,
     1609, 1609, 1609, 1609, 1609, 1609, 1610, 1610,    0, 1610,
     1610,    0, 1610, 1610,    0, 1610, 1610, 1610, 1610, 1610,
     1610, 1611, 1611,    0, 1611,    0,    0, 1611, 1611,    0,
        0, 1611,    0, 1611, 1611, 1611, 1612, 1612,    0, 1612,
     1612,    0, 1612, 1612,    0, 1612, 1612, 1612, 1612, 1612,
     1612, 1613, 1613,    0, 1613, 1613,    0, 1613, 1613,    0,
     1613, 1613,    0, 1613, 1613, 1613, 1614, 1614,    0, 1614,
     1614,    0, 1614, 1614,    0, 1614, 1614, 1614, 1614, 1614,

     1614, 1615, 1615,    0, 1615, 1615,    0, 1615, 1615,    0,
     1615, 1615, 1615, 1615, 1615, 1615, 1616, 1616,    0, 1616,
        0,    0, 1616,    0,    0,    0, 1616, 1616, 1616, 1616,
     1616, 1617, 1617,    0, 1617, 1617,    0, 1617, 1617,    0,
     1617, 1617, 1617, 1617, 1617, 1617, 1618, 1618,    0, 1618,
     1618, 1618, 1618, 1618,    0, 1618, 1618, 1618, 1618, 1618,
     1618, 1619, 1619,    0, 1619, 1619, 1619, 1619, 1619,    0,
     1619, 1619, 1619, 1619, 1619, 1619, 1620, 1620,    0, 1620,
     1620, 1620, 1620, 1620,    0, 1620, 1620, 1620, 1620, 1620,
     1620, 1621, 1621,    0, 1621,    0, 1621, 1621, 1621,    0,

        0, 1621,    0, 1621, 1621, 1621, 1622, 1622,    0, 1622,
     1622, 1622, 1622, 1622,    0, 1622, 1622, 1622, 1622, 1622,
     1622, 1623, 1623,    0, 1623, 1623, 1623, 1623, 1623,    0,
     1623, 1623,    0, 1623, 1623, 1623, 1624, 1624,    0, 1624,
     1624, 1624, 1624, 1624,    0, 1624, 1624, 1624, 1624, 1624,
     1624, 1625, 1625,    0, 1625, 1625, 1625, 1625, 1625,    0,
     1625, 1625, 1625, 1625, 1625, 1625, 1626, 1626,    0, 1626,
        0, 1626, 1626,    0,    0,    0, 1626, 1626, 1626, 1626,
     1626, 1627, 1627,    0, 1627, 1627, 1627, 1627, 1627,    0,
     1627, 1627, 1627, 1627, 1627, 1627, 1630,    0,    0,    0,

     1630,    0, 1630, 1630, 1631,    0,    0,    0, 1631,    0,
     1631, 1631, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
     1633,    0, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1634,    0, 1634,    0,    0,    0, 1634,    0,
     1634, 1634, 1635, 1635,    0, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1636, 1636,    0,    0,    0, 1636, 1636, 1636,
     1636, 1636, 1636, 1636, 1636, 1636,    0, 1636, 1636, 1636,
     1636, 1636, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
     1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,

     1637, 1637, 1638,    0,    0,    0, 1638,    0, 1638, 1638,
     1639,    0,    0,    0, 1639,    0, 1639, 1639, 1641, 1641,
        0, 1641,    0, 1641, 1641, 1641,    0,    0, 1641, 1641,
     1641, 1641, 1641, 1642,    0, 1642,    0,    0,    0, 1642,
        0, 1642, 1642, 1644, 1644,    0, 1644,    0,    0, 1644,
     1644,    0, 1644, 1644,    0, 1644, 1644, 1644, 1645, 1645,
        0, 1645, 1645,    0, 1645, 1645,    0, 1645, 1645, 1645,
     1645, 1645, 1645, 1646, 1646,    0, 1646, 1646,    0, 1646,
     1646,    0, 1646, 1646, 1646, 1646, 1646, 1646, 1647, 1647,
        0, 1647, 1647,    0, 1647, 1647,    0, 1647, 1647, 1647,

     1647, 1647, 1647, 1648, 1648,    0, 1648, 1648,    0, 1648,
     1648,    0, 1648, 1648, 1648, 1648, 1648, 1648, 1649, 1649,
        0, 1649,    0,    0, 1649, 1649,    0,    0, 1649, 1649,
     1649, 1649, 1649, 1650, 1650,    0, 1650,    0,    0, 1650,
        0,    0,    0, 1650, 1650, 1650, 1650, 1650, 1651, 1651,
        0, 1651, 1651,    0, 1651, 1651,    0, 1651, 1651, 1651,
     1651, 1651, 1651, 1652, 1652,    0, 1652, 1652,    0, 1652,
     1652,    0, 1652, 1652, 1652, 1652, 1652, 1652, 1653, 1653,
        0, 1653,    0,    0, 1653, 1653,    0,    0, 1653, 1653,
     1653, 1653, 1653, 1654, 1654,    0, 1654, 1654,    0, 1654,

     1654,    0, 1654, 1654, 1654, 1654, 1654, 1654, 1655, 1655,
        0, 1655,    0,    0, 1655,    0,    0,    0, 1655, 1655,
     1655, 1655, 1655, 1656, 1656,    0, 1656,    0,    0, 1656,
     1656,    0,    0, 1656,    0, 1656, 1656, 1656, 1657, 1657,
        0, 1657, 1657,    0, 1657, 1657,    0, 1657, 1657, 1657,
     1657, 1657, 1657, 1658, 1658,    0, 1658, 1658,    0, 1658,
     1658,    0, 1658, 1658, 1658, 1658, 1658, 1658, 1659, 1659,
        0, 1659,    0,    0, 1659,    0,    0,    0, 1659, 1659,
     1659, 1659, 1659, 1660, 1660,    0, 1660,    0,    0, 1660,
        0,    0,    0, 1660, 1660, 1660, 1660, 1660, 1661, 1661,

        0, 1661, 1661,    0, 1661, 1661,    0, 1661, 1661, 1661,
     1661, 1661, 1661, 1662, 1662,    0, 1662, 1662,    0, 1662,
     1662,    0, 1662, 1662, 1662, 1662, 1662, 1662, 1663, 1663,
        0, 1663,    0, 1663, 1663, 1663,    0, 1663, 1663,    0,
     1663, 1663, 1663, 1664, 1664,    0, 1664, 1664, 1664, 1664,
     1664,    0, 1664, 1664, 1664, 1664, 1664, 1664, 1665, 1665,
        0, 1665, 1665, 1665, 1665, 1665,    0, 1665, 1665, 1665,
     1665, 1665, 1665, 1666, 1666,    0, 1666, 1666, 1666, 1666,
     1666,    0, 1666, 1666, 1666, 1666, 1666, 1666, 1667, 1667,
        0, 1667, 1667, 1667, 1667, 1667,    0, 1667, 1667, 1667,

     1667, 1667, 1667, 1668, 1668,    0, 1668,    0, 1668, 1668,
     1668,    0,    0, 1668, 1668, 1668, 1668, 1668, 1669, 1669,
        0, 1669,    0, 1669, 1669,    0,    0,    0, 1669, 1669,
     1669, 1669, 1669, 1670, 1670,    0, 1670, 1670, 1670, 1670,
     1670,    0, 1670, 1670, 1670, 1670, 1670, 1670, 1671, 1671,
        0, 1671, 1671, 1671, 1671, 1671,    0, 1671, 1671, 1671,
     1671, 1671, 1671, 1672, 1672,    0, 1672,    0, 1672, 1672,
     1672,    0,    0, 1672, 1672, 1672, 1672, 1672, 1673, 1673,
        0, 1673, 1673, 1673, 1673, 1673,    0, 1673, 1673, 1673,
     1673, 1673, 1673, 1674, 1674,    0, 1674,    0, 1674, 1674,

        0,    0,    0, 1674, 1674, 1674, 1674, 1674, 1675, 1675,
        0, 1675,    0, 1675, 1675, 1675,    0,    0, 1675,    0,
     1675, 1675, 1675, 1676, 1676,    0, 1676, 1676, 1676, 1676,
     1676,    0, 1676, 1676, 1676, 1676, 1676, 1676, 1677, 1677,
        0, 1677, 1677, 1677, 1677, 1677,    0, 1677, 1677, 1677,
     1677, 1677, 1677, 1678, 1678,    0, 1678,    0, 1678, 1678,
        0,    0,    0, 1678, 1678, 1678, 1678, 1678, 1679, 1679,
        0, 1679,    0, 1679, 1679,    0,    0,    0, 1679, 1679,
     1679, 1679, 1679, 1680, 1680,    0, 1680, 1680, 1680, 1680,
     1680,    0, 1680, 1680, 1680, 1680, 1680, 1680, 1681, 1681,

        0, 1681, 1681, 1681, 1681, 1681,    0, 1681, 1681, 1681,
     1681, 1681, 1681, 1685,    0,    0,    0, 1685,    0, 1685,
     1685, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
        0, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1687, 1688,    0,    0, 1688,    0,    0,    0, 1688,    0,
     1688, 1688, 1689, 1689, 1689, 1689, 1689,    0, 1689, 1689,
        0, 1689,    0,    0, 1689, 1689, 1689,    0, 1689,    0,
        0, 1689, 1690,    0,    0, 1690, 1690, 1690,    0, 1690,
        0, 1690, 1690, 1690,    0,    0, 1690, 1690, 1690, 1690,
     1690, 1691,    0, 1691,    0,    0,    0, 1691,    0, 1691,

     1691, 1692, 1692,    0, 1692,    0,    0, 1692, 1692,    0,
        0, 1692, 1692, 1692, 1692, 1692, 1693, 1693,    0, 1693,
     1693,    0, 1693, 1693,    0, 1693, 1693,    0, 1693, 1693,
     1693, 1694, 1694,    0, 1694, 1694,    0, 1694, 1694,    0,
     1694, 1694, 1694, 1694, 1694, 1694, 1695, 1695,    0, 1695,
     1695,    0, 1695, 1695,    0, 1695, 1695, 1695, 1695, 1695,
     1695, 1696, 1696,    0, 1696, 1696,    0, 1696, 1696,    0,
     1696, 1696, 1696, 1696, 1696, 1696, 1697, 1697,    0, 1697,
        0,    0, 1697, 1697,    0,    0, 1697, 1697, 1697, 1697,
     1697, 1698, 1698,    0, 1698,    0,    0, 1698,    0,    0,

        0, 1698, 1698, 1698, 1698, 1698, 1699, 1699,    0, 1699,
        0,    0, 1699,    0,    0,    0, 1699, 1699, 1699, 1699,
     1699, 1700, 1700,    0, 1700, 1700,    0, 1700, 1700,    0,
     1700, 1700, 1700, 1700, 1700, 1700, 1701, 1701,    0, 1701,
     1701,    0, 1701, 1701,    0, 1701, 1701, 1701, 1701, 1701,
     1701, 1702, 1702,    0, 1702,    0,    0, 1702,    0,    0,
        0, 1702, 1702, 1702, 1702, 1702, 1703, 1703,    0, 1703,
        0,    0, 1703,    0,    0,    0, 1703, 1703, 1703, 1703,
     1703, 1704, 1704,    0, 1704,    0,    0, 1704,    0,    0,
        0, 1704, 1704, 1704, 1704, 1704, 1705, 1705,    0, 1705,

        0,    0, 1705,    0,    0,    0, 1705, 1705, 1705, 1705,
     1705, 1706, 1706,    0, 1706,    0,    0, 1706, 1706,    0,
        0, 1706, 1706, 1706, 1706, 1706, 1707, 1707,    0, 1707,
     1707,    0, 1707, 1707,    0, 1707, 1707, 1707, 1707, 1707,
     1707, 1708, 1708,    0, 1708, 1708,    0, 1708, 1708,    0,
     1708, 1708, 1708, 1708, 1708, 1708, 1709, 1709,    0, 1709,
     1709,    0, 1709, 1709,    0, 1709, 1709, 1709, 1709, 1709,
     1709, 1710, 1710,    0, 1710, 1710,    0, 1710, 1710,    0,
     1710, 1710, 1710, 1710, 1710, 1710, 1711, 1711,    0, 1711,
        0,    0, 1711, 1711,    0,    0, 1711,    0, 1711, 1711,

     1711, 1712, 1712,    0, 1712,    0,    0, 1712,    0,    0,
        0, 1712, 1712, 1712, 1712, 1712, 1713, 1713,    0, 1713,
     1713,    0, 1713, 1713,    0, 1713, 1713, 1713, 1713, 1713,
     1713, 1714, 1714,    0, 1714,    0, 1714, 1714, 1714,    0,
        0, 1714, 1714, 1714, 1714, 1714, 1715, 1715,    0, 1715,
     1715, 1715, 1715, 1715,    0, 1715, 1715,    0, 1715, 1715,
     1715, 1716, 1716,    0, 1716, 1716, 1716, 1716, 1716,    0,
     1716, 1716, 1716, 1716, 1716, 1716, 1717, 1717,    0, 1717,
     1717, 1717, 1717, 1717,    0, 1717, 1717, 1717, 1717, 1717,
     1717, 1718, 1718,    0, 1718, 1718, 1718, 1718, 1718,    0,

     1718, 1718, 1718, 1718, 1718, 1718, 1719, 1719,    0, 1719,
        0, 1719, 1719, 1719,    0,    0, 1719, 1719, 1719, 1719,
     1719, 1720, 1720,    0, 1720,    0, 1720, 1720,    0,    0,
        0, 1720, 1720, 1720, 1720, 1720, 1721, 1721,    0, 1721,
        0, 1721, 1721,    0,    0,    0, 1721, 1721, 1721, 1721,
     1721, 1722, 1722,    0, 1722, 1722, 1722, 1722, 1722,    0,
     1722, 1722, 1722, 1722, 1722, 1722, 1723, 1723,    0, 1723,
     1723, 1723, 1723, 1723,    0, 1723, 1723, 1723, 1723, 1723,
     1723, 1724, 1724,    0, 1724,    0, 1724, 1724,    0,    0,
        0, 1724, 1724, 1724, 1724, 1724, 1725, 1725,    0, 1725,

        0, 1725, 1725,    0,    0,    0, 1725, 1725, 1725, 1725,
     1725, 1726, 1726,    0, 1726,    0, 1726, 1726,    0,    0,
        0, 1726, 1726, 1726, 1726, 1726, 1727, 1727,    0, 1727,
        0, 1727, 1727,    0,    0,    0, 1727, 1727, 1727, 1727,
     1727, 1728, 1728,    0, 1728,    0, 1728, 1728, 1728,    0,
        0, 1728, 1728, 1728, 1728, 1728, 1729, 1729,    0, 1729,
     1729, 1729, 1729, 1729,    0, 1729, 1729, 1729, 1729, 1729,
     1729, 1730, 1730,    0, 1730, 1730, 1730, 1730, 1730,    0,
     1730, 1730, 1730, 1730, 1730, 1730, 1731, 1731,    0, 1731,
     1731, 1731, 1731, 1731,    0, 1731, 1731, 1731, 1731, 1731,

     1731, 1732, 1732,    0, 1732, 1732, 1732, 1732, 1732,    0,
     1732, 1732, 1732, 1732, 1732, 1732, 1733, 1733,    0, 1733,
        0, 1733, 1733, 1733,    0,    0, 1733,    0, 1733, 1733,
     1733, 1734, 1734,    0, 1734,    0, 1734, 1734,    0,    0,
        0, 1734, 1734, 1734, 1734, 1734, 1735, 1735,    0, 1735,
     1735, 1735, 1735, 1735,    0, 1735, 1735, 1735, 1735, 1735,
     1735, 1737,    0,    0,    0, 1737,    0, 1737, 1737, 1738,
     1738, 1738, 1738, 1738,    0, 1738, 1738,    0, 1738,    0,
        0, 1738, 1738, 1738,    0, 1738,    0, 1738, 1738, 1739,
     1739, 1739, 1739, 1739,    0, 1739, 1739,    0, 1739,    0,

        0, 1739, 1739, 1739,    0, 1739, 1739,    0, 1739, 1740,
     1740,    0, 1740,    0, 1740, 1740, 1740,    0,    0, 1740,
     1740, 1740, 1740, 1740, 1741,    0, 1741,    0,    0,    0,
     1741,    0, 1741, 1741, 1742, 1742,    0, 1742, 1742,    0,
     1742, 1742,    0, 1742, 1742, 1742, 1742, 1742, 1742, 1743,
     1743,    0, 1743, 1743,    0, 1743, 1743,    0, 1743, 1743,
     1743, 1743, 1743, 1743, 1744, 1744,    0, 1744,    0,    0,
     1744,    0,    0,    0, 1744, 1744, 1744, 1744, 1744, 1745,
     1745,    0, 1745,    0,    0, 1745,    0,    0,    0, 1745,
     1745, 1745, 1745, 1745, 1746, 1746,    0, 1746,    0,    0,

     1746,    0,    0,    0, 1746, 1746, 1746, 1746, 1746, 1747,
     1747,    0, 1747,    0,    0, 1747,    0,    0,    0, 1747,
     1747, 1747, 1747, 1747, 1748, 1748,    0, 1748,    0,    0,
     1748, 1748,    0,    0, 1748, 1748, 1748, 1748, 1748, 1749,
     1749,    0, 1749, 1749,    0, 1749, 1749,    0, 1749, 1749,
     1749, 1749, 1749, 1749, 1750, 1750,    0, 1750, 1750,    0,
     1750, 1750,    0, 1750, 1750, 1750, 1750, 1750, 1750, 1751,
     1751,    0, 1751, 1751,    0, 1751, 1751,    0, 1751, 1751,
     1751, 1751, 1751, 1751, 1752, 1752,    0, 1752,    0,    0,
     1752, 1752,    0,    0, 1752, 1752, 1752, 1752, 1752, 1753,

     1753,    0, 1753, 1753,    0, 1753, 1753,    0, 1753, 1753,
     1753, 1753, 1753, 1753, 1754, 1754,    0, 1754, 1754,    0,
     1754, 1754,    0, 1754, 1754, 1754, 1754, 1754, 1754, 1755,
     1755,    0, 1755, 1755,    0, 1755, 1755,    0, 1755, 1755,
     1755, 1755, 1755, 1755, 1756, 1756,    0, 1756, 1756,    0,
     1756, 1756,    0, 1756, 1756, 1756, 1756, 1756, 1756, 1757,
     1757,    0, 1757,    0,    0, 1757, 1757,    0,    0, 1757,
     1757, 1757, 1757, 1757, 1758, 1758,    0, 1758,    0,    0,
     1758,    0,    0,    0, 1758, 1758, 1758, 1758, 1758, 1759,
     1759,    0, 1759, 1759, 1759, 1759, 1759,    0, 1759, 1759,

     1759, 1759, 1759, 1759, 1760, 1760,    0, 1760, 1760, 1760,
     1760, 1760,    0, 1760, 1760, 1760, 1760, 1760, 1760, 1761,
     1761,    0, 1761,    0, 1761, 1761,    0,    0,    0, 1761,
     1761, 1761, 1761, 1761, 1762, 1762,    0, 1762,    0, 1762,
     1762,    0,    0,    0, 1762, 1762, 1762, 1762, 1762, 1763,
     1763,    0, 1763,    0, 1763, 1763,    0,    0,    0, 1763,
     1763, 1763, 1763, 1763, 1764, 1764,    0, 1764,    0, 1764,
     1764,    0,    0,    0, 1764, 1764, 1764, 1764, 1764, 1765,
     1765,    0, 1765,    0, 1765, 1765, 1765,    0,    0, 1765,
     1765, 1765, 1765, 1765, 1766, 1766,    0, 1766, 1766, 1766,

     1766, 1766,    0, 1766, 1766, 1766, 1766, 1766, 1766, 1767,
     1767,    0, 1767, 1767, 1767, 1767, 1767,    0, 1767, 1767,
     1767, 1767, 1767, 1767, 1768, 1768,    0, 1768, 1768, 1768,
     1768, 1768,    0, 1768, 1768, 1768, 1768, 1768, 1768, 1769,
     1769,    0, 1769,    0, 1769, 1769, 1769,    0,    0, 1769,
     1769, 1769, 1769, 1769, 1770, 1770,    0, 1770, 1770, 1770,
     1770, 1770,    0, 1770, 1770, 1770, 1770, 1770, 1770, 1771,
     1771,    0, 1771, 1771, 1771, 1771, 1771,    0, 1771, 1771,
     1771, 1771, 1771, 1771, 1772, 1772,    0, 1772, 1772, 1772,
     1772, 1772,    0, 1772, 1772, 1772, 1772, 1772, 1772, 1773,

     1773,    0, 1773, 1773, 1773, 1773, 1773,    0, 1773, 1773,
     1773, 1773, 1773, 1773, 1774, 1774,    0, 1774,    0, 1774,
     1774, 1774,    0,    0, 1774, 1774, 1774, 1774, 1774, 1775,
     1775,    0, 1775,    0, 1775, 1775,    0,    0,    0, 1775,
     1775, 1775, 1775, 1775, 1776, 1776, 1776, 1776, 1776,    0,
     1776, 1776,    0, 1776,    0,    0, 1776, 1776, 1776,    0,
     1776, 1776,    0, 1776, 1777, 1777, 1777, 1777, 1777,    0,
     1777, 1777,    0, 1777,    0,    0, 1777, 1777, 1777,    0,
     1777,    0,    0, 1777, 1778, 1778, 1778, 1778, 1778,    0,
     1778, 1778,    0, 1778,    0,    0, 1778, 1778, 1778,    0,

     1778,    0,    0, 1778, 1779, 1779, 1779, 1779, 1779,    0,
     1779, 1779,    0, 1779,    0,    0, 1779, 1779, 1779,    0,
     1779,    0,    0, 1779, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1781, 1781,    0, 1781, 1781,    0,
     1781, 1781,    0, 1781, 1781, 1781, 1781, 1781, 1781, 1782,
     1782,    0, 1782, 1782,    0, 1782, 1782,    0, 1782, 1782,
     1782, 1782, 1782, 1782, 1783, 1783,    0, 1783, 1783,    0,
     1783, 1783,    0, 1783, 1783, 1783, 1783, 1783, 1783, 1784,
     1784,    0, 1784, 1784,    0, 1784, 1784,    0, 1784, 1784,

     1784, 1784, 1784, 1784, 1785, 1785,    0, 1785,    0,    0,
     1785, 1785,    0,    0, 1785, 1785, 1785, 1785, 1785, 1786,
     1786,    0, 1786, 1786,    0, 1786, 1786,    0, 1786, 1786,
     1786, 1786, 1786, 1786, 1787, 1787,    0, 1787, 1787,    0,
     1787, 1787,    0, 1787, 1787, 1787, 1787, 1787, 1787, 1788,
     1788,    0, 1788, 1788,    0, 1788, 1788,    0, 1788, 1788,
     1788, 1788, 1788, 1788, 1789, 1789,    0, 1789,    0,    0,
     1789, 1789,    0,    0, 1789, 1789, 1789, 1789, 1789, 1790,
     1790,    0, 1790,    0,    0, 1790,    0,    0,    0, 1790,
     1790, 1790, 1790, 1790, 1791, 1791,    0, 1791,    0,    0,

     1791,    0,    0,    0, 1791, 1791, 1791, 1791, 1791, 1792,
     1792,    0, 1792, 1792, 1792, 1792, 1792,    0, 1792, 1792,
     1792, 1792, 1792, 1792, 1793, 1793,    0, 1793, 1793, 1793,
     1793, 1793,    0, 1793, 1793, 1793, 1793, 1793, 1793, 1794,
     1794,    0, 1794, 1794, 1794, 1794, 1794,    0, 1794, 1794,
     1794, 1794, 1794, 1794, 1795, 1795,    0, 1795, 1795, 1795,
     1795, 1795,    0, 1795, 1795, 1795, 1795, 1795, 1795, 1796,
     1796,    0, 1796,    0, 1796, 1796, 1796,    0,    0, 1796,
     1796, 1796, 1796, 1796, 1797, 1797,    0, 1797, 1797, 1797,
     1797, 1797,    0, 1797, 1797, 1797, 1797, 1797, 1797, 1798,

     1798,    0, 1798, 1798, 1798, 1798, 1798,    0, 1798, 1798,
     1798, 1798, 1798, 1798, 1799, 1799,    0, 1799, 1799, 1799,
     1799, 1799,    0, 1799, 1799, 1799, 1799, 1799, 1799, 1800,
     1800,    0, 1800,    0, 1800, 1800, 1800,    0,    0, 1800,
     1800, 1800, 1800, 1800, 1801, 1801,    0, 1801,    0, 1801,
     1801,    0,    0,    0, 1801, 1801, 1801, 1801, 1801, 1802,
     1802,    0, 1802,    0, 1802, 1802,    0,    0,    0, 1802,
     1802, 1802, 1802, 1802, 1803, 1803, 1803, 1803, 1803,    0,
     1803, 1803,    0, 1803,    0,    0, 1803, 1803, 1803,    0,
     1803,    0,    0, 1803, 1804, 1804, 1804, 1804, 1804,    0,

     1804, 1804,    0, 1804,    0,    0, 1804, 1804, 1804,    0,
     1804,    0,    0, 1804, 1805, 1805, 1805, 1805, 1805,    0,
     1805, 1805,    0, 1805,    0,    0, 1805, 1805, 1805,    0,
     1805,    0,    0, 1805, 1806, 1806,    0, 1806, 1806,    0,
     1806, 1806,    0, 1806, 1806, 1806, 1806, 1806, 1806, 1807,
     1807,    0, 1807, 1807,    0, 1807, 1807,    0, 1807, 1807,
     1807, 1807, 1807, 1807, 1808, 1808,    0, 1808, 1808,    0,
     1808, 1808,    0, 1808, 1808, 1808, 1808, 1808, 1808, 1809,
     1809, 1809, 1809, 1809,    0, 1809, 1809,    0, 1809,    0,
        0, 1809, 1809, 1809,    0, 1809,    0,    0, 1809, 1810,

     1810, 1810, 1810, 1810,    0, 1810, 1810,    0, 1810,    0,
        0, 1810, 1810, 1810,    0, 1810,    0,    0, 1810, 1811,
     1811, 1811, 1811, 1811,    0, 1811, 1811,    0, 1811,    0,
        0, 1811, 1811, 1811,    0, 1811,    0,    0, 1811, 1812,
     1812, 1812, 1812, 1812,    0, 1812, 1812,    0, 1812,    0,
        0, 1812, 1812, 1812,    0, 1812,    0,    0, 1812, 1813,
     1813, 1813, 1813, 1813,    0, 1813, 1813,    0, 1813,    0,
        0, 1813, 1813, 1813,    0, 1813,    0,    0, 1813, 1814,
     1814, 1814, 1814, 1814,    0, 1814, 1814,    0, 1814,    0,
        0, 1814, 1814, 1814,    0, 1814,    0,    0, 1814, 1815,

     1815, 1815, 1815, 1815,    0, 1815, 1815,    0, 1815,    0,
        0, 1815, 1815, 1815,    0, 1815,    0,    0, 1815, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parser.l"
/* Copyright 2009-2021
 * Kaz Kylheku <kaz@kylheku.com>
 * Vancouver, Canada
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#line 29 "parser.l"

#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <stdlib.h>
#include <limits.h>
#include <wchar.h>
#include <signal.h>
#include "config.h"
#include "lib.h"
#include "gc.h"
#include "stream.h"
#include "utf8.h"
#include "signal.h"
#include "unwind.h"
#include "hash.h"
#include "y.tab.h"
#include "parser.h"
#include "txr.h"

#define YY_INPUT(buf, result, max_size)                                 \
  do {                                                                  \
    val self = lit("parser");                                           \
    val n = get_bytes(self, yyextra->stream,                            \
                      coerce(mem_t *, buf), max_size);                  \
    result = c_num(n, self);                                            \
  } while (0)

#define YY_DECL \
  static int yylex_impl(YYSTYPE *yylval_param, yyscan_t yyscanner)

int opt_loglevel = 1;   /* 0 - quiet; 1 - normal; 2 - verbose */

val form_to_ln_hash;

static int directive_tok(scanner_t *yyg, int tok, int state);

#define FLEX_NUM_VERSION 10000*YY_FLEX_MAJOR_VERSION + \
                         100*YY_FLEX_MINOR_VERSION + \
                         YY_FLEX_SUBMINOR_VERSION

#if FLEX_NUM_VERSION < 20509
int yylex_destroy(void)
{
  return 0;
}
#endif

/* Missing prototypes not generated by flex. */
int yyget_column(yyscan_t);
void yyset_column (int column_no, yyscan_t yyscanner);

/* The following function is all that libflex provides.
   By providing it here, we eliminate the need to link libflex. */
#define YY_SKIP_YYWRAP
INLINE int yywrap(yyscan_t scanner)
{
  (void) scanner;
  return 1;
}

void yyerror(scanner_t *scanner, parser_t *parser, const char *s)
{
  yyerrorf(scanner, lit("~a"), string_utf8(s), nao);
  if (parser->prepared_msg) {
    yyerrorf(scanner, lit("~a"), parser->prepared_msg, nao);
    parser->prepared_msg = nil;
  }
}

void yyerrorf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    if (opt_compat && opt_compat <= 114)
      format(std_error, lit("~a: (~a:~d): "), prog_string,
             parser->name, num(parser->lineno), nao);
    else
      format(std_error, lit("~a:~d: "),
             parser->name, num(parser->lineno), nao);

    vformat(std_error, fmt, vl);
    put_char(chr('\n'), std_error);
    va_end (vl);
  }
  parser->errors++;
}

static void yyerrprepf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    set(mkloc(parser->prepared_msg, parser->parser),
        vformat_to_string(fmt, vl));
    va_end (vl);
  }
}

static void out_of_range_float(scanner_t *scanner, val tok)
{
    yyerrorf(scanner, lit("out-of-range floating-point literal: ~a"),
             tok, nao);
}

static wchar_t char_esc(int letter)
{
  switch (letter) {
  case ' ': return L' ';
  case 'a': return L'\a';
  case 'b': return L'\b';
  case 't': return L'\t';
  case 'n': return L'\n';
  case 'v': return L'\v';
  case 'f': return L'\f';
  case 'r': return L'\r';
  case 'e': return 27;
  case '"': return L'"';
  case '\'': return L'\'';
  case '`': return L'`';
  case '/': return L'/';
  case '@': return L'@';
  case '\\': return L'\\';
  }

  internal_error("unhandled escape character");
}

static wchar_t num_esc(scanner_t *scn, char *num)
{
  long val = 0;

  if (num[0] == 'x') {
    if (strlen(num) > 7)
      yyerror(scn, yyget_extra(scn), "too many digits in hex character escape");
    else
      val = strtol(num + 1, 0, 16);
  } else {
    if (num[0] == 'o')
      num++;
    if (strlen(num) > 8)
      yyerror(scn, yyget_extra(scn), "too many digits in octal character escape");
    else
      val = strtol(num, 0, 8);
  }

  if (val < 0 || val > 0x10FFFF || convert(wchar_t, val) != val) {
    yyerror(scn, yyget_extra(scn), "numeric character escape out of range");
    val = 0;
  }

  return val;
}

static wchar_t *unicode_ident(scanner_t *scn, const char *lex)
{
  wchar_t *wlex = utf8_dup_from(lex), *ptr = wlex, wch;

  while ((wch = *ptr++)) {
    if (wch < 0x1680 || (wch >= 0x3000 && wch < 0xdc00))
      continue;

    if ((wch >= 0xdc00 && wch <= 0xdcff) ||
        (wch >= 0xd800 && wch <= 0xdbff) ||
#if FULL_UNICODE
        (wch >= 0xf0000 && wch <= 0xffffd) ||
        (wch >= 0x100000 && wch <= 0x10fffd) ||
#endif
        (wch >= 0xe000 && wch <= 0xf8ff) ||
        (wch == 0xfffe) ||
        (wch == 0xffff))
    {
      yyerror(scn, yyget_extra(scn),
              "disallowed Unicode character in identifier");
      break;
    }

    switch (wch) {
    case 0x1680: case 0x180e: case 0x2000: case 0x2001: case 0x2002:
    case 0x2003: case 0x2004: case 0x2005: case 0x2006: case 0x2007:
    case 0x2008: case 0x2009: case 0x200a: case 0x2028: case 0x2029:
    case 0x205f: case 0x3000:
      yyerror(scn, yyget_extra(scn),
              "Unicode space occurs in identifier");
      break;
    default:
      continue;
    }

    break;
  }

  return wlex;
}

#line 3697 "lex.yy.c"
#define YY_NO_INPUT 1

#line 3700 "lex.yy.c"

#define INITIAL 0
#define SPECIAL 1
#define BRACED 2
#define NESTED 3
#define REGEX 4
#define SREGEX 5
#define STRLIT 6
#define CHRLIT 7
#define QSILIT 8
#define QSPECIAL 9
#define WLIT 10
#define QWLIT 11
#define BUFLIT 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE parser_t *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		/* Create the reject buffer large enough to save one state per allowed character. */
		if ( ! yyg->yy_state_buf )
			yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
		if ( ! yyg->yy_state_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 284 "parser.l"


#line 4013 "lex.yy.c"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1585 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1584 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 286 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num(10));
  return NUMBER;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 298 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 2));
  int base;

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 317 "parser.l"
{
  int base = 0;
  val str = string_own(utf8_dup_from(yytext + 2));

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  yyerrorf(yyg, lit("trailing junk in numeric literal: ~a~a~a"),
           chr(yytext[0]), chr(yytext[1]), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 339 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);

  return NUMBER;
}
	YY_BREAK
case 5:
#line 354 "parser.l"
case 6:
#line 355 "parser.l"
case 7:
YY_RULE_SETUP
#line 355 "parser.l"
{
  val str = string_utf8(yytext);

  yyerrorf(yyg, lit("trailing junk in floating-point literal: ~a"), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);

  return NUMBER;
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 371 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);

  return NUMBER;
}
	YY_BREAK
case 9:
#line 386 "parser.l"
case 10:
YY_RULE_SETUP
#line 386 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(10));
  return METANUM;
}
	YY_BREAK
case 11:
#line 398 "parser.l"
case 12:
YY_RULE_SETUP
#line 398 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(16));
  return METANUM;
}
	YY_BREAK
case 13:
#line 410 "parser.l"
case 14:
YY_RULE_SETUP
#line 410 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(8));
  return METANUM;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 421 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(2));
  return METANUM;
}
	YY_BREAK
case 16:
#line 433 "parser.l"
case 17:
#line 434 "parser.l"
case 18:
YY_RULE_SETUP
#line 434 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 19:
#line 451 "parser.l"
case 20:
#line 452 "parser.l"
case 21:
YY_RULE_SETUP
#line 452 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 22:
#line 463 "parser.l"
case 23:
YY_RULE_SETUP
#line 463 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yyerrorf(yyg, lit("bad token: ~a"),
                    string_own(utf8_dup_from(yytext)),
                    nao);
  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 476 "parser.l"
{
  return directive_tok(yyg, ALL, 0);
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 480 "parser.l"
{
  return directive_tok(yyg, SOME, NESTED);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 484 "parser.l"
{
  return directive_tok(yyg, NONE, 0);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 488 "parser.l"
{
  return directive_tok(yyg, MAYBE, 0);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 492 "parser.l"
{
  return directive_tok(yyg, CASES, 0);
}
	YY_BREAK
case 29:
/* rule 29 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 496 "parser.l"
{
  return directive_tok(yyg, BLOCK, NESTED);
}
	YY_BREAK
case 30:
/* rule 30 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 500 "parser.l"
{
  return directive_tok(yyg, CHOOSE, NESTED);
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 504 "parser.l"
{
  return directive_tok(yyg, GATHER, NESTED);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 508 "parser.l"
{
  return directive_tok(yyg, AND, 0);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 512 "parser.l"
{
  return directive_tok(yyg, OR, 0);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 516 "parser.l"
{
  return directive_tok(yyg, END, 0);
}
	YY_BREAK
case 35:
/* rule 35 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 520 "parser.l"
{
  return directive_tok(yyg, COLLECT, NESTED);
}
	YY_BREAK
case 36:
/* rule 36 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 524 "parser.l"
{
  return directive_tok(yyg, COLL, NESTED);
}
	YY_BREAK
case 37:
/* rule 37 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 528 "parser.l"
{
  return directive_tok(yyg, UNTIL, NESTED);
}
	YY_BREAK
case 38:
/* rule 38 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 532 "parser.l"
{
  return directive_tok(yyg, OUTPUT, NESTED);
}
	YY_BREAK
case 39:
/* rule 39 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 536 "parser.l"
{
  return directive_tok(yyg, REPEAT, NESTED);
}
	YY_BREAK
case 40:
/* rule 40 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 540 "parser.l"
{
  return directive_tok(yyg, REP, NESTED);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 544 "parser.l"
{
  return directive_tok(yyg, SINGLE, 0);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 548 "parser.l"
{
  return directive_tok(yyg, FIRST, 0);
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 552 "parser.l"
{
  return directive_tok(yyg, LAST, NESTED);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 556 "parser.l"
{
  return directive_tok(yyg, EMPTY, 0);
}
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 560 "parser.l"
{
  return directive_tok(yyg, MOD, NESTED);
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 564 "parser.l"
{
  return directive_tok(yyg, MODLAST, NESTED);
}
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 568 "parser.l"
{
  return directive_tok(yyg, DEFINE, NESTED);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 572 "parser.l"
{
  return directive_tok(yyg, TRY, 0);
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 576 "parser.l"
{
  return directive_tok(yyg, CATCH, NESTED);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 580 "parser.l"
{
  return directive_tok(yyg, FINALLY, 0);
}
	YY_BREAK
case 51:
/* rule 51 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 584 "parser.l"
{
  return directive_tok(yyg, IF, NESTED);
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 588 "parser.l"
{
  return directive_tok(yyg, ELIF, NESTED);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 592 "parser.l"
{
  return directive_tok(yyg, ELSE, 0);
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 596 "parser.l"
{
  yy_push_state(BRACED, yyscanner);
  yylval->lineno = yyextra->lineno;
  return yytext[0];
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 602 "parser.l"
{
 yy_push_state(NESTED, yyscanner);
 yylval->lineno = yyextra->lineno;
 return yytext[0];
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 608 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 248) ? OLD_AT : '@';
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 613 "parser.l"
{
  yylval->chr = '*';
  return SPLICE;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 618 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 623 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 60:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 632 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space or 0 needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 647 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 656 "parser.l"
{
  /* Eat whitespace in directive */
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 660 "parser.l"
{
  yy_push_state(STRLIT, yyscanner);
  return '"';
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 665 "parser.l"
{
  yy_push_state(CHRLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_BACKSLASH;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 671 "parser.l"
{
  yy_push_state(BUFLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_B_QUOTE;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 677 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_SLASH;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 683 "parser.l"
{
  yy_push_state(QSILIT, yyscanner);
  return '`';
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 688 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WORDS;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 694 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WSPLICE;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 700 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWORDS;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 706 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWSPLICE;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 712 "parser.l"
{
  return '#';
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 716 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_H;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 721 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_S;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 726 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_R;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 731 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_N;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 736 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_T;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 741 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_SEMI;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 746 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));
  yylval->val = int_str(str, num(10));
  return HASH_N_EQUALS;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 752 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));
  yylval->val = int_str(str, num(10));
  return HASH_N_HASH;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 758 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 185) ? OLD_DOTDOT : DOTDOT;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 763 "parser.l"
{
  yy_pop_state(yyscanner);
  yylval->lexeme = chk_strdup(L"@");
  return TEXT;
}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 769 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 773 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  return '/';
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 778 "parser.l"
{
  yylval->chr = '.';
  return CONSDOT;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 783 "parser.l"
{
  yylval->chr = '.';
  return LAMBDOT;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 788 "parser.l"
{
  yylval->chr = '.';
  return UREFDOT;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 793 "parser.l"
{
  yylval->chr = '.';
  return '.';
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 798 "parser.l"
{
  yylval->chr = '.';
  return OREFDOT;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 803 "parser.l"
{
  yylval->chr = '.';
  return UOREFDOT;
}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 808 "parser.l"
{
  if (YYSTATE == SPECIAL)
    yy_pop_state(yyscanner);  /* @\ continuation */
  yyextra->lineno++;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 814 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = char_esc(yytext[1]);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);
  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 823 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = num_esc(yyg, yytext + 1);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);

  {
    char lastchar = yytext[yyleng-1];
    if (lastchar == ';' && opt_compat && opt_compat <= 109)
      unput(lastchar);
  }

  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 839 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 843 "parser.l"
{
  /* comment */
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 847 "parser.l"
{
  val ch = chr_str(string_utf8(yytext), zero);
  if (chr_isspace(ch))
    yyerrprepf(yyg, lit("unexpected whitespace character #\\x~,02x"),
               ch, nao);
  else if (chr_isunisp(ch))
    yyerrprepf(yyg, lit("unexpected Unicode space character #\\x~,02x"),
               ch, nao);
  else if (chr_iscntrl(ch))
    yyerrprepf(yyg, lit("unexpected control character #\\x~,02x"),
               ch, nao);
  else
    yyerrprepf(yyg, lit("unexpected character #\\~a"),
               ch, nao);
  return ERRTOK;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 864 "parser.l"
{
  yyerrprepf(yyg, lit("non-UTF-8 byte #x~02x in directive"),
             num(convert(unsigned char, yytext[0])), nao);
  return ERRTOK;
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 870 "parser.l"
{
  yylval->chr = '/';
  return (YYSTATE == SREGEX) ? REGCHAR : '/';
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 875 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return REGCHAR;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 880 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext + 1);
  return REGCHAR;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 885 "parser.l"
{
  yylval->chr = yytext[1];
  return REGTOKEN;
}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 890 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 894 "parser.l"
{
  yyextra->lineno++;
  yyerrprepf(yyg, lit("newline in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 900 "parser.l"
{
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return REGCHAR;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 906 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 911 "parser.l"
{
  yylval->chr = yytext[1];
  return REGCHAR;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 916 "parser.l"
{
  if (opt_compat && opt_compat <= 105) {
    yylval->chr = yytext[1];
    return REGCHAR;
  }

  yyerrprepf(yyg, lit("unrecognized escape in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 926 "parser.l"
{
  yyerrprepf(yyg, lit("dangling backslash in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 931 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yyerrprepf(yyg, lit("non-UTF-8 byte in regex: '\\x~02x'"),
               num(convert(unsigned char, yytext[0])), nao);
    return ERRTOK;
  }
  yylval->chr = wchr[0];
  return REGCHAR;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 942 "parser.l"
{
  /* Allow non-UTF-8 byte for regexes scanned from string */
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return REGCHAR;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 948 "parser.l"
{
  yyerrprepf(yyg, lit("non-UTF-8 byte in regex: '\\x~02x'"),
             num(convert(unsigned char, yytext[0])), nao);
  return ERRTOK;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 954 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SPACE;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 959 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return TEXT;
}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 964 "parser.l"
{
  yyextra->lineno++;
  return '\n';
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 969 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
  return '*';
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 974 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 978 "parser.l"
{
  /* eat whole line comment */
  yyextra->lineno++;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 983 "parser.l"
{
  /* comment to end of line */
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 987 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 992 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 997 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1002 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 1007 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 1011 "parser.l"
{
  yyextra->lineno++;

  if (!opt_compat || opt_compat > 109)
    return ' ';
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1019 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext+1);
  return LITCHAR;
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1024 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape: \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1028 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext);
  return LITCHAR;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1033 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1038 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK; /* hack */
}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 1043 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 1050 "parser.l"
{
  yyerrprepf(yyg, lit("newline in character literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1057 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string quasiliteral"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1064 "parser.l"
{
  yyextra->lineno++;

  if (opt_compat && opt_compat <= 109)
    return ' ';

  yyerrprepf(yyg, lit("newline in word list literal"), nao);
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 134:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1075 "parser.l"
{
  yy_push_state(QSPECIAL, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1080 "parser.l"
{
  yyerrprepf(yyg, lit("malformed @ expression in quasiliteral"), nao);
  return ERRTOK;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1085 "parser.l"
{
  return ' ';
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1089 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yyerrprepf(yyg, lit("non-UTF-8 byte in literal: '\\x~02x'"),
               num(convert(unsigned char, yytext[0])), nao);
    return ERRTOK;
  }
  yylval->chr = wchr[0];
  return LITCHAR;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1100 "parser.l"
{
  yylval->chr = strtol(yytext, 0, 16);
  return LITCHAR;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1105 "parser.l"
{
  return '\'';
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1109 "parser.l"
{
}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 1112 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1116 "parser.l"
{
  yyerrorf(yyg, lit("bad character in buffer literal: \\~a"),
           chr(yytext[0]), nao);
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1121 "parser.l"
{
  yyerrprepf(yyg, lit("non-UTF-8 byte in literal: '\\x~02x'"),
             num(convert(unsigned char, yytext[0])), nao);
  return ERRTOK;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1127 "parser.l"
ECHO;
	YY_BREAK
#line 5456 "lex.yy.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(SPECIAL):
			case YY_STATE_EOF(BRACED):
			case YY_STATE_EOF(NESTED):
			case YY_STATE_EOF(REGEX):
			case YY_STATE_EOF(SREGEX):
			case YY_STATE_EOF(STRLIT):
			case YY_STATE_EOF(CHRLIT):
			case YY_STATE_EOF(QSILIT):
			case YY_STATE_EOF(QSPECIAL):
			case YY_STATE_EOF(WLIT):
			case YY_STATE_EOF(QWLIT):
			case YY_STATE_EOF(BUFLIT):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1585 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1585 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1584);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1127 "parser.l"


static int directive_tok(scanner_t *yyscanner, int tok, int state)
{
  struct yyguts_t *yyg = convert(struct yyguts_t *, yyscanner);
  char *pstart = yytext + 1 + strspn(yytext + 1, " \t");
  char *pcolon = strchr(pstart, ':');
  char *pend = pstart + strspn(pstart, ":-abcdefghijklmnopqrstuvwxyz");

  *pend = 0;

  if (pcolon != 0) {
    val pkgname = string_utf8((*pcolon = 0, pstart));
    val package = if3(pstart[0], find_package(pkgname), keyword_package);
    if (!package) {
      yyerrprepf(yyg, lit("package ~a not found"), pkgname, nao);
      tok = ERRTOK;
    }
    if (package != user_package && package != keyword_package) {
      val sym = string_utf8(pcolon + 1);
      yyerrprepf(yyg, lit("~a:~a: original usr package expected, not ~a"),
                 pkgname, sym, pkgname, nao);
      tok = ERRTOK;
    }
  } else {
    val symname = string_utf8(pstart);
    val sym = intern_fallback(symname, cur_package);
    val package = symbol_package(sym);

    if (package != user_package && package != keyword_package) {
      yyerrprepf(yyg, lit("~a: this is ~a:~a, not usr:~a"),
                 symname, package_name(package), symname, symname, nao);
      tok = ERRTOK;
    }
  }

  if (state != 0)
    yy_push_state(state, yyscanner);
  else
    yy_pop_state(yyscanner);
  yylval->lineno = yyextra->lineno;
  return tok;
}

void end_of_regex(scanner_t *yyg)
{
  if (YYSTATE != REGEX && YYSTATE != SREGEX)
    internal_error("end_of_regex called in wrong scanner state");

  yy_pop_state(yyg);

  if (YYSTATE != INITIAL) {
    if (yy_top_state(yyg) == INITIAL
      || yy_top_state(yyg) == QSILIT
      || yy_top_state(yyg) == QWLIT)
      yy_pop_state(yyg);
  }
}

void end_of_char(scanner_t *yyg)
{
  if (YYSTATE != CHRLIT)
    internal_error("end_of_char called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_buflit(scanner_t *yyg)
{
  if (YYSTATE != BUFLIT)
    internal_error("end_of_buflit called in wrong scanner state");

  yy_pop_state(yyg);
}

val source_loc(val form)
{
  return gethash(form_to_ln_hash, form);
}

val source_loc_str(val form, val alt)
{
  cons_bind (line, file, gethash(form_to_ln_hash, form));
  if (missingp(alt))
    alt = lit("source location n/a");
  return if3(line, format(nil, lit("~a:~d"), file, line, nao), alt);
}

int yylex(YYSTYPE *yylval_param, yyscan_t yyscanner)
{
  struct yyguts_t * yyg = convert(struct yyguts_t *, yyscanner);
  int yy_char;

  if (yyextra->tok_idx > 0) {
    struct yy_token *tok = &yyextra->tok_pushback[--yyextra->tok_idx];
    yyextra->recent_tok = *tok;
    *yylval_param = tok->yy_lval;
    return tok->yy_char;
  }

  yy_char = yyextra->recent_tok.yy_char = yylex_impl(yylval_param, yyscanner);
  yyextra->recent_tok.yy_lval = *yylval_param;

  return yy_char;
}

void prime_scanner(scanner_t *yyg, enum prime_parser prim)
{
  while (YYSTATE != INITIAL)
    yy_pop_state(yyg);

  switch (prim) {
  case prime_lisp:
  case prime_interactive:
    yy_push_state(SPECIAL, yyg);
    yy_push_state(NESTED, yyg);
    yy_push_state(NESTED, yyg);
    break;
  case prime_regex:
    yy_push_state(SREGEX, yyg);
    break;
  }
}

void scrub_scanner(scanner_t *yyg, int yy_char, wchar_t *lexeme)
{
  struct yy_token *rtok = &yyextra->recent_tok;

  if (rtok->yy_char == yy_char && rtok->yy_lval.lexeme == lexeme) {
    rtok->yy_char = 0;
    rtok->yy_lval.lexeme = 0;
  }
}

void parser_l_init(void)
{
  prot1(&form_to_ln_hash);
  form_to_ln_hash = make_eq_hash(t, nil);
}

