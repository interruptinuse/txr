
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 166
#define YY_END_OF_BUFFER 167
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1610] =
    {   0,
       62,   62,   62,   62,   62,   62,   62,   62,  138,  138,
      138,  138,  149,  149,  163,  163,  167,  114,  166,  115,
      166,  115,  166,  113,  166,  117,  166,  114,  166,  114,
      166,  114,  166,  117,  166,   98,   99,  166,   62,   98,
       99,  166,   84,  166,   84,   98,   99,  166,   63,   98,
       99,  166,   98,   99,  166,   55,   98,   99,  166,   61,
       98,   99,  166,   98,   99,  166,   89,   98,   99,  166,
       85,   98,   99,  166,    1,   19,   98,   99,  166,16400,
       97,   98,   99,  166,   83,   98,   99,  166,   19,   98,
       99,  166,16400,   55,   98,   99,  166,   98,   99,  166,

       67,   98,   99,  166,   54,   98,   99,  166,   61,   98,
       99,  166,   99,  166,   99,  166,   99,  166,   99,  166,
       62,   98,   99,  166,   20,   98,   99,  166,16401,   72,
       98,   99,  166,   58,   98,   99,  166,   20,   98,   99,
      166,16401,   58,   98,   99,  166,   89,   98,   99,  166,
        1,   20,   98,   99,  166,16401,   20,   98,   99,  166,
    16401,   56,   98,   99,  166,   20,   98,   99,  166,16401,
       59,   98,   99,  166,   99,  166,   99,  166,   99,  166,
       62,   98,   99,  166,   21,   98,   99,  166,16402,   72,
       98,   99,  166,   21,   98,   99,  166,16402,   89,   98,

       99,  166,    1,   21,   98,   99,  166,16402,   21,   98,
       99,  166,16402,   56,   98,   99,  166,   21,   98,   99,
      166,16402,   99,  166,   99,  166,   99,  166,  111,  112,
      166,  111,  112,  166,  105,  166,  105,  111,  112,  166,
      107,  111,  112,  166,  100,  107,  111,  112,  166,  110,
      111,  112,  166,  112,  166,  112,  166,  112,  166,  112,
      166,  106,  166,  106,  111,  112,  166,  146,  152,  166,
      146,  152,  166,  132,  166,  132,  146,  152,  166,  120,
      146,  152,  166,  146,  152,  166,  152,  166,  152,  166,
      152,  166,  152,  166,  131,  146,  152,  166,  133,  166,

      133,  146,  152,  166,  130,  131,  146,  152,  166,  130,
      131,  146,  152,  166,  130,  131,  146,  152,  166,  131,
      152,  166,  131,  152,  166,  131,  152,  166,  131,  152,
      166,  134,  166,  134,  146,  152,  166,  137,  146,  152,
      166,  146,  152,  166,  121,  146,  152,  166,   62,   98,
       99,  166,   98,   99,  166,   98,   99,  166,   89,   98,
       99,  166,    1,   10,   19,   98,   99,  166,16400,   56,
       98,   99,  166,   98,   99,  166,  138,  146,  152,  166,
      135,  166,  135,  146,  152,  166,  146,  152,  166,  146,
      152,  166,  151,  166,  149,  151,  166,  150,  166,  150,

      151,  166,  148,  151,  166,  147,  151,  166,  157,  164,
      166,  163,  164,  166,  162,  166,  157,  162,  164,  166,
      158,  161,  164,  165,  166,  157,  164,  166,  161,  164,
      166,  157,  164,  166,  153,  157,  164,  166,  153,  157,
      164,  166,  157,  164,  166,  157,  164,  166,  157,  164,
      166,  160,  161,  164,  166,  145,  166,  145,  146,  152,
      166,  139,  146,  152,  166,  146,  152,  166,  114,  114,
      114,  114,  115,  113,  119,  116,  114,  114,  114,  119,
       62,   88,   84,   68,   66,   64,   70,    1,   87,    4,
       90,    1,   19,16400,   19,16400,   19,16400,   97,   96,

       92,   92,   96,   93,   96,   94,   96,   95,   96,   98,
       62,   88,   20,   22,16401,   20,16401,   20,   22,16401,
       20,16401,   20,16401,   79,   73,   78,   76,   75,   74,
       77,    1,   20,   22,16401,   57,    4,   20,   22,16401,
       20,   22,16401,   20,16401,   22,   20,16401,   20,16401,
       20,16401,    9,   20,16401,   92,   20,   98,16401,   62,
       88,   21,   23,16402,   21,16402,   21,   23,16402,   21,
    16402,   21,16402,    1,   21,   23,16402,   82,    4,   21,
       23,16402,   21,   23,16402,   21,16402,   23,   21,16402,
       21,16402,   21,16402,    9,   21,16402,   21,   98,16402,

      105,  109,  104,  104,  109,  101,  109,  108,  109,  102,
      109,  103,  109,  109,  111,  106,  132,  128,  124,  125,
      124,  125,  128,  122,  128,  126,  128,  127,  128,  146,
      133,  130,  129,  130,  129,  130,  134,  136,    9,  136,
      136,  123,  128,   62,   88,    1,   10,    1,   10,   19,
    16400,  138,  135,  125,  125,  128,  149,  150,  157,  163,
      162,  157,  153,  157,  153,  157,  157,  157,  153,  157,
      157,  157,  157,  159,  145,  144,  140,  144,  143,  144,
      119,  114,  119,  118,  118,  119,   86,   91,   69,   71,
       65,    2,    2,    2,   60,    4,    5,    5,    5,    8,

        4,    5,    8, 8208,    5,    8,    5,    8,    4,   19,
    16400, 8208,   92,   94,   94,   94,   20,   22,16401,   20,
       22,16401,   20,   22,16401,   20,   22,16401, 8209,   20,
       22,16401,   20,   22,16401,   20,   22,16401,   22,   22,
       81,   80,   20,   22,16401,   20,16401,   20,16401,    4,
     8209,    1,   20,   22,16401,   20,   22,16401,    6,    4,
        6,    6,    6,    6,    8,    8,    4,    6,    8, 8209,
        6,    8,    8,    6,    8,    8,    8,    8,   20,   22,
    16401,    4,   20,   22,16401,   20,   22,16401,   20,   22,
    16401,   22,   20,   22,16401,   22,   20,   22,16401,   20,

    16401,   20,16401,    9,   20,   22,16401,   21,   23,16402,
       21,   23,16402,   21,   23,16402,   21,   23,16402, 8210,
       21,   23,16402,   21,   23,16402,   21,   23,16402,   23,
       23,   21,   23,16402,   21,16402,   21,16402,    4, 8210,
        1,   21,   23,16402,   21,   23,16402,    7,    4,    7,
        7,    7,    7,    8,    8,    4,    7,    8, 8210,    7,
        8,    8,    7,    8,    8,    8,    8,   21,   23,16402,
        4,   21,   23,16402,   21,   23,16402,   21,   23,16402,
       23,   21,   23,16402,   23,   21,   23,16402,   21,16402,
       21,16402,    9,   21,   23,16402,  104,  104,  102,  102,

      102,  124,  125,  124,  125,  126,  126,  126,    9,    2,
       14,    2,   12,    8, 8208,  125,  125,   81,  157,   80,
      157,  153,  157,  157,  153,  157,  157,  157,  157,  118,
        5,    4,    2,    3,    3,    2,    3,    2,    3,   51,
       51,   51,   51,   51,   51,   33,    4,    5,    8,    4,
        5,    4,    5, 8208,    4,    5,    4,    5,   19,16400,
        5,   19,16400,    6,    4,   20,   22,16401,   20,   22,
    16401,   20,   22,16401,   20,   22,16401,   20,   22,16401,
       20,   22,16401,   22,   22,   22,   22,   20,   22,16401,
       20,   22,16401,   20,   22,16401,    4,    6, 8209,    6,

        6,    6,    6,    6,    4,    6,    6,    6,    6,    6,
        6,    4,    6,    4,    6, 8209,    6,    4,    6,    6,
       20,   22,16401,   20,   22,16401,    4,    6,   20,   22,
    16401,    6,   20,   22,16401,   22,   20,   22,16401,   20,
       22,16401,   20,   22,16401,    9,   20,   22,16401,    7,
        4,   21,   23,16402,   21,   23,16402,   21,   23,16402,
       21,   23,16402,   21,   23,16402,   21,   23,16402,   23,
       23,   23,   23,   21,   23,16402,   21,   23,16402,   21,
       23,16402,    4,    7, 8210,    7,    7,    7,    7,    7,
        4,    7,    7,    7,    7,    7,    7,    4,    7,    4,

        7, 8210,    7,    4,    7,    7,   21,   23,16402,   21,
       23,16402,    4,    7,   21,   23,16402,    7,   21,   23,
    16402,   23,   21,   23,16402,   21,   23,16402,   21,   23,
    16402,   15,   13,   11,    9,   21,   23,16402,    2,    3,
       14,    2,    3,   12,  157,  157,  157,   24,   32,   34,
       45,   45,   45,   45,   45,   45,   40,   40,   40,   40,
       40,   40,   48,    4,    5, 8208,    4,    6,   20,   22,
    16401,   20,   22,16401,   20,   22,16401,   22,    6,    6,
        6,    6,    6,    4,    6,    4,    6,    6,   20,   22,
    16401,    6,   20,   22,16401,    6,   20,   22,16401,    6,

       20,   22,16401,    6,   20,   22,16401,    6, 8209,    6,
       20,   22,16401,    6,   20,   22,16401,    4,    6,   20,
       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,
        6,   20,   22,16401,    6,   20,   22,16401,    6,   22,
        6,   22,    4,    7,   21,   23,16402,   21,   23,16402,
       21,   23,16402,   23,    7,    7,    7,    7,    7,    4,
        7,    4,    7,    7,   21,   23,16402,    7,   21,   23,
    16402,    7,   21,   23,16402,    7,   21,   23,16402,    7,
       21,   23,16402,    7, 8210,    7,   21,   23,16402,    7,
       21,   23,16402,    4,    7,   21,   23,16402,    7,   21,

       23,16402,    7,   21,   23,16402,    7,   21,   23,16402,
        7,   21,   23,16402,    7,   23,    7,   23,  157,  156,
      154,   36,   36,   36,   36,   36,   36,   52,   52,   52,
       52,   52,   52,   53,   43,   43,   43,   43,   43,   43,
       26,   25,   25,   25,   25,   25,   25,    6,   20,   22,
    16401,    6,   20,   22,16401,    6,   20,   22,16401,    6,
       20,   22,16401,    6,   20,   22,16401,    6,   20,   22,
    16401,    6, 8209,    6,   20,   22,16401,    6,   20,   22,
    16401,    6,   20,   22,16401,    6,   20,   22,16401,    6,
       20,   22,16401,    6,   20,   22,16401,    6,   22,    6,

       22,    6,   22,    6,   22,    7,   21,   23,16402,    7,
       21,   23,16402,    7,   21,   23,16402,    7,   21,   23,
    16402,    7,   21,   23,16402,    7,   21,   23,16402,    7,
     8210,    7,   21,   23,16402,    7,   21,   23,16402,    7,
       21,   23,16402,    7,   21,   23,16402,    7,   21,   23,
    16402,    7,   21,   23,16402,    7,   23,    7,   23,    7,
       23,    7,   23,  155,  142,  142,   29,   29,   29,   29,
       29,   29,   28,   49,   49,   49,   49,   49,   49,   44,
       42,   27,   37,   37,   37,   37,   37,   37,    6,   20,
       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,

        6,   20,   22,16401,    6,   20,   22,16401,    6,   20,
       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,
        6,   20,   22,16401,    6,   22,    7,   21,   23,16402,
        7,   21,   23,16402,    7,   21,   23,16402,    7,   21,
       23,16402,    7,   21,   23,16402,    7,   21,   23,16402,
        7,   21,   23,16402,    7,   21,   23,16402,    7,   21,
       23,16402,    7,   23,   30,   30,   30,   30,   30,   30,
       47,   47,   47,   47,   47,   47,   31,   31,   31,   31,
       31,   31,   38,   38,   38,   38,   38,   38,   39,   39,
       39,   39,   39,   39,   41,   35,   35,   35,   35,   35,

       35,   50,   46,   46,   46,   46,   46,   46,  141
    } ;

static const flex_int16_t yy_accept[1647] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   18,   20,   22,   24,   26,   28,   30,   32,   34,
       36,   39,   43,   45,   49,   53,   56,   60,   64,   67,
       71,   75,   81,   85,   89,   94,   98,  101,  105,  109,
      113,  115,  117,  119,  121,  125,  130,  134,  138,  143,
      147,  151,  157,  162,  166,  171,  175,  177,  179,  181,
      185,  190,  194,  199,  203,  209,  214,  218,  223,  225,
      227,  229,  232,  235,  237,  241,  245,  250,  254,  256,

      258,  260,  262,  264,  268,  271,  274,  276,  280,  284,
      287,  289,  291,  293,  295,  299,  301,  305,  310,  315,
      320,  323,  326,  329,  332,  334,  338,  342,  345,  349,
      353,  356,  359,  363,  370,  374,  377,  381,  383,  387,
      390,  393,  395,  398,  400,  403,  406,  409,  412,  415,
      417,  421,  426,  429,  432,  435,  439,  443,  446,  449,
      452,  456,  458,  462,  466,  469,  470,  471,  472,  473,
      474,  475,  475,  476,  477,  478,  479,  480,  480,  481,
      482,  482,  483,  483,  484,  485,  485,  486,  487,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  489,  490,  491,
      492,  492,  495,  497,  499,  500,  500,  501,  502,  504,
      506,  508,  510,  511,  511,  511,  512,  512,  513,  513,
      516,  518,  518,  521,  521,  523,  523,  523,  523,  523,
      525,  526,  527,  528,  529,  530,  531,  532,  532,  536,
      537,  538,  538,  541,  544,  546,  547,  549,  549,  549,
      549,  551,  551,  553,  556,  556,  556,  556,  557,  560,
      560,  560,  561,  561,  562,  562,  565,  567,  567,  570,
      570,  572,  572,  572,  572,  574,  574,  578,  579,  580,

      580,  583,  586,  588,  589,  591,  591,  591,  591,  593,
      593,  595,  598,  598,  598,  598,  601,  601,  601,  601,
      601,  602,  603,  604,  606,  608,  610,  612,  614,  615,
      616,  616,  616,  617,  617,  617,  618,  619,  621,  624,
      626,  628,  630,  631,  631,  631,  632,  633,  635,  637,
      638,  638,  639,  639,  641,  642,  644,  645,  646,  646,
      646,  648,  648,  652,  652,  653,  653,  654,  655,  657,
      658,  659,  660,  661,  662,  663,  665,  667,  668,  669,
      671,  672,  673,  674,  675,  676,  677,  679,  681,  682,
      683,  684,  685,  687,  688,  689,  689,  689,  690,  691,

      692,  692,  693,  693,  694,  694,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  696,  696,  696,  698,  699,  700,  701,
      705,  707,  709,  709,  712,  713,  714,  715,  716,  717,
      717,  717,  717,  717,  720,  723,  726,  729,  729,  729,
      729,  730,  733,  736,  739,  739,  739,  739,  740,  740,
      741,  741,  741,  741,  741,  741,  742,  743,  746,  748,

      750,  750,  750,  750,  752,  756,  759,  760,  760,  760,
      762,  763,  763,  764,  764,  764,  764,  766,  767,  771,
      773,  774,  776,  777,  778,  779,  782,  786,  789,  792,
      793,  796,  796,  796,  796,  797,  797,  797,  797,  797,
      797,  800,  802,  804,  804,  804,  804,  808,  808,  808,
      808,  808,  808,  808,  811,  814,  817,  820,  820,  820,
      820,  821,  824,  827,  830,  830,  830,  830,  831,  831,
      832,  832,  832,  832,  832,  832,  835,  837,  839,  839,
      839,  839,  841,  845,  848,  849,  849,  849,  851,  852,
      852,  853,  853,  853,  853,  855,  856,  860,  862,  863,

      865,  866,  867,  868,  871,  875,  878,  881,  882,  885,
      885,  885,  885,  886,  886,  886,  886,  886,  886,  889,
      891,  893,  893,  893,  893,  893,  893,  893,  897,  897,
      897,  897,  898,  899,  900,  901,  902,  902,  904,  906,
      907,  908,  909,  909,  910,  910,  912,  912,  914,  914,
      916,  917,  918,  920,  922,  924,  925,  927,  928,  929,
      930,  930,  930,  931,  932,  933,  935,  936,  938,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  941,  942,  943,  944,  945,  946,  946,  946,  946,
      946,  946,  947,  947,  947,  947,  947,  947,  947,  947,
      950,  950,  952,  955,  957,  957,  961,  964,  965,  965,
      966,  969,  972,  975,  975,  975,  975,  975,  975,  978,
      981,  984,  984,  984,  984,  984,  984,  985,  986,  987,
      987,  987,  987,  988,  988,  988,  988,  988,  988,  988,
      991,  994,  997,  997,  997,  997,  997,  997, 1000, 1001,
     1002, 1002, 1002, 1002, 1003, 1004, 1005, 1007, 1008, 1009,
     1009, 1009, 1009, 1010, 1010, 1010, 1010, 1011, 1011, 1011,

     1011, 1012, 1014, 1014, 1014, 1017, 1018, 1020, 1024, 1027,
     1027, 1032, 1036, 1036, 1036, 1036, 1036, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1040, 1043, 1046, 1046,
     1046, 1046, 1046, 1046, 1050, 1050, 1051, 1051, 1052, 1055,
     1058, 1061, 1061, 1061, 1061, 1061, 1061, 1064, 1067, 1070,
     1070, 1070, 1070, 1070, 1070, 1071, 1072, 1073, 1073, 1073,
     1073, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1077, 1080,
     1083, 1083, 1083, 1083, 1083, 1083, 1086, 1087, 1088, 1088,
     1088, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1095, 1095,
     1095, 1096, 1096, 1096, 1096, 1097, 1097, 1097, 1097, 1098,

     1100, 1100, 1100, 1103, 1104, 1106, 1110, 1113, 1113, 1118,
     1122, 1122, 1122, 1122, 1122, 1123, 1123, 1123, 1123, 1123,
     1123, 1123, 1123, 1123, 1126, 1129, 1132, 1132, 1132, 1132,
     1132, 1132, 1132, 1133, 1133, 1134, 1134, 1135, 1139, 1139,
     1142, 1145, 1146, 1147, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1149, 1149, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1151, 1151, 1151,
     1151, 1151, 1151, 1152, 1153, 1154, 1154, 1155, 1156, 1157,

     1157, 1157, 1158, 1159, 1160, 1160, 1161, 1162, 1163, 1163,
     1163, 1163, 1164, 1164, 1165, 1167, 1169, 1172, 1175, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1180, 1180, 1180, 1180, 1180, 1180, 1181, 1181, 1181,
     1181, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1183,
     1184, 1184, 1184, 1184, 1184, 1184, 1186, 1186, 1188, 1192,
     1196, 1200, 1204, 1204, 1204, 1204, 1208, 1210, 1214, 1218,
     1223, 1227, 1227, 1227, 1227, 1231, 1235, 1239, 1239, 1239,
     1239, 1241, 1241, 1243, 1243, 1243, 1243, 1243, 1243, 1243,

     1243, 1243, 1243, 1243, 1243, 1243, 1245, 1248, 1251, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1256, 1256, 1256, 1256, 1256, 1256, 1257, 1257, 1257,
     1257, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1259,
     1260, 1260, 1260, 1260, 1260, 1260, 1262, 1262, 1264, 1268,
     1272, 1276, 1280, 1280, 1280, 1280, 1284, 1286, 1290, 1294,
     1299, 1303, 1303, 1303, 1303, 1307, 1311, 1315, 1315, 1315,
     1315, 1317, 1317, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1320, 1321, 1322, 1322,

     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1323, 1324, 1325, 1325,
     1326, 1327, 1328, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
     1334, 1335, 1335, 1335, 1335, 1335, 1336, 1337, 1338, 1339,
     1340, 1341, 1341, 1341, 1341, 1342, 1342, 1342, 1342, 1343,
     1344, 1345, 1346, 1347, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1352, 1356, 1360,
     1360, 1360, 1360, 1360, 1360, 1364, 1368, 1372, 1372, 1372,

     1372, 1374, 1378, 1382, 1386, 1386, 1386, 1386, 1386, 1386,
     1390, 1394, 1398, 1398, 1398, 1398, 1398, 1398, 1400, 1402,
     1404, 1404, 1404, 1404, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1410, 1414, 1418, 1418, 1418, 1418,
     1418, 1418, 1422, 1426, 1430, 1430, 1430, 1430, 1432, 1436,
     1440, 1444, 1444, 1444, 1444, 1444, 1444, 1448, 1452, 1456,
     1456, 1456, 1456, 1456, 1456, 1458, 1460, 1462, 1462, 1462,
     1462, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,

     1465, 1466, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1468,
     1469, 1470, 1471, 1472, 1473, 1473, 1474, 1475, 1476, 1477,
     1478, 1479, 1480, 1480, 1480, 1480, 1480, 1481, 1481, 1481,
     1482, 1482, 1482, 1483, 1483, 1483, 1483, 1483, 1484, 1485,
     1486, 1487, 1488, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1493, 1497, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1505,
     1509, 1513, 1513, 1513, 1513, 1513, 1513, 1517, 1521, 1525,
     1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,

     1527, 1527, 1527, 1527, 1531, 1535, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1543, 1547, 1551, 1551, 1551, 1551, 1551,
     1551, 1555, 1559, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1571, 1572,
     1573, 1574, 1575, 1576, 1577, 1577, 1578, 1579, 1580, 1581,
     1582, 1583, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
     1591, 1592, 1593, 1594, 1595, 1595, 1596, 1596, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596,

     1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1597,
     1598, 1599, 1600, 1601, 1602, 1602, 1603, 1604, 1605, 1606,
     1607, 1608, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1610, 1610
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    6,    9,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,    6,
       25,    6,   26,   27,   28,   28,   29,   30,   31,   29,
       32,   33,   32,   34,   32,   32,   32,   35,   32,   32,
       32,   36,   37,   38,   32,   32,   39,   32,   32,   32,
       40,   41,   42,   43,   32,   44,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   32,   54,   55,   56,   57,
       58,   59,   32,   60,   61,   62,   63,   64,   39,   65,
       66,   32,   67,   68,   69,   70,    1,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   72,   72,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   75,
       75,   75,   75,   75,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,    6,    9,
       10,    2,   11,   12,   10,   12,   13,   14,   15,   15,
       15,   15,   16,   17,    6,    6,   18,   15,   15,   15,
       15,   19,   19,   19,   19,   19,   19,   19,   19,   10,
        6,    7,   20,    1,   15,   15,   15,   15,   21,   15,
       19,   19,   19,   19,   22,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   10,    1,    7,   11,
        1,    1,   23,   23,   23
    } ;

static const flex_int16_t yy_base[1894] =
    {   0,
        0,    3,   78,    0,  153,    0,  228,    0,  302,  376,
        6,    8,  350,  356,  451,    0,  525,  599,  673,    0,
      362,  534,  715,  789,  863,  912,  961, 1030,  539,  544,
     5300,  235,11610, 5296, 5289,   11,  250,  256,  261,   12,
    11610,   24,11610, 5290,11610,  621, 1099, 5272,   30,   37,
    11610,  389,    0,11610, 5268,11610, 1172,11610,11610,11610,
    11610, 5203, 5202, 5198,  551,  633, 1231,11610, 1289, 5254,
       12,    6,  688,  724,   50,11610, 5195, 5191, 5186,  572,
      731, 5233, 1357,  625,  351,  752,  762,  541, 5184, 5179,
     5175,11610,  343,11610, 5242,11610,11610, 1432,11610, 5173,

     5160, 5159,11610, 5220,11610,  345,11610, 5218,11610, 1505,
    11610, 5146, 5141, 5137,11610,11610, 5200,    0,   41, 1552,
    11610, 5129, 5128, 5124,11610, 5191, 1595, 1660,11610,  396,
      811,  318,  529,  562, 5181,   18,  402,11610, 5185,  392,
       61,11610,   13,11610, 5183,11610,11610,    0,  344,11610,
     5173,11610,  420,11610,  601,  649,  704, 5130, 5110, 5100,
     5146,11610, 5155,11610,  840,  558,  584,  628,  693,11610,
     5149,  728,    0,11610,  562,  736,  746,  826,  411,  933,
      821,  899,  858,11610,11610,  355,11610,11610,11610,  975,
      986,   52,    0,  654, 1681, 1001,  923, 1036,  728, 1184,

      987,  947,  994,  991, 1188,  913,  952, 1093, 1220, 1225,
     1247, 5074, 5061, 5059,  793,  907, 1163,  530, 1178,11610,
     1744, 1306, 5111, 1319,    0, 1063,11610,  552,  707,11610,
      825,    0,11610, 5056, 5052, 1329, 1184, 1194, 1337, 1344,
     1513, 1167, 1520, 1321, 1610, 5046, 5045, 5040, 1382, 1617,
    11610,11610,11610,11610,11610,11610,11610, 1204, 1812,11610,
     1880, 1955, 1828, 1846, 1849,  579, 1867, 5039, 5032, 5031,
     2023, 5075, 2091,    0, 5026, 5024, 5022,  851, 2028, 5018,
     5016, 1406, 1262, 1512, 1626, 2031, 2052, 1393, 2064, 1556,
     2113, 5008, 4999, 4994, 2124, 1538, 2192,11610, 2260, 2335,

     2141, 2151, 2219,  698, 2226, 4993, 4987, 4986, 2231, 1031,
     2403,    0, 4977, 4976, 4975, 2410, 4972, 4971,  846,  546,
    11610,11610,  585,  869,11610,11610, 1267,11610,    0,11610,
     4969, 4968,11610,  988,  621,11610,11610,  659,  893,11610,
     1294,    0,11610, 4960, 4959,11610,    0, 1282, 2467,11610,
      639,11610, 1556, 1570,    0,11610,  732, 1088, 1635,  562,
     1652, 1674, 1694, 4983, 1014,  645,11610,  943, 1176, 1093,
    11610,    0, 1101,11610, 1678, 1179, 1895, 1802, 1911, 2419,
     4968, 4967, 4954,11610,11610,11610,11610,  303,    0, 1318,
      665,11610,  819, 1121,11610, 1860, 1929,11610,11610,11610,

      886,  904, 1362, 1378,    0, 2499, 1603, 4940, 4936, 4933,
      700, 4945, 1272, 4945, 1463, 4939, 4946, 4940, 4940,  387,
     4925, 1182, 4919,  259, 4905, 4907, 2009, 2015, 2019, 2108,
     2042, 2129, 2156, 2198, 2237, 2215, 2391, 2182, 2549, 2241,
     2247, 2255, 2398, 2458, 2429, 2433, 2436, 2252, 2511, 2532,
     4892, 4890, 1806, 2624,    0, 2548,    0, 2521,11610, 2683,
        0, 2582, 1915, 2561, 2123, 1269, 1600,11610, 4932, 4878,
     2423, 2725, 2696, 2711, 2714, 2732, 2750, 4876, 4872, 4871,
     2503, 2753, 2774, 2786, 4867, 4866, 4859, 2426, 4905, 1763,
     4855, 4850, 4843, 4837, 4829,11610,11610, 2813, 2827, 2835,

     4824, 4814, 4808, 2903, 2971, 2863, 2535, 4853, 2745, 3039,
     1778, 2758, 2876, 4804, 4803, 4801, 2539, 4848, 3107, 1831,
     2830, 2922, 4797, 4793, 4786, 2897, 3175, 2931, 2958, 1960,
     2999, 4785, 4778, 4777, 2049, 4763, 4758, 4757, 4754, 4748,
     3011, 3073, 3094, 4747, 4742, 4732, 3243, 4724, 4722, 4721,
     2687, 3311, 2852, 3132, 3135, 3203, 3214, 4711, 4710, 4708,
     2704, 3277, 3282, 3318, 4702, 4699, 4698, 3032, 4743, 2075,
     4671, 4669, 4667, 4665, 4663, 3331, 3336, 3354, 4660, 4658,
     4650, 3422, 3490, 2951, 2690, 4694, 2976, 3558, 2102, 3004,
     3292, 4639, 4637, 4633, 2737, 4680, 3626, 2118, 3045, 3399,

     4628, 4627, 4625, 3168, 3694, 3408, 3461, 2143, 3497, 4623,
     4615, 4612, 2211, 4611, 4600, 4598, 4596, 4594, 3524, 3565,
     3586, 4585, 4582, 4580, 1525, 2941,  923, 3762, 4570, 4569,
     4563, 1367, 1383, 2989,11610, 4608, 4557, 1656, 1404, 3073,
    11610, 4602, 4554, 3144, 2298, 2396,    0, 3819,    0, 3151,
     1716, 1419,    0,    0, 3193, 3213, 3233, 4554, 4555, 4560,
        0, 2795,11610, 3253, 3438,  989,    0, 2844, 3851, 4532,
     4531, 4543, 4549, 4537,  986, 4533, 4534, 4535,  747, 4525,
     4532, 1456, 4512,    0, 4511, 4505, 4517, 4504, 1862, 4496,
     4498, 4493, 4492, 4475, 4466, 3581, 3612, 3618, 3661, 3665,

     3718, 3740, 3748, 3752, 3785, 3840, 3872, 3881, 3904, 3916,
    11610, 3920, 3951, 4454, 4452, 4451, 3948, 3957, 4032, 4015,
     1866,11610, 4055, 4130, 4046, 4090, 4113, 4154, 4447, 3538,
     3260, 3368, 3276, 3444, 3509, 3381, 4495, 4162, 3302, 4192,
     4215, 4226, 4233, 4435, 4425, 4423, 4421, 4417, 4251, 4254,
     4275, 4409, 4404, 4403, 4395, 4394, 3553, 3743, 2858, 4388,
     4383, 4381, 2950, 4377, 4369, 4366, 4362, 4357, 4343, 4287,
     4314, 4328, 4341, 4339, 4337, 4336, 4329, 4396, 3154, 2962,
     4327, 4322, 4320, 2990, 3170, 3359, 4464, 3035, 4356, 4315,
     4314, 4303, 3058, 4302, 4298, 4288, 3757, 4287, 4281, 4264,

     4171, 3470, 4249, 4246, 3523, 4361, 3659, 4382, 4424, 4441,
     4532, 4503, 3674, 4244, 4240, 4234, 3165, 4220, 4208, 4201,
     4193, 4192, 4186, 4184, 4181, 4539, 4556, 4573, 4177, 4176,
     4168, 4160, 4139, 4641, 4137, 4513, 3684, 4600, 4616, 4627,
     4649, 4135, 4125, 4124, 4118, 4109, 4670, 4703, 4710, 4104,
     4100, 4087, 4084, 4075, 3867, 4403, 3218, 4073, 4072, 4056,
     3228, 4055, 4045, 4041, 4040, 4037, 4027, 4724, 4731, 4748,
     4025, 4023, 4022, 4006, 4002, 4816, 3373, 3254, 4000, 3999,
     3997, 3295, 3577, 3621, 4884, 3363, 4741, 3995, 3994, 3979,
     3412, 3975, 3974, 3970, 4430, 3958, 3957, 3948, 4767, 4060,

     3947, 3945, 3705, 4788, 4375, 4843, 4850, 4861, 4952, 4923,
     3699, 3944, 3934, 3921, 3475, 3911, 3910, 3901, 3899, 3896,
     3890, 3886, 3881, 4959, 4976, 4993, 3880, 3878, 3877, 3873,
     3867, 1059, 1151, 3591, 3712,    0,    0, 5061, 3863, 3790,
     5118, 3871, 5167, 5236,    0,    0, 3848, 2047, 2068, 3870,
     3863, 3864, 3850, 3852, 3852, 3853, 3845, 3830, 2235, 3846,
     3817, 3824, 3800, 3815, 3802, 3804, 3792, 3797, 3793, 3780,
     2790, 3775, 2935,11610, 2951,11610, 3910, 3862, 3781, 4087,
     5306, 3901, 5381, 4519, 4290, 3139,11610, 4094, 4259, 4293,
     5456, 4470,11610, 4369, 5487, 4632, 3753, 3749, 3748, 4939,

     4427,11610, 4494,    0, 4727, 3741, 3736, 3732, 4757, 5550,
     3174,11610, 4771, 4833, 4877, 5618, 5001, 5069, 5082, 3727,
     3723, 3717, 3707, 3706, 3691, 3690, 3688, 3687, 3814, 3685,
     3684, 3675, 3673, 3672, 3658, 3657, 3648, 3647, 3638, 3627,
     3856, 3618, 3612, 3605, 3603, 3601, 3913, 3600, 3597, 3593,
     3951, 3587, 3571, 3566, 3565, 3551, 3550, 3548, 4879, 4998,
     3545, 3535, 3534, 3531, 3524, 5686, 3520, 4064, 5154, 5179,
     5197, 5269, 3519, 3513, 3503, 5344, 5033, 5403, 5555, 5754,
     5558, 3497, 3491, 3485, 5626, 5643, 5711, 3482, 3475, 3467,
     5077, 3514, 3979, 3456, 3455, 3451, 3447, 3445, 3444, 3437,

     3432, 3428, 3423, 3409, 3408, 5822, 5714, 5725, 5788, 3405,
     3397, 3391, 3390, 3369, 3355, 3353, 3352, 3341, 3988, 3336,
     3324, 3323, 3309, 3304, 3293, 3275, 3265, 3239, 3236, 3213,
     4049, 3212, 3200, 3188, 3185, 3176, 4077, 3165, 3152, 3145,
     4143, 3133, 3132, 3130, 3129, 3120, 3113, 3103, 5110, 5118,
     3090, 3086, 3082, 3064, 3054, 5890, 3052, 4265, 5793, 5829,
     5847, 5865, 3051, 3032, 3028, 5907, 5040, 5918, 5929, 5997,
     5952, 3020, 3016, 3005, 6005, 6022, 6030, 3000, 2998, 2996,
     5190, 3034, 4147, 2981, 2977, 2972, 2970, 2968, 2959, 2958,
     2947, 2940, 2916, 2915, 2898, 6104,11610,11610,    0,    0,

     2910, 2898, 2875, 2845, 2844, 2834,    0, 3256, 2823, 2826,
     2814, 2818,    0, 2806, 2801, 3335, 2779, 2796, 2782,    0,
     2779, 6174, 6249, 6324, 3613,11610, 3371, 6355, 4228, 2751,
     2737, 2733, 3794,11610, 3465,    0, 2719, 2712, 2708, 3961,
    11610, 4249, 4268, 4291, 4558,11610, 4307,    0, 2707, 2700,
     2698, 4341, 4707, 4342,11610, 4908, 4927, 4747,11610, 4477,
        0, 2691, 2680, 2679, 6418, 2672, 2671, 2668, 2664,  251,
      255,  270,  285,  300,  312,  334,  341,  355,  462,  469,
      488,  493,  524,  558,  567,  592, 6058, 6075, 6137,  611,
      642,  651,  679,  694, 6196, 6269, 6287,  709,  725,  761,

     5261, 6423, 6426, 6440,  788,  799,  817,  828,  859, 6451,
     6494, 6511,  873,  880,  885,  896,  908, 5252, 5419, 4151,
      928,  942,  968, 4265,  986,  992, 1000, 1015, 1020, 1031,
     1036, 1068, 1070, 1072, 1119, 1131, 1137, 1148, 1159, 1160,
     1164, 1176, 1185, 1189, 1205, 1209, 1219, 1221, 1234, 1236,
     1248, 1271, 1276, 6519, 6522, 6533, 1282, 1289, 1295, 1302,
     1304, 6536, 6547, 6596, 1334, 1339, 1345, 5412, 6607, 6610,
     6618, 1358, 1440, 1451, 1452, 1456, 6621, 6632, 6635, 1464,
     1471, 1477, 1481, 1482, 5496, 5533, 4347, 1490, 1495, 1497,
     4435, 1513, 1514, 1525, 1533, 1536, 1537, 1541, 1542,11610,

    11610, 1582,    0, 4599,    0, 1579, 1585, 1587, 4640, 1584,
     4683, 1581, 4723, 1581, 1588, 1590, 1617,    0,11610, 4815,
     6666, 1597, 1611, 1617, 4907,11610,11610, 4943,    0, 1618,
     1631, 1636, 6729, 4975, 6804, 4976,11610, 5256, 5003,11610,
     6879, 5033,11610, 5285, 6954, 7029, 5089,11610, 5117,    0,
     1637, 1641, 1652, 1662, 1664, 1669, 1690, 1759, 1769, 6751,
     6826, 6901, 1770, 1775, 1785, 1787, 1789, 1791, 6976, 7037,
     7040, 1794, 1799, 1812, 1822, 1824, 7051, 7062, 7100, 1825,
     1827, 1837, 1842, 1847, 1857, 1867, 1868, 1875, 4563, 1876,
     1881, 1901, 1966, 1970, 1972, 1973, 1976, 1982, 1985, 1986,

     1990, 1991, 1996, 7111, 7122, 7125, 1997, 2005, 2007, 2014,
     2015, 2038, 7133, 7136, 7195, 2048, 2049, 2057, 2058, 2062,
     7206, 7209, 7217, 2064, 2075, 2082, 2083, 2100, 2102, 2109,
     2114, 2118, 4606, 2124, 2125, 2130, 2136, 2137, 2139, 2149,
     2151, 2165,    0, 2170,    0, 2167,    0, 2183,    0,    0,
     5119,11610, 5199,    0, 2179, 2181, 2190, 7292,11610, 5213,
        0, 2205, 2224, 2226, 5214,11610, 5230,    0, 2227, 2236,
     2252, 7367,11610, 5286,    0, 2253, 2260, 2261,11610, 5326,
        0, 2281, 2341, 2342, 5351,11610, 2348, 2357, 2358, 2360,
     2361, 2364, 2376, 2383, 2386, 2387, 2390, 2391, 2396, 2403,

     2404, 2408, 2409, 2411, 2419, 2423, 2434, 2455, 2465, 2467,
     2468, 2492, 2500, 2503, 2681,    0, 5352,    0,11610, 5357,
        0, 2504, 2516, 2517, 5395,11610,11610, 5397,    0, 2519,
     2524, 2528, 2529, 2540, 2544, 2548, 2570, 2630, 2649, 2650,
     5459,    0,    0,11610,11610, 7442, 7465, 7488, 7511, 7534,
     7557, 7568, 7590, 7613, 7631, 7649, 7667, 7685, 7703, 7721,
     7744, 7753, 7768, 7790, 7813, 7836, 7859, 2715, 7877, 7888,
     7910, 2824, 7928, 7946, 7964, 7982, 8000, 8018, 8036, 8054,
     8072, 8090, 8108, 8126, 8144, 8162, 8180, 8198, 8216, 8234,
     8252, 8270, 2836, 2854, 8279, 8287, 2968, 8309, 8320, 8342,

     2892, 8365, 8388, 8411, 8420, 8428, 2900, 8445, 8456, 3000,
     8473, 8491, 8509, 8527, 8545, 8563, 8581, 8599, 8617, 8635,
     8653, 8671, 8689, 8707, 8725, 8743, 8761, 8779, 8797, 8815,
     8833, 8851, 8869, 8887, 8905, 8923, 8941, 8959, 8977, 8995,
     9013, 9031, 9049, 9067, 9085, 9103, 9121, 9139, 3068, 3204,
     3485, 9148, 2914, 9170, 9193, 3080, 3083, 9205, 9227, 9249,
     9260, 9277, 9295, 9313, 9331, 9349, 9367, 9385, 9403, 9421,
     9439, 9457, 9475, 9493, 9511, 9529, 9547, 9565, 9583, 9601,
     9619, 9637, 9655, 9673, 9691, 9709, 9727, 9745, 9763, 9781,
     9799, 9817, 9835, 9853, 9871, 9889, 9907, 9925, 9943, 9961,

     9979, 9997,10015,10033,10051, 3121,10060,10082, 3124, 3139,
    10105,10128,10146,10157,10174,10192,10210,10228,10246,10264,
    10282,10300,10318,10336,10354,10372,10390,10408,10426,10444,
    10462,10480,10498,10516,10534,10552,10570,10588,10606,10624,
    10642,10660,10678,10696,10714,10732,10750,10768,10791, 3328,
     3357,10814,10837,10860,10883,10906,10924,10942,10960,10978,
    10996,11014,11032,11050,11068,11086,11104,11122,11140,11158,
    11176,11194,11212,11230,11248,11266,11284,11302,11325,11348,
    11371,11389,11407,11425,11448,11471,11494,11517,11540,11563,
    11586, 3393, 3435

    } ;

static const flex_int16_t yy_def[1894] =
    {   0,
     1646, 1646, 1645,    3, 1645,    5, 1645,    7, 1647, 1647,
       10,   10, 1648, 1648, 1645,   15, 1648, 1648,    3,   19,
     1648, 1648, 1648, 1648, 1649, 1649, 1650, 1650, 1648, 1648,
     1645, 1651, 1645, 1645, 1645, 1645, 1651, 1651, 1651, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1652, 1653, 1645, 1652, 1645, 1654, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1655, 1645, 1645, 1655, 1645,
     1645,   69, 1656, 1657,   69, 1645, 1645, 1645, 1645, 1645,
     1658,   67, 1658, 1645,   83, 1659, 1660,   83, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1661,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1662, 1662, 1662,
     1645, 1645, 1645, 1645, 1645, 1645, 1663, 1661, 1645, 1645,
     1645, 1645, 1645, 1652, 1645, 1645, 1645, 1645, 1645,  128,
      128, 1645, 1645, 1645, 1645, 1645, 1645, 1664, 1645, 1645,
     1664, 1645, 1664, 1645, 1664, 1664, 1664, 1664, 1664, 1664,
     1645, 1645, 1645, 1645, 1665, 1651, 1651, 1651, 1651, 1645,
     1645, 1645, 1666, 1645, 1651, 1651, 1651, 1645, 1667, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1668,   47, 1669, 1645, 1669, 1669, 1669, 1669, 1669,

     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1670, 1645,
     1645, 1652, 1652, 1652, 1671, 1645, 1645, 1645, 1645, 1645,
     1645, 1672, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1673,
     1674, 1645, 1675, 1676, 1674, 1645, 1645, 1645, 1645, 1677,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1673, 1645,
     1678, 1645,  259, 1679, 1680, 1681, 1680, 1645, 1645, 1645,
     1682, 1645, 1682,  273, 1645, 1645, 1645, 1645, 1674, 1645,
     1645, 1645, 1645, 1645, 1645, 1683, 1684, 1645, 1685, 1686,
     1684, 1645, 1645, 1645, 1687, 1645, 1683, 1645, 1688, 1645,

      297, 1689, 1690, 1691, 1690, 1645, 1645, 1645, 1692, 1645,
     1692,  311, 1645, 1645, 1645, 1684, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1693, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1694, 1645, 1645, 1645, 1645, 1695, 1695, 1695, 1645,
     1645, 1645, 1645, 1696, 1696, 1645, 1645, 1645, 1645, 1697,
     1645, 1698, 1699, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1700, 1645, 1645, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1645, 1645, 1645, 1645, 1701, 1702, 1703,
     1704, 1645, 1704, 1645, 1645, 1705, 1645, 1645, 1645, 1645,

     1645, 1706, 1645, 1706, 1707, 1706, 1708, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1708, 1708, 1708, 1708,
     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
     1645, 1645, 1645, 1645, 1705, 1705, 1705, 1705, 1645, 1705,
     1705, 1705, 1645, 1709, 1645, 1645, 1645, 1645, 1710, 1645,
     1645, 1711, 1645, 1712, 1712, 1713, 1712, 1645, 1645, 1645,
     1645, 1714, 1715, 1715, 1645, 1645, 1645, 1716, 1645, 1717,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1718, 1719, 1719,

     1645, 1645, 1645, 1711, 1712,  505, 1720, 1645, 1711, 1721,
     1722, 1723, 1720, 1645, 1645, 1645, 1720, 1645, 1721, 1722,
     1723, 1720, 1645, 1645, 1645,  505, 1724, 1725, 1725, 1726,
     1725, 1645, 1645, 1645, 1727, 1645, 1645, 1645, 1645, 1645,
     1728, 1729, 1729, 1645, 1645, 1645, 1728, 1645, 1645, 1645,
     1645, 1730, 1645, 1731, 1731, 1732, 1731, 1645, 1645, 1645,
     1645, 1733, 1734, 1734, 1645, 1645, 1645, 1735, 1645, 1736,
     1645, 1645, 1645, 1645, 1645, 1737, 1738, 1738, 1645, 1645,
     1645, 1730, 1731,  583, 1739, 1645, 1730, 1740, 1741, 1742,
     1739, 1645, 1645, 1645, 1739, 1645, 1740, 1741, 1742, 1739,

     1645, 1645, 1645,  583, 1743, 1744, 1744, 1745, 1744, 1645,
     1645, 1645, 1746, 1645, 1645, 1645, 1645, 1645, 1747, 1748,
     1748, 1645, 1645, 1645, 1645, 1645, 1749, 1747, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1750, 1645, 1645, 1645, 1645,
     1645, 1751, 1645, 1645, 1645, 1752, 1753, 1752, 1754, 1645,
     1645, 1645, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755,
     1756, 1757, 1645, 1758, 1758, 1752, 1752, 1752, 1752, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1759, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1760, 1760, 1760, 1760, 1760,

     1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760,
     1645, 1760, 1645, 1645, 1645, 1645, 1760, 1760, 1760, 1760,
     1645, 1645, 1760, 1760, 1760, 1760, 1760, 1760, 1645, 1758,
     1645,  730,  730,  730, 1758, 1761, 1761, 1762, 1645, 1763,
     1764, 1765, 1765, 1645, 1645, 1645, 1645, 1645, 1766, 1766,
     1766, 1645, 1645, 1645, 1645, 1645, 1767, 1767, 1768, 1645,
     1645, 1645, 1769, 1645, 1645, 1645, 1645, 1645, 1645, 1770,
     1770, 1770, 1645, 1645, 1645, 1645, 1645, 1771, 1762, 1772,
     1645, 1645, 1645, 1773, 1762, 1762, 1771, 1774, 1762, 1645,
     1645, 1645, 1775, 1645, 1645, 1645, 1776, 1645, 1645, 1645,

     1762,  787, 1645, 1645,  787, 1762,  787, 1777, 1778, 1763,
     1779, 1780, 1781, 1645, 1645, 1645, 1782, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1783, 1783, 1783, 1645, 1645,
     1645, 1645, 1645, 1783, 1645, 1784, 1645, 1785, 1786, 1787,
     1787, 1645, 1645, 1645, 1645, 1645, 1788, 1788, 1788, 1645,
     1645, 1645, 1645, 1645, 1789, 1789, 1790, 1645, 1645, 1645,
     1791, 1645, 1645, 1645, 1645, 1645, 1645, 1792, 1792, 1792,
     1645, 1645, 1645, 1645, 1645, 1793, 1784, 1794, 1645, 1645,
     1645, 1795, 1784, 1784, 1793, 1796, 1784, 1645, 1645, 1645,
     1797, 1645, 1645, 1645, 1798, 1645, 1645, 1645, 1784,  885,

     1645, 1645,  885, 1784,  885, 1799, 1800, 1785, 1801, 1802,
     1803, 1645, 1645, 1645, 1804, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1805, 1805, 1805, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1806, 1806, 1805, 1645, 1807,
     1807, 1808, 1808, 1808, 1809, 1810, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1811, 1645, 1645, 1812, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1813, 1813, 1813, 1813,
     1813, 1813, 1813, 1813, 1813, 1645, 1645, 1813, 1813, 1813,
     1813, 1813, 1645, 1813, 1645, 1813, 1645, 1645, 1645, 1813,

     1813, 1645, 1813,  995, 1813, 1645, 1645, 1645, 1813, 1813,
     1645, 1645, 1813, 1814, 1814, 1815, 1816, 1816, 1816, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1817, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1818, 1645, 1645, 1645, 1645, 1645, 1819, 1645, 1645, 1645,
     1820, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1821, 1821,
     1645, 1645, 1645, 1645, 1645, 1815, 1645, 1066, 1822, 1822,
     1823, 1822, 1645, 1645, 1645, 1824, 1825, 1822, 1822, 1826,
     1827, 1645, 1645, 1645, 1828, 1829, 1829, 1645, 1645, 1645,
     1830, 1645, 1831, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1645, 1645, 1832, 1833, 1833, 1833, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1834, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1835, 1645, 1645, 1645, 1645, 1645, 1836, 1645, 1645, 1645,
     1837, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1838, 1838,
     1645, 1645, 1645, 1645, 1645, 1832, 1645, 1156, 1839, 1839,
     1840, 1839, 1645, 1645, 1645, 1841, 1842, 1839, 1839, 1843,
     1844, 1645, 1645, 1645, 1845, 1846, 1846, 1645, 1645, 1645,
     1847, 1645, 1848, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1849, 1645, 1645, 1850, 1851,

     1645, 1645, 1645, 1645, 1852, 1645, 1853, 1645, 1645, 1645,
     1645, 1645, 1854, 1645, 1645, 1645, 1645, 1645, 1645, 1855,
     1645, 1856, 1856, 1856, 1223, 1645, 1223, 1645, 1223, 1645,
     1645, 1645, 1223, 1645, 1223, 1228, 1645, 1645, 1645, 1645,
     1645, 1223, 1223, 1223, 1223, 1645, 1223, 1228, 1645, 1645,
     1645, 1223, 1223, 1645, 1645, 1223, 1223, 1223, 1645, 1223,
     1228, 1645, 1645, 1645, 1223, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1857, 1858, 1858, 1645,
     1645, 1645, 1645, 1645, 1859, 1860, 1860, 1645, 1645, 1645,

     1861, 1862, 1863, 1863, 1645, 1645, 1645, 1645, 1645, 1864,
     1864, 1864, 1645, 1645, 1645, 1645, 1645, 1865, 1865, 1866,
     1645, 1645, 1645, 1867, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1868, 1869, 1869, 1645, 1645, 1645, 1645,
     1645, 1870, 1871, 1871, 1645, 1645, 1645, 1872, 1873, 1874,
     1874, 1645, 1645, 1645, 1645, 1645, 1875, 1875, 1875, 1645,
     1645, 1645, 1645, 1645, 1876, 1876, 1877, 1645, 1645, 1645,
     1878, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1879, 1645, 1880, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1881, 1645, 1223,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1223, 1421, 1645,
     1645, 1645, 1223, 1223, 1223, 1645, 1645, 1223, 1645, 1645,
     1223, 1645, 1645, 1223, 1223, 1223, 1223, 1645, 1223, 1421,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1882,
     1882, 1882, 1645, 1645, 1645, 1645, 1645, 1645, 1883, 1883,
     1883, 1645, 1645, 1645, 1645, 1645, 1884, 1884, 1884, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1866, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1868, 1868, 1868, 1645, 1645, 1645, 1645,
     1645, 1645, 1870, 1870, 1870, 1645, 1645, 1645, 1645, 1645,
     1873, 1873, 1873, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1877, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1885, 1645, 1886, 1645, 1887, 1645, 1888, 1889,
     1645, 1645, 1223, 1421, 1645, 1645, 1645, 1223, 1645, 1223,
     1421, 1645, 1645, 1645, 1223, 1645, 1223, 1421, 1645, 1645,
     1645, 1223, 1645, 1223, 1421, 1645, 1645, 1645, 1645, 1223,
     1421, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1890, 1645, 1891, 1645, 1223,
     1421, 1645, 1645, 1645, 1645, 1645, 1645, 1223, 1421, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1892, 1893, 1645,    0, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645

    } ;

static const flex_int16_t yy_nxt[11686] =
    {   0,
     1645, 1645,   33,   34,   35,   33,   34,   35,  103,  104,
      103,  104,  172,  178,  370,  172,  178,  370,  173,  179,
      228,  278,  262,  174,  174,  180,   36, 1645,  180,   40,
      261,  261,  261,  261,  173,  179,  263,  181,  218,  181,
      182,  218,  183,  183,  183,  183,  216, 1645,  217,  217,
      217,  217,  228,  278,  263,  219,  219,  219,  219,  348,
      348,  348,  220,  368,  369,  405,  242,  405,  240,  240,
      240,  240,   37,   38,   39,   37,   38,   39,   41,   42,
       43,   44,   42,   41,   45,   46,   41,   41,   47,   48,
       41,   49,   41,   49,   50,   51,   52,   52,   52,   52,

       41,   53,   41,   41,   54,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   56,   57,   48,
       41,   58,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   59,   41,   60,   41,   61,   61,
       62,   63,   64,   41,   65,   43,   44,   65,   66,   45,
       67,   66,   68,   56,   41,   66,   69,   70,   69,   71,
       51,   72,   72,   72,   72,   73,   53,   66,   66,   74,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   56,   75,   41,   68,   58,   66,   66,   66,

       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   41,
       41,   76,   66,   61,   61,   77,   78,   79,   41,   80,
       43,   44,   80,   81,   45,   82,   81,   68,   56,   48,
       81,   83,   70,   83,   84,   81,   85,   85,   85,   85,
       86,   53,   81,   81,   87,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   56,   88,   48,
       68,   58,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   41,   41,   60,   81,   61,   61,

       89,   90,   91,   93,   94,   95,   93,  167,  168,  169,
       96,  692,   96,   96,   96,   96,  693,   96,   96,   97,
      175, 1029,  167,  168,  169, 1455,  176,   96,  167,  168,
      169,  177,  662,  167,  168,  169,  361,  361,  361,  361,
      757,   96,   98,   96,  319,  373,  334,  319,  373,  334,
      662,  106,  107,  108,  106,  763,  109,  106,  107,  108,
      106,  398,  109,  137,  138,  139,  137,  300,  109,   96,
      770,   96,   99,   99,  100,  101,  102,   93,   94,   95,
       93,  301, 1041,  320,   96,  335,   96,   96,   96,   96,
      110,   96,   96,   97,  368,  369,  110,  357,  399,  301,

      357,   96,  140,  365, 1456,  221,  365,  222,  222,  222,
      222,  779,  358,  392,  393,   96,   98,   96,  337,  224,
      111,  111,  112,  113,  114, 1047,  111,  111,  112,  113,
      114,  686,  111,  111,  112,  113,  114,  224,  375,  375,
      375,  375,  366,   96,  687,   96,   99,   99,  100,  101,
      102,  115,  105,  116,  117,  105,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  118,
      118,  118,  118,  115,  115,  115,  115,  115,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      115,  115,  115,  115,  115,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,  119,  118,
      118,  118,  118,  118,  118,  120,  118,  115,  115,  115,
      115,  121,  121,  122,  123,  124,  106,  125,  126,  106,
      218,  218, 1457,  218,  218,  137,  138,  139,  137, 1051,
      109,  162,  163,  228,  278,  164,  162,  163,  323,  632,
      164,  127,  236,  466,  220,  236,  466,  288, 1458,  286,
      286,  286,  286,  785,  237,  128,  237,  238,  129,  239,
      239,  239,  239,  282,  140,  647,  282,  647,  362,  165,
      363,  363,  363,  363,  165,  283,  633,  283,  284,  633,
      285,  285,  285,  285,  793,  111,  111,  112,  113,  114,

      106,  125,  126,  106,  111,  111,  112,  113,  114,  111,
      111,  112,  113,  114,  111,  111,  112,  113,  114,  376,
      377,  377,  377,  338,  638,  127,  218,  185, 1059,  218,
      167,  168,  169,  186,  167,  168,  169, 1459,  187,  128,
      241,  298,  129,  299,  299,  299,  299,  368,  651,  242,
      220,  536,  537,  538,  175,  243,  167,  168,  169,  244,
      639,  188,  797,  639,  189,  378,  190,  392,  393,  111,
      111,  112,  113,  114,  130,  245,  195,  130,  191,  379,
      131, 1287,   68,   56,  625,  192,  132,   70,  132,  133,
       41,  134,  134,  134,  134,  265,  626,  379,  176,  135,

      167,  168,  169,  627,  242,  246,  247,  248,  466,  228,
      266,  466, 1466,  136,  244,   68,  137,  138,  139,  137,
      378, 1467,  380,  380,  380,  380,  408,  409,  410,  172,
      267,  272,  172,  357,  379,  173,  357,  273,  287,  273,
      174,  127,  274,  274,  274,  274,  250,  288,  358, 1069,
      195,  173,  379,  289,  672,  141,  673,  290,  129,  303,
      268,  269,  270,  177, 1468,  167,  168,  169,  288,  310,
      614,  615,  616,  291,  304,  311,  433,  311,  290, 1295,
      312,  312,  312,  312,  295,  111,  111,  112,  113,  114,
      137,  138,  139,  137,  305, 1475,  275,  276,  277,  956,

      408,  409,  410,  292,  293,  294,  175,  957,  167,  168,
      169,  453,  453,  453,  453,  127,  390,  185,  167,  168,
      169,  663,  393,  186,  306,  307,  308,  178,  187,  141,
      178, 1476,  129,  179,  313,  314,  315,  216,  174,  183,
      183,  183,  183,  467,  467,  467,  387,  319,  468,  179,
      319,  188,  466,  228,  189,  466,  190,  387, 1302,  111,
      111,  112,  113,  114,  143,  144,  145,  143,  359, 1483,
      633,  323,  146,  633,  396,  360,  183,  183,  183,  183,
      387,  147,  147,  147,  147,  387,  320, 1484,  397,  387,
      147,  147,  147,  147,  639,  338,  387,  639, 1078,  387,

      394,  387,  388,  394,  402,  402,  397,  147,  147,  147,
      147,  147,  147,  143,  144,  145,  143,  219,  219,  219,
      219,  146,  666,  666,  395,  219,  219,  219,  219, 1485,
      147,  147,  147,  147,  180,  195,  936,  180,  936,  147,
      147,  147,  147, 1310,  652,  195,  181,  652,  181,  182,
     1486,  183,  183,  183,  183, 1487,  147,  147,  147,  147,
      147,  147,  149,  150,  151,  149, 1085,  152,  153,  195,
      443,  154,  154,  154,  195,  154,  155,  429, 1488,  156,
      157,  157,  157,  154,  400,  408,  409,  410,  401,  334,
      401,  438,  334,  402,  402,  408,  409,  410, 1318,  403,

      154,  403,  154,  154,  404,  404,  404,  666,  666,  195,
      158,  444, 1493,  195,  445,  365,  195,  159,  365,  408,
      409,  410,  160,  195,  408,  409,  410,  154,  335,  154,
      161,  149,  150,  151,  149,  440,  152,  153, 1494,  437,
      154,  154,  154,  439,  154,  155,  951,  952,  156,  157,
      157,  157,  154,  295,  366,  427, 1324,  428,  195,  408,
      409,  410, 1495,  408,  409,  410,  408,  409,  410,  154,
     1496,  154,  154,  408,  409,  410,  625,  933,  933,  158,
      430,  465,  465,  465,  465, 1091,  159,  431,  626,  394,
     1497,  160,  394,  432,  370,  627,  154,  370,  154,  161,

      193,  808,  373,  193,  194,  373,  817,  194,  408,  409,
      410,  194,  194,  395,  194,  195,  194,  194,  194,  194,
      194,  195,  394,  194,  194,  394,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  826,  194,
     1107,  446, 1498,  196,  197,  198,  199,  200,  201,  202,
      194,  203,  194,  204,  205,  206,  207,  194,  208,  209,
      210,  211,  194,  194,  194,  408,  409,  410,  194,  933,
      933,  212,  213,  214,  228,  229,  230,  652,  368,  454,
      652,  217,  217,  217,  217,  481,  481,  481,  481,  839,
      231,  231,  231,  397,  455,  378,  456,  456,  456,  456,

      471,  847,  239,  239,  239,  239,  195, 1119,  458,  379,
      195,  397,  261,  261,  261,  261,  230,  230, 1499,  395,
      230,  230,  504,  504,  504,  504,  458,  379,  230,  855,
      861,  230,  441,  230,  868,  230,  232,  185,  434,  435,
      436,  689,  195,  186,  690,  442, 1131,  195,  187,  249,
      249,  249,  249,  250,  251, 1500,  408,  409,  410,  877,
      408,  409,  410,  252,  253,  254,  255,  256,  257,  195,
      466,  188,  447,  466,  189, 1137,  190,  448,  551, 1501,
      285,  285,  285,  285,  449,  634,  634,  634,  191, 1141,
      635, 1502,  408,  409,  410,  192,  241,  408,  409,  410,

      348,  348,  348,  450,  883,  258,  891,  259,  259,  259,
      259,  243,  640,  640,  640,  244,  675,  641, 1149,  408,
      409,  410,  221,  676,  222,  222,  222,  222,  489,  677,
      236,  245,  463,  236,  463,  226,  224,  464,  464,  464,
      464, 1503,  237,  490,  237,  238,  895,  239,  239,  239,
      239,  475, 1354,  472,  224,  239,  239,  239,  239, 1510,
      242,  246,  247,  248,  287, 1511,  476,  473,  633,  323,
      244,  633, 1159,  296, 1512,  297,  297,  297,  297,  289,
      404,  404,  404,  290,  633,  473,  477,  633,  175,  496,
      167,  168,  169,  491,  492,  493,  668,  668,  668,  291,

      249,  249,  249,  249, 1362,  639,  497,  282,  639, 1519,
      282,  561,  561,  561,  561, 1520,  478,  479,  480,  283,
      652,  283,  284,  652,  285,  285,  285,  285, 1369,  292,
      293,  294,  322,  322,  323,  324,  325,  322,  322,  322,
      326,  322,  326,  326,  326,  326,  322,  326,  326,  326,
      327,  327,  327,  322,  322,  322,  322,  326,  322,  322,
      322,  328,  322,  322,  322,  322,  322,  322,  328,  322,
      328,  326,  325,  326,  322,  322,  325,  325,  322,  328,
      325,  325,  322,  322,  322,  322,  322,  322,  325,  322,
      322,  325,  328,  325,  322,  325,  329,  322,  322,  326,

      322,  326,  322,  322,  322,  322,  322,  338,  339,  340,
     1527,  340,  960,  394,  340,  961,  394,  679,  680,  681,
      241, 1528, 1168,  341,  341,  341, 1529,  483,  298,  242,
      299,  299,  299,  299, 1377,  243,  242,  395,  932,  244,
      932, 1530,  266,  933,  933,  340,  244, 1531,  340,  340,
      340, 1175, 1532,  340,  340,  245,  582,  582,  582,  582,
     1385,  340,  484,  569,  340, 1537,  340, 1538,  340,  342,
      349,  349,  349,  349,  644,  644,  644,  644,  570,  349,
      349,  349,  349, 1391, 1539,  246,  247,  248,  354,  354,
      354,  354,  485,  486,  487, 1540,  349,  349,  349,  349,

      349,  349,  351, 1181,  352,  352, 1541,  906,  353,  352,
      353,  915,  924,  354,  354,  354,  354,  241,  467,  467,
      467,  352, 1542,  468,  499,  195,  242, 1543,  571,  572,
      573, 1544,  243,  242,  352, 1545,  244,  352, 1546,  266,
     1547, 1548,  552,  244,  285,  285,  285,  285,  645, 1549,
      645, 1550,  245,  646,  646,  646,  553,  639,  338,  500,
      639,  352,  338,  339,  340, 1551,  340,  407,  649,  340,
      361,  361,  361,  361,  553,  408,  409,  410,  341,  341,
      341,  670,  246,  247,  248,  653,  356,  671,  407,  501,
      502,  503,  650,  650,  650,  650,  375,  375,  375,  375,

      340,  670,  654,  340,  340,  340,  671,  407,  340,  340,
      362,  670,  363,  363,  363,  363,  340,  652,  368,  340,
      652,  340,  671,  340,  342,  411,  412,  413,  414,  415,
      416,  417, 1017,  418, 1029,  419,  420,  421,  422, 1041,
      423,  424,  425,  426,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
     1047,  459,  460,  460,  460,  460,  459,  459,  459,  459,
      459,  461,  461,  461,  462,  461,  461,  461,  461,  461,
      461,  461,  461,  459,  459,  459,  459,  459,  461,  461,
      461,  461,  462,  461,  461,  461,  461,  461,  461,  461,

      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  475,
      655,  655,  655,  655,  453,  453,  453,  453,  262, 1051,
      505,  505,  505,  505,  476,  764,  765,  766,  244, 1059,
     1460,  526,  506,  526,  242, 1587,  527,  527,  527,  527,
      794,  795,  796,  529,  477, 1588,  265, 1287,  474, 1589,
      506, 1069,  242,  721, 1469,  242,  721,  721,  530, 1590,
      721,  266,  244,  722,  265,  244,  474,  722,  456,  456,
      456,  456, 1591,  242,  478,  479,  480,  508,  531,  266,
      664,  267, 1295,  244, 1592, 1477,  509, 1593,  510,  510,

      510,  510,  511,  794,  795,  796,  512, 1594,  664,  267,
      513,  378, 1302,  380,  380,  380,  380, 1595,  532,  533,
      534,  268,  269,  270,  656,  379,  656, 1078,  513,  657,
      657,  657,  657,  665,  665,  665,  665, 1310, 1596,  268,
      269,  270,  463,  379,  463, 1085, 1489,  665,  665,  665,
      665, 1597,  514,  515,  516,  459,  459,  459,  459,  459,
      517,  459,  518,  517,  459,  459,  459,  517,  517,  459,
      517, 1598,  459,  519,  519,  519,  519,  520,  459,  517,
      517,  521,  517,  517,  517,  522,  517,  517,  517,  517,
      517,  517,  517,  517,  459,  517,  459,  459,  459,  517,

      517,  517,  517,  522,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  459,  459,  459,  517,  459,  459,  523,  524,  525,
      542,  195,  818,  819,  820,  241, 1318,  195,  555,  242,
     1599,  195, 1324, 1600,  242,  243, 1091,  288,  973,  244,
      243,  973, 1107,  556,  244, 1119, 1131,  290,  974,  287,
     1137, 1141,  697,  696,  195,  543, 1149, 1504,  288,  975,
      245,  563,  975,  557,  289, 1601,  698, 1602,  290,  976,
      288,  408,  409,  410, 1354, 1603,  304,  408,  409,  410,
      290,  408,  409,  410,  291,  544,  545,  546,  542,  701,

      246,  247,  248,  558,  559,  560,  564,  242, 1159,  547,
      547,  547,  547,  243,  408,  409,  410,  244, 1513, 1604,
      287,  536,  537,  538,  292,  293,  294, 1605, 1362,  288,
      195,  577, 1606,  543, 1521,  289,  565,  566,  567,  290,
      288,  465,  465,  465,  465, 1607,  304,  862,  863,  864,
      290,  195, 1608, 1369,  604,  291,  604,  288,  607,  605,
      605,  605,  605,  544,  545,  546,  578,  288,  699,  700,
     1609,  554, 1168,  608,  892,  893,  894,  290,  195, 1377,
      408,  409,  410,  702, 1610,  292,  293,  294, 1175,  554,
      892,  893,  894,  609, 1533, 1611,  579,  580,  581,  555,

     1612,  408,  409,  410,  195,  703, 1385, 1613,  300, 1391,
      583,  583,  583,  583,  556,  916,  917,  918,  290, 1614,
      195, 1181,  584,  610,  611,  612,  303, 1615,  408,  409,
      410, 1616, 1617,  303,  557,  288,  986,  195,  620,  986,
      584,  304,  288,  710, 1618,  290,  987,  288,  304,  407,
      704,  670,  290,  289,  408,  409,  410,  290,  705,  195,
      671,  305,  707,  195,  558,  559,  560,  586,  305,  195,
      408,  409,  410,  621,  195,  407,  587,  195,  588,  588,
      588,  588,  589,  614,  615,  616,  590,  408,  409,  410,
      591,  306,  307,  308,  670,  706,  671,  407,  306,  307,

      308,  717,  719,  622,  623,  624,  670,  726,  591,  408,
      409,  410,  718,  408,  409,  410,  646,  646,  646,  408,
      409,  410,  671,  407,  408,  409,  410,  408,  409,  410,
      670,  671,  592,  593,  594,  459,  459,  459,  459,  459,
      595,  459,  596,  595,  459,  459,  459,  595,  595,  459,
      595,  407,  595,  597,  597,  597,  597,  598,  459,  595,
      595,  599,  595,  595,  595,  600,  595,  595,  595,  595,
      595,  595,  595,  595,  459,  595,  459,  459,  459,  595,
      595,  595,  595,  600,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,

      595,  459,  459,  459,  595,  459,  459,  601,  602,  603,
      620,  670,  671,  195,  940,  940,  940,  287, 1460,  288,
      195,  628,  628,  628,  628,  289,  288, 1633, 1287,  290,
     1469, 1634,  289,  758, 1295,  378,  290,  380,  380,  380,
      380,  261,  261,  261,  261,  621, 1477,  708,  759,  379,
      709,  195,  291, 1635,  720,  195, 1302, 1310,  195,  721,
     1489, 1636,  721,  408,  409,  410, 1318,  379,  758,  722,
      408,  409,  410, 1324, 1504,  622,  623,  624, 1637, 1354,
      195, 1513,  292,  293,  294,  349,  349,  349,  349, 1638,
      723,  724,  725, 1362,  349,  349,  349,  349,  760,  761,

      762,  408,  409,  410, 1521,  408,  409,  410,  408,  409,
      410,  349,  349,  349,  349,  349,  349,  669,  669,  669,
      669,  481,  481,  481,  481, 1639,  669,  669,  669,  669,
      408,  409,  410,  195,  731, 1369,  731, 1377, 1533,  732,
      732,  732,  732,  669,  669,  669,  669,  669,  669,  711,
      711,  711,  711,  711,  195,  711,  712,  780,  711,  711,
      711,  780, 1640,  711,  455,  711,  456,  456,  456,  456,
     1385,  713,  711, 1391,  407,  711,  727,  735,  458,  736,
      736,  736,  736,  408,  409,  410,  670,  671,  711,  407,
      711,  712,  711,  728,  670,  463,  458,  463,  671, 1460,

      734,  734,  734,  734,  408,  409,  410,  781,  782,  783,
     1469,  781,  782,  783, 1477,  711,  711,  711, 1489,  711,
      711,  714,  715,  716,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
     1504,  459,  730,  730,  730,  730,  459,  459,  459,  459,
      459,  461,  461,  461,  462,  461,  461,  461,  461,  461,
      461,  461,  461,  459,  459,  459,  459,  459,  461,  461,
      461,  461,  462,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  455,

     1513,  733,  733,  733,  733,  299,  299,  299,  299,  739,
     1641,  739,  878,  458,  740,  740,  740,  740,  475, 1521,
     1533,  475,  561,  561,  561,  561,  406,  242, 1641,  406,
      242,  458,  508,  476,  749,  406,  476,  244,  741,  742,
      244, 1454, 1017,  510,  510,  510,  510,  511,  242,  671,
      670,  512,  508,  477,  266,  738,  477,  475,  244,  878,
      750,  407,  879,  880,  881,  508,  242,  511,  671,  242,
      670,  512,  476,  738,  743,  530,  244,  407,  671,  244,
      784,  483,  670,  478,  479,  480,  478,  479,  480,  407,
      242, 1011,  477,  483, 1011,  751,  266,  514,  515,  516,

      244, 1012,  242,  671,  744,  745,  746,  670,  266,  879,
      880,  881,  244,  945,  945,  945,  484,  514,  515,  516,
      771,  407,  478,  479,  480,  752,  753,  754,  484,  242,
      798,  799,  800, 1418,  499,  530, 1417,  508,  469,  244,
     1416, 1415,  499,  242,  469, 1414,  485,  486,  487,  266,
      636,  242,  784,  244, 1413,  772,  636,  266,  485,  486,
      487,  244,  668,  668,  668,  837, 1412,  837,  642,  500,
      838,  838,  838,  838,  642, 1411,  526,  500,  526,  242,
     1410,  527,  527,  527,  527,  773,  774,  775, 1409,  801,
     1408,  801, 1407,  474,  802,  802,  802,  802,  780,  501,

      502,  503,  798,  799,  800, 1406,  661,  501,  502,  503,
      508,  474,  661,  242,  406,  527,  527,  527,  527,  509,
      406,  778,  778,  778,  778,  511, 1405,  474,  648,  512,
     1030, 1031, 1032,  513,  648,  806,  973,  806,  529,  973,
      807,  807,  807,  807,  780,  474,  974,  242,  781,  782,
      783,  513,  975,  530,  934,  975,  934,  244, 1404,  935,
      935,  935,  976, 1403,  604,  529,  604,  288,  619,  605,
      605,  605,  605,  531,  242,  514,  515,  516,  475,  648,
      530,  554,  648,  586,  244, 1399,  924,  262,  648,  505,
      505,  505,  505,  476,  781,  782,  783,  244,  589,  554,

      531,  506,  590,  532,  533,  534,  529,  634,  634,  634,
      613,  586,  635,  477,  469,  242,  469,  606,  827,  506,
      469,  530,  764,  765,  766,  244,  882,  242, 1398,  915,
      532,  533,  534,  476, 1042, 1043, 1044,  244, 1397,  856,
      906,  531, 1396,  478,  479,  480,  786, 1395,  592,  593,
      594, 1181,  586,  828,  857,  509, 1183,  787,  787,  787,
      787,  788, 1048, 1049, 1050,  512, 1384,  882, 1383,  789,
     1175,  532,  533,  534,  856, 1376,  896,  897,  898,  937,
      542,  779,  937,  829,  830,  831, 1375,  789,  937,  242,
     1168,  640,  640,  640,  945,  243,  641,  946, 1361,  244,

      945,  542, 1360,  946,  858,  859,  860, 1052, 1053, 1054,
      242,  790,  791,  792,  786,  543,  243,  896,  897,  898,
      244, 1159,  585,  509, 1353,  805,  805,  805,  805,  788,
      794,  795,  796,  512,  895,  937,  543,  789, 1199,  555,
      986,  937,  555,  986, 1199,  544,  545,  546,  288,  779,
      987,  288, 1352, 1200,  556,  789, 1351,  556,  290, 1200,
     1149,  290,  644,  644,  644,  644,  544,  545,  546,  465,
      465,  465,  465, 1350,  557, 1011,  780,  557, 1011,  790,
      791,  792,  809,  891,  288, 1012,  605,  605,  605,  605,
     1349,  810,  780,  811,  811,  811,  811,  812,  554,  883,

     1348,  813, 1347, 1141,  558,  559,  560,  558,  559,  560,
      840,  655,  655,  655,  655, 1346,  554,  477,  636,  288,
      636,  555, 1345,  379,  636,  304,  781,  782,  783,  290,
      288,  657,  657,  657,  657, 1137,  556,  818,  819,  820,
      290,  379,  781,  782,  783,  841, 1344,  814,  815,  816,
      827,  657,  657,  657,  657,  877,  557, 1240, 1343,  242,
     1240,  834,  834,  834,  834,  476,  463, 1241,  463,  244,
     1342,  734,  734,  734,  734,  842,  843,  844, 1014, 1014,
     1014, 1014, 1131,  576,  848,  828,  558,  559,  560,  563,
     1120, 1121, 1122,  288,  733,  733,  733,  733,  288,  608,

      862,  863,  864,  290,  304,  899, 1341,  899,  290,  868,
      900,  900,  900,  900,  878,  829,  830,  831,  586,  849,
      740,  740,  740,  740,  564,  563, 1132, 1133, 1134,  588,
      588,  588,  588,  589,  288,  568, 1254,  590,  869, 1254,
      304,  836, 1401,  577,  290, 1340, 1255,  288, 1401,  850,
      851,  852,  288,  608,  565,  566,  567,  290,  304,  836,
      564,  577,  290,  861,  879,  880,  881, 1138, 1139, 1140,
      288, 1402, 1645,  870, 1339, 1645,  304, 1402,  578,  855,
      290,  788, 1645,  592,  593,  594,  732,  732,  732,  732,
      565,  566,  567, 1338, 1337,  878,  578,  735,  457,  736,

      736,  736,  736,  871,  872,  873, 1119, 1643,  579,  580,
      581,  562,  904, 1643,  904,  607,  457,  905,  905,  905,
      905,  878, 1336,  847,  288,  554,  579,  580,  581,  586,
      608,  781,  782,  783,  290, 1142, 1143, 1144,  587, 1335,
      876,  876,  876,  876,  589,  879,  880,  881,  590, 1644,
      609, 1645,  591, 1645,  455, 1644,  734,  734,  734,  734,
      839, 1334,  734,  734,  734,  734, 1645, 1333,  607, 1645,
      591,  879,  880,  881,  457, 1107, 1645,  288,  541, 1332,
      610,  611,  612,  608,  892,  893,  894,  290, 1066, 1066,
     1066, 1066,  457,  826,  592,  593,  594,  555,  535,  642,

      785,  642,  528,  609,  607,  642,  300, 1331,  583,  583,
      583,  583,  556,  288,  817, 1330,  290,  808,  785,  608,
      584, 1329, 1645,  290, 1645, 1328, 1091, 1015, 1015, 1015,
     1015,  925,  557,  610,  611,  612, 1093, 1317,  584,  609,
      288,  805,  805,  805,  805, 1316,  556,  916,  917,  918,
      290, 1645, 1085, 1645,  455, 1309,  456,  456,  456,  456,
      758, 1308,  558,  559,  560,  884,  926, 1078,  458,  610,
      611,  612,  620, 1294,  587,  759,  885,  885,  885,  885,
      886,  288,  973, 1293,  590,  973,  458,  289,  887, 1069,
      507,  290,  974,  620, 1286,  758,  927,  928,  929,  878,

      877,  797,  288,  195, 1285, 1284,  887,  621,  289,  935,
      935,  935,  290,  975, 1645, 1059,  975, 1645, 1283, 1645,
      793, 1282, 1645,  976, 1645,  760,  761,  762,  621, 1645,
      888,  889,  890,  884,  195,  785, 1281,  622,  623,  624,
      195, 1280,  587,  886,  903,  903,  903,  903,  886,  879,
      880,  881,  590,  408,  409,  410,  887, 1051,  622,  623,
      624, 1433, 1645, 1279,  977, 1645, 1645, 1278,  877, 1645,
     1047, 1277, 1645,  779,  887, 1276, 1645, 1068, 1068, 1068,
     1068, 1092, 1275,  195,  408,  409,  410,  195, 1041,  785,
      408,  409,  410,  879,  880,  881, 1093,  498,  888,  889,

      890,  907,  838,  838,  838,  838, 1182,  785, 1274,  978,
      908,  979,  909,  909,  909,  909,  910,  770,  488, 1645,
      911, 1183, 1645,  903,  903,  903,  903, 1273,  763, 1645,
      935,  935,  935,  408,  409,  410,  557,  408,  409,  410,
      195, 1645, 1272,  757, 1645, 1271, 1094, 1095, 1096, 1645,
      758, 1645, 1645, 1645, 1270, 1029, 1645,  482, 1269, 1645,
      749,  474,  195, 1645, 1060,  759,  912,  913,  914,  925,
      195, 1184, 1185, 1186,  195,  980, 1268,  741,  288,  780,
      938,  938,  938,  938,  556,  758, 1645, 1267,  290, 1645,
      408,  409,  410, 1266,  981, 1645, 1645, 1017, 1645, 1060,

      982,  983,  671,  195,  926, 1645,  670,  195,  940,  940,
      940,  407,  408,  409,  410,  760,  761,  762,  671,  670,
      408,  409,  410,  407,  408,  409,  410, 1221, 1220, 1061,
     1062, 1063, 1224,  984,  927,  928,  929,  941,  941,  941,
      941, 1645, 1435, 1219, 1645, 1218,  941,  941,  941,  941,
     1217, 1645, 1216,  408,  409,  410, 1215,  408,  409,  410,
     1214, 1213,  195,  941,  941,  941,  941,  941,  941,  669,
      669,  669,  669,  986,  856, 1212,  986, 1211,  669,  669,
      669,  669, 1645,  987,  195, 1645, 1030, 1031, 1032,  857,
     1210, 1209, 1645, 1208,  195,  669,  669,  669,  669,  669,

      669,  985, 1207,  195, 1206, 1645, 1205, 1204, 1645,  856,
     1203, 1202,  408,  409,  410, 1645, 1201, 1645,  407, 1196,
     1645, 1645, 1223,  195, 1645,  988,  195, 1645, 1042, 1043,
     1044, 1645,  195,  309,  408,  409,  410, 1195,  195,  858,
      859,  860,  195,  619,  408,  409,  410, 1194, 1193, 1645,
      924,  302, 1645,  408,  409,  410, 1192, 1233, 1645, 1645,
      613, 1645, 1240, 1222,  989, 1240, 1191,  990, 1645,  606,
      195, 1190, 1241,  408,  409,  410,  408,  409,  410,  195,
     1189,  915,  408,  409,  410, 1048, 1049, 1050,  408,  409,
      410, 1188,  408,  409,  410,  411,  412,  413,  414,  415,

      416,  417,  992,  418, 1187,  419,  420,  421,  422,  991,
      423,  424,  425,  426,  906, 1157, 1645,  585, 1155, 1645,
      408,  409,  410, 1052, 1053, 1054, 1645, 1154,  895,  408,
      409,  410,  993,  993,  993,  993,  993,  195,  993,  994,
     1148,  993,  993,  993, 1147,  891,  993, 1645,  993, 1146,
     1645, 1325, 1326, 1327,  995,  993, 1645, 1645,  993, 1645,
     1120, 1121, 1122, 1000, 1145,  883, 1645, 1136,  195, 1135,
      877,  993, 1130,  993,  994,  993,  576,  195, 1156, 1156,
     1156, 1156, 1068, 1068, 1068, 1068,  996,  408,  409,  410,
      883, 1645, 1129, 1128, 1645,  868, 1009,  286,  993,  993,

      993, 1645,  993,  993,  997,  998,  999, 1127,  883,  195,
      568, 1126,  195, 1001, 1011, 1125,  195, 1011,  408,  409,
      410, 1132, 1133, 1134, 1012,  861, 1124,  408,  409,  410,
     1002, 1002, 1002, 1002, 1002,  195, 1002, 1003, 1010, 1002,
     1002, 1002, 1123,  855, 1002, 1118, 1002, 1225, 1243, 1138,
     1139, 1140, 1004, 1002,  562, 1645, 1002, 1117, 1645,  408,
      409,  410,  408,  409,  410, 1645,  408,  409,  410, 1002,
     1116, 1002, 1003, 1002,  847,  806,  195,  806, 1005, 1115,
      807,  807,  807,  807,  780,  408,  409,  410,  554,  802,
      802,  802,  802,  780, 1114, 1113, 1002, 1002, 1002,  508,

     1002, 1002, 1006, 1007, 1008,  839, 1013,  271,  509, 1105,
     1016, 1016, 1016, 1016,  511, 1142, 1143, 1144,  512, 1392,
     1393, 1394, 1018, 1490, 1491, 1492,  408,  409,  410, 1645,
      541,  242, 1645,  742,  781,  782,  783,  530, 1104, 1645,
      742,  244,  242,  781,  782,  783, 1103,  826,  266,  242,
     1436,  264,  244, 1436, 1102,  266,  535, 1019,  750,  244,
     1437,  750, 1101,  528,  514,  515,  516,  242,  743, 1645,
      242, 1100, 1645,  530, 1434,  743,  530,  244, 1099, 1645,
      244,  195,  750, 1158, 1158, 1158, 1158, 1020, 1021, 1022,
      817,  242, 1439,  751,  771, 1439,  751,  530,  744,  745,

      746,  244, 1440,  242, 1098,  744,  745,  746, 1645,  530,
     1097, 1645,  195,  244,  808,  195, 1067,  751, 1645,  507,
     1244,  771, 1438,  752,  753,  754,  752,  753,  754,  772,
      242,  408,  409,  410, 1065,  771,  530, 1325, 1326, 1327,
      244, 1245, 1442, 1254,  242, 1442, 1254,  752,  753,  754,
      530, 1064, 1443, 1255,  244, 1242,  772,  797, 1058,  773,
      774,  775,  408,  409,  410,  408,  409,  410, 1057,  801,
      772,  801,  793, 1056,  802,  802,  802,  802,  780,  807,
      807,  807,  807,  780, 1055,  785,  773,  774,  775, 1070,
     1046,  195, 1045, 1158, 1158, 1158, 1158,  779,  242, 1040,

      773,  774,  775,  786, 1071,  883,  498, 1039,  244, 1038,
      856,  770,  509,  240,  805,  805,  805,  805,  788, 1534,
     1535, 1536,  512,  883, 1072,  857,  789, 1037,  781,  782,
      783,  475,  488,  781,  782,  783, 1036, 1150,  779, 1035,
      242,  408,  409,  410,  789,  856, 1076,  763,  508,  195,
      244, 1034,  878, 1033, 1073, 1074, 1075, 1645,  757, 1077,
     1077, 1077, 1077,  511, 1028,  482,  477,  512,  790,  791,
      792,  786, 1150, 1027, 1026,  858,  859,  860, 1645,  749,
      509, 1645,  787,  787,  787,  787,  788, 1025, 1645, 1256,
      512,  474,  195, 1024,  789, 1023,  478,  479,  480,  408,

      409,  410, 1151, 1152, 1153,  741,  779, 1392, 1393, 1394,
     1086,  226,  789,  514,  515,  516,  195,  194, 1252,  242,
     1240,  671,  670, 1240,  407,  266,  904,  972,  904,  244,
     1241,  905,  905,  905,  905,  878,  790,  791,  792, 1079,
      971,  195,  408,  409,  410, 1087,  827,  970,  810,  969,
     1080, 1080, 1080, 1080, 1081,  242,  968,  967,  813, 1645,
      966,  476, 1645,  827,  965,  244,  408,  409,  410, 1645,
      964,  963,  242,  962, 1072, 1088, 1089, 1090,  476,  959,
      827,  828,  244,  958,  955,  879,  880,  881,  954,  242,
      953,  408,  409,  410,  950,  476,  949,  948,  828,  244,

     1425,  947,  407, 1425, 1082, 1083, 1084,  586,  944,  943,
     1426,  829,  830,  831,  942,  828,  587, 1441, 1106, 1106,
     1106, 1106,  589, 1108,  343,  641,  590,  330,  829,  830,
      831,  635,  288,  316,  840, 1490, 1491, 1492,  608,  939,
      309, 1436,  290,  288, 1436,  829,  830,  831,  827,  304,
      931, 1437,  930,  290,  195,  619,  840,  242, 1109,  834,
      834,  834,  834,  476,  923,  288,  302,  244,  922,  841,
      921,  304,  592,  593,  594,  290, 1253,  848, 1534, 1535,
     1536,  613,  920,  828, 1439,  919,  288, 1439, 1110, 1111,
     1112,  841,  608,  606, 1440,  902,  290,  901,  585,  842,

      843,  844,  882,  902,  408,  409,  410,  901, 1645,  585,
      848, 1645,  849,  829,  830,  831,  882,  848, 1645,  288,
      875,  842,  843,  844, 1442,  608,  288, 1442,  874,  290,
      576,  869,  608,  867, 1443,  286,  290,  866,  869,  865,
      288,  568,  850,  851,  852,  849,  608,  288, 1645,  195,
      290, 1645,  849,  608,  899,  869,  899,  290, 1645,  900,
      900,  900,  900,  878,  288,  570,  870, 1444,  854,  853,
      608, 1257,  562,  870,  290,  850,  851,  852,  846,  195,
      845,  554,  850,  851,  852,  900,  900,  900,  900,  878,
      870,  279,  835,  195,  271, 1447,  871,  872,  873,  408,

      409,  410,  833,  871,  872,  873,  905,  905,  905,  905,
      878, 1258,  832,  879,  880,  881, 1645,  541,  825, 1645,
      871,  872,  873,  884,  264, 1265, 1645,  824,  823,  408,
      409,  410,  587,  535,  903,  903,  903,  903,  886,  879,
      880,  881,  590,  408,  409,  410,  887,  822,  821,  455,
     1160,  732,  732,  732,  732,  528,  804,  555,  877,  288,
      879,  880,  881,  803,  887, 1161,  288,  507,  586,  290,
      784,  804, 1166,  803,  507,  784,  290, 1645,  777, 1167,
     1167, 1167, 1167,  589,  776, 1162, 1060,  590,  888,  889,
      890,  884,  557, 1645,  498, 1015, 1015, 1015, 1015,  769,

      587,  780,  885,  885,  885,  885,  886,  240, 1425, 1645,
      590, 1425, 1645,  768,  887, 1163, 1164, 1165, 1426, 1645,
      767, 1060,  558,  559,  560,  488,  877,  490, 1645,  756,
     1176, 1645,  887,  592,  593,  594,  755,  482, 1645,  288,
     1254,  748,  747, 1254, 1645,  304,  474, 1645,  233,  290,
     1255, 1061, 1062, 1063, 1645,  468,  888,  889,  890, 1169,
      729,  195,  194,  695,  694, 1177,  925,  691,  908, 1445,
     1170, 1170, 1170, 1170, 1171,  288, 1645, 1436,  911, 1645,
     1436,  556,  688,  925,  685,  290, 1645, 1437, 1446,  684,
      683,  682,  288,  678, 1162, 1178, 1179, 1180,  556,  674,

      925,  926,  290,  671, 1439, 1060,  670, 1439, 1018,  288,
      407,  408,  409,  410, 1440,  556,  660,  242,  926,  290,
      780,  659,  658,  530, 1172, 1173, 1174,  244,  625,  643,
      343,  927,  928,  929, 1442,  926, 1558, 1442,  637,  330,
     1060,  631,  316, 1019, 1443,  630,  629,  309,  927,  928,
      929, 1301, 1301, 1301, 1301,  780,  618,  617, 1368, 1368,
     1368, 1368,  878,  302,  575,  927,  928,  929,  925,  574,
     1061, 1062, 1063, 1020, 1021, 1022, 1018,  288,  286,  938,
      938,  938,  938,  556, 1319,  242,  550,  290,  279, 1018,
     1585,  530,  549, 1585,  548,  244,  271,  250,  242, 1320,

     1586,  540,  539,  926,  530,  781,  782,  783,  244,  264,
      495, 1019,  879,  880,  881,  494,  240, 1150, 1645, 1319,
     1585, 1645,  470, 1585, 1019, 1150,  233,  226, 1645,  452,
     1586,  451,  878,  927,  928,  929,  941,  941,  941,  941,
      878, 1020, 1021, 1022,  194,  941,  941,  941,  941, 1321,
     1322, 1323, 1150,  171, 1020, 1021, 1022,  385,  384,  383,
     1150, 1070,  941,  941,  941,  941,  941,  941, 1197, 1197,
      242, 1197,  382, 1197,  381,  374, 1071, 1197, 1197, 1197,
      244, 1197, 1151, 1152, 1153,  371, 1070,  367,  364, 1197,
     1151, 1152, 1153,  350,  345,  242, 1072, 1386,  344,  343,

     1645, 1071,  346, 1645, 1288,  244, 1197,  345, 1197, 1197,
     1645,  344, 1387,  242, 1645, 1625,  343, 1645, 1625,  266,
      336, 1072,  333,  244, 1645, 1626, 1073, 1074, 1075,  332,
      331, 1645, 1386, 1197, 1645, 1197, 1197, 1198, 1198, 1289,
     1198, 1645, 1198,  330,  321,  318, 1198, 1198, 1198,  317,
     1198, 1073, 1074, 1075,  316,  295,  281, 1645, 1198, 1319,
     1645,  280, 1388, 1389, 1390,  279,  260, 1645,  235, 1290,
     1291, 1292,  234,  233, 1320, 1198, 1070, 1198, 1198, 1301,
     1301, 1301, 1301,  780,  226,  242, 1645, 1645,  215, 1645,
     1645, 1071,  184,  171, 1319,  244, 1645, 1645,  170, 1645,

     1645, 1645, 1198, 1645, 1198, 1198, 1226, 1226, 1226, 1226,
     1226, 1072, 1226, 1227, 1645, 1226, 1226, 1226, 1645, 1645,
     1226, 1565, 1226, 1645, 1321, 1322, 1323, 1645, 1228, 1226,
     1645, 1645, 1226,  781,  782,  783, 1645, 1645, 1645, 1645,
     1645, 1073, 1074, 1075, 1645, 1226, 1572, 1226, 1227, 1226,
     1645, 1296, 1585, 1625, 1229, 1585, 1625, 1645, 1645, 1645,
      242, 1645, 1586, 1626, 1645, 1645,  266, 1645, 1645, 1645,
      244, 1645, 1226, 1226, 1226, 1645, 1226, 1226, 1230, 1231,
     1232, 1234, 1234, 1234, 1234, 1234, 1297, 1234, 1235, 1645,
     1234, 1234, 1234, 1645, 1645, 1234, 1625, 1234, 1645, 1625,

     1645, 1645, 1645, 1236, 1234, 1645, 1626, 1234, 1645, 1645,
     1070, 1645, 1645, 1645, 1645, 1645, 1298, 1299, 1300,  242,
     1234, 1645, 1234, 1235, 1234, 1071, 1319, 1645, 1645,  244,
     1368, 1368, 1368, 1368,  878, 1645, 1645, 1645, 1645, 1645,
     1645, 1320, 1645, 1645, 1645, 1072, 1645, 1234, 1234, 1234,
     1645, 1234, 1234, 1237, 1238, 1239, 1246, 1246, 1246, 1246,
     1246, 1319, 1246, 1247, 1645, 1246, 1246, 1246, 1645, 1645,
     1246, 1645, 1246, 1645, 1645, 1073, 1074, 1075, 1248, 1246,
     1645, 1645, 1246, 1645,  879,  880,  881, 1642, 1642, 1642,
     1645, 1321, 1322, 1323, 1645, 1246, 1645, 1246, 1247, 1246,

     1645, 1645, 1645, 1386, 1645, 1642, 1642, 1642, 1642, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1387, 1645,
     1645, 1645, 1246, 1246, 1246, 1645, 1246, 1246, 1249, 1250,
     1251,  411,  412,  413,  414,  415,  416,  417, 1386,  418,
     1386,  419,  420,  421,  422, 1645,  423,  424,  425,  426,
     1259, 1259, 1259, 1259, 1259, 1387, 1259, 1260, 1645, 1259,
     1259, 1259, 1070, 1645, 1259, 1303, 1259, 1645, 1388, 1389,
     1390,  242, 1261, 1259,  242, 1386, 1259, 1081, 1645, 1645,
      266,  244, 1645, 1645,  244, 1645, 1645, 1645, 1645, 1259,
     1645, 1259, 1260, 1259, 1645, 1645, 1645, 1072, 1645, 1645,

     1304, 1645, 1645, 1645, 1645, 1388, 1389, 1390, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1259, 1259, 1259, 1645,
     1259, 1259, 1262, 1263, 1264,  786, 1645, 1073, 1074, 1075,
     1305, 1306, 1307, 1311,  509, 1645, 1068, 1068, 1068, 1068,
      788, 1645,  242, 1645,  512, 1645, 1645, 1645,  530, 1645,
     1086, 1645,  244, 1645, 1645, 1645, 1645, 1645, 1645,  242,
      779, 1645, 1645, 1645, 1645,  266, 1645, 1645, 1312,  244,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1087, 1645, 1645, 1645, 1645,
      790,  791,  792,  786, 1645, 1645, 1645, 1645, 1313, 1314,

     1315, 1645,  509, 1645, 1066, 1066, 1066, 1066,  788, 1645,
     1645, 1645,  512, 1645, 1645, 1088, 1089, 1090, 1086, 1645,
     1645, 1108, 1645, 1645, 1645, 1645, 1645,  242,  779, 1645,
      288, 1645, 1108,  266, 1645, 1645,  608,  244, 1645, 1645,
      290,  288, 1645, 1645, 1645, 1645, 1645,  608, 1645, 1645,
     1645,  290, 1645, 1087, 1645, 1645, 1109, 1645,  790,  791,
      792, 1079, 1645, 1645, 1645, 1645, 1645, 1109, 1645, 1645,
      810, 1645, 1080, 1080, 1080, 1080, 1081, 1645, 1645, 1645,
      813, 1645, 1645, 1088, 1089, 1090, 1110, 1111, 1112, 1645,
     1645, 1645, 1645, 1645, 1645, 1108, 1072, 1110, 1111, 1112,

     1160, 1645, 1645, 1645,  288, 1645, 1645, 1645, 1645,  288,
      608, 1645, 1645, 1645,  290, 1161, 1645, 1645, 1645,  290,
     1645, 1645, 1645, 1645, 1645, 1645, 1082, 1083, 1084,  884,
     1109, 1645, 1645, 1645, 1645, 1162, 1160, 1645,  587, 1645,
     1158, 1158, 1158, 1158,  886,  288, 1645, 1645,  590, 1645,
     1645, 1161, 1645, 1645, 1355,  290, 1645, 1645, 1645, 1645,
     1110, 1111, 1112,  288,  877, 1163, 1164, 1165, 1645,  304,
     1645, 1162, 1160,  290, 1645, 1645, 1645, 1645, 1645, 1645,
     1645,  288, 1645, 1645, 1645, 1645, 1645, 1161, 1645, 1356,
     1645,  290, 1645, 1645,  888,  889,  890,  884, 1645, 1645,

     1645, 1163, 1164, 1165, 1645, 1645,  587, 1162, 1156, 1156,
     1156, 1156,  886, 1645, 1363, 1645,  590, 1645, 1645, 1357,
     1358, 1359, 1645,  288, 1645, 1160, 1645, 1645, 1645,  304,
     1645, 1645,  877,  290,  288, 1645, 1160, 1163, 1164, 1165,
     1161, 1645, 1645, 1645,  290,  288, 1645, 1645, 1645, 1364,
     1645, 1171, 1645, 1645, 1645,  290, 1645, 1645, 1645, 1370,
     1162, 1645,  888,  889,  890, 1645, 1645, 1645,  288, 1645,
     1645, 1162, 1645, 1645,  304, 1645, 1645, 1645,  290, 1365,
     1366, 1367, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1163, 1164, 1165, 1645, 1371, 1645, 1645, 1645, 1645, 1645,

     1645, 1163, 1164, 1165, 1169, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1378,  908, 1645, 1170, 1170, 1170, 1170, 1171,
     1645,  288, 1645,  911, 1372, 1373, 1374,  608, 1645, 1176,
     1645,  290, 1645, 1645, 1645, 1645, 1645, 1176,  288, 1162,
     1645, 1645, 1645, 1645,  304, 1645,  288, 1379,  290, 1645,
     1645, 1645,  304, 1645, 1645, 1645,  290, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1177, 1461, 1645, 1645, 1645, 1172,
     1173, 1174, 1177, 1645,  242, 1645, 1645, 1380, 1381, 1382,
      530, 1645, 1288, 1645,  244, 1645, 1645, 1645, 1645, 1645,
     1645,  242, 1645, 1645, 1178, 1179, 1180,  266, 1645, 1645,

     1462,  244, 1178, 1179, 1180, 1400, 1400, 1645, 1400, 1645,
     1400, 1645, 1645, 1645, 1400, 1400, 1400, 1289, 1400, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1400, 1645, 1645, 1645,
     1463, 1464, 1465, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1400, 1288, 1400, 1400, 1290, 1291, 1292,
     1645, 1645, 1645,  242, 1645, 1645, 1645, 1645, 1645,  266,
     1645, 1645, 1645,  244, 1645, 1645, 1645, 1645, 1645, 1645,
     1400, 1645, 1400, 1400, 1419, 1419, 1419, 1419, 1419, 1289,
     1419, 1420, 1645, 1419, 1419, 1419, 1645, 1645, 1419, 1645,
     1419, 1645, 1645, 1645, 1645, 1645, 1421, 1419, 1645, 1645,

     1419, 1645, 1645, 1470, 1645, 1645, 1645, 1645, 1645, 1290,
     1291, 1292,  242, 1419, 1645, 1419, 1420, 1419,  530, 1645,
     1645, 1645,  244, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1471, 1645,
     1419, 1419, 1419, 1645, 1419, 1419, 1422, 1423, 1424, 1645,
     1425, 1645, 1645, 1425, 1645, 1645, 1645, 1645, 1645, 1645,
     1426, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1472, 1473,
     1474,  195, 1645, 1645, 1645, 1645, 1296, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645,  242, 1645, 1645, 1645, 1645,
     1645,  266, 1645, 1645, 1296,  244, 1645, 1645, 1645, 1645,

     1645, 1645, 1645,  242, 1645, 1645, 1645, 1645, 1645,  266,
     1645, 1297, 1645,  244, 1645, 1645, 1645, 1645, 1645, 1645,
     1645,  408,  409,  410, 1427, 1427, 1427, 1427, 1427, 1297,
     1427, 1428, 1645, 1427, 1427, 1427, 1645, 1645, 1427, 1645,
     1427, 1298, 1299, 1300, 1645, 1645, 1429, 1427, 1645, 1645,
     1427, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1298,
     1299, 1300, 1645, 1427, 1645, 1427, 1428, 1427, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1427, 1427, 1427, 1645, 1427, 1427, 1430, 1431, 1432,  411,

      412,  413,  414,  415,  416,  417, 1645,  418, 1645,  419,
      420,  421,  422, 1645,  423,  424,  425,  426, 1448, 1448,
     1448, 1448, 1448, 1645, 1448, 1449, 1645, 1448, 1448, 1448,
     1478, 1645, 1448, 1303, 1448, 1645, 1645, 1645, 1645,  242,
     1450, 1448,  242, 1645, 1448,  530, 1645, 1303,  266,  244,
     1645, 1645,  244, 1645, 1645, 1645,  242, 1448, 1311, 1448,
     1449, 1448,  266, 1645, 1645, 1479,  244,  242, 1304, 1645,
     1645, 1645, 1645,  530, 1645, 1645, 1645,  244, 1645, 1645,
     1645, 1645, 1304, 1645, 1448, 1448, 1448, 1645, 1448, 1448,
     1451, 1452, 1453, 1312, 1645, 1480, 1481, 1482, 1305, 1306,

     1307, 1311, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
      242, 1645, 1305, 1306, 1307, 1645,  530, 1645, 1311, 1645,
      244, 1645, 1645, 1313, 1314, 1315, 1505,  242, 1645, 1355,
     1645, 1645, 1645,  530, 1645,  288, 1312,  244,  288, 1645,
     1355,  608, 1645, 1514,  304,  290, 1645, 1645,  290,  288,
     1645, 1645,  288, 1312, 1363,  304, 1645, 1645,  608,  290,
     1645, 1506,  290,  288, 1356, 1645, 1313, 1314, 1315,  304,
     1645, 1645, 1645,  290, 1645, 1356, 1645, 1645, 1515, 1645,
     1645, 1645, 1645, 1313, 1314, 1315, 1645, 1645, 1645, 1364,
     1645, 1507, 1508, 1509, 1357, 1358, 1359, 1645, 1645, 1645,

     1645, 1645, 1645, 1363, 1645, 1357, 1358, 1359, 1516, 1517,
     1518, 1645,  288, 1645, 1522, 1645, 1645, 1370,  304, 1365,
     1366, 1367,  290,  288, 1645, 1370,  288, 1645, 1378,  608,
     1645, 1645,  304,  290,  288, 1645,  290,  288, 1364, 1378,
      304, 1645, 1378,  608,  290, 1645, 1645,  290,  288, 1523,
     1645,  288, 1371, 1645,  608, 1645, 1645,  608,  290, 1645,
     1371,  290, 1645, 1379, 1645, 1645, 1645, 1645, 1365, 1366,
     1367, 1645, 1645, 1645, 1379, 1645, 1645, 1379, 1645, 1524,
     1525, 1526, 1372, 1373, 1374, 1645, 1645, 1645, 1645, 1645,
     1372, 1373, 1374, 1380, 1381, 1382, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1645, 1380, 1381, 1382, 1380, 1381, 1382,
      411,  412,  413,  414,  415,  416,  417, 1645,  418, 1645,
      419,  420,  421,  422, 1645,  423,  424,  425,  426, 1552,
     1552, 1552, 1552, 1552, 1645, 1552, 1553, 1645, 1552, 1552,
     1552, 1645, 1645, 1552, 1645, 1552, 1645, 1645, 1645, 1645,
     1645, 1554, 1552, 1645, 1645, 1552, 1645, 1645, 1461, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645,  242, 1552, 1645,
     1552, 1553, 1552,  530, 1645, 1645, 1645,  244, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1462, 1645, 1552, 1552, 1552, 1645, 1552,

     1552, 1555, 1556, 1557, 1559, 1559, 1559, 1559, 1559, 1645,
     1559, 1560, 1645, 1559, 1559, 1559, 1645, 1645, 1559, 1645,
     1559, 1645, 1645, 1463, 1464, 1465, 1561, 1559, 1645, 1645,
     1559, 1645, 1645, 1461, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645,  242, 1559, 1645, 1559, 1560, 1559,  530, 1645,
     1645, 1645,  244, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1462, 1645,
     1559, 1559, 1559, 1645, 1559, 1559, 1562, 1563, 1564, 1566,
     1566, 1566, 1566, 1566, 1645, 1566, 1567, 1645, 1566, 1566,
     1566, 1645, 1645, 1566, 1645, 1566, 1645, 1645, 1463, 1464,

     1465, 1568, 1566, 1645, 1645, 1566, 1645, 1645, 1461, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645,  242, 1566, 1645,
     1566, 1567, 1566,  530, 1645, 1645, 1645,  244, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1462, 1645, 1566, 1566, 1566, 1645, 1566,
     1566, 1569, 1570, 1571, 1573, 1573, 1573, 1573, 1573, 1645,
     1573, 1574, 1645, 1573, 1573, 1573, 1645, 1645, 1573, 1645,
     1573, 1645, 1645, 1463, 1464, 1465, 1575, 1573, 1645, 1645,
     1573, 1645, 1645, 1470, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645,  242, 1573, 1645, 1573, 1574, 1573,  530, 1645,

     1645, 1645,  244, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1471, 1645,
     1573, 1573, 1573, 1645, 1573, 1573, 1576, 1577, 1578, 1579,
     1579, 1579, 1579, 1579, 1645, 1579, 1580, 1645, 1579, 1579,
     1579, 1645, 1645, 1579, 1470, 1579, 1645, 1470, 1472, 1473,
     1474, 1581, 1579,  242, 1645, 1579,  242, 1645, 1478,  530,
     1645, 1645,  530,  244, 1645, 1645,  244,  242, 1579, 1478,
     1579, 1580, 1579,  530, 1645, 1645, 1645,  244,  242, 1471,
     1645, 1645, 1471, 1645,  530, 1645, 1645, 1645,  244, 1645,
     1645, 1645, 1645, 1479, 1645, 1579, 1579, 1579, 1645, 1579,

     1579, 1582, 1583, 1584, 1479, 1645, 1645, 1478, 1645, 1472,
     1473, 1474, 1472, 1473, 1474, 1645,  242, 1645, 1505, 1645,
     1645, 1645,  530, 1480, 1481, 1482,  244,  288, 1645, 1505,
     1645, 1645, 1505,  608, 1480, 1481, 1482,  290,  288, 1645,
     1514,  288, 1479, 1514,  608, 1645, 1645,  608,  290,  288,
     1645,  290,  288, 1506, 1645,  608, 1645, 1645,  608,  290,
     1645, 1645,  290, 1645, 1506, 1645, 1645, 1506, 1645, 1645,
     1645, 1645, 1480, 1481, 1482, 1515, 1645, 1645, 1515, 1645,
     1645, 1645, 1645, 1507, 1508, 1509, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1507, 1508, 1509, 1507, 1508, 1509,

     1645, 1645, 1514, 1645, 1645, 1516, 1517, 1518, 1516, 1517,
     1518,  288, 1645, 1522, 1645, 1645, 1522,  608, 1645, 1645,
     1645,  290,  288, 1645, 1522,  288, 1645, 1645,  608, 1645,
     1645,  608,  290,  288, 1645,  290, 1645, 1515, 1645,  608,
     1645, 1645, 1645,  290, 1645, 1645, 1645, 1645, 1523, 1645,
     1645, 1523, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1523,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1516, 1517, 1518,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1524, 1525,
     1526, 1524, 1525, 1526, 1645, 1645, 1645, 1645, 1645, 1524,
     1525, 1526, 1619, 1619, 1619, 1619, 1619, 1645, 1619, 1620,

     1645, 1619, 1619, 1619, 1645, 1645, 1619, 1645, 1619, 1645,
     1645, 1645, 1645, 1645, 1621, 1619, 1645, 1645, 1619, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1619, 1645, 1619, 1620, 1619, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1619, 1619,
     1619, 1645, 1619, 1619, 1622, 1623, 1624, 1627, 1627, 1627,
     1627, 1627, 1645, 1627, 1628, 1645, 1627, 1627, 1627, 1645,
     1645, 1627, 1645, 1627, 1645, 1645, 1645, 1645, 1645, 1629,
     1627, 1645, 1645, 1627, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1645, 1645, 1645, 1627, 1645, 1627, 1628,
     1627, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1627, 1627, 1627, 1645, 1627, 1627, 1630,
     1631, 1632,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,

      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  166,  166, 1645,
     1645, 1645,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166, 1645,  166,  166,  166,  166,  166,
      223, 1645,  223, 1645, 1645, 1645,  223, 1645,  223,  223,
      225,  225, 1645, 1645,  225,  225,  225,  225,  225,  225,

      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  240, 1645,  240, 1645,
     1645,  240,  240,  240, 1645,  240,  240, 1645,  240,  240,
      240,  240,  240,  240,  264, 1645,  264, 1645, 1645,  264,
      264,  264, 1645,  264,  264, 1645,  264,  264,  264,  264,
      264,  264,  271, 1645,  271, 1645, 1645,  271,  271, 1645,
     1645,  271,  271, 1645, 1645,  271, 1645,  271,  271,  271,
      286, 1645,  286, 1645, 1645,  286,  286,  286,  286,  286,

      286, 1645,  286,  286,  286,  286,  286,  286,  302, 1645,
      302, 1645, 1645,  302,  302,  302,  302,  302,  302, 1645,
      302,  302,  302,  302,  302,  302,  309, 1645,  309, 1645,
     1645,  309,  309, 1645,  309,  309,  309, 1645, 1645,  309,
     1645,  309,  309,  309,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  347, 1645, 1645,
     1645,  347, 1645,  347,  347,  355,  355,  355, 1645,  355,
     1645, 1645,  355, 1645, 1645,  355,  355,  355,  355,  355,
      372, 1645, 1645,  372, 1645,  372, 1645,  372,  372, 1645,

     1645,  372,  372,  372,  372, 1645,  372,  372,  372, 1645,
      372,  372,  372,  386,  386, 1645,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  389,  389, 1645,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  407, 1645,  407, 1645, 1645,  407,  407, 1645,
      407,  407,  407, 1645, 1645,  407,  407,  407,  407,  407,

      457, 1645,  457, 1645, 1645, 1645,  457, 1645,  457,  457,
      225,  225, 1645, 1645,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  474, 1645,  474, 1645, 1645,  474,  474,
      474, 1645,  474,  474, 1645,  474,  474,  474,  474,  474,
      474,  240, 1645,  240, 1645, 1645,  240,  240,  240, 1645,
      240,  240, 1645,  240,  240,  240,  240,  240,  240,  482,
     1645,  482, 1645, 1645,  482,  482,  482, 1645,  482,  482,
     1645,  482,  482,  482,  482,  482,  482,  488, 1645,  488,
     1645, 1645,  488,  488, 1645, 1645,  488,  488, 1645, 1645,

      488, 1645,  488,  488,  488,  498, 1645,  498, 1645, 1645,
      498,  498,  498, 1645,  498,  498, 1645,  498,  498,  498,
      498,  498,  498,  507, 1645,  507, 1645, 1645,  507,  507,
      507, 1645,  507,  507, 1645,  507,  507, 1645,  507,  507,
      507,  528, 1645,  528, 1645, 1645,  528,  528,  528, 1645,
      528,  528, 1645,  528,  528,  528,  528,  528,  528,  264,
     1645,  264, 1645, 1645,  264,  264,  264, 1645,  264,  264,
     1645,  264,  264,  264,  264,  264,  264,  535, 1645,  535,
     1645, 1645,  535,  535, 1645, 1645,  535, 1645, 1645, 1645,
      535,  535,  535,  535,  535,  541, 1645,  541, 1645, 1645,

      541,  541,  541, 1645,  541,  541, 1645,  541,  541,  541,
      541,  541,  541,  554, 1645,  554, 1645, 1645,  554,  554,
      554,  554,  554,  554, 1645,  554,  554,  554,  554,  554,
      554,  286, 1645,  286, 1645, 1645,  286,  286,  286,  286,
      286,  286, 1645,  286,  286,  286,  286,  286,  286,  562,
     1645,  562, 1645, 1645,  562,  562,  562,  562,  562,  562,
     1645,  562,  562,  562,  562,  562,  562,  568, 1645,  568,
     1645, 1645,  568,  568, 1645,  568,  568,  568, 1645, 1645,
      568, 1645,  568,  568,  568,  576, 1645,  576, 1645, 1645,
      576,  576,  576,  576,  576,  576, 1645,  576,  576,  576,

      576,  576,  576,  585, 1645,  585, 1645, 1645,  585,  585,
      585,  585,  585,  585, 1645,  585,  585, 1645,  585,  585,
      585,  606, 1645,  606, 1645, 1645,  606,  606,  606,  606,
      606,  606, 1645,  606,  606,  606,  606,  606,  606,  302,
     1645,  302, 1645, 1645,  302,  302,  302,  302,  302,  302,
     1645,  302,  302,  302,  302,  302,  302,  613, 1645,  613,
     1645, 1645,  613,  613, 1645,  613,  613, 1645, 1645, 1645,
      613,  613,  613,  613,  613,  619, 1645,  619, 1645, 1645,
      619,  619,  619,  619,  619,  619, 1645,  619,  619,  619,
      619,  619,  619,  347, 1645, 1645, 1645,  347, 1645,  347,

      347,  355, 1645, 1645, 1645,  355, 1645,  355,  355,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459, 1645,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  223, 1645,  223, 1645, 1645, 1645,  223, 1645,
      223,  223,  372, 1645, 1645,  372, 1645,  372, 1645,  372,
      372, 1645, 1645,  372,  372,  372,  372, 1645,  372,  372,
      372, 1645,  372,  372,  372,  389,  389, 1645,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  166,  166,
     1645, 1645, 1645,  166,  166,  166,  166,  166,  166,  166,

      166,  166,  166,  166,  166, 1645,  166,  166,  166,  166,
      166,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  457, 1645, 1645, 1645,  457, 1645,
      457,  457,  667, 1645, 1645, 1645,  667, 1645,  667,  667,
      407, 1645,  407, 1645, 1645,  407,  407, 1645,  407,  407,
      407, 1645, 1645,  407,  407,  407,  407,  407,  737, 1645,
      737, 1645, 1645, 1645,  737, 1645,  737,  737,  507, 1645,
      507, 1645, 1645,  507,  507, 1645, 1645,  507,  507, 1645,
      507,  507, 1645,  507,  507,  507,  474, 1645,  474, 1645,

     1645,  474,  474,  474, 1645,  474,  474, 1645,  474,  474,
      474,  474,  474,  474,  741, 1645,  741, 1645, 1645,  741,
      741,  741, 1645,  741,  741, 1645,  741,  741,  741,  741,
      741,  741,  749, 1645,  749, 1645, 1645,  749,  749,  749,
     1645,  749,  749, 1645,  749,  749,  749,  749,  749,  749,
      482, 1645,  482, 1645, 1645,  482,  482,  482, 1645,  482,
      482, 1645,  482,  482,  482,  482,  482,  482,  757, 1645,
      757, 1645, 1645,  757,  757, 1645, 1645,  757,  757, 1645,
     1645,  757,  757,  757,  757,  757,  763, 1645,  763, 1645,
     1645,  763,  763, 1645, 1645,  763, 1645, 1645, 1645,  763,

      763,  763,  763,  763,  770, 1645,  770, 1645, 1645,  770,
      770,  770, 1645,  770,  770, 1645,  770,  770,  770,  770,
      770,  770,  498, 1645,  498, 1645, 1645,  498,  498,  498,
     1645,  498,  498, 1645,  498,  498,  498,  498,  498,  498,
      779, 1645,  779, 1645, 1645,  779,  779, 1645, 1645,  779,
      779, 1645, 1645,  779,  779,  779,  779,  779,  785, 1645,
      785, 1645, 1645,  785,  785,  785, 1645,  785,  785, 1645,
      785,  785,  785,  785,  785,  785,  793, 1645,  793, 1645,
     1645,  793,  793, 1645, 1645,  793, 1645, 1645, 1645,  793,
      793,  793,  793,  793,  797, 1645,  797, 1645, 1645,  797,

      797, 1645, 1645,  797,  797, 1645, 1645,  797, 1645,  797,
      797,  797,  808, 1645,  808, 1645, 1645,  808,  808,  808,
     1645,  808,  808, 1645,  808,  808,  808,  808,  808,  808,
      528, 1645,  528, 1645, 1645,  528,  528,  528, 1645,  528,
      528, 1645,  528,  528,  528,  528,  528,  528,  817, 1645,
      817, 1645, 1645,  817,  817, 1645, 1645,  817, 1645, 1645,
     1645,  817,  817,  817,  817,  817,  535, 1645,  535, 1645,
     1645,  535,  535, 1645, 1645,  535, 1645, 1645, 1645,  535,
      535,  535,  535,  535,  826, 1645,  826, 1645, 1645,  826,
      826,  826, 1645,  826,  826, 1645,  826,  826,  826,  826,

      826,  826,  541, 1645,  541, 1645, 1645,  541,  541,  541,
     1645,  541,  541, 1645,  541,  541,  541,  541,  541,  541,
      585, 1645,  585, 1645, 1645,  585,  585, 1645,  585,  585,
      585, 1645,  585,  585, 1645,  585,  585,  585,  554, 1645,
      554, 1645, 1645,  554,  554,  554,  554,  554,  554, 1645,
      554,  554,  554,  554,  554,  554,  839, 1645,  839, 1645,
     1645,  839,  839,  839,  839,  839,  839, 1645,  839,  839,
      839,  839,  839,  839,  847, 1645,  847, 1645, 1645,  847,
      847,  847,  847,  847,  847, 1645,  847,  847,  847,  847,
      847,  847,  562, 1645,  562, 1645, 1645,  562,  562,  562,

      562,  562,  562, 1645,  562,  562,  562,  562,  562,  562,
      855, 1645,  855, 1645, 1645,  855,  855, 1645,  855,  855,
      855, 1645, 1645,  855,  855,  855,  855,  855,  861, 1645,
      861, 1645, 1645,  861,  861, 1645,  861,  861, 1645, 1645,
     1645,  861,  861,  861,  861,  861,  868, 1645,  868, 1645,
     1645,  868,  868,  868,  868,  868,  868, 1645,  868,  868,
      868,  868,  868,  868,  576, 1645,  576, 1645, 1645,  576,
      576,  576,  576,  576,  576, 1645,  576,  576,  576,  576,
      576,  576,  877, 1645,  877, 1645, 1645,  877,  877, 1645,
      877,  877,  877, 1645, 1645,  877,  877,  877,  877,  877,

      883, 1645,  883, 1645, 1645,  883,  883,  883,  883,  883,
      883, 1645,  883,  883,  883,  883,  883,  883,  891, 1645,
      891, 1645, 1645,  891,  891, 1645,  891,  891, 1645, 1645,
     1645,  891,  891,  891,  891,  891,  895, 1645,  895, 1645,
     1645,  895,  895, 1645,  895,  895,  895, 1645, 1645,  895,
     1645,  895,  895,  895,  906, 1645,  906, 1645, 1645,  906,
      906,  906,  906,  906,  906, 1645,  906,  906,  906,  906,
      906,  906,  606, 1645,  606, 1645, 1645,  606,  606,  606,
      606,  606,  606, 1645,  606,  606,  606,  606,  606,  606,
      915, 1645,  915, 1645, 1645,  915,  915, 1645,  915,  915,

     1645, 1645, 1645,  915,  915,  915,  915,  915,  613, 1645,
      613, 1645, 1645,  613,  613, 1645,  613,  613, 1645, 1645,
     1645,  613,  613,  613,  613,  613,  924, 1645,  924, 1645,
     1645,  924,  924,  924,  924,  924,  924, 1645,  924,  924,
      924,  924,  924,  924,  619, 1645,  619, 1645, 1645,  619,
      619,  619,  619,  619,  619, 1645,  619,  619,  619,  619,
      619,  619,  667, 1645, 1645, 1645,  667, 1645,  667,  667,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459, 1645,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  372, 1645, 1645,  372, 1645,  372, 1645,

      372,  372, 1645, 1645,  372,  372,  372,  372, 1645,  372,
      372,  372, 1645,  372,  372,  372,  457, 1645, 1645,  457,
     1645, 1645, 1645,  457, 1645,  457,  457,  711,  711,  711,
      711,  711, 1645,  711,  711,  711,  711, 1645, 1645,  711,
     1645, 1645,  711,  711,  711, 1645,  711, 1645, 1645,  711,
      407, 1645, 1645,  407,  407, 1645,  407, 1645, 1645,  407,
      407, 1645,  407,  407,  407, 1645, 1645,  407,  407,  407,
      407,  407,  737, 1645,  737, 1645, 1645, 1645,  737, 1645,
      737,  737,  779, 1645,  779, 1645, 1645,  779,  779, 1645,
     1645,  779,  779, 1645, 1645,  779,  779,  779,  779,  779,

      507, 1645,  507, 1645, 1645,  507,  507,  507, 1645,  507,
      507, 1645,  507,  507, 1645,  507,  507,  507, 1017, 1645,
     1017, 1645, 1645, 1017, 1017, 1017, 1645, 1017, 1017, 1645,
     1017, 1017, 1017, 1017, 1017, 1017,  741, 1645,  741, 1645,
     1645,  741,  741,  741, 1645,  741,  741, 1645,  741,  741,
      741,  741,  741,  741,  749, 1645,  749, 1645, 1645,  749,
      749,  749, 1645,  749,  749, 1645,  749,  749,  749,  749,
      749,  749,  757, 1645,  757, 1645, 1645,  757,  757, 1645,
     1645,  757,  757, 1645, 1645,  757,  757,  757,  757,  757,
     1029, 1645, 1029, 1645, 1645, 1029, 1029, 1645, 1645, 1029,

     1645, 1645, 1645, 1029, 1029, 1029, 1029, 1029,  763, 1645,
      763, 1645, 1645,  763,  763, 1645, 1645,  763, 1645, 1645,
     1645,  763,  763,  763,  763,  763,  770, 1645,  770, 1645,
     1645,  770,  770,  770, 1645,  770,  770, 1645,  770,  770,
      770,  770,  770,  770,  785, 1645,  785, 1645, 1645,  785,
      785,  785, 1645,  785,  785, 1645,  785,  785,  785,  785,
      785,  785, 1041, 1645, 1041, 1645, 1645, 1041, 1041, 1645,
     1645, 1041, 1645, 1645, 1645, 1041, 1041, 1041, 1041, 1041,
     1047, 1645, 1047, 1645, 1645, 1047, 1047, 1645, 1645, 1047,
     1645, 1645, 1645, 1047, 1047, 1047, 1047, 1047, 1051, 1645,

     1051, 1645, 1645, 1051, 1051, 1645, 1645, 1051, 1645, 1645,
     1645, 1051, 1051, 1051, 1051, 1051,  793, 1645,  793, 1645,
     1645,  793,  793, 1645, 1645,  793, 1645, 1645, 1645,  793,
      793,  793,  793,  793, 1059, 1645, 1059, 1645, 1645, 1059,
     1059, 1645, 1645, 1059, 1059, 1645, 1645, 1059, 1059, 1059,
     1059, 1059, 1069, 1645, 1069, 1645, 1645, 1069, 1069, 1069,
     1645, 1069, 1069, 1645, 1069, 1069, 1069, 1069, 1069, 1069,
      474, 1645,  474, 1645, 1645,  474,  474,  474, 1645,  474,
      474, 1645,  474,  474,  474,  474,  474,  474, 1078, 1645,
     1078, 1645, 1645, 1078, 1078, 1078, 1645, 1078, 1078, 1645,

     1078, 1078, 1078, 1078, 1078, 1078, 1085, 1645, 1085, 1645,
     1645, 1085, 1085, 1085, 1645, 1085, 1085, 1645, 1085, 1085,
     1085, 1085, 1085, 1085, 1091, 1645, 1091, 1645, 1645, 1091,
     1091, 1645, 1645, 1091, 1091, 1645, 1645, 1091, 1645, 1091,
     1091, 1091,  817, 1645,  817, 1645, 1645,  817,  817, 1645,
     1645,  817, 1645, 1645, 1645,  817,  817,  817,  817,  817,
      826, 1645,  826, 1645, 1645,  826,  826,  826, 1645,  826,
      826, 1645,  826,  826,  826,  826,  826,  826,  877, 1645,
      877, 1645, 1645,  877,  877, 1645,  877,  877,  877, 1645,
     1645,  877,  877,  877,  877,  877,  585, 1645,  585, 1645,

     1645,  585,  585,  585,  585,  585,  585, 1645,  585,  585,
     1645,  585,  585,  585, 1107, 1645, 1107, 1645, 1645, 1107,
     1107, 1107, 1107, 1107, 1107, 1645, 1107, 1107, 1107, 1107,
     1107, 1107,  839, 1645,  839, 1645, 1645,  839,  839,  839,
      839,  839,  839, 1645,  839,  839,  839,  839,  839,  839,
      847, 1645,  847, 1645, 1645,  847,  847,  847,  847,  847,
      847, 1645,  847,  847,  847,  847,  847,  847,  855, 1645,
      855, 1645, 1645,  855,  855, 1645,  855,  855,  855, 1645,
     1645,  855,  855,  855,  855,  855, 1119, 1645, 1119, 1645,
     1645, 1119, 1119, 1645, 1119, 1119, 1645, 1645, 1645, 1119,

     1119, 1119, 1119, 1119,  861, 1645,  861, 1645, 1645,  861,
      861, 1645,  861,  861, 1645, 1645, 1645,  861,  861,  861,
      861,  861,  868, 1645,  868, 1645, 1645,  868,  868,  868,
      868,  868,  868, 1645,  868,  868,  868,  868,  868,  868,
      883, 1645,  883, 1645, 1645,  883,  883,  883,  883,  883,
      883, 1645,  883,  883,  883,  883,  883,  883, 1131, 1645,
     1131, 1645, 1645, 1131, 1131, 1645, 1131, 1131, 1645, 1645,
     1645, 1131, 1131, 1131, 1131, 1131, 1137, 1645, 1137, 1645,
     1645, 1137, 1137, 1645, 1137, 1137, 1645, 1645, 1645, 1137,
     1137, 1137, 1137, 1137, 1141, 1645, 1141, 1645, 1645, 1141,

     1141, 1645, 1141, 1141, 1645, 1645, 1645, 1141, 1141, 1141,
     1141, 1141,  891, 1645,  891, 1645, 1645,  891,  891, 1645,
      891,  891, 1645, 1645, 1645,  891,  891,  891,  891,  891,
     1149, 1645, 1149, 1645, 1645, 1149, 1149, 1645, 1149, 1149,
     1149, 1645, 1645, 1149, 1149, 1149, 1149, 1149, 1159, 1645,
     1159, 1645, 1645, 1159, 1159, 1159, 1159, 1159, 1159, 1645,
     1159, 1159, 1159, 1159, 1159, 1159,  554, 1645,  554, 1645,
     1645,  554,  554,  554,  554,  554,  554, 1645,  554,  554,
      554,  554,  554,  554, 1168, 1645, 1168, 1645, 1645, 1168,
     1168, 1168, 1168, 1168, 1168, 1645, 1168, 1168, 1168, 1168,

     1168, 1168, 1175, 1645, 1175, 1645, 1645, 1175, 1175, 1175,
     1175, 1175, 1175, 1645, 1175, 1175, 1175, 1175, 1175, 1175,
     1181, 1645, 1181, 1645, 1645, 1181, 1181, 1645, 1181, 1181,
     1181, 1645, 1645, 1181, 1645, 1181, 1181, 1181,  915, 1645,
      915, 1645, 1645,  915,  915, 1645,  915,  915, 1645, 1645,
     1645,  915,  915,  915,  915,  915,  924, 1645,  924, 1645,
     1645,  924,  924,  924,  924,  924,  924, 1645,  924,  924,
      924,  924,  924,  924,  667, 1645, 1645, 1645,  667, 1645,
      667,  667,  372, 1645, 1645,  372, 1645,  372, 1645,  372,
      372, 1645, 1645,  372,  372,  372,  372, 1645,  372,  372,

      372, 1645,  372,  372,  372,  993,  993,  993,  993,  993,
     1645,  993,  993,  993,  993, 1645, 1645,  993, 1645, 1645,
      993,  993,  993, 1645,  993, 1645,  993,  993, 1002, 1002,
     1002, 1002, 1002, 1645, 1002, 1002, 1002, 1002, 1645, 1645,
     1002, 1645, 1645, 1002, 1002, 1002, 1645, 1002, 1002, 1645,
     1002,  407, 1645,  407, 1645, 1645,  407,  407, 1645,  407,
      407,  407, 1645, 1645,  407,  407,  407,  407,  407,  457,
     1645,  457, 1645, 1645, 1645,  457, 1645,  457,  457,  785,
     1645,  785, 1645, 1645,  785,  785,  785, 1645,  785,  785,
     1645,  785,  785,  785,  785,  785,  785, 1017, 1645, 1017,

     1645, 1645, 1017, 1017, 1017, 1645, 1017, 1017, 1645, 1017,
     1017, 1017, 1017, 1017, 1017, 1029, 1645, 1029, 1645, 1645,
     1029, 1029, 1645, 1645, 1029, 1645, 1645, 1645, 1029, 1029,
     1029, 1029, 1029, 1041, 1645, 1041, 1645, 1645, 1041, 1041,
     1645, 1645, 1041, 1645, 1645, 1645, 1041, 1041, 1041, 1041,
     1041, 1047, 1645, 1047, 1645, 1645, 1047, 1047, 1645, 1645,
     1047, 1645, 1645, 1645, 1047, 1047, 1047, 1047, 1047, 1051,
     1645, 1051, 1645, 1645, 1051, 1051, 1645, 1645, 1051, 1645,
     1645, 1645, 1051, 1051, 1051, 1051, 1051, 1059, 1645, 1059,
     1645, 1645, 1059, 1059, 1645, 1645, 1059, 1059, 1645, 1645,

     1059, 1059, 1059, 1059, 1059, 1069, 1645, 1069, 1645, 1645,
     1069, 1069, 1069, 1645, 1069, 1069, 1645, 1069, 1069, 1069,
     1069, 1069, 1069, 1287, 1645, 1287, 1645, 1645, 1287, 1287,
     1287, 1645, 1287, 1287, 1645, 1287, 1287, 1287, 1287, 1287,
     1287, 1295, 1645, 1295, 1645, 1645, 1295, 1295, 1295, 1645,
     1295, 1295, 1645, 1295, 1295, 1295, 1295, 1295, 1295,  779,
     1645,  779, 1645, 1645,  779,  779, 1645, 1645,  779,  779,
     1645, 1645,  779,  779,  779,  779,  779, 1078, 1645, 1078,
     1645, 1645, 1078, 1078, 1078, 1645, 1078, 1078, 1645, 1078,
     1078, 1078, 1078, 1078, 1078, 1302, 1645, 1302, 1645, 1645,

     1302, 1302, 1302, 1645, 1302, 1302, 1645, 1302, 1302, 1302,
     1302, 1302, 1302, 1310, 1645, 1310, 1645, 1645, 1310, 1310,
     1310, 1645, 1310, 1310, 1645, 1310, 1310, 1310, 1310, 1310,
     1310, 1085, 1645, 1085, 1645, 1645, 1085, 1085, 1085, 1645,
     1085, 1085, 1645, 1085, 1085, 1085, 1085, 1085, 1085, 1318,
     1645, 1318, 1645, 1645, 1318, 1318, 1645, 1645, 1318, 1318,
     1645, 1645, 1318, 1318, 1318, 1318, 1318, 1324, 1645, 1324,
     1645, 1645, 1324, 1324, 1645, 1645, 1324, 1645, 1645, 1645,
     1324, 1324, 1324, 1324, 1324,  883, 1645,  883, 1645, 1645,
      883,  883,  883,  883,  883,  883, 1645,  883,  883,  883,

      883,  883,  883, 1107, 1645, 1107, 1645, 1645, 1107, 1107,
     1107, 1107, 1107, 1107, 1645, 1107, 1107, 1107, 1107, 1107,
     1107, 1119, 1645, 1119, 1645, 1645, 1119, 1119, 1645, 1119,
     1119, 1645, 1645, 1645, 1119, 1119, 1119, 1119, 1119, 1131,
     1645, 1131, 1645, 1645, 1131, 1131, 1645, 1131, 1131, 1645,
     1645, 1645, 1131, 1131, 1131, 1131, 1131, 1137, 1645, 1137,
     1645, 1645, 1137, 1137, 1645, 1137, 1137, 1645, 1645, 1645,
     1137, 1137, 1137, 1137, 1137, 1141, 1645, 1141, 1645, 1645,
     1141, 1141, 1645, 1141, 1141, 1645, 1645, 1645, 1141, 1141,
     1141, 1141, 1141, 1149, 1645, 1149, 1645, 1645, 1149, 1149,

     1645, 1149, 1149, 1149, 1645, 1645, 1149, 1149, 1149, 1149,
     1149, 1159, 1645, 1159, 1645, 1645, 1159, 1159, 1159, 1159,
     1159, 1159, 1645, 1159, 1159, 1159, 1159, 1159, 1159, 1354,
     1645, 1354, 1645, 1645, 1354, 1354, 1354, 1354, 1354, 1354,
     1645, 1354, 1354, 1354, 1354, 1354, 1354, 1362, 1645, 1362,
     1645, 1645, 1362, 1362, 1362, 1362, 1362, 1362, 1645, 1362,
     1362, 1362, 1362, 1362, 1362,  877, 1645,  877, 1645, 1645,
      877,  877, 1645,  877,  877,  877, 1645, 1645,  877,  877,
      877,  877,  877, 1168, 1645, 1168, 1645, 1645, 1168, 1168,
     1168, 1168, 1168, 1168, 1645, 1168, 1168, 1168, 1168, 1168,

     1168, 1369, 1645, 1369, 1645, 1645, 1369, 1369, 1369, 1369,
     1369, 1369, 1645, 1369, 1369, 1369, 1369, 1369, 1369, 1377,
     1645, 1377, 1645, 1645, 1377, 1377, 1377, 1377, 1377, 1377,
     1645, 1377, 1377, 1377, 1377, 1377, 1377, 1175, 1645, 1175,
     1645, 1645, 1175, 1175, 1175, 1175, 1175, 1175, 1645, 1175,
     1175, 1175, 1175, 1175, 1175, 1385, 1645, 1385, 1645, 1645,
     1385, 1385, 1645, 1385, 1385, 1385, 1645, 1645, 1385, 1385,
     1385, 1385, 1385, 1391, 1645, 1391, 1645, 1645, 1391, 1391,
     1645, 1391, 1391, 1645, 1645, 1645, 1391, 1391, 1391, 1391,
     1391,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372, 1226, 1226, 1226, 1226, 1226, 1645,
     1226, 1226, 1226, 1226, 1645, 1645, 1226, 1645, 1645, 1226,
     1226, 1226, 1645, 1226, 1226, 1645, 1226, 1234, 1234, 1234,
     1234, 1234, 1645, 1234, 1234, 1234, 1234, 1645, 1645, 1234,
     1645, 1645, 1234, 1234, 1234, 1645, 1234, 1645, 1645, 1234,
     1246, 1246, 1246, 1246, 1246, 1645, 1246, 1246, 1246, 1246,
     1645, 1645, 1246, 1645, 1645, 1246, 1246, 1246, 1645, 1246,
     1645, 1645, 1246, 1259, 1259, 1259, 1259, 1259, 1645, 1259,
     1259, 1259, 1259, 1645, 1645, 1259, 1645, 1645, 1259, 1259,

     1259, 1645, 1259, 1645, 1645, 1259,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407, 1460,
     1645, 1460, 1645, 1645, 1460, 1460, 1460, 1645, 1460, 1460,
     1645, 1460, 1460, 1460, 1460, 1460, 1460, 1287, 1645, 1287,
     1645, 1645, 1287, 1287, 1287, 1645, 1287, 1287, 1645, 1287,
     1287, 1287, 1287, 1287, 1287, 1469, 1645, 1469, 1645, 1645,
     1469, 1469, 1469, 1645, 1469, 1469, 1645, 1469, 1469, 1469,
     1469, 1469, 1469, 1295, 1645, 1295, 1645, 1645, 1295, 1295,
     1295, 1645, 1295, 1295, 1645, 1295, 1295, 1295, 1295, 1295,

     1295,  779, 1645,  779, 1645, 1645,  779,  779, 1645, 1645,
      779,  779, 1645, 1645,  779,  779,  779,  779,  779, 1477,
     1645, 1477, 1645, 1645, 1477, 1477, 1477, 1645, 1477, 1477,
     1645, 1477, 1477, 1477, 1477, 1477, 1477, 1302, 1645, 1302,
     1645, 1645, 1302, 1302, 1302, 1645, 1302, 1302, 1645, 1302,
     1302, 1302, 1302, 1302, 1302, 1310, 1645, 1310, 1645, 1645,
     1310, 1310, 1310, 1645, 1310, 1310, 1645, 1310, 1310, 1310,
     1310, 1310, 1310, 1318, 1645, 1318, 1645, 1645, 1318, 1318,
     1645, 1645, 1318, 1318, 1645, 1645, 1318, 1318, 1318, 1318,
     1318, 1489, 1645, 1489, 1645, 1645, 1489, 1489, 1645, 1645,

     1489, 1645, 1645, 1645, 1489, 1489, 1489, 1489, 1489, 1324,
     1645, 1324, 1645, 1645, 1324, 1324, 1645, 1645, 1324, 1645,
     1645, 1645, 1324, 1324, 1324, 1324, 1324, 1504, 1645, 1504,
     1645, 1645, 1504, 1504, 1504, 1504, 1504, 1504, 1645, 1504,
     1504, 1504, 1504, 1504, 1504, 1354, 1645, 1354, 1645, 1645,
     1354, 1354, 1354, 1354, 1354, 1354, 1645, 1354, 1354, 1354,
     1354, 1354, 1354, 1513, 1645, 1513, 1645, 1645, 1513, 1513,
     1513, 1513, 1513, 1513, 1645, 1513, 1513, 1513, 1513, 1513,
     1513, 1362, 1645, 1362, 1645, 1645, 1362, 1362, 1362, 1362,
     1362, 1362, 1645, 1362, 1362, 1362, 1362, 1362, 1362,  877,

     1645,  877, 1645, 1645,  877,  877, 1645,  877,  877,  877,
     1645, 1645,  877,  877,  877,  877,  877, 1521, 1645, 1521,
     1645, 1645, 1521, 1521, 1521, 1521, 1521, 1521, 1645, 1521,
     1521, 1521, 1521, 1521, 1521, 1369, 1645, 1369, 1645, 1645,
     1369, 1369, 1369, 1369, 1369, 1369, 1645, 1369, 1369, 1369,
     1369, 1369, 1369, 1377, 1645, 1377, 1645, 1645, 1377, 1377,
     1377, 1377, 1377, 1377, 1645, 1377, 1377, 1377, 1377, 1377,
     1377, 1385, 1645, 1385, 1645, 1645, 1385, 1385, 1645, 1385,
     1385, 1385, 1645, 1645, 1385, 1385, 1385, 1385, 1385, 1533,
     1645, 1533, 1645, 1645, 1533, 1533, 1645, 1533, 1533, 1645,

     1645, 1645, 1533, 1533, 1533, 1533, 1533, 1391, 1645, 1391,
     1645, 1645, 1391, 1391, 1645, 1391, 1391, 1645, 1645, 1645,
     1391, 1391, 1391, 1391, 1391, 1419, 1419, 1419, 1419, 1419,
     1645, 1419, 1419, 1419, 1419, 1645, 1645, 1419, 1645, 1645,
     1419, 1419, 1419, 1645, 1419, 1645, 1645, 1419, 1427, 1427,
     1427, 1427, 1427, 1645, 1427, 1427, 1427, 1427, 1645, 1645,
     1427, 1645, 1645, 1427, 1427, 1427, 1645, 1427, 1645, 1645,
     1427, 1448, 1448, 1448, 1448, 1448, 1645, 1448, 1448, 1448,
     1448, 1645, 1645, 1448, 1645, 1645, 1448, 1448, 1448, 1645,
     1448, 1645, 1645, 1448, 1460, 1645, 1460, 1645, 1645, 1460,

     1460, 1460, 1645, 1460, 1460, 1645, 1460, 1460, 1460, 1460,
     1460, 1460, 1469, 1645, 1469, 1645, 1645, 1469, 1469, 1469,
     1645, 1469, 1469, 1645, 1469, 1469, 1469, 1469, 1469, 1469,
     1477, 1645, 1477, 1645, 1645, 1477, 1477, 1477, 1645, 1477,
     1477, 1645, 1477, 1477, 1477, 1477, 1477, 1477, 1552, 1552,
     1552, 1552, 1552, 1645, 1552, 1552, 1552, 1552, 1645, 1645,
     1552, 1645, 1645, 1552, 1552, 1552, 1645, 1552, 1645, 1645,
     1552, 1559, 1559, 1559, 1559, 1559, 1645, 1559, 1559, 1559,
     1559, 1645, 1645, 1559, 1645, 1645, 1559, 1559, 1559, 1645,
     1559, 1645, 1645, 1559, 1566, 1566, 1566, 1566, 1566, 1645,

     1566, 1566, 1566, 1566, 1645, 1645, 1566, 1645, 1645, 1566,
     1566, 1566, 1645, 1566, 1645, 1645, 1566, 1573, 1573, 1573,
     1573, 1573, 1645, 1573, 1573, 1573, 1573, 1645, 1645, 1573,
     1645, 1645, 1573, 1573, 1573, 1645, 1573, 1645, 1645, 1573,
     1579, 1579, 1579, 1579, 1579, 1645, 1579, 1579, 1579, 1579,
     1645, 1645, 1579, 1645, 1645, 1579, 1579, 1579, 1645, 1579,
     1645, 1645, 1579, 1619, 1619, 1619, 1619, 1619, 1645, 1619,
     1619, 1619, 1619, 1645, 1645, 1619, 1645, 1645, 1619, 1619,
     1619, 1645, 1619, 1645, 1645, 1619, 1627, 1627, 1627, 1627,
     1627, 1645, 1627, 1627, 1627, 1627, 1645, 1645, 1627, 1645,

     1645, 1627, 1627, 1627, 1645, 1627, 1645, 1645, 1627,   31,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645
    } ;

static const flex_int16_t yy_chk[11686] =
    {   0,
        0,    0,    1,    1,    1,    2,    2,    2,   11,   11,
       12,   12,   36,   40,  143,   36,   40,  143,   36,   40,
      136,  136,   72,   36,   40,   42,    1,    0,   42,    2,
       71,   71,   71,   71,   36,   40,   72,   42,   50,   42,
       42,   50,   42,   42,   42,   42,   49,    0,   49,   49,
       49,   49,   75,   75,   72,   50,   50,   50,   50,  119,
      119,  119,   50,  141,  141,  192,   75,  192,   75,   75,
       75,   75,    1,    1,    1,    2,    2,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    9,    9,    9,    9,   32,   32,   32,
        9,  424,    9,    9,    9,    9,  424,    9,    9,    9,
       37, 1270,   37,   37,   37, 1271,   38,    9,   38,   38,
       38,   39,  388,   39,   39,   39,  132,  132,  132,  132,
     1272,    9,    9,    9,   93,  149,  106,   93,  149,  106,
      388,   13,   13,   13,   13, 1273,   13,   14,   14,   14,
       14,  186,   14,   21,   21,   21,   21,   85,   21,    9,
     1274,    9,    9,    9,    9,    9,    9,   10,   10,   10,
       10,   85, 1275,   93,   10,  106,   10,   10,   10,   10,
       13,   10,   10,   10,  140,  140,   14,  130,  186,   85,

      130,   10,   21,  137, 1276,   52,  137,   52,   52,   52,
       52, 1277,  130,  179,  179,   10,   10,   10,  140,   52,
       13,   13,   13,   13,   13, 1278,   14,   14,   14,   14,
       14,  420,   21,   21,   21,   21,   21,   52,  153,  153,
      153,  153,  137,   10,  420,   10,   10,   10,   10,   10,
       10,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   17,   17,   17,   17,
      133,  218, 1279,  133,  218,   22,   22,   22,   22, 1280,
       22,   29,   29,   88,   88,   29,   30,   30,  320,  320,
       30,   17,   65,  228,  133,   65,  228,   88, 1281,   88,
       88,   88,   88, 1282,   65,   17,   65,   65,   17,   65,
       65,   65,   65,   80,   22,  360,   80,  360,  134,   29,
      134,  134,  134,  134,   30,   80,  323,   80,   80,  323,
       80,   80,   80,   80, 1283,   17,   17,   17,   17,   17,

       18,   18,   18,   18,   22,   22,   22,   22,   22,   29,
       29,   29,   29,   29,   30,   30,   30,   30,   30,  155,
      155,  155,  155,  335,  335,   18,   84,   46, 1284,   84,
      166,  166,  166,   46,  175,  175,  175, 1285,   46,   18,
       66,   84,   18,   84,   84,   84,   84,  366,  366,   66,
       84,  266,  266,  266,  167,   66,  167,  167,  167,   66,
      338,   46, 1286,  338,   46,  156,   46,  391,  391,   18,
       18,   18,   18,   18,   19,   66,  194,   19,   46,  156,
       19, 1290,   19,   19,  351,   46,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   73,  351,  156,  168,   19,

      168,  168,  168,  351,   73,   66,   66,   66,  229,  229,
       73,  229, 1291,   19,   73,   19,   23,   23,   23,   23,
      157, 1292,  157,  157,  157,  157,  194,  194,  194,  172,
       73,   74,  172,  357,  157,  172,  357,   74,   81,   74,
      172,   23,   74,   74,   74,   74,   74,   81,  357, 1293,
      199,  172,  157,   81,  411,   23,  411,   81,   23,   86,
       73,   73,   73,  169, 1294,  169,  169,  169,   86,   87,
      304,  304,  304,   81,   86,   87,  199,   87,   86, 1298,
       87,   87,   87,   87,   87,   23,   23,   23,   23,   23,
       24,   24,   24,   24,   86, 1299,   74,   74,   74,  679,

      199,  199,  199,   81,   81,   81,  176,  679,  176,  176,
      176,  215,  215,  215,  215,   24,  177,  131,  177,  177,
      177,  393,  393,  131,   86,   86,   86,  178,  131,   24,
      178, 1300,   24,  178,   87,   87,   87,  181,  178,  181,
      181,  181,  181,  231,  231,  231,  165,  319,  231,  178,
      319,  131,  278,  278,  131,  278,  131,  165, 1305,   24,
       24,   24,   24,   24,   25,   25,   25,   25,  131, 1306,
      324,  324,   25,  324,  183,  131,  183,  183,  183,  183,
      165,   25,   25,   25,   25,  165,  319, 1307,  183,  165,
       25,   25,   25,   25,  339,  339,  165,  339, 1308,  165,

      182,  165,  165,  182,  401,  401,  183,   25,   25,   25,
       25,   25,   25,   26,   26,   26,   26,  182,  182,  182,
      182,   26,  402,  402,  182,  216,  216,  216,  216, 1309,
       26,   26,   26,   26,  180,  206,  627,  180,  627,   26,
       26,   26,   26, 1313,  368,  197,  180,  368,  180,  180,
     1314,  180,  180,  180,  180, 1315,   26,   26,   26,   26,
       26,   26,   27,   27,   27,   27, 1316,   27,   27,  202,
      206,   27,   27,   27,  207,   27,   27,  197, 1317,   27,
       27,   27,   27,   27,  190,  206,  206,  206,  190,  334,
      190,  202,  334,  190,  190,  197,  197,  197, 1321,  191,

       27,  191,   27,   27,  191,  191,  191,  666,  666,  201,
       27,  207, 1322,  204,  207,  365,  203,   27,  365,  202,
      202,  202,   27,  196,  207,  207,  207,   27,  334,   27,
       27,   28,   28,   28,   28,  204,   28,   28, 1323,  201,
       28,   28,   28,  203,   28,   28,  675,  675,   28,   28,
       28,   28,   28,  310,  365,  196, 1325,  196,  198,  201,
      201,  201, 1326,  204,  204,  204,  203,  203,  203,   28,
     1327,   28,   28,  196,  196,  196,  310,  932,  932,   28,
      198,  226,  226,  226,  226, 1328,   28,  198,  310,  358,
     1329,   28,  358,  198,  370,  310,   28,  370,   28,   28,

       47, 1330,  373,   47,   47,  373, 1331,   47,  198,  198,
      198,   47,   47,  358,   47,  208,   47,   47,   47,   47,
       47,   47,  394,   47,   47,  394,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47, 1332,   47,
     1333,  208, 1334,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,  208,  208,  208,   47,  933,
      933,   47,   47,   47,   57,   57,   57,  369,  369,  217,
      369,  217,  217,  217,  217,  242,  242,  242,  242, 1335,
       57,   57,   57,  217,  219,  376,  219,  219,  219,  219,

      237, 1336,  237,  237,  237,  237,  200, 1337,  219,  376,
      205,  217,  238,  238,  238,  238,   57,   57, 1338,  238,
       57,   57,  258,  258,  258,  258,  219,  376,   57, 1339,
     1340,   57,  205,   57, 1341,   57,   57,   67,  200,  200,
      200,  422,  209,   67,  422,  205, 1342,  210,   67,   67,
       67,   67,   67,   67,   67, 1343,  200,  200,  200, 1344,
      205,  205,  205,   67,   67,   67,   67,   67,   67,  211,
      466,   67,  209,  466,   67, 1345,   67,  209,  283, 1346,
      283,  283,  283,  283,  210,  327,  327,  327,   67, 1347,
      327, 1348,  209,  209,  209,   67,   69,  210,  210,  210,

      348,  348,  348,  211, 1349,   69, 1350,   69,   69,   69,
       69,   69,  341,  341,  341,   69,  413,  341, 1351,  211,
      211,  211,  222,  413,  222,  222,  222,  222,  244,  413,
      236,   69,  224,  236,  224,  224,  222,  224,  224,  224,
      224, 1352,  236,  244,  236,  236, 1353,  236,  236,  236,
      236,  240, 1357,  239,  222,  239,  239,  239,  239, 1358,
      240,   69,   69,   69,   83, 1359,  240,  239,  632,  632,
      240,  632, 1360,   83, 1361,   83,   83,   83,   83,   83,
      403,  403,  403,   83,  633,  239,  240,  633,  390,  249,
      390,  390,  390,  244,  244,  244,  404,  404,  404,   83,

      249,  249,  249,  249, 1365,  639,  249,  282,  639, 1366,
      282,  288,  288,  288,  288, 1367,  240,  240,  240,  282,
      652,  282,  282,  652,  282,  282,  282,  282, 1372,   83,
       83,   83,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   98,  110,  110,  110,
     1373,  110,  682,  284,  110,  682,  284,  415,  415,  415,
      241, 1374, 1375,  110,  110,  110, 1376,  243,  284,  241,
      284,  284,  284,  284, 1380,  241,  243,  284,  625,  241,
      625, 1381,  243,  625,  625,  110,  243, 1382,  110,  110,
      110, 1383, 1384,  110,  110,  241,  296,  296,  296,  296,
     1388,  110,  243,  290,  110, 1389,  110, 1390,  110,  110,
      120,  120,  120,  120,  353,  353,  353,  353,  290,  120,
      120,  120,  120, 1392, 1393,  241,  241,  241,  354,  354,
      354,  354,  243,  243,  243, 1394,  120,  120,  120,  120,

      120,  120,  127, 1395,  127,  127, 1396, 1397,  127,  127,
      127, 1398, 1399,  127,  127,  127,  127,  245,  467,  467,
      467,  127, 1402,  467,  250,  407,  245, 1406,  290,  290,
      290, 1407,  245,  250,  127, 1408,  245,  127, 1410,  250,
     1412, 1414,  285,  250,  285,  285,  285,  285,  359, 1415,
      359, 1416,  245,  359,  359,  359,  285,  638,  638,  250,
      638,  127,  128,  128,  128, 1417,  128, 1422,  361,  128,
      361,  361,  361,  361,  285,  407,  407,  407,  128,  128,
      128, 1423,  245,  245,  245,  375,  128, 1424, 1430,  250,
      250,  250,  362,  362,  362,  362,  375,  375,  375,  375,

      128, 1431,  375,  128,  128,  128, 1432, 1451,  128,  128,
      363, 1452,  363,  363,  363,  363,  128,  651,  651,  128,
      651,  128, 1453,  128,  128,  195,  195,  195,  195,  195,
      195,  195, 1454,  195, 1455,  195,  195,  195,  195, 1456,
      195,  195,  195,  195,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
     1457,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  259,
      378,  378,  378,  378,  453,  453,  453,  453,  259, 1458,
      259,  259,  259,  259,  259,  490,  490,  490,  259, 1459,
     1463,  263,  259,  263,  263, 1464,  263,  263,  263,  263,
      511,  511,  511,  264,  259, 1465,  265, 1466,  263, 1467,
      259, 1468,  264,  689, 1472,  265,  689,  721,  264, 1473,
      721,  265,  264,  689,  267,  265,  263,  721,  396,  396,
      396,  396, 1474,  267,  259,  259,  259,  261,  264,  267,
      396,  265, 1475,  267, 1476, 1480,  261, 1481,  261,  261,

      261,  261,  261,  520,  520,  520,  261, 1482,  396,  267,
      261,  377, 1483,  377,  377,  377,  377, 1484,  264,  264,
      264,  265,  265,  265,  379,  377,  379, 1485,  261,  379,
      379,  379,  379,  463,  463,  463,  463, 1486, 1487,  267,
      267,  267,  397,  377,  397, 1488, 1490,  397,  397,  397,
      397, 1491,  261,  261,  261,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262, 1492,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,

      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      271,  427,  530,  530,  530,  279, 1493,  428,  286,  271,
     1494,  429, 1495, 1496,  279,  271, 1497,  286,  948,  271,
      279,  948, 1498,  286,  279, 1499, 1500,  286,  948,  287,
     1501, 1502,  428,  427,  431,  271, 1503, 1507,  287,  949,
      279,  289,  949,  286,  287, 1508,  429, 1509,  287,  949,
      289,  427,  427,  427, 1510, 1511,  289,  428,  428,  428,
      289,  429,  429,  429,  287,  271,  271,  271,  273,  431,

      279,  279,  279,  286,  286,  286,  289,  273, 1512,  273,
      273,  273,  273,  273,  431,  431,  431,  273, 1516, 1517,
      291,  535,  535,  535,  287,  287,  287, 1518, 1519,  291,
      430,  295, 1520,  273, 1524,  291,  289,  289,  289,  291,
      295,  465,  465,  465,  465, 1525,  295,  570,  570,  570,
      295,  432, 1526, 1527,  301,  291,  301,  301,  302,  301,
      301,  301,  301,  273,  273,  273,  295,  302,  430,  430,
     1528,  301, 1529,  302,  589,  589,  589,  302,  433, 1530,
      430,  430,  430,  432, 1531,  291,  291,  291, 1532,  301,
      598,  598,  598,  302, 1534, 1535,  295,  295,  295,  297,

     1536,  432,  432,  432,  438,  433, 1537, 1538,  297, 1539,
      297,  297,  297,  297,  297,  608,  608,  608,  297, 1540,
      434, 1541,  297,  302,  302,  302,  303, 1542,  433,  433,
      433, 1544, 1546,  305,  297,  303,  959,  436,  309,  959,
      297,  303,  305,  438, 1548,  303,  959,  309,  305, 1555,
      434, 1556,  305,  309,  438,  438,  438,  309,  434,  435,
     1557,  303,  436,  440,  297,  297,  297,  299,  305,  441,
      434,  434,  434,  309,  448, 1562,  299,  442,  299,  299,
      299,  299,  299,  613,  613,  613,  299,  436,  436,  436,
      299,  303,  303,  303, 1563,  435, 1564, 1569,  305,  305,

      305,  440,  442,  309,  309,  309, 1570,  448,  299,  435,
      435,  435,  441,  440,  440,  440,  645,  645,  645,  441,
      441,  441, 1571, 1576,  448,  448,  448,  442,  442,  442,
     1577, 1578,  299,  299,  299,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300, 1582,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,

      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      311, 1583, 1584,  437,  646,  646,  646,  316, 1587,  311,
      443,  311,  311,  311,  311,  311,  316, 1588, 1589,  311,
     1590, 1591,  316,  488, 1592,  380,  316,  380,  380,  380,
      380,  471,  471,  471,  471,  311, 1593,  437,  488,  380,
      437,  445,  316, 1594,  443,  446, 1595, 1596,  447,  444,
     1597, 1598,  444,  437,  437,  437, 1599,  380,  488,  444,
      443,  443,  443, 1600, 1601,  311,  311,  311, 1602, 1603,
      444, 1604,  316,  316,  316,  349,  349,  349,  349, 1605,
      445,  446,  447, 1606,  349,  349,  349,  349,  488,  488,

      488,  445,  445,  445, 1607,  446,  446,  446,  447,  447,
      447,  349,  349,  349,  349,  349,  349,  406,  406,  406,
      406,  481,  481,  481,  481, 1608,  406,  406,  406,  406,
      444,  444,  444,  449,  458, 1609,  458, 1610, 1611,  458,
      458,  458,  458,  406,  406,  406,  406,  406,  406,  439,
      439,  439,  439,  439,  450,  439,  439,  507,  439,  439,
      439,  517, 1612,  439,  456,  439,  456,  456,  456,  456,
     1613,  439,  439, 1614, 1622,  439,  449,  464,  456,  464,
      464,  464,  464,  449,  449,  449, 1623, 1624,  439, 1630,
      439,  439,  439,  450, 1631,  462,  456,  462, 1632, 1633,

      462,  462,  462,  462,  450,  450,  450,  507,  507,  507,
     1634,  517,  517,  517, 1635,  439,  439,  439, 1636,  439,
      439,  439,  439,  439,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
     1637,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  460,

     1638,  460,  460,  460,  460,  551,  551,  551,  551,  473,
     1615,  473,  585,  460,  473,  473,  473,  473,  474, 1639,
     1640,  475,  561,  561,  561,  561, 1668,  474, 1615, 1668,
      475,  460,  472,  474, 1269, 1668,  475,  474, 1268,  476,
      475, 1267, 1266,  472,  472,  472,  472,  472,  476, 1264,
     1263,  472,  509,  474,  476,  472,  475,  477,  476,  595,
      482, 1262,  585,  585,  585,  512,  477,  509, 1251,  482,
     1250,  509,  477,  472,  476,  482,  477, 1249, 1239,  482,
      512,  483, 1238,  474,  474,  474,  475,  475,  475, 1237,
      483,  971,  477,  484,  971,  482,  483,  472,  472,  472,

      483,  971,  484, 1232,  476,  476,  476, 1231,  484,  595,
      595,  595,  484,  662,  662,  662,  483,  509,  509,  509,
      498, 1230,  477,  477,  477,  482,  482,  482,  484,  498,
      512,  512,  512, 1221,  499,  498, 1219,  521, 1672,  498,
     1218, 1217,  500,  499, 1672, 1215,  483,  483,  483,  499,
     1693,  500,  521,  499, 1214,  498, 1693,  500,  484,  484,
      484,  500,  668,  668,  668,  553, 1212,  553, 1694,  499,
      553,  553,  553,  553, 1694, 1211,  506,  500,  506,  506,
     1210,  506,  506,  506,  506,  498,  498,  498, 1209,  513,
     1206,  513, 1205,  506,  513,  513,  513,  513,  513,  499,

      499,  499,  521,  521,  521, 1204, 1701,  500,  500,  500,
      504,  506, 1701,  526, 1707,  526,  526,  526,  526,  504,
     1707,  504,  504,  504,  504,  504, 1203,  526, 1753,  504,
      759,  759,  759,  504, 1753,  522,  973,  522,  528,  973,
      522,  522,  522,  522,  522,  526,  973,  528,  513,  513,
      513,  504,  975,  528,  626,  975,  626,  528, 1202,  626,
      626,  626,  975, 1201,  584,  529,  584,  584, 1195,  584,
      584,  584,  584,  528,  529,  504,  504,  504,  505, 1697,
      529,  584, 1697,  587,  529, 1194, 1193,  505, 1697,  505,
      505,  505,  505,  505,  522,  522,  522,  505,  587,  584,

      529,  505,  587,  528,  528,  528,  531,  634,  634,  634,
     1192,  590,  634,  505, 1710,  531, 1710, 1191,  541,  505,
     1710,  531,  763,  763,  763,  531,  590,  541, 1190, 1189,
      529,  529,  529,  541,  780,  780,  780,  541, 1188,  568,
     1187,  531, 1186,  505,  505,  505,  510, 1185,  587,  587,
      587, 1184,  599,  541,  568,  510, 1182,  510,  510,  510,
      510,  510,  784,  784,  784,  510, 1180,  599, 1179,  510,
     1178,  531,  531,  531,  568, 1174,  590,  590,  590, 1749,
      542,  510, 1749,  541,  541,  541, 1173,  510, 1749,  542,
     1172,  640,  640,  640, 1756,  542,  640, 1757, 1165,  542,

     1756,  543, 1164, 1757,  568,  568,  568,  788,  788,  788,
      543,  510,  510,  510,  519,  542,  543,  599,  599,  599,
      543, 1163, 1157,  519, 1155,  519,  519,  519,  519,  519,
      793,  793,  793,  519, 1154, 1806,  543,  519, 1809,  554,
      986, 1806,  555,  986, 1809,  542,  542,  542,  554,  519,
      986,  555, 1153, 1810,  554,  519, 1152,  555,  554, 1810,
     1151,  555,  644,  644,  644,  644,  543,  543,  543,  650,
      650,  650,  650, 1148,  554, 1011,  779,  555, 1011,  519,
      519,  519,  527, 1147,  604, 1011,  604,  604,  604,  604,
     1146,  527,  785,  527,  527,  527,  527,  527,  604, 1145,

     1144,  527, 1143, 1142,  554,  554,  554,  555,  555,  555,
      556,  655,  655,  655,  655, 1140,  604,  527, 1750,  556,
     1750,  557, 1139,  655, 1750,  556,  779,  779,  779,  556,
      557,  656,  656,  656,  656, 1138,  557,  817,  817,  817,
      557,  655,  785,  785,  785,  556, 1136,  527,  527,  527,
      547,  657,  657,  657,  657, 1135,  557, 1208, 1134,  547,
     1208,  547,  547,  547,  547,  547,  664, 1208,  664,  547,
     1133,  664,  664,  664,  664,  556,  556,  556,  731,  731,
      731,  731, 1132, 1130,  562,  547,  557,  557,  557,  563,
      857,  857,  857,  562,  733,  733,  733,  733,  563,  562,

      861,  861,  861,  562,  563,  591, 1129,  591,  563, 1128,
      591,  591,  591,  591,  591,  547,  547,  547,  552,  562,
      739,  739,  739,  739,  563,  564,  878,  878,  878,  552,
      552,  552,  552,  552,  564, 1127, 1216,  552,  576, 1216,
      564,  552, 1850,  577,  564, 1126, 1216,  576, 1850,  562,
      562,  562,  577,  576,  563,  563,  563,  576,  577,  552,
      564,  578,  577, 1125,  591,  591,  591,  882,  882,  882,
      578, 1851, 1227,  576, 1124, 1227,  578, 1851,  577, 1123,
      578,  786, 1227,  552,  552,  552,  732,  732,  732,  732,
      564,  564,  564, 1122, 1121,  877,  578,  736,  732,  736,

      736,  736,  736,  576,  576,  576, 1120, 1892,  577,  577,
      577, 1118,  600, 1892,  600,  606,  732,  600,  600,  600,
      600,  600, 1117, 1116,  606, 1115,  578,  578,  578,  582,
      606,  786,  786,  786,  606,  886,  886,  886,  582, 1114,
      582,  582,  582,  582,  582,  877,  877,  877,  582, 1893,
      606,  665,  582,  665,  665, 1893,  665,  665,  665,  665,
     1113, 1112,  734,  734,  734,  734, 1235, 1111,  607, 1235,
      582,  600,  600,  600,  734, 1110, 1235,  607, 1105, 1104,
      606,  606,  606,  607,  891,  891,  891,  607,  802,  802,
      802,  802,  734, 1103,  582,  582,  582,  583, 1102, 1751,

      802, 1751, 1101,  607,  609, 1751,  583, 1100,  583,  583,
      583,  583,  583,  609, 1099, 1098,  583, 1097,  802,  609,
      583, 1096,  735,  609,  735, 1095, 1094,  735,  735,  735,
      735,  619,  583,  607,  607,  607, 1092, 1090,  583,  609,
      619,  805,  805,  805,  805, 1089,  619,  915,  915,  915,
      619,  730, 1088,  730,  730, 1084,  730,  730,  730,  730,
      757, 1083,  583,  583,  583,  588,  619, 1082,  730,  609,
      609,  609,  620, 1075,  588,  757,  588,  588,  588,  588,
      588,  620,  696, 1074,  588,  696,  730,  620,  588, 1073,
     1067,  620,  696,  621, 1065,  757,  619,  619,  619,  883,

      588, 1064,  621,  696, 1063, 1062,  588,  620,  621,  934,
      934,  934,  621,  697, 1225, 1061,  697, 1225, 1058,  698,
     1057, 1056,  698,  697, 1225,  757,  757,  757,  621,  698,
      588,  588,  588,  597,  697, 1055, 1054,  620,  620,  620,
      698, 1053,  597,  884,  597,  597,  597,  597,  597,  883,
      883,  883,  597,  696,  696,  696,  597, 1052,  621,  621,
      621, 1225,  699, 1050,  698,  699,  700, 1049,  597,  700,
     1048, 1046,  699, 1045,  597, 1044,  700,  807,  807,  807,
      807,  813, 1043,  699,  697,  697,  697,  700, 1042,  807,
      698,  698,  698,  884,  884,  884,  813, 1040,  597,  597,

      597,  605,  837,  837,  837,  837,  911,  807, 1039,  699,
      605,  700,  605,  605,  605,  605,  605, 1038, 1037,  701,
      605,  911,  701,  903,  903,  903,  903, 1036, 1035,  701,
      935,  935,  935,  699,  699,  699,  605,  700,  700,  700,
      701,  702, 1034, 1033,  702, 1032,  813,  813,  813,  703,
      758,  702,  703,  704, 1031, 1030,  704, 1028, 1027,  703,
     1026, 1025,  702,  704,  797,  758,  605,  605,  605,  628,
      703,  911,  911,  911,  704,  701, 1024, 1023,  628,  797,
      628,  628,  628,  628,  628,  758,  705, 1022,  628,  705,
      701,  701,  701, 1021,  702, 1233,  705, 1020, 1233,  797,

      703,  704, 1008,  979,  628, 1233, 1007,  705,  940,  940,
      940, 1006,  702,  702,  702,  758,  758,  758,  999,  998,
      703,  703,  703,  997,  704,  704,  704,  972,  970,  797,
      797,  797,  979,  705,  628,  628,  628,  648,  648,  648,
      648,  706, 1233,  969,  706,  968,  648,  648,  648,  648,
      967,  706,  966,  979,  979,  979,  965,  705,  705,  705,
      964,  963,  706,  648,  648,  648,  648,  648,  648,  669,
      669,  669,  669,  707,  855,  962,  707,  961,  669,  669,
      669,  669,  708,  707,  978,  708, 1029, 1029, 1029,  855,
      960,  958,  708,  957,  707,  669,  669,  669,  669,  669,

      669,  706,  956,  708,  955,  709,  954,  953,  709,  855,
      952,  951,  706,  706,  706,  709,  950,  710,  947,  942,
      710,  712,  978,  982,  712,  708,  709,  710, 1041, 1041,
     1041,  712,  977,  939,  978,  978,  978,  931,  710,  855,
      855,  855,  712,  930,  707,  707,  707,  929,  928,  717,
      927,  923,  717,  708,  708,  708,  922,  982,  718,  717,
      921,  718, 1240,  977,  709, 1240,  920,  710,  718,  919,
      717,  918, 1240,  982,  982,  982,  709,  709,  709,  718,
      917,  916,  977,  977,  977, 1047, 1047, 1047,  710,  710,
      710,  914,  712,  712,  712,  713,  713,  713,  713,  713,

      713,  713,  718,  713,  913,  713,  713,  713,  713,  717,
      713,  713,  713,  713,  912,  902,  720,  901,  898,  720,
      717,  717,  717, 1051, 1051, 1051,  720,  897,  896,  718,
      718,  718,  719,  719,  719,  719,  719,  720,  719,  719,
      894,  719,  719,  719,  893,  892,  719,  725,  719,  890,
      725, 1093, 1093, 1093,  719,  719,  723,  725,  719,  723,
     1119, 1119, 1119,  720,  889,  888,  723,  881,  725,  880,
      879,  719,  875,  719,  719,  719,  874,  723,  900,  900,
      900,  900, 1068, 1068, 1068, 1068,  719,  720,  720,  720,
      900,  726,  873,  872,  726,  871,  725,  867,  719,  719,

      719,  726,  719,  719,  719,  719,  719,  866,  900,  980,
      865,  864,  726,  723,  727,  863,  988,  727,  725,  725,
      725, 1131, 1131, 1131,  727,  862,  860,  723,  723,  723,
      724,  724,  724,  724,  724,  727,  724,  724,  726,  724,
      724,  724,  859,  858,  724,  854,  724,  980,  988, 1137,
     1137, 1137,  724,  724,  853,  728,  724,  852,  728,  980,
      980,  980,  726,  726,  726,  728,  988,  988,  988,  724,
      851,  724,  724,  724,  850,  738,  728,  738,  724,  846,
      738,  738,  738,  738,  738,  727,  727,  727,  845,  801,
      801,  801,  801,  801,  844,  843,  724,  724,  724,  740,

      724,  724,  724,  724,  724,  842,  728,  835,  740,  833,
      740,  740,  740,  740,  740, 1141, 1141, 1141,  740, 1183,
     1183, 1183,  741, 1320, 1320, 1320,  728,  728,  728, 1229,
      832,  741, 1229,  742,  738,  738,  738,  741,  831, 1229,
      743,  741,  742,  801,  801,  801,  830,  829,  742,  743,
     1242,  825,  742, 1242,  824,  743,  823,  741,  749,  743,
     1242,  750,  822,  821,  740,  740,  740,  749,  742, 1243,
      750,  820, 1243,  749, 1229,  743,  750,  749,  819, 1243,
      750,  989,  751, 1158, 1158, 1158, 1158,  741,  741,  741,
      818,  751, 1244,  749,  770, 1244,  750,  751,  742,  742,

      742,  751, 1244,  770,  816,  743,  743,  743, 1247,  770,
      815, 1247,  985,  770,  814,  990,  804,  751, 1247,  803,
      989,  771, 1243,  749,  749,  749,  750,  750,  750,  770,
      771,  989,  989,  989,  800,  772,  771, 1324, 1324, 1324,
      771,  990, 1252, 1254,  772, 1252, 1254,  751,  751,  751,
      772,  799, 1252, 1254,  772,  985,  771,  798,  796,  770,
      770,  770,  985,  985,  985,  990,  990,  990,  795,  789,
      772,  789,  794,  792,  789,  789,  789,  789,  789,  806,
      806,  806,  806,  806,  791,  790,  771,  771,  771,  808,
      783,  994,  782,  905,  905,  905,  905,  781,  808,  777,

      772,  772,  772,  778,  808,  905,  776,  775,  808,  774,
      856,  773,  778,  769,  778,  778,  778,  778,  778, 1387,
     1387, 1387,  778,  905,  808,  856,  778,  768,  789,  789,
      789,  809,  767,  806,  806,  806,  766,  895,  778,  765,
      809,  994,  994,  994,  778,  856,  809,  764,  810, 1001,
      809,  762,  895,  761,  808,  808,  808,  810,  760,  810,
      810,  810,  810,  810,  756,  755,  809,  810,  778,  778,
      778,  787,  895,  754,  753,  856,  856,  856, 1260,  752,
      787, 1260,  787,  787,  787,  787,  787,  748, 1260, 1001,
      787,  747,  992,  746,  787,  745,  809,  809,  809, 1001,

     1001, 1001,  895,  895,  895,  744,  787, 1391, 1391, 1391,
      812,  737,  787,  810,  810,  810, 1003,  729,  992,  812,
      984,  716,  715,  984,  714,  812,  836,  695,  836,  812,
      984,  836,  836,  836,  836,  836,  787,  787,  787,  811,
      694,  984,  992,  992,  992,  812,  826,  693,  811,  692,
      811,  811,  811,  811,  811,  826,  691,  690,  811, 1245,
      688,  826, 1245,  827,  687,  826, 1003, 1003, 1003, 1245,
      686,  685,  827,  683,  811,  812,  812,  812,  827,  681,
      828,  826,  827,  680,  678,  836,  836,  836,  677,  828,
      676,  984,  984,  984,  674,  828,  673,  672,  827,  828,

     1404,  671,  670, 1404,  811,  811,  811,  838,  660,  659,
     1404,  826,  826,  826,  658,  828,  838, 1245,  838,  838,
      838,  838,  838,  839,  643,  642,  838,  637,  827,  827,
      827,  636,  839,  631,  840, 1489, 1489, 1489,  839,  630,
      629, 1409,  839,  840, 1409,  828,  828,  828,  834,  840,
      624, 1409,  623,  840,  996,  622,  841,  834,  839,  834,
      834,  834,  834,  834,  618,  841,  617,  834,  616,  840,
      615,  841,  838,  838,  838,  841,  996,  847, 1533, 1533,
     1533,  614,  612,  834, 1411,  611,  847, 1411,  839,  839,
      839,  841,  847,  610, 1411,  603,  847,  602,  601,  840,

      840,  840,  596,  594,  996,  996,  996,  593, 1253,  592,
      848, 1253,  847,  834,  834,  834,  586,  849, 1253,  848,
      581,  841,  841,  841, 1413,  848,  849, 1413,  580,  848,
      579,  868,  849,  575, 1413,  574,  849,  573,  869,  572,
      868,  571,  847,  847,  847,  848,  868,  869, 1258, 1005,
      868, 1258,  849,  869,  887,  870,  887,  869, 1258,  887,
      887,  887,  887,  887,  870,  569,  868, 1253,  567,  566,
      870, 1005,  565,  869,  870,  848,  848,  848,  560, 1009,
      559,  558,  849,  849,  849,  899,  899,  899,  899,  899,
      870,  550,  549, 1013,  548, 1258,  868,  868,  868, 1005,

     1005, 1005,  546,  869,  869,  869,  904,  904,  904,  904,
      904, 1009,  545,  887,  887,  887, 1420,  544,  540, 1420,
      870,  870,  870,  876,  539, 1013, 1420,  538,  537, 1009,
     1009, 1009,  876,  536,  876,  876,  876,  876,  876,  899,
      899,  899,  876, 1013, 1013, 1013,  876,  534,  533, 1014,
      906, 1014, 1014, 1014, 1014,  532,  525,  907,  876,  906,
      904,  904,  904,  524,  876,  906,  907,  523,  908,  906,
      518,  516,  907,  515,  514,  508,  907,  908,  503,  908,
      908,  908,  908,  908,  502,  906, 1059,  908,  876,  876,
      876,  885,  907, 1015,  501, 1015, 1015, 1015, 1015,  495,

      885, 1059,  885,  885,  885,  885,  885,  494, 1425, 1256,
      885, 1425, 1256,  493,  885,  906,  906,  906, 1425, 1256,
      492, 1059,  907,  907,  907,  491,  885,  489, 1257,  487,
      910, 1257,  885,  908,  908,  908,  486,  485, 1257,  910,
     1000,  480,  479, 1000, 1428,  910,  478, 1428,  470,  910,
     1000, 1059, 1059, 1059, 1428,  469,  885,  885,  885,  909,
      452, 1000,  451,  426,  425,  910,  924,  423,  909, 1256,
      909,  909,  909,  909,  909,  924, 1434, 1436,  909, 1434,
     1436,  924,  421,  925,  419,  924, 1434, 1436, 1257,  418,
      417,  416,  925,  414,  909,  910,  910,  910,  925,  412,

      926,  924,  925,  410, 1439, 1060,  409, 1439, 1017,  926,
      408, 1000, 1000, 1000, 1439,  926,  383, 1017,  925,  926,
     1060,  382,  381, 1017,  909,  909,  909, 1017,  364,  345,
      344,  924,  924,  924, 1442,  926, 1434, 1442,  332,  331,
     1060,  318,  317, 1017, 1442,  315,  314,  313,  925,  925,
      925, 1077, 1077, 1077, 1077, 1077,  308,  307, 1167, 1167,
     1167, 1167, 1167,  306,  294,  926,  926,  926,  938,  293,
     1060, 1060, 1060, 1017, 1017, 1017, 1018,  938,  292,  938,
      938,  938,  938,  938, 1091, 1018,  281,  938,  280, 1019,
     1447, 1018,  277, 1447,  276, 1018,  275,  272, 1019, 1091,

     1447,  270,  269,  938, 1019, 1077, 1077, 1077, 1019,  268,
      248, 1018, 1167, 1167, 1167,  247,  246, 1149, 1449, 1091,
     1551, 1449,  235, 1551, 1019, 1150,  234,  223, 1449,  214,
     1551,  213, 1149,  938,  938,  938,  941,  941,  941,  941,
     1150, 1018, 1018, 1018,  212,  941,  941,  941,  941, 1091,
     1091, 1091, 1149,  171, 1019, 1019, 1019,  163,  161,  160,
     1150, 1069,  941,  941,  941,  941,  941,  941,  943,  943,
     1069,  943,  159,  943,  158,  151, 1069,  943,  943,  943,
     1069,  943, 1149, 1149, 1149,  145, 1070,  139,  135,  943,
     1150, 1150, 1150,  126,  124, 1070, 1069, 1181,  123,  122,

     1553, 1070,  117, 1553, 1071, 1070,  943,  114,  943,  943,
     1553,  113, 1181, 1071, 1560, 1565,  112, 1560, 1565, 1071,
      108, 1070,  104, 1071, 1560, 1565, 1069, 1069, 1069,  102,
      101, 1567, 1181,  943, 1567,  943,  943,  944,  944, 1071,
      944, 1567,  944,  100,   95,   91,  944,  944,  944,   90,
      944, 1070, 1070, 1070,   89,   82,   79, 1438,  944, 1318,
     1438,   78, 1181, 1181, 1181,   77,   70, 1438,   64, 1071,
     1071, 1071,   63,   62, 1318,  944, 1072,  944,  944, 1301,
     1301, 1301, 1301, 1301,   55, 1072, 1444, 1574,   48, 1444,
     1574, 1072,   44,   35, 1318, 1072, 1444, 1574,   34,   31,

        0,    0,  944,    0,  944,  944,  981,  981,  981,  981,
      981, 1072,  981,  981,    0,  981,  981,  981,    0,    0,
      981, 1438,  981,    0, 1318, 1318, 1318, 1580,  981,  981,
     1580,    0,  981, 1301, 1301, 1301,    0, 1580,    0,    0,
        0, 1072, 1072, 1072,    0,  981, 1444,  981,  981,  981,
        0, 1076, 1585, 1617,  981, 1585, 1617,    0, 1620,    0,
     1076, 1620, 1585, 1617,    0,    0, 1076,    0, 1620,    0,
     1076,    0,  981,  981,  981,    0,  981,  981,  981,  981,
      981,  983,  983,  983,  983,  983, 1076,  983,  983,    0,
      983,  983,  983,    0,    0,  983, 1625,  983, 1628, 1625,

        0, 1628,    0,  983,  983,    0, 1625,  983, 1628,    0,
     1078,    0,    0,    0,    0,    0, 1076, 1076, 1076, 1078,
      983,    0,  983,  983,  983, 1078, 1319,    0,    0, 1078,
     1368, 1368, 1368, 1368, 1368,    0,    0,    0,    0,    0,
        0, 1319,    0,    0,    0, 1078,    0,  983,  983,  983,
        0,  983,  983,  983,  983,  983,  991,  991,  991,  991,
      991, 1319,  991,  991,    0,  991,  991,  991,    0,    0,
      991,    0,  991,    0,    0, 1078, 1078, 1078,  991,  991,
        0,    0,  991,    0, 1368, 1368, 1368, 1641, 1641, 1641,
        0, 1319, 1319, 1319,    0,  991,    0,  991,  991,  991,

        0,    0,    0, 1385,    0, 1641, 1641, 1641, 1641,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1385,    0,
        0,    0,  991,  991,  991,    0,  991,  991,  991,  991,
      991,  995,  995,  995,  995,  995,  995,  995, 1385,  995,
     1386,  995,  995,  995,  995,    0,  995,  995,  995,  995,
     1010, 1010, 1010, 1010, 1010, 1386, 1010, 1010,    0, 1010,
     1010, 1010, 1079,    0, 1010, 1081, 1010,    0, 1385, 1385,
     1385, 1079, 1010, 1010, 1081, 1386, 1010, 1079,    0,    0,
     1081, 1079,    0,    0, 1081,    0,    0,    0,    0, 1010,
        0, 1010, 1010, 1010,    0,    0,    0, 1079,    0,    0,

     1081,    0,    0,    0,    0, 1386, 1386, 1386,    0,    0,
        0,    0,    0,    0,    0,    0, 1010, 1010, 1010,    0,
     1010, 1010, 1010, 1010, 1010, 1016,    0, 1079, 1079, 1079,
     1081, 1081, 1081, 1085, 1016,    0, 1016, 1016, 1016, 1016,
     1016,    0, 1085,    0, 1016,    0,    0,    0, 1085,    0,
     1086,    0, 1085,    0,    0,    0,    0,    0,    0, 1086,
     1016,    0,    0,    0,    0, 1086,    0,    0, 1085, 1086,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1086,    0,    0,    0,    0,
     1016, 1016, 1016, 1066,    0,    0,    0,    0, 1085, 1085,

     1085,    0, 1066,    0, 1066, 1066, 1066, 1066, 1066,    0,
        0,    0, 1066,    0,    0, 1086, 1086, 1086, 1087,    0,
        0, 1107,    0,    0,    0,    0,    0, 1087, 1066,    0,
     1107,    0, 1108, 1087,    0,    0, 1107, 1087,    0,    0,
     1107, 1108,    0,    0,    0,    0,    0, 1108,    0,    0,
        0, 1108,    0, 1087,    0,    0, 1107,    0, 1066, 1066,
     1066, 1080,    0,    0,    0,    0,    0, 1108,    0,    0,
     1080,    0, 1080, 1080, 1080, 1080, 1080,    0,    0,    0,
     1080,    0,    0, 1087, 1087, 1087, 1107, 1107, 1107,    0,
        0,    0,    0,    0,    0, 1109, 1080, 1108, 1108, 1108,

     1159,    0,    0,    0, 1109,    0,    0,    0,    0, 1159,
     1109,    0,    0,    0, 1109, 1159,    0,    0,    0, 1159,
        0,    0,    0,    0,    0,    0, 1080, 1080, 1080, 1106,
     1109,    0,    0,    0,    0, 1159, 1160,    0, 1106,    0,
     1106, 1106, 1106, 1106, 1106, 1160,    0,    0, 1106,    0,
        0, 1160,    0,    0, 1161, 1160,    0,    0,    0,    0,
     1109, 1109, 1109, 1161, 1106, 1159, 1159, 1159,    0, 1161,
        0, 1160, 1162, 1161,    0,    0,    0,    0,    0,    0,
        0, 1162,    0,    0,    0,    0,    0, 1162,    0, 1161,
        0, 1162,    0,    0, 1106, 1106, 1106, 1156,    0,    0,

        0, 1160, 1160, 1160,    0,    0, 1156, 1162, 1156, 1156,
     1156, 1156, 1156,    0, 1166,    0, 1156,    0,    0, 1161,
     1161, 1161,    0, 1166,    0, 1168,    0,    0,    0, 1166,
        0,    0, 1156, 1166, 1168,    0, 1169, 1162, 1162, 1162,
     1168,    0,    0,    0, 1168, 1169,    0,    0,    0, 1166,
        0, 1169,    0,    0,    0, 1169,    0,    0,    0, 1171,
     1168,    0, 1156, 1156, 1156,    0,    0,    0, 1171,    0,
        0, 1169,    0,    0, 1171,    0,    0,    0, 1171, 1166,
     1166, 1166,    0,    0,    0,    0,    0,    0,    0,    0,
     1168, 1168, 1168,    0, 1171,    0,    0,    0,    0,    0,

        0, 1169, 1169, 1169, 1170,    0,    0,    0,    0,    0,
        0,    0, 1175, 1170,    0, 1170, 1170, 1170, 1170, 1170,
        0, 1175,    0, 1170, 1171, 1171, 1171, 1175,    0, 1176,
        0, 1175,    0,    0,    0,    0,    0, 1177, 1176, 1170,
        0,    0,    0,    0, 1176,    0, 1177, 1175, 1176,    0,
        0,    0, 1177,    0,    0,    0, 1177,    0,    0,    0,
        0,    0,    0,    0, 1176, 1287,    0,    0,    0, 1170,
     1170, 1170, 1177,    0, 1287,    0,    0, 1175, 1175, 1175,
     1287,    0, 1288,    0, 1287,    0,    0,    0,    0,    0,
        0, 1288,    0,    0, 1176, 1176, 1176, 1288,    0,    0,

     1287, 1288, 1177, 1177, 1177, 1196, 1196,    0, 1196,    0,
     1196,    0,    0,    0, 1196, 1196, 1196, 1288, 1196,    0,
        0,    0,    0,    0,    0,    0, 1196,    0,    0,    0,
     1287, 1287, 1287,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1196, 1289, 1196, 1196, 1288, 1288, 1288,
        0,    0,    0, 1289,    0,    0,    0,    0,    0, 1289,
        0,    0,    0, 1289,    0,    0,    0,    0,    0,    0,
     1196,    0, 1196, 1196, 1222, 1222, 1222, 1222, 1222, 1289,
     1222, 1222,    0, 1222, 1222, 1222,    0,    0, 1222,    0,
     1222,    0,    0,    0,    0,    0, 1222, 1222,    0,    0,

     1222,    0,    0, 1295,    0,    0,    0,    0,    0, 1289,
     1289, 1289, 1295, 1222,    0, 1222, 1222, 1222, 1295,    0,
        0,    0, 1295,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1295,    0,
     1222, 1222, 1222,    0, 1222, 1222, 1222, 1222, 1222, 1223,
     1223, 1223, 1223, 1223,    0, 1223,    0,    0, 1223, 1223,
     1223,    0,    0, 1223,    0, 1223,    0,    0, 1295, 1295,
     1295, 1223, 1223,    0,    0, 1223, 1296,    0,    0,    0,
        0,    0,    0,    0,    0, 1296,    0,    0, 1223,    0,
     1223, 1296, 1223,    0, 1297, 1296,    0,    0,    0,    0,

        0,    0,    0, 1297,    0,    0,    0,    0,    0, 1297,
        0, 1296,    0, 1297,    0, 1223, 1223, 1223,    0, 1223,
     1223, 1223, 1223, 1223, 1224, 1224, 1224, 1224, 1224, 1297,
     1224, 1224,    0, 1224, 1224, 1224,    0,    0, 1224,    0,
     1224, 1296, 1296, 1296,    0,    0, 1224, 1224,    0,    0,
     1224,    0,    0,    0,    0,    0,    0,    0,    0, 1297,
     1297, 1297,    0, 1224,    0, 1224, 1224, 1224,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1224, 1224, 1224,    0, 1224, 1224, 1224, 1224, 1224, 1228,

     1228, 1228, 1228, 1228, 1228, 1228,    0, 1228,    0, 1228,
     1228, 1228, 1228,    0, 1228, 1228, 1228, 1228, 1265, 1265,
     1265, 1265, 1265,    0, 1265, 1265,    0, 1265, 1265, 1265,
     1302,    0, 1265, 1303, 1265,    0,    0,    0,    0, 1302,
     1265, 1265, 1303,    0, 1265, 1302,    0, 1304, 1303, 1302,
        0,    0, 1303,    0,    0,    0, 1304, 1265, 1310, 1265,
     1265, 1265, 1304,    0,    0, 1302, 1304, 1310, 1303,    0,
        0,    0,    0, 1310,    0,    0,    0, 1310,    0,    0,
        0,    0, 1304,    0, 1265, 1265, 1265,    0, 1265, 1265,
     1265, 1265, 1265, 1310,    0, 1302, 1302, 1302, 1303, 1303,

     1303, 1311,    0,    0,    0,    0,    0,    0,    0,    0,
     1311,    0, 1304, 1304, 1304,    0, 1311,    0, 1312,    0,
     1311,    0,    0, 1310, 1310, 1310, 1354, 1312,    0, 1355,
        0,    0,    0, 1312,    0, 1354, 1311, 1312, 1355,    0,
     1356, 1354,    0, 1362, 1355, 1354,    0,    0, 1355, 1356,
        0,    0, 1362, 1312, 1363, 1356,    0,    0, 1362, 1356,
        0, 1354, 1362, 1363, 1355,    0, 1311, 1311, 1311, 1363,
        0,    0,    0, 1363,    0, 1356,    0,    0, 1362,    0,
        0,    0,    0, 1312, 1312, 1312,    0,    0,    0, 1363,
        0, 1354, 1354, 1354, 1355, 1355, 1355,    0,    0,    0,

        0,    0,    0, 1364,    0, 1356, 1356, 1356, 1362, 1362,
     1362,    0, 1364,    0, 1369,    0,    0, 1370, 1364, 1363,
     1363, 1363, 1364, 1369,    0, 1371, 1370,    0, 1377, 1369,
        0,    0, 1370, 1369, 1371,    0, 1370, 1377, 1364, 1378,
     1371,    0, 1379, 1377, 1371,    0,    0, 1377, 1378, 1369,
        0, 1379, 1370,    0, 1378,    0,    0, 1379, 1378,    0,
     1371, 1379,    0, 1377,    0,    0,    0,    0, 1364, 1364,
     1364,    0,    0,    0, 1378,    0,    0, 1379,    0, 1369,
     1369, 1369, 1370, 1370, 1370,    0,    0,    0,    0,    0,
     1371, 1371, 1371, 1377, 1377, 1377,    0,    0,    0,    0,

        0,    0,    0,    0, 1378, 1378, 1378, 1379, 1379, 1379,
     1421, 1421, 1421, 1421, 1421, 1421, 1421,    0, 1421,    0,
     1421, 1421, 1421, 1421,    0, 1421, 1421, 1421, 1421, 1433,
     1433, 1433, 1433, 1433,    0, 1433, 1433,    0, 1433, 1433,
     1433,    0,    0, 1433,    0, 1433,    0,    0,    0,    0,
        0, 1433, 1433,    0,    0, 1433,    0,    0, 1460,    0,
        0,    0,    0,    0,    0,    0,    0, 1460, 1433,    0,
     1433, 1433, 1433, 1460,    0,    0,    0, 1460,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1460,    0, 1433, 1433, 1433,    0, 1433,

     1433, 1433, 1433, 1433, 1435, 1435, 1435, 1435, 1435,    0,
     1435, 1435,    0, 1435, 1435, 1435,    0,    0, 1435,    0,
     1435,    0,    0, 1460, 1460, 1460, 1435, 1435,    0,    0,
     1435,    0,    0, 1461,    0,    0,    0,    0,    0,    0,
        0,    0, 1461, 1435,    0, 1435, 1435, 1435, 1461,    0,
        0,    0, 1461,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1461,    0,
     1435, 1435, 1435,    0, 1435, 1435, 1435, 1435, 1435, 1441,
     1441, 1441, 1441, 1441,    0, 1441, 1441,    0, 1441, 1441,
     1441,    0,    0, 1441,    0, 1441,    0,    0, 1461, 1461,

     1461, 1441, 1441,    0,    0, 1441,    0,    0, 1462,    0,
        0,    0,    0,    0,    0,    0,    0, 1462, 1441,    0,
     1441, 1441, 1441, 1462,    0,    0,    0, 1462,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1462,    0, 1441, 1441, 1441,    0, 1441,
     1441, 1441, 1441, 1441, 1445, 1445, 1445, 1445, 1445,    0,
     1445, 1445,    0, 1445, 1445, 1445,    0,    0, 1445,    0,
     1445,    0,    0, 1462, 1462, 1462, 1445, 1445,    0,    0,
     1445,    0,    0, 1469,    0,    0,    0,    0,    0,    0,
        0,    0, 1469, 1445,    0, 1445, 1445, 1445, 1469,    0,

        0,    0, 1469,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1469,    0,
     1445, 1445, 1445,    0, 1445, 1445, 1445, 1445, 1445, 1446,
     1446, 1446, 1446, 1446,    0, 1446, 1446,    0, 1446, 1446,
     1446,    0,    0, 1446, 1470, 1446,    0, 1471, 1469, 1469,
     1469, 1446, 1446, 1470,    0, 1446, 1471,    0, 1477, 1470,
        0,    0, 1471, 1470,    0,    0, 1471, 1477, 1446, 1478,
     1446, 1446, 1446, 1477,    0,    0,    0, 1477, 1478, 1470,
        0,    0, 1471,    0, 1478,    0,    0,    0, 1478,    0,
        0,    0,    0, 1477,    0, 1446, 1446, 1446,    0, 1446,

     1446, 1446, 1446, 1446, 1478,    0,    0, 1479,    0, 1470,
     1470, 1470, 1471, 1471, 1471,    0, 1479,    0, 1504,    0,
        0,    0, 1479, 1477, 1477, 1477, 1479, 1504,    0, 1505,
        0,    0, 1506, 1504, 1478, 1478, 1478, 1504, 1505,    0,
     1513, 1506, 1479, 1514, 1505,    0,    0, 1506, 1505, 1513,
        0, 1506, 1514, 1504,    0, 1513,    0,    0, 1514, 1513,
        0,    0, 1514,    0, 1505,    0,    0, 1506,    0,    0,
        0,    0, 1479, 1479, 1479, 1513,    0,    0, 1514,    0,
        0,    0,    0, 1504, 1504, 1504,    0,    0,    0,    0,
        0,    0,    0,    0, 1505, 1505, 1505, 1506, 1506, 1506,

        0,    0, 1515,    0,    0, 1513, 1513, 1513, 1514, 1514,
     1514, 1515,    0, 1521,    0,    0, 1522, 1515,    0,    0,
        0, 1515, 1521,    0, 1523, 1522,    0,    0, 1521,    0,
        0, 1522, 1521, 1523,    0, 1522,    0, 1515,    0, 1523,
        0,    0,    0, 1523,    0,    0,    0,    0, 1521,    0,
        0, 1522,    0,    0,    0,    0,    0,    0,    0, 1523,
        0,    0,    0,    0,    0,    0,    0, 1515, 1515, 1515,
        0,    0,    0,    0,    0,    0,    0,    0, 1521, 1521,
     1521, 1522, 1522, 1522,    0,    0,    0,    0,    0, 1523,
     1523, 1523, 1558, 1558, 1558, 1558, 1558,    0, 1558, 1558,

        0, 1558, 1558, 1558,    0,    0, 1558,    0, 1558,    0,
        0,    0,    0,    0, 1558, 1558,    0,    0, 1558,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1558,    0, 1558, 1558, 1558,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1558, 1558,
     1558,    0, 1558, 1558, 1558, 1558, 1558, 1572, 1572, 1572,
     1572, 1572,    0, 1572, 1572,    0, 1572, 1572, 1572,    0,
        0, 1572,    0, 1572,    0,    0,    0,    0,    0, 1572,
     1572,    0,    0, 1572,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 1572,    0, 1572, 1572,
     1572,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1572, 1572, 1572,    0, 1572, 1572, 1572,
     1572, 1572, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1647, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,

     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1650, 1650, 1650, 1650, 1650, 1650,
     1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
     1650, 1650, 1650, 1650, 1650, 1650, 1650, 1651, 1651,    0,
        0,    0, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651,    0, 1651, 1651, 1651, 1651, 1651,
     1652,    0, 1652,    0,    0,    0, 1652,    0, 1652, 1652,
     1653, 1653,    0,    0, 1653, 1653, 1653, 1653, 1653, 1653,

     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1655,    0, 1655,    0,
        0, 1655, 1655, 1655,    0, 1655, 1655,    0, 1655, 1655,
     1655, 1655, 1655, 1655, 1656,    0, 1656,    0,    0, 1656,
     1656, 1656,    0, 1656, 1656,    0, 1656, 1656, 1656, 1656,
     1656, 1656, 1657,    0, 1657,    0,    0, 1657, 1657,    0,
        0, 1657, 1657,    0,    0, 1657,    0, 1657, 1657, 1657,
     1658,    0, 1658,    0,    0, 1658, 1658, 1658, 1658, 1658,

     1658,    0, 1658, 1658, 1658, 1658, 1658, 1658, 1659,    0,
     1659,    0,    0, 1659, 1659, 1659, 1659, 1659, 1659,    0,
     1659, 1659, 1659, 1659, 1659, 1659, 1660,    0, 1660,    0,
        0, 1660, 1660,    0, 1660, 1660, 1660,    0,    0, 1660,
        0, 1660, 1660, 1660, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1662,    0,    0,
        0, 1662,    0, 1662, 1662, 1663, 1663, 1663,    0, 1663,
        0,    0, 1663,    0,    0, 1663, 1663, 1663, 1663, 1663,
     1664,    0,    0, 1664,    0, 1664,    0, 1664, 1664,    0,

        0, 1664, 1664, 1664, 1664,    0, 1664, 1664, 1664,    0,
     1664, 1664, 1664, 1665, 1665,    0, 1665, 1665, 1665, 1665,
     1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
     1665, 1665, 1665, 1665, 1665, 1665, 1666, 1666,    0, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1669,    0, 1669,    0,    0, 1669, 1669,    0,
     1669, 1669, 1669,    0,    0, 1669, 1669, 1669, 1669, 1669,

     1670,    0, 1670,    0,    0,    0, 1670,    0, 1670, 1670,
     1671, 1671,    0,    0, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1673,    0, 1673,    0,    0, 1673, 1673,
     1673,    0, 1673, 1673,    0, 1673, 1673, 1673, 1673, 1673,
     1673, 1674,    0, 1674,    0,    0, 1674, 1674, 1674,    0,
     1674, 1674,    0, 1674, 1674, 1674, 1674, 1674, 1674, 1675,
        0, 1675,    0,    0, 1675, 1675, 1675,    0, 1675, 1675,
        0, 1675, 1675, 1675, 1675, 1675, 1675, 1676,    0, 1676,
        0,    0, 1676, 1676,    0,    0, 1676, 1676,    0,    0,

     1676,    0, 1676, 1676, 1676, 1677,    0, 1677,    0,    0,
     1677, 1677, 1677,    0, 1677, 1677,    0, 1677, 1677, 1677,
     1677, 1677, 1677, 1678,    0, 1678,    0,    0, 1678, 1678,
     1678,    0, 1678, 1678,    0, 1678, 1678,    0, 1678, 1678,
     1678, 1679,    0, 1679,    0,    0, 1679, 1679, 1679,    0,
     1679, 1679,    0, 1679, 1679, 1679, 1679, 1679, 1679, 1680,
        0, 1680,    0,    0, 1680, 1680, 1680,    0, 1680, 1680,
        0, 1680, 1680, 1680, 1680, 1680, 1680, 1681,    0, 1681,
        0,    0, 1681, 1681,    0,    0, 1681,    0,    0,    0,
     1681, 1681, 1681, 1681, 1681, 1682,    0, 1682,    0,    0,

     1682, 1682, 1682,    0, 1682, 1682,    0, 1682, 1682, 1682,
     1682, 1682, 1682, 1683,    0, 1683,    0,    0, 1683, 1683,
     1683, 1683, 1683, 1683,    0, 1683, 1683, 1683, 1683, 1683,
     1683, 1684,    0, 1684,    0,    0, 1684, 1684, 1684, 1684,
     1684, 1684,    0, 1684, 1684, 1684, 1684, 1684, 1684, 1685,
        0, 1685,    0,    0, 1685, 1685, 1685, 1685, 1685, 1685,
        0, 1685, 1685, 1685, 1685, 1685, 1685, 1686,    0, 1686,
        0,    0, 1686, 1686,    0, 1686, 1686, 1686,    0,    0,
     1686,    0, 1686, 1686, 1686, 1687,    0, 1687,    0,    0,
     1687, 1687, 1687, 1687, 1687, 1687,    0, 1687, 1687, 1687,

     1687, 1687, 1687, 1688,    0, 1688,    0,    0, 1688, 1688,
     1688, 1688, 1688, 1688,    0, 1688, 1688,    0, 1688, 1688,
     1688, 1689,    0, 1689,    0,    0, 1689, 1689, 1689, 1689,
     1689, 1689,    0, 1689, 1689, 1689, 1689, 1689, 1689, 1690,
        0, 1690,    0,    0, 1690, 1690, 1690, 1690, 1690, 1690,
        0, 1690, 1690, 1690, 1690, 1690, 1690, 1691,    0, 1691,
        0,    0, 1691, 1691,    0, 1691, 1691,    0,    0,    0,
     1691, 1691, 1691, 1691, 1691, 1692,    0, 1692,    0,    0,
     1692, 1692, 1692, 1692, 1692, 1692,    0, 1692, 1692, 1692,
     1692, 1692, 1692, 1695,    0,    0,    0, 1695,    0, 1695,

     1695, 1696,    0,    0,    0, 1696,    0, 1696, 1696, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1698,    0, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1698, 1698, 1699,    0, 1699,    0,    0,    0, 1699,    0,
     1699, 1699, 1700,    0,    0, 1700,    0, 1700,    0, 1700,
     1700,    0,    0, 1700, 1700, 1700, 1700,    0, 1700, 1700,
     1700,    0, 1700, 1700, 1700, 1702, 1702,    0, 1702, 1702,
     1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702,
     1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1703, 1703,
        0,    0,    0, 1703, 1703, 1703, 1703, 1703, 1703, 1703,

     1703, 1703, 1703, 1703, 1703,    0, 1703, 1703, 1703, 1703,
     1703, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
     1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
     1704, 1704, 1704, 1704, 1705,    0,    0,    0, 1705,    0,
     1705, 1705, 1706,    0,    0,    0, 1706,    0, 1706, 1706,
     1708,    0, 1708,    0,    0, 1708, 1708,    0, 1708, 1708,
     1708,    0,    0, 1708, 1708, 1708, 1708, 1708, 1709,    0,
     1709,    0,    0,    0, 1709,    0, 1709, 1709, 1711,    0,
     1711,    0,    0, 1711, 1711,    0,    0, 1711, 1711,    0,
     1711, 1711,    0, 1711, 1711, 1711, 1712,    0, 1712,    0,

        0, 1712, 1712, 1712,    0, 1712, 1712,    0, 1712, 1712,
     1712, 1712, 1712, 1712, 1713,    0, 1713,    0,    0, 1713,
     1713, 1713,    0, 1713, 1713,    0, 1713, 1713, 1713, 1713,
     1713, 1713, 1714,    0, 1714,    0,    0, 1714, 1714, 1714,
        0, 1714, 1714,    0, 1714, 1714, 1714, 1714, 1714, 1714,
     1715,    0, 1715,    0,    0, 1715, 1715, 1715,    0, 1715,
     1715,    0, 1715, 1715, 1715, 1715, 1715, 1715, 1716,    0,
     1716,    0,    0, 1716, 1716,    0,    0, 1716, 1716,    0,
        0, 1716, 1716, 1716, 1716, 1716, 1717,    0, 1717,    0,
        0, 1717, 1717,    0,    0, 1717,    0,    0,    0, 1717,

     1717, 1717, 1717, 1717, 1718,    0, 1718,    0,    0, 1718,
     1718, 1718,    0, 1718, 1718,    0, 1718, 1718, 1718, 1718,
     1718, 1718, 1719,    0, 1719,    0,    0, 1719, 1719, 1719,
        0, 1719, 1719,    0, 1719, 1719, 1719, 1719, 1719, 1719,
     1720,    0, 1720,    0,    0, 1720, 1720,    0,    0, 1720,
     1720,    0,    0, 1720, 1720, 1720, 1720, 1720, 1721,    0,
     1721,    0,    0, 1721, 1721, 1721,    0, 1721, 1721,    0,
     1721, 1721, 1721, 1721, 1721, 1721, 1722,    0, 1722,    0,
        0, 1722, 1722,    0,    0, 1722,    0,    0,    0, 1722,
     1722, 1722, 1722, 1722, 1723,    0, 1723,    0,    0, 1723,

     1723,    0,    0, 1723, 1723,    0,    0, 1723,    0, 1723,
     1723, 1723, 1724,    0, 1724,    0,    0, 1724, 1724, 1724,
        0, 1724, 1724,    0, 1724, 1724, 1724, 1724, 1724, 1724,
     1725,    0, 1725,    0,    0, 1725, 1725, 1725,    0, 1725,
     1725,    0, 1725, 1725, 1725, 1725, 1725, 1725, 1726,    0,
     1726,    0,    0, 1726, 1726,    0,    0, 1726,    0,    0,
        0, 1726, 1726, 1726, 1726, 1726, 1727,    0, 1727,    0,
        0, 1727, 1727,    0,    0, 1727,    0,    0,    0, 1727,
     1727, 1727, 1727, 1727, 1728,    0, 1728,    0,    0, 1728,
     1728, 1728,    0, 1728, 1728,    0, 1728, 1728, 1728, 1728,

     1728, 1728, 1729,    0, 1729,    0,    0, 1729, 1729, 1729,
        0, 1729, 1729,    0, 1729, 1729, 1729, 1729, 1729, 1729,
     1730,    0, 1730,    0,    0, 1730, 1730,    0, 1730, 1730,
     1730,    0, 1730, 1730,    0, 1730, 1730, 1730, 1731,    0,
     1731,    0,    0, 1731, 1731, 1731, 1731, 1731, 1731,    0,
     1731, 1731, 1731, 1731, 1731, 1731, 1732,    0, 1732,    0,
        0, 1732, 1732, 1732, 1732, 1732, 1732,    0, 1732, 1732,
     1732, 1732, 1732, 1732, 1733,    0, 1733,    0,    0, 1733,
     1733, 1733, 1733, 1733, 1733,    0, 1733, 1733, 1733, 1733,
     1733, 1733, 1734,    0, 1734,    0,    0, 1734, 1734, 1734,

     1734, 1734, 1734,    0, 1734, 1734, 1734, 1734, 1734, 1734,
     1735,    0, 1735,    0,    0, 1735, 1735,    0, 1735, 1735,
     1735,    0,    0, 1735, 1735, 1735, 1735, 1735, 1736,    0,
     1736,    0,    0, 1736, 1736,    0, 1736, 1736,    0,    0,
        0, 1736, 1736, 1736, 1736, 1736, 1737,    0, 1737,    0,
        0, 1737, 1737, 1737, 1737, 1737, 1737,    0, 1737, 1737,
     1737, 1737, 1737, 1737, 1738,    0, 1738,    0,    0, 1738,
     1738, 1738, 1738, 1738, 1738,    0, 1738, 1738, 1738, 1738,
     1738, 1738, 1739,    0, 1739,    0,    0, 1739, 1739,    0,
     1739, 1739, 1739,    0,    0, 1739, 1739, 1739, 1739, 1739,

     1740,    0, 1740,    0,    0, 1740, 1740, 1740, 1740, 1740,
     1740,    0, 1740, 1740, 1740, 1740, 1740, 1740, 1741,    0,
     1741,    0,    0, 1741, 1741,    0, 1741, 1741,    0,    0,
        0, 1741, 1741, 1741, 1741, 1741, 1742,    0, 1742,    0,
        0, 1742, 1742,    0, 1742, 1742, 1742,    0,    0, 1742,
        0, 1742, 1742, 1742, 1743,    0, 1743,    0,    0, 1743,
     1743, 1743, 1743, 1743, 1743,    0, 1743, 1743, 1743, 1743,
     1743, 1743, 1744,    0, 1744,    0,    0, 1744, 1744, 1744,
     1744, 1744, 1744,    0, 1744, 1744, 1744, 1744, 1744, 1744,
     1745,    0, 1745,    0,    0, 1745, 1745,    0, 1745, 1745,

        0,    0,    0, 1745, 1745, 1745, 1745, 1745, 1746,    0,
     1746,    0,    0, 1746, 1746,    0, 1746, 1746,    0,    0,
        0, 1746, 1746, 1746, 1746, 1746, 1747,    0, 1747,    0,
        0, 1747, 1747, 1747, 1747, 1747, 1747,    0, 1747, 1747,
     1747, 1747, 1747, 1747, 1748,    0, 1748,    0,    0, 1748,
     1748, 1748, 1748, 1748, 1748,    0, 1748, 1748, 1748, 1748,
     1748, 1748, 1752,    0,    0,    0, 1752,    0, 1752, 1752,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754,    0, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1755,    0,    0, 1755,    0, 1755,    0,

     1755, 1755,    0,    0, 1755, 1755, 1755, 1755,    0, 1755,
     1755, 1755,    0, 1755, 1755, 1755, 1758,    0,    0, 1758,
        0,    0,    0, 1758,    0, 1758, 1758, 1759, 1759, 1759,
     1759, 1759,    0, 1759, 1759, 1759, 1759,    0,    0, 1759,
        0,    0, 1759, 1759, 1759,    0, 1759,    0,    0, 1759,
     1760,    0,    0, 1760, 1760,    0, 1760,    0,    0, 1760,
     1760,    0, 1760, 1760, 1760,    0,    0, 1760, 1760, 1760,
     1760, 1760, 1761,    0, 1761,    0,    0,    0, 1761,    0,
     1761, 1761, 1762,    0, 1762,    0,    0, 1762, 1762,    0,
        0, 1762, 1762,    0,    0, 1762, 1762, 1762, 1762, 1762,

     1763,    0, 1763,    0,    0, 1763, 1763, 1763,    0, 1763,
     1763,    0, 1763, 1763,    0, 1763, 1763, 1763, 1764,    0,
     1764,    0,    0, 1764, 1764, 1764,    0, 1764, 1764,    0,
     1764, 1764, 1764, 1764, 1764, 1764, 1765,    0, 1765,    0,
        0, 1765, 1765, 1765,    0, 1765, 1765,    0, 1765, 1765,
     1765, 1765, 1765, 1765, 1766,    0, 1766,    0,    0, 1766,
     1766, 1766,    0, 1766, 1766,    0, 1766, 1766, 1766, 1766,
     1766, 1766, 1767,    0, 1767,    0,    0, 1767, 1767,    0,
        0, 1767, 1767,    0,    0, 1767, 1767, 1767, 1767, 1767,
     1768,    0, 1768,    0,    0, 1768, 1768,    0,    0, 1768,

        0,    0,    0, 1768, 1768, 1768, 1768, 1768, 1769,    0,
     1769,    0,    0, 1769, 1769,    0,    0, 1769,    0,    0,
        0, 1769, 1769, 1769, 1769, 1769, 1770,    0, 1770,    0,
        0, 1770, 1770, 1770,    0, 1770, 1770,    0, 1770, 1770,
     1770, 1770, 1770, 1770, 1771,    0, 1771,    0,    0, 1771,
     1771, 1771,    0, 1771, 1771,    0, 1771, 1771, 1771, 1771,
     1771, 1771, 1772,    0, 1772,    0,    0, 1772, 1772,    0,
        0, 1772,    0,    0,    0, 1772, 1772, 1772, 1772, 1772,
     1773,    0, 1773,    0,    0, 1773, 1773,    0,    0, 1773,
        0,    0,    0, 1773, 1773, 1773, 1773, 1773, 1774,    0,

     1774,    0,    0, 1774, 1774,    0,    0, 1774,    0,    0,
        0, 1774, 1774, 1774, 1774, 1774, 1775,    0, 1775,    0,
        0, 1775, 1775,    0,    0, 1775,    0,    0,    0, 1775,
     1775, 1775, 1775, 1775, 1776,    0, 1776,    0,    0, 1776,
     1776,    0,    0, 1776, 1776,    0,    0, 1776, 1776, 1776,
     1776, 1776, 1777,    0, 1777,    0,    0, 1777, 1777, 1777,
        0, 1777, 1777,    0, 1777, 1777, 1777, 1777, 1777, 1777,
     1778,    0, 1778,    0,    0, 1778, 1778, 1778,    0, 1778,
     1778,    0, 1778, 1778, 1778, 1778, 1778, 1778, 1779,    0,
     1779,    0,    0, 1779, 1779, 1779,    0, 1779, 1779,    0,

     1779, 1779, 1779, 1779, 1779, 1779, 1780,    0, 1780,    0,
        0, 1780, 1780, 1780,    0, 1780, 1780,    0, 1780, 1780,
     1780, 1780, 1780, 1780, 1781,    0, 1781,    0,    0, 1781,
     1781,    0,    0, 1781, 1781,    0,    0, 1781,    0, 1781,
     1781, 1781, 1782,    0, 1782,    0,    0, 1782, 1782,    0,
        0, 1782,    0,    0,    0, 1782, 1782, 1782, 1782, 1782,
     1783,    0, 1783,    0,    0, 1783, 1783, 1783,    0, 1783,
     1783,    0, 1783, 1783, 1783, 1783, 1783, 1783, 1784,    0,
     1784,    0,    0, 1784, 1784,    0, 1784, 1784, 1784,    0,
        0, 1784, 1784, 1784, 1784, 1784, 1785,    0, 1785,    0,

        0, 1785, 1785, 1785, 1785, 1785, 1785,    0, 1785, 1785,
        0, 1785, 1785, 1785, 1786,    0, 1786,    0,    0, 1786,
     1786, 1786, 1786, 1786, 1786,    0, 1786, 1786, 1786, 1786,
     1786, 1786, 1787,    0, 1787,    0,    0, 1787, 1787, 1787,
     1787, 1787, 1787,    0, 1787, 1787, 1787, 1787, 1787, 1787,
     1788,    0, 1788,    0,    0, 1788, 1788, 1788, 1788, 1788,
     1788,    0, 1788, 1788, 1788, 1788, 1788, 1788, 1789,    0,
     1789,    0,    0, 1789, 1789,    0, 1789, 1789, 1789,    0,
        0, 1789, 1789, 1789, 1789, 1789, 1790,    0, 1790,    0,
        0, 1790, 1790,    0, 1790, 1790,    0,    0,    0, 1790,

     1790, 1790, 1790, 1790, 1791,    0, 1791,    0,    0, 1791,
     1791,    0, 1791, 1791,    0,    0,    0, 1791, 1791, 1791,
     1791, 1791, 1792,    0, 1792,    0,    0, 1792, 1792, 1792,
     1792, 1792, 1792,    0, 1792, 1792, 1792, 1792, 1792, 1792,
     1793,    0, 1793,    0,    0, 1793, 1793, 1793, 1793, 1793,
     1793,    0, 1793, 1793, 1793, 1793, 1793, 1793, 1794,    0,
     1794,    0,    0, 1794, 1794,    0, 1794, 1794,    0,    0,
        0, 1794, 1794, 1794, 1794, 1794, 1795,    0, 1795,    0,
        0, 1795, 1795,    0, 1795, 1795,    0,    0,    0, 1795,
     1795, 1795, 1795, 1795, 1796,    0, 1796,    0,    0, 1796,

     1796,    0, 1796, 1796,    0,    0,    0, 1796, 1796, 1796,
     1796, 1796, 1797,    0, 1797,    0,    0, 1797, 1797,    0,
     1797, 1797,    0,    0,    0, 1797, 1797, 1797, 1797, 1797,
     1798,    0, 1798,    0,    0, 1798, 1798,    0, 1798, 1798,
     1798,    0,    0, 1798, 1798, 1798, 1798, 1798, 1799,    0,
     1799,    0,    0, 1799, 1799, 1799, 1799, 1799, 1799,    0,
     1799, 1799, 1799, 1799, 1799, 1799, 1800,    0, 1800,    0,
        0, 1800, 1800, 1800, 1800, 1800, 1800,    0, 1800, 1800,
     1800, 1800, 1800, 1800, 1801,    0, 1801,    0,    0, 1801,
     1801, 1801, 1801, 1801, 1801,    0, 1801, 1801, 1801, 1801,

     1801, 1801, 1802,    0, 1802,    0,    0, 1802, 1802, 1802,
     1802, 1802, 1802,    0, 1802, 1802, 1802, 1802, 1802, 1802,
     1803,    0, 1803,    0,    0, 1803, 1803,    0, 1803, 1803,
     1803,    0,    0, 1803,    0, 1803, 1803, 1803, 1804,    0,
     1804,    0,    0, 1804, 1804,    0, 1804, 1804,    0,    0,
        0, 1804, 1804, 1804, 1804, 1804, 1805,    0, 1805,    0,
        0, 1805, 1805, 1805, 1805, 1805, 1805,    0, 1805, 1805,
     1805, 1805, 1805, 1805, 1807,    0,    0,    0, 1807,    0,
     1807, 1807, 1808,    0,    0, 1808,    0, 1808,    0, 1808,
     1808,    0,    0, 1808, 1808, 1808, 1808,    0, 1808, 1808,

     1808,    0, 1808, 1808, 1808, 1811, 1811, 1811, 1811, 1811,
        0, 1811, 1811, 1811, 1811,    0,    0, 1811,    0,    0,
     1811, 1811, 1811,    0, 1811,    0, 1811, 1811, 1812, 1812,
     1812, 1812, 1812,    0, 1812, 1812, 1812, 1812,    0,    0,
     1812,    0,    0, 1812, 1812, 1812,    0, 1812, 1812,    0,
     1812, 1813,    0, 1813,    0,    0, 1813, 1813,    0, 1813,
     1813, 1813,    0,    0, 1813, 1813, 1813, 1813, 1813, 1814,
        0, 1814,    0,    0,    0, 1814,    0, 1814, 1814, 1815,
        0, 1815,    0,    0, 1815, 1815, 1815,    0, 1815, 1815,
        0, 1815, 1815, 1815, 1815, 1815, 1815, 1816,    0, 1816,

        0,    0, 1816, 1816, 1816,    0, 1816, 1816,    0, 1816,
     1816, 1816, 1816, 1816, 1816, 1817,    0, 1817,    0,    0,
     1817, 1817,    0,    0, 1817,    0,    0,    0, 1817, 1817,
     1817, 1817, 1817, 1818,    0, 1818,    0,    0, 1818, 1818,
        0,    0, 1818,    0,    0,    0, 1818, 1818, 1818, 1818,
     1818, 1819,    0, 1819,    0,    0, 1819, 1819,    0,    0,
     1819,    0,    0,    0, 1819, 1819, 1819, 1819, 1819, 1820,
        0, 1820,    0,    0, 1820, 1820,    0,    0, 1820,    0,
        0,    0, 1820, 1820, 1820, 1820, 1820, 1821,    0, 1821,
        0,    0, 1821, 1821,    0,    0, 1821, 1821,    0,    0,

     1821, 1821, 1821, 1821, 1821, 1822,    0, 1822,    0,    0,
     1822, 1822, 1822,    0, 1822, 1822,    0, 1822, 1822, 1822,
     1822, 1822, 1822, 1823,    0, 1823,    0,    0, 1823, 1823,
     1823,    0, 1823, 1823,    0, 1823, 1823, 1823, 1823, 1823,
     1823, 1824,    0, 1824,    0,    0, 1824, 1824, 1824,    0,
     1824, 1824,    0, 1824, 1824, 1824, 1824, 1824, 1824, 1825,
        0, 1825,    0,    0, 1825, 1825,    0,    0, 1825, 1825,
        0,    0, 1825, 1825, 1825, 1825, 1825, 1826,    0, 1826,
        0,    0, 1826, 1826, 1826,    0, 1826, 1826,    0, 1826,
     1826, 1826, 1826, 1826, 1826, 1827,    0, 1827,    0,    0,

     1827, 1827, 1827,    0, 1827, 1827,    0, 1827, 1827, 1827,
     1827, 1827, 1827, 1828,    0, 1828,    0,    0, 1828, 1828,
     1828,    0, 1828, 1828,    0, 1828, 1828, 1828, 1828, 1828,
     1828, 1829,    0, 1829,    0,    0, 1829, 1829, 1829,    0,
     1829, 1829,    0, 1829, 1829, 1829, 1829, 1829, 1829, 1830,
        0, 1830,    0,    0, 1830, 1830,    0,    0, 1830, 1830,
        0,    0, 1830, 1830, 1830, 1830, 1830, 1831,    0, 1831,
        0,    0, 1831, 1831,    0,    0, 1831,    0,    0,    0,
     1831, 1831, 1831, 1831, 1831, 1832,    0, 1832,    0,    0,
     1832, 1832, 1832, 1832, 1832, 1832,    0, 1832, 1832, 1832,

     1832, 1832, 1832, 1833,    0, 1833,    0,    0, 1833, 1833,
     1833, 1833, 1833, 1833,    0, 1833, 1833, 1833, 1833, 1833,
     1833, 1834,    0, 1834,    0,    0, 1834, 1834,    0, 1834,
     1834,    0,    0,    0, 1834, 1834, 1834, 1834, 1834, 1835,
        0, 1835,    0,    0, 1835, 1835,    0, 1835, 1835,    0,
        0,    0, 1835, 1835, 1835, 1835, 1835, 1836,    0, 1836,
        0,    0, 1836, 1836,    0, 1836, 1836,    0,    0,    0,
     1836, 1836, 1836, 1836, 1836, 1837,    0, 1837,    0,    0,
     1837, 1837,    0, 1837, 1837,    0,    0,    0, 1837, 1837,
     1837, 1837, 1837, 1838,    0, 1838,    0,    0, 1838, 1838,

        0, 1838, 1838, 1838,    0,    0, 1838, 1838, 1838, 1838,
     1838, 1839,    0, 1839,    0,    0, 1839, 1839, 1839, 1839,
     1839, 1839,    0, 1839, 1839, 1839, 1839, 1839, 1839, 1840,
        0, 1840,    0,    0, 1840, 1840, 1840, 1840, 1840, 1840,
        0, 1840, 1840, 1840, 1840, 1840, 1840, 1841,    0, 1841,
        0,    0, 1841, 1841, 1841, 1841, 1841, 1841,    0, 1841,
     1841, 1841, 1841, 1841, 1841, 1842,    0, 1842,    0,    0,
     1842, 1842,    0, 1842, 1842, 1842,    0,    0, 1842, 1842,
     1842, 1842, 1842, 1843,    0, 1843,    0,    0, 1843, 1843,
     1843, 1843, 1843, 1843,    0, 1843, 1843, 1843, 1843, 1843,

     1843, 1844,    0, 1844,    0,    0, 1844, 1844, 1844, 1844,
     1844, 1844,    0, 1844, 1844, 1844, 1844, 1844, 1844, 1845,
        0, 1845,    0,    0, 1845, 1845, 1845, 1845, 1845, 1845,
        0, 1845, 1845, 1845, 1845, 1845, 1845, 1846,    0, 1846,
        0,    0, 1846, 1846, 1846, 1846, 1846, 1846,    0, 1846,
     1846, 1846, 1846, 1846, 1846, 1847,    0, 1847,    0,    0,
     1847, 1847,    0, 1847, 1847, 1847,    0,    0, 1847, 1847,
     1847, 1847, 1847, 1848,    0, 1848,    0,    0, 1848, 1848,
        0, 1848, 1848,    0,    0,    0, 1848, 1848, 1848, 1848,
     1848, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849,

     1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849,
     1849, 1849, 1849, 1849, 1852, 1852, 1852, 1852, 1852,    0,
     1852, 1852, 1852, 1852,    0,    0, 1852,    0,    0, 1852,
     1852, 1852,    0, 1852, 1852,    0, 1852, 1853, 1853, 1853,
     1853, 1853,    0, 1853, 1853, 1853, 1853,    0,    0, 1853,
        0,    0, 1853, 1853, 1853,    0, 1853,    0,    0, 1853,
     1854, 1854, 1854, 1854, 1854,    0, 1854, 1854, 1854, 1854,
        0,    0, 1854,    0,    0, 1854, 1854, 1854,    0, 1854,
        0,    0, 1854, 1855, 1855, 1855, 1855, 1855,    0, 1855,
     1855, 1855, 1855,    0,    0, 1855,    0,    0, 1855, 1855,

     1855,    0, 1855,    0,    0, 1855, 1856, 1856, 1856, 1856,
     1856, 1856, 1856, 1856, 1856, 1856, 1856, 1856, 1856, 1856,
     1856, 1856, 1856, 1856, 1856, 1856, 1856, 1856, 1856, 1857,
        0, 1857,    0,    0, 1857, 1857, 1857,    0, 1857, 1857,
        0, 1857, 1857, 1857, 1857, 1857, 1857, 1858,    0, 1858,
        0,    0, 1858, 1858, 1858,    0, 1858, 1858,    0, 1858,
     1858, 1858, 1858, 1858, 1858, 1859,    0, 1859,    0,    0,
     1859, 1859, 1859,    0, 1859, 1859,    0, 1859, 1859, 1859,
     1859, 1859, 1859, 1860,    0, 1860,    0,    0, 1860, 1860,
     1860,    0, 1860, 1860,    0, 1860, 1860, 1860, 1860, 1860,

     1860, 1861,    0, 1861,    0,    0, 1861, 1861,    0,    0,
     1861, 1861,    0,    0, 1861, 1861, 1861, 1861, 1861, 1862,
        0, 1862,    0,    0, 1862, 1862, 1862,    0, 1862, 1862,
        0, 1862, 1862, 1862, 1862, 1862, 1862, 1863,    0, 1863,
        0,    0, 1863, 1863, 1863,    0, 1863, 1863,    0, 1863,
     1863, 1863, 1863, 1863, 1863, 1864,    0, 1864,    0,    0,
     1864, 1864, 1864,    0, 1864, 1864,    0, 1864, 1864, 1864,
     1864, 1864, 1864, 1865,    0, 1865,    0,    0, 1865, 1865,
        0,    0, 1865, 1865,    0,    0, 1865, 1865, 1865, 1865,
     1865, 1866,    0, 1866,    0,    0, 1866, 1866,    0,    0,

     1866,    0,    0,    0, 1866, 1866, 1866, 1866, 1866, 1867,
        0, 1867,    0,    0, 1867, 1867,    0,    0, 1867,    0,
        0,    0, 1867, 1867, 1867, 1867, 1867, 1868,    0, 1868,
        0,    0, 1868, 1868, 1868, 1868, 1868, 1868,    0, 1868,
     1868, 1868, 1868, 1868, 1868, 1869,    0, 1869,    0,    0,
     1869, 1869, 1869, 1869, 1869, 1869,    0, 1869, 1869, 1869,
     1869, 1869, 1869, 1870,    0, 1870,    0,    0, 1870, 1870,
     1870, 1870, 1870, 1870,    0, 1870, 1870, 1870, 1870, 1870,
     1870, 1871,    0, 1871,    0,    0, 1871, 1871, 1871, 1871,
     1871, 1871,    0, 1871, 1871, 1871, 1871, 1871, 1871, 1872,

        0, 1872,    0,    0, 1872, 1872,    0, 1872, 1872, 1872,
        0,    0, 1872, 1872, 1872, 1872, 1872, 1873,    0, 1873,
        0,    0, 1873, 1873, 1873, 1873, 1873, 1873,    0, 1873,
     1873, 1873, 1873, 1873, 1873, 1874,    0, 1874,    0,    0,
     1874, 1874, 1874, 1874, 1874, 1874,    0, 1874, 1874, 1874,
     1874, 1874, 1874, 1875,    0, 1875,    0,    0, 1875, 1875,
     1875, 1875, 1875, 1875,    0, 1875, 1875, 1875, 1875, 1875,
     1875, 1876,    0, 1876,    0,    0, 1876, 1876,    0, 1876,
     1876, 1876,    0,    0, 1876, 1876, 1876, 1876, 1876, 1877,
        0, 1877,    0,    0, 1877, 1877,    0, 1877, 1877,    0,

        0,    0, 1877, 1877, 1877, 1877, 1877, 1878,    0, 1878,
        0,    0, 1878, 1878,    0, 1878, 1878,    0,    0,    0,
     1878, 1878, 1878, 1878, 1878, 1879, 1879, 1879, 1879, 1879,
        0, 1879, 1879, 1879, 1879,    0,    0, 1879,    0,    0,
     1879, 1879, 1879,    0, 1879,    0,    0, 1879, 1880, 1880,
     1880, 1880, 1880,    0, 1880, 1880, 1880, 1880,    0,    0,
     1880,    0,    0, 1880, 1880, 1880,    0, 1880,    0,    0,
     1880, 1881, 1881, 1881, 1881, 1881,    0, 1881, 1881, 1881,
     1881,    0,    0, 1881,    0,    0, 1881, 1881, 1881,    0,
     1881,    0,    0, 1881, 1882,    0, 1882,    0,    0, 1882,

     1882, 1882,    0, 1882, 1882,    0, 1882, 1882, 1882, 1882,
     1882, 1882, 1883,    0, 1883,    0,    0, 1883, 1883, 1883,
        0, 1883, 1883,    0, 1883, 1883, 1883, 1883, 1883, 1883,
     1884,    0, 1884,    0,    0, 1884, 1884, 1884,    0, 1884,
     1884,    0, 1884, 1884, 1884, 1884, 1884, 1884, 1885, 1885,
     1885, 1885, 1885,    0, 1885, 1885, 1885, 1885,    0,    0,
     1885,    0,    0, 1885, 1885, 1885,    0, 1885,    0,    0,
     1885, 1886, 1886, 1886, 1886, 1886,    0, 1886, 1886, 1886,
     1886,    0,    0, 1886,    0,    0, 1886, 1886, 1886,    0,
     1886,    0,    0, 1886, 1887, 1887, 1887, 1887, 1887,    0,

     1887, 1887, 1887, 1887,    0,    0, 1887,    0,    0, 1887,
     1887, 1887,    0, 1887,    0,    0, 1887, 1888, 1888, 1888,
     1888, 1888,    0, 1888, 1888, 1888, 1888,    0,    0, 1888,
        0,    0, 1888, 1888, 1888,    0, 1888,    0,    0, 1888,
     1889, 1889, 1889, 1889, 1889,    0, 1889, 1889, 1889, 1889,
        0,    0, 1889,    0,    0, 1889, 1889, 1889,    0, 1889,
        0,    0, 1889, 1890, 1890, 1890, 1890, 1890,    0, 1890,
     1890, 1890, 1890,    0,    0, 1890,    0,    0, 1890, 1890,
     1890,    0, 1890,    0,    0, 1890, 1891, 1891, 1891, 1891,
     1891,    0, 1891, 1891, 1891, 1891,    0,    0, 1891,    0,

        0, 1891, 1891, 1891,    0, 1891,    0,    0, 1891, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parser.l"
/* Copyright 2009-2021
 * Kaz Kylheku <kaz@kylheku.com>
 * Vancouver, Canada
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#line 29 "parser.l"

#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <stdlib.h>
#include <limits.h>
#include <wchar.h>
#include <signal.h>
#include "config.h"
#include "lib.h"
#include "gc.h"
#include "stream.h"
#include "utf8.h"
#include "signal.h"
#include "unwind.h"
#include "hash.h"
#include "y.tab.h"
#include "parser.h"
#include "txr.h"

#define YY_INPUT(buf, result, max_size)                                 \
  do {                                                                  \
    val self = lit("parser");                                           \
    val n = get_bytes(self, yyextra->stream,                            \
                      coerce(mem_t *, buf), max_size);                  \
    result = c_num(n, self);                                            \
  } while (0)

#define YY_DECL \
  static int yylex_impl(YYSTYPE *yylval_param, yyscan_t yyscanner)

int opt_loglevel = 1;   /* 0 - quiet; 1 - normal; 2 - verbose */

val form_to_ln_hash;

static int directive_tok(scanner_t *yyg, int tok, int state);

#define FLEX_NUM_VERSION 10000*YY_FLEX_MAJOR_VERSION + \
                         100*YY_FLEX_MINOR_VERSION + \
                         YY_FLEX_SUBMINOR_VERSION

#if FLEX_NUM_VERSION < 20509
int yylex_destroy(void)
{
  return 0;
}
#endif

/* Missing prototypes not generated by flex. */
int yyget_column(yyscan_t);
void yyset_column (int column_no, yyscan_t yyscanner);

/* The following function is all that libflex provides.
   By providing it here, we eliminate the need to link libflex. */
#define YY_SKIP_YYWRAP
INLINE int yywrap(yyscan_t scanner)
{
  (void) scanner;
  return 1;
}

void yyerror(scanner_t *scanner, parser_t *parser, const char *s)
{
  yyerrorf(scanner, lit("~a"), string_utf8(s), nao);
  if (parser->prepared_msg) {
    yyerrorf(scanner, lit("~a"), parser->prepared_msg, nao);
    parser->prepared_msg = nil;
  }
}

void yyerrorf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    if (opt_compat && opt_compat <= 114)
      format(std_error, lit("~a: (~a:~d): "), prog_string,
             parser->name, num(parser->lineno), nao);
    else
      format(std_error, lit("~a:~d: "),
             parser->name, num(parser->lineno), nao);

    vformat(std_error, fmt, vl);
    put_char(chr('\n'), std_error);
    va_end (vl);
  }
  parser->errors++;
}

static void yyerrprepf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    set(mkloc(parser->prepared_msg, parser->parser),
        vformat_to_string(fmt, vl));
    va_end (vl);
  }
}

static void out_of_range_float(scanner_t *scanner, val tok)
{
    yyerrorf(scanner, lit("out-of-range floating-point literal: ~a"),
             tok, nao);
}

static wchar_t char_esc(int letter)
{
  switch (letter) {
  case ' ': return L' ';
  case 'a': return L'\a';
  case 'b': return L'\b';
  case 't': return L'\t';
  case 'n': return L'\n';
  case 'v': return L'\v';
  case 'f': return L'\f';
  case 'r': return L'\r';
  case 'e': return 27;
  case '"': return L'"';
  case '\'': return L'\'';
  case '`': return L'`';
  case '/': return L'/';
  case '@': return L'@';
  case '\\': return L'\\';
  }

  internal_error("unhandled escape character");
}

static wchar_t num_esc(scanner_t *scn, char *num)
{
  long val = 0;

  if (num[0] == 'x' || num[0] == 'u') {
    if (strlen(num) > 7)
      yyerror(scn, yyget_extra(scn), "too many digits in hex character escape");
    else
      val = strtol(num + 1, 0, 16);
  } else {
    if (num[0] == 'o')
      num++;
    if (strlen(num) > 8)
      yyerror(scn, yyget_extra(scn), "too many digits in octal character escape");
    else
      val = strtol(num, 0, 8);
  }

  if (val < 0 || val > 0x10FFFF || convert(wchar_t, val) != val) {
    yyerror(scn, yyget_extra(scn), "numeric character escape out of range");
    val = 0;
  }

  return val;
}

static wchar_t *unicode_ident(scanner_t *scn, const char *lex)
{
  wchar_t *wlex = utf8_dup_from(lex), *ptr = wlex, wch;

  while ((wch = *ptr++)) {
    if (wch < 0x1680 || (wch >= 0x3000 && wch < 0xdc00))
      continue;

    if ((wch >= 0xdc00 && wch <= 0xdcff) ||
        (wch >= 0xd800 && wch <= 0xdbff) ||
#if FULL_UNICODE
        (wch >= 0xf0000 && wch <= 0xffffd) ||
        (wch >= 0x100000 && wch <= 0x10fffd) ||
#endif
        (wch >= 0xe000 && wch <= 0xf8ff) ||
        (wch == 0xfffe) ||
        (wch == 0xffff))
    {
      yyerror(scn, yyget_extra(scn),
              "disallowed Unicode character in identifier");
      break;
    }

    switch (wch) {
    case 0x1680: case 0x180e: case 0x2000: case 0x2001: case 0x2002:
    case 0x2003: case 0x2004: case 0x2005: case 0x2006: case 0x2007:
    case 0x2008: case 0x2009: case 0x200a: case 0x2028: case 0x2029:
    case 0x205f: case 0x3000:
      yyerror(scn, yyget_extra(scn),
              "Unicode space occurs in identifier");
      break;
    default:
      continue;
    }

    break;
  }

  return wlex;
}

#line 4018 "lex.yy.c"
#define YY_NO_INPUT 1

#line 4021 "lex.yy.c"

#define INITIAL 0
#define SPECIAL 1
#define BRACED 2
#define NESTED 3
#define REGEX 4
#define SREGEX 5
#define STRLIT 6
#define CHRLIT 7
#define QSILIT 8
#define QSPECIAL 9
#define WLIT 10
#define QWLIT 11
#define BUFLIT 12
#define JSON 13
#define JLIT 14

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE parser_t *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		/* Create the reject buffer large enough to save one state per allowed character. */
		if ( ! yyg->yy_state_buf )
			yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
		if ( ! yyg->yy_state_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 290 "parser.l"


#line 4336 "lex.yy.c"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1646 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1645 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 292 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num(10));
  return NUMBER;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 304 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 2));
  int base;

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 323 "parser.l"
{
  int base = 0;
  val str = string_own(utf8_dup_from(yytext + 2));

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  yyerrorf(yyg, lit("trailing junk in numeric literal: ~a~a~a"),
           chr(yytext[0]), chr(yytext[1]), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 345 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);

  return NUMBER;
}
	YY_BREAK
case 5:
#line 360 "parser.l"
case 6:
#line 361 "parser.l"
case 7:
YY_RULE_SETUP
#line 361 "parser.l"
{
  val str = string_utf8(yytext);

  yyerrorf(yyg, lit("trailing junk in floating-point literal: ~a"), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);

  return NUMBER;
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 377 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);

  return NUMBER;
}
	YY_BREAK
case 9:
#line 392 "parser.l"
case 10:
YY_RULE_SETUP
#line 392 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(10));
  return METANUM;
}
	YY_BREAK
case 11:
#line 404 "parser.l"
case 12:
YY_RULE_SETUP
#line 404 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(16));
  return METANUM;
}
	YY_BREAK
case 13:
#line 416 "parser.l"
case 14:
YY_RULE_SETUP
#line 416 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(8));
  return METANUM;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 427 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(2));
  return METANUM;
}
	YY_BREAK
case 16:
#line 439 "parser.l"
case 17:
#line 440 "parser.l"
case 18:
YY_RULE_SETUP
#line 440 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 19:
#line 457 "parser.l"
case 20:
#line 458 "parser.l"
case 21:
YY_RULE_SETUP
#line 458 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 22:
#line 469 "parser.l"
case 23:
YY_RULE_SETUP
#line 469 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yyerrorf(yyg, lit("bad token: ~a"),
                    string_own(utf8_dup_from(yytext)),
                    nao);
  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 482 "parser.l"
{
  return directive_tok(yyg, ALL, 0);
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 486 "parser.l"
{
  return directive_tok(yyg, SOME, NESTED);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 490 "parser.l"
{
  return directive_tok(yyg, NONE, 0);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 494 "parser.l"
{
  return directive_tok(yyg, MAYBE, 0);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 498 "parser.l"
{
  return directive_tok(yyg, CASES, 0);
}
	YY_BREAK
case 29:
/* rule 29 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 502 "parser.l"
{
  return directive_tok(yyg, BLOCK, NESTED);
}
	YY_BREAK
case 30:
/* rule 30 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 506 "parser.l"
{
  return directive_tok(yyg, CHOOSE, NESTED);
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 510 "parser.l"
{
  return directive_tok(yyg, GATHER, NESTED);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 514 "parser.l"
{
  return directive_tok(yyg, AND, 0);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 518 "parser.l"
{
  return directive_tok(yyg, OR, 0);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 522 "parser.l"
{
  return directive_tok(yyg, END, 0);
}
	YY_BREAK
case 35:
/* rule 35 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 526 "parser.l"
{
  return directive_tok(yyg, COLLECT, NESTED);
}
	YY_BREAK
case 36:
/* rule 36 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 530 "parser.l"
{
  return directive_tok(yyg, COLL, NESTED);
}
	YY_BREAK
case 37:
/* rule 37 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 534 "parser.l"
{
  return directive_tok(yyg, UNTIL, NESTED);
}
	YY_BREAK
case 38:
/* rule 38 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 538 "parser.l"
{
  return directive_tok(yyg, OUTPUT, NESTED);
}
	YY_BREAK
case 39:
/* rule 39 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 542 "parser.l"
{
  return directive_tok(yyg, REPEAT, NESTED);
}
	YY_BREAK
case 40:
/* rule 40 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 546 "parser.l"
{
  return directive_tok(yyg, REP, NESTED);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 550 "parser.l"
{
  return directive_tok(yyg, SINGLE, 0);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 554 "parser.l"
{
  return directive_tok(yyg, FIRST, 0);
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 558 "parser.l"
{
  return directive_tok(yyg, LAST, NESTED);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 562 "parser.l"
{
  return directive_tok(yyg, EMPTY, 0);
}
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 566 "parser.l"
{
  return directive_tok(yyg, MOD, NESTED);
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 570 "parser.l"
{
  return directive_tok(yyg, MODLAST, NESTED);
}
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 574 "parser.l"
{
  return directive_tok(yyg, DEFINE, NESTED);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 578 "parser.l"
{
  return directive_tok(yyg, TRY, 0);
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 582 "parser.l"
{
  return directive_tok(yyg, CATCH, NESTED);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 586 "parser.l"
{
  return directive_tok(yyg, FINALLY, 0);
}
	YY_BREAK
case 51:
/* rule 51 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 590 "parser.l"
{
  return directive_tok(yyg, IF, NESTED);
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 594 "parser.l"
{
  return directive_tok(yyg, ELIF, NESTED);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 598 "parser.l"
{
  return directive_tok(yyg, ELSE, 0);
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 602 "parser.l"
{
  yy_push_state(BRACED, yyscanner);
  yylval->lineno = yyextra->lineno;
  return yytext[0];
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 608 "parser.l"
{
 yy_push_state(NESTED, yyscanner);
 yylval->lineno = yyextra->lineno;
 return yytext[0];
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 614 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 248) ? OLD_AT : '@';
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 619 "parser.l"
{
  yylval->chr = '*';
  return SPLICE;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 624 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 629 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 60:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 638 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space or 0 needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 653 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 662 "parser.l"
{
  /* Eat whitespace in directive */
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 666 "parser.l"
{
  yy_push_state(STRLIT, yyscanner);
  return '"';
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 671 "parser.l"
{
  yy_push_state(CHRLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_BACKSLASH;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 677 "parser.l"
{
  yy_push_state(BUFLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_B_QUOTE;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 683 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_SLASH;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 689 "parser.l"
{
  yy_push_state(QSILIT, yyscanner);
  return '`';
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 694 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WORDS;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 700 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WSPLICE;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 706 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWORDS;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 712 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWSPLICE;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 718 "parser.l"
{
  return '#';
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 722 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_H;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 727 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_S;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 732 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_R;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 737 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_N;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 742 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_T;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 747 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  yy_push_state(JSON, yyscanner);
  return HASH_J;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 753 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_SEMI;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 758 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));
  yylval->val = int_str(str, num(10));
  return HASH_N_EQUALS;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 764 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));
  yylval->val = int_str(str, num(10));
  return HASH_N_HASH;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 770 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 185) ? OLD_DOTDOT : DOTDOT;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 775 "parser.l"
{
  yy_pop_state(yyscanner);
  yylval->lexeme = chk_strdup(L"@");
  return TEXT;
}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 781 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 785 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  return '/';
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 790 "parser.l"
{
  yylval->chr = '.';
  return CONSDOT;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 795 "parser.l"
{
  yylval->chr = '.';
  return LAMBDOT;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 800 "parser.l"
{
  yylval->chr = '.';
  return UREFDOT;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 805 "parser.l"
{
  yylval->chr = '.';
  return '.';
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 810 "parser.l"
{
  yylval->chr = '.';
  return OREFDOT;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 815 "parser.l"
{
  yylval->chr = '.';
  return UOREFDOT;
}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 820 "parser.l"
{
  if (YYSTATE == SPECIAL)
    yy_pop_state(yyscanner);  /* @\ continuation */
  yyextra->lineno++;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 826 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = char_esc(yytext[1]);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);
  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 835 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = num_esc(yyg, yytext + 1);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);

  {
    char lastchar = yytext[yyleng-1];
    if (lastchar == ';' && opt_compat && opt_compat <= 109)
      unput(lastchar);
  }

  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 851 "parser.l"
{
  yyerrorf(yyg, lit("\\x escape without digits"), nao);
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 855 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 859 "parser.l"
{
  /* comment */
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 863 "parser.l"
{
  val ch = chr_str(string_utf8(yytext), zero);
  if (chr_isspace(ch))
    yyerrprepf(yyg, lit("unexpected whitespace character #\\x~,02x"),
               ch, nao);
  else if (chr_isunisp(ch))
    yyerrprepf(yyg, lit("unexpected Unicode space character #\\x~,02x"),
               ch, nao);
  else if (chr_iscntrl(ch))
    yyerrprepf(yyg, lit("unexpected control character #\\x~,02x"),
               ch, nao);
  else
    yyerrprepf(yyg, lit("unexpected character #\\~a"),
               ch, nao);
  return ERRTOK;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 880 "parser.l"
{
  yyerrprepf(yyg, lit("non-UTF-8 byte #x~02x in directive"),
             num(convert(unsigned char, yytext[0])), nao);
  return ERRTOK;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 886 "parser.l"
{
  yylval->chr = '/';
  return (YYSTATE == SREGEX) ? REGCHAR : '/';
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 891 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return REGCHAR;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 896 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext + 1);
  return REGCHAR;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 901 "parser.l"
{
  yylval->chr = yytext[1];
  return REGTOKEN;
}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 906 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 910 "parser.l"
{
  yyextra->lineno++;
  yyerrprepf(yyg, lit("newline in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 916 "parser.l"
{
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return REGCHAR;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 922 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 927 "parser.l"
{
  yylval->chr = yytext[1];
  return REGCHAR;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 932 "parser.l"
{
  if (opt_compat && opt_compat <= 105) {
    yylval->chr = yytext[1];
    return REGCHAR;
  }

  if (yytext[1] == 'x')
    yyerrprepf(yyg, lit("\\x escape without digits in regex"), nao);
  else
    yyerrprepf(yyg, lit("unrecognized escape in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 945 "parser.l"
{
  yyerrprepf(yyg, lit("dangling backslash in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 950 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yylval->lexeme = chk_strdup(wchr);
    return TEXT;
  }
  yylval->chr = wchr[0];
  return REGCHAR;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 960 "parser.l"
{
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return REGCHAR;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 965 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SPACE;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 970 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return TEXT;
}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 975 "parser.l"
{
  yyextra->lineno++;
  return '\n';
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 980 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
  return '*';
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 985 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 989 "parser.l"
{
  /* eat whole line comment */
  yyextra->lineno++;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 994 "parser.l"
{
  /* comment to end of line */
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 998 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1003 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1008 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1013 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 1018 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 1022 "parser.l"
{
  yyextra->lineno++;

  if (!opt_compat || opt_compat > 109)
    return ' ';
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1030 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext+1);
  return LITCHAR;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1035 "parser.l"
{
  yyerrorf(yyg, lit("\\x escape without digits"), nao);
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1039 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape: \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1043 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext);
  return LITCHAR;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1048 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1053 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK; /* hack */
}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1058 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1065 "parser.l"
{
  yyerrprepf(yyg, lit("newline in character literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 1072 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string quasiliteral"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 1079 "parser.l"
{
  yyextra->lineno++;

  if (opt_compat && opt_compat <= 109)
    return ' ';

  yyerrprepf(yyg, lit("newline in word list literal"), nao);
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 136:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1090 "parser.l"
{
  yy_push_state(QSPECIAL, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1095 "parser.l"
{
  yyerrprepf(yyg, lit("malformed @ expression in quasiliteral"), nao);
  return ERRTOK;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1100 "parser.l"
{
  return ' ';
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1104 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1109 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1114 "parser.l"
{
  wchar_t ch0, ch1;
  yytext[6] = 0;
  ch0 = num_esc(yyg, yytext + 1);
  ch1 = num_esc(yyg, yytext + 7);
  yylval->chr = ((ch0 - 0xD800) << 10 | (ch1 - 0xDC00)) + 0x10000;
  return LITCHAR;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1123 "parser.l"
{
  wchar_t ch = num_esc(yyg, yytext + 1);
  yylval->chr = if3(ch, ch, 0xDC00);
  return LITCHAR;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1129 "parser.l"
{
  yyerrorf(yyg, lit("JSON \\u escape needs four digits"), nao);
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1133 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized JSON escape: \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 1137 "parser.l"
{
  yyerrprepf(yyg, lit("newline in JSON string"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1144 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yylval->lexeme = chk_strdup(wchr);
    return TEXT;
  }
  yylval->chr = wchr[0];
  return LITCHAR;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1154 "parser.l"
{
  yylval->chr = strtol(yytext, 0, 16);
  return LITCHAR;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1159 "parser.l"
{
  return '\'';
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1163 "parser.l"
{
}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 1166 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1170 "parser.l"
{
  yyerrorf(yyg, lit("bad character ~s in buffer literal"),
           chr(yytext[0]), nao);
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1175 "parser.l"
{
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return LITCHAR;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1180 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));
  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);
  return NUMBER;
}
	YY_BREAK
case 154:
/* rule 154 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1187 "parser.l"
{
  yylval->val = t;
  return JSKW;
}
	YY_BREAK
case 155:
/* rule 155 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1192 "parser.l"
{
  yylval->val = nil;
  return JSKW;
}
	YY_BREAK
case 156:
/* rule 156 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1197 "parser.l"
{
  yylval->val = null_s;
  return JSKW;
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1202 "parser.l"
{
  if (strcmp("true", yytext) == 0) {
    yylval->val = t;
    return JSKW;
  }

  if (strcmp("false", yytext) == 0) {
    yylval->val = nil;
    return JSKW;
  }

  if (strcmp("null", yytext) == 0) {
    yylval->val = null_s;
    return JSKW;
  }

  {
    val str = string_own(utf8_dup_from(yytext));
    yyerrorf(yyg, lit("unrecognized JSON syntax: ~a"), str, nao);
  }
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1224 "parser.l"
{
  yy_push_state(JLIT, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1229 "parser.l"
{
  yy_push_state(NESTED, yyscanner);
  return JSPLICE;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1234 "parser.l"
{
  yy_push_state(NESTED, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1239 "parser.l"
{
  return yytext[0];
}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 1243 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1247 "parser.l"
{
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1250 "parser.l"
{
  yyerrorf(yyg, lit("bad character ~s in JSON literal"),
           chr(yytext[0]), nao);
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1255 "parser.l"
{
  yy_push_state(JLIT, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1260 "parser.l"
ECHO;
	YY_BREAK
#line 5989 "lex.yy.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(SPECIAL):
			case YY_STATE_EOF(BRACED):
			case YY_STATE_EOF(NESTED):
			case YY_STATE_EOF(REGEX):
			case YY_STATE_EOF(SREGEX):
			case YY_STATE_EOF(STRLIT):
			case YY_STATE_EOF(CHRLIT):
			case YY_STATE_EOF(QSILIT):
			case YY_STATE_EOF(QSPECIAL):
			case YY_STATE_EOF(WLIT):
			case YY_STATE_EOF(QWLIT):
			case YY_STATE_EOF(BUFLIT):
			case YY_STATE_EOF(JSON):
			case YY_STATE_EOF(JLIT):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1646 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1646 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1645);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1260 "parser.l"


static int directive_tok(scanner_t *yyscanner, int tok, int state)
{
  struct yyguts_t *yyg = convert(struct yyguts_t *, yyscanner);
  char *pstart = yytext + 1 + strspn(yytext + 1, " \t");
  char *pcolon = strchr(pstart, ':');
  char *pend = pstart + strspn(pstart, ":-abcdefghijklmnopqrstuvwxyz");

  *pend = 0;

  if (pcolon != 0) {
    val pkgname = string_utf8((*pcolon = 0, pstart));
    val package = if3(pstart[0], find_package(pkgname), keyword_package);
    if (!package) {
      yyerrprepf(yyg, lit("package ~a not found"), pkgname, nao);
      tok = ERRTOK;
    }
    if (package != user_package && package != keyword_package) {
      val sym = string_utf8(pcolon + 1);
      yyerrprepf(yyg, lit("~a:~a: original usr package expected, not ~a"),
                 pkgname, sym, pkgname, nao);
      tok = ERRTOK;
    }
  } else {
    val symname = string_utf8(pstart);
    val sym = intern_fallback(symname, cur_package);
    val package = symbol_package(sym);

    if (package != user_package && package != keyword_package) {
      yyerrprepf(yyg, lit("~a: this is ~a:~a, not usr:~a"),
                 symname, package_name(package), symname, symname, nao);
      tok = ERRTOK;
    }
  }

  if (state != 0)
    yy_push_state(state, yyscanner);
  else
    yy_pop_state(yyscanner);
  yylval->lineno = yyextra->lineno;
  return tok;
}

void end_of_regex(scanner_t *yyg)
{
  if (YYSTATE != REGEX && YYSTATE != SREGEX)
    internal_error("end_of_regex called in wrong scanner state");

  yy_pop_state(yyg);

  if (YYSTATE != INITIAL) {
    if (yy_top_state(yyg) == INITIAL
      || yy_top_state(yyg) == QSILIT
      || yy_top_state(yyg) == QWLIT)
      yy_pop_state(yyg);
  }
}

void end_of_char(scanner_t *yyg)
{
  if (YYSTATE != CHRLIT)
    internal_error("end_of_char called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_buflit(scanner_t *yyg)
{
  if (YYSTATE != BUFLIT)
    internal_error("end_of_buflit called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_json(scanner_t *yyg)
{
  if (YYSTATE == JLIT)
    yy_pop_state(yyg);

  if (YYSTATE != JSON)
    internal_error("end_of_json called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_json_unquote(scanner_t *yyg)
{
  if (YYSTATE == NESTED)
    yy_pop_state(yyg);

  if (YYSTATE != JSON)
    internal_error("end_of_json_unquote called in wrong scanner state");
}

val source_loc(val form)
{
  return gethash(form_to_ln_hash, form);
}

val source_loc_str(val form, val alt)
{
  cons_bind (line, file, gethash(form_to_ln_hash, form));
  if (missingp(alt))
    alt = lit("source location n/a");
  return if3(line, format(nil, lit("~a:~d"), file, line, nao), alt);
}

int yylex(YYSTYPE *yylval_param, yyscan_t yyscanner)
{
  struct yyguts_t * yyg = convert(struct yyguts_t *, yyscanner);
  int yy_char;

  if (yyextra->tok_idx > 0) {
    struct yy_token *tok = &yyextra->tok_pushback[--yyextra->tok_idx];
    yyextra->recent_tok = *tok;
    *yylval_param = tok->yy_lval;
    if (tok->yy_lex_state && tok->yy_lex_state != YYSTATE)
      yy_push_state(tok->yy_lex_state, yyg);
    return tok->yy_char;
  }

  yy_char = yyextra->recent_tok.yy_char = yylex_impl(yylval_param, yyscanner);
  yyextra->recent_tok.yy_lval = *yylval_param;
  yyextra->recent_tok.yy_lex_state = YYSTATE;

  return yy_char;
}

void prime_scanner(scanner_t *yyg, enum prime_parser prim)
{
  while (YYSTATE != INITIAL)
    yy_pop_state(yyg);

  switch (prim) {
  case prime_lisp:
  case prime_interactive:
    yy_push_state(SPECIAL, yyg);
    yy_push_state(NESTED, yyg);
    yy_push_state(NESTED, yyg);
    break;
  case prime_regex:
    yy_push_state(SREGEX, yyg);
    break;
  }
}

void scrub_scanner(scanner_t *yyg, int yy_char, wchar_t *lexeme)
{
  struct yy_token *rtok = &yyextra->recent_tok;

  if (rtok->yy_char == yy_char && rtok->yy_lval.lexeme == lexeme) {
    rtok->yy_char = 0;
    rtok->yy_lval.lexeme = 0;
  }
}

void parser_l_init(void)
{
  prot1(&form_to_ln_hash);
  form_to_ln_hash = make_eq_hash(t, nil);
}

