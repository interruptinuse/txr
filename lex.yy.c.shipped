
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 167
#define YY_END_OF_BUFFER 168
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1613] =
    {   0,
       62,   62,   62,   62,   62,   62,   62,   62,  138,  138,
      138,  138,  149,  149,  163,  163,  168,  114,  167,  115,
      167,  115,  167,  113,  167,  117,  167,  114,  167,  114,
      167,  114,  167,  117,  167,   98,   99,  167,   62,   98,
       99,  167,   84,  167,   84,   98,   99,  167,   63,   98,
       99,  167,   98,   99,  167,   55,   98,   99,  167,   61,
       98,   99,  167,   98,   99,  167,   89,   98,   99,  167,
       85,   98,   99,  167,    1,   19,   98,   99,  167,16400,
       97,   98,   99,  167,   83,   98,   99,  167,   19,   98,
       99,  167,16400,   55,   98,   99,  167,   98,   99,  167,

       67,   98,   99,  167,   54,   98,   99,  167,   61,   98,
       99,  167,   99,  167,   99,  167,   99,  167,   99,  167,
       62,   98,   99,  167,   20,   98,   99,  167,16401,   72,
       98,   99,  167,   58,   98,   99,  167,   20,   98,   99,
      167,16401,   58,   98,   99,  167,   89,   98,   99,  167,
        1,   20,   98,   99,  167,16401,   20,   98,   99,  167,
    16401,   56,   98,   99,  167,   20,   98,   99,  167,16401,
       59,   98,   99,  167,   99,  167,   99,  167,   99,  167,
       62,   98,   99,  167,   21,   98,   99,  167,16402,   72,
       98,   99,  167,   21,   98,   99,  167,16402,   89,   98,

       99,  167,    1,   21,   98,   99,  167,16402,   21,   98,
       99,  167,16402,   56,   98,   99,  167,   21,   98,   99,
      167,16402,   99,  167,   99,  167,   99,  167,  111,  112,
      167,  111,  112,  167,  105,  167,  105,  111,  112,  167,
      107,  111,  112,  167,  100,  107,  111,  112,  167,  110,
      111,  112,  167,  112,  167,  112,  167,  112,  167,  112,
      167,  106,  167,  106,  111,  112,  167,  146,  152,  167,
      146,  152,  167,  132,  167,  132,  146,  152,  167,  120,
      146,  152,  167,  146,  152,  167,  152,  167,  152,  167,
      152,  167,  152,  167,  131,  146,  152,  167,  133,  167,

      133,  146,  152,  167,  130,  131,  146,  152,  167,  130,
      131,  146,  152,  167,  130,  131,  146,  152,  167,  131,
      152,  167,  131,  152,  167,  131,  152,  167,  131,  152,
      167,  134,  167,  134,  146,  152,  167,  137,  146,  152,
      167,  146,  152,  167,  121,  146,  152,  167,   62,   98,
       99,  167,   98,   99,  167,   98,   99,  167,   89,   98,
       99,  167,    1,   10,   19,   98,   99,  167,16400,   56,
       98,   99,  167,   98,   99,  167,  138,  146,  152,  167,
      135,  167,  135,  146,  152,  167,  146,  152,  167,  146,
      152,  167,  151,  167,  149,  151,  167,  150,  167,  150,

      151,  167,  148,  151,  167,  147,  151,  167,  157,  164,
      167,  163,  164,  167,  162,  167,  157,  162,  164,  167,
      158,  161,  164,  165,  167,  157,  164,  167,  161,  164,
      167,  157,  164,  167,  153,  157,  164,  167,  153,  157,
      164,  167,  157,  164,  167,  157,  164,  167,  157,  164,
      167,  160,  161,  164,  167,  145,  167,  145,  146,  152,
      167,  139,  146,  152,  167,  146,  152,  167,  166,  167,
      167,  114,  114,  114,  114,  115,  113,  119,  116,  114,
      114,  114,  119,   62,   88,   84,   68,   66,   64,   70,
        1,   87,    4,   90,    1,   19,16400,   19,16400,   19,

    16400,   97,   96,   92,   92,   96,   93,   96,   94,   96,
       95,   96,   98,   62,   88,   20,   22,16401,   20,16401,
       20,   22,16401,   20,16401,   20,16401,   79,   73,   78,
       76,   75,   74,   77,    1,   20,   22,16401,   57,    4,
       20,   22,16401,   20,   22,16401,   20,16401,   22,   20,
    16401,   20,16401,   20,16401,    9,   20,16401,   92,   20,
       98,16401,   62,   88,   21,   23,16402,   21,16402,   21,
       23,16402,   21,16402,   21,16402,    1,   21,   23,16402,
       82,    4,   21,   23,16402,   21,   23,16402,   21,16402,
       23,   21,16402,   21,16402,   21,16402,    9,   21,16402,

       21,   98,16402,  105,  109,  104,  104,  109,  101,  109,
      108,  109,  102,  109,  103,  109,  109,  111,  106,  132,
      128,  124,  125,  124,  125,  128,  122,  128,  126,  128,
      127,  128,  146,  133,  130,  129,  130,  129,  130,  134,
      136,    9,  136,  136,  123,  128,   62,   88,    1,   10,
        1,   10,   19,16400,  138,  135,  125,  125,  128,  149,
      150,  157,  163,  162,  157,  153,  157,  153,  157,  157,
      157,  153,  157,  157,  157,  157,  159,  145,  144,  140,
      144,  143,  144,  119,  114,  119,  118,  118,  119,   86,
       91,   69,   71,   65,    2,    2,    2,   60,    4,    5,

        5,    5,    8,    4,    5,    8, 8208,    5,    8,    5,
        8,    4,   19,16400, 8208,   92,   94,   94,   94,   20,
       22,16401,   20,   22,16401,   20,   22,16401,   20,   22,
    16401, 8209,   20,   22,16401,   20,   22,16401,   20,   22,
    16401,   22,   22,   81,   80,   20,   22,16401,   20,16401,
       20,16401,    4, 8209,    1,   20,   22,16401,   20,   22,
    16401,    6,    4,    6,    6,    6,    6,    8,    8,    4,
        6,    8, 8209,    6,    8,    8,    6,    8,    8,    8,
        8,   20,   22,16401,    4,   20,   22,16401,   20,   22,
    16401,   20,   22,16401,   22,   20,   22,16401,   22,   20,

       22,16401,   20,16401,   20,16401,    9,   20,   22,16401,
       21,   23,16402,   21,   23,16402,   21,   23,16402,   21,
       23,16402, 8210,   21,   23,16402,   21,   23,16402,   21,
       23,16402,   23,   23,   21,   23,16402,   21,16402,   21,
    16402,    4, 8210,    1,   21,   23,16402,   21,   23,16402,
        7,    4,    7,    7,    7,    7,    8,    8,    4,    7,
        8, 8210,    7,    8,    8,    7,    8,    8,    8,    8,
       21,   23,16402,    4,   21,   23,16402,   21,   23,16402,
       21,   23,16402,   23,   21,   23,16402,   23,   21,   23,
    16402,   21,16402,   21,16402,    9,   21,   23,16402,  104,

      104,  102,  102,  102,  124,  125,  124,  125,  126,  126,
      126,    9,    2,   14,    2,   12,    8, 8208,  125,  125,
       81,  157,   80,  157,  153,  157,  157,  153,  157,  157,
      157,  157,  118,    5,    4,    2,    3,    3,    2,    3,
        2,    3,   51,   51,   51,   51,   51,   51,   33,    4,
        5,    8,    4,    5,    4,    5, 8208,    4,    5,    4,
        5,   19,16400,    5,   19,16400,    6,    4,   20,   22,
    16401,   20,   22,16401,   20,   22,16401,   20,   22,16401,
       20,   22,16401,   20,   22,16401,   22,   22,   22,   22,
       20,   22,16401,   20,   22,16401,   20,   22,16401,    4,

        6, 8209,    6,    6,    6,    6,    6,    4,    6,    6,
        6,    6,    6,    6,    4,    6,    4,    6, 8209,    6,
        4,    6,    6,   20,   22,16401,   20,   22,16401,    4,
        6,   20,   22,16401,    6,   20,   22,16401,   22,   20,
       22,16401,   20,   22,16401,   20,   22,16401,    9,   20,
       22,16401,    7,    4,   21,   23,16402,   21,   23,16402,
       21,   23,16402,   21,   23,16402,   21,   23,16402,   21,
       23,16402,   23,   23,   23,   23,   21,   23,16402,   21,
       23,16402,   21,   23,16402,    4,    7, 8210,    7,    7,
        7,    7,    7,    4,    7,    7,    7,    7,    7,    7,

        4,    7,    4,    7, 8210,    7,    4,    7,    7,   21,
       23,16402,   21,   23,16402,    4,    7,   21,   23,16402,
        7,   21,   23,16402,   23,   21,   23,16402,   21,   23,
    16402,   21,   23,16402,   15,   13,   11,    9,   21,   23,
    16402,    2,    3,   14,    2,    3,   12,  157,  157,  157,
       24,   32,   34,   45,   45,   45,   45,   45,   45,   40,
       40,   40,   40,   40,   40,   48,    4,    5, 8208,    4,
        6,   20,   22,16401,   20,   22,16401,   20,   22,16401,
       22,    6,    6,    6,    6,    6,    4,    6,    4,    6,
        6,   20,   22,16401,    6,   20,   22,16401,    6,   20,

       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,
        6, 8209,    6,   20,   22,16401,    6,   20,   22,16401,
        4,    6,   20,   22,16401,    6,   20,   22,16401,    6,
       20,   22,16401,    6,   20,   22,16401,    6,   20,   22,
    16401,    6,   22,    6,   22,    4,    7,   21,   23,16402,
       21,   23,16402,   21,   23,16402,   23,    7,    7,    7,
        7,    7,    4,    7,    4,    7,    7,   21,   23,16402,
        7,   21,   23,16402,    7,   21,   23,16402,    7,   21,
       23,16402,    7,   21,   23,16402,    7, 8210,    7,   21,
       23,16402,    7,   21,   23,16402,    4,    7,   21,   23,

    16402,    7,   21,   23,16402,    7,   21,   23,16402,    7,
       21,   23,16402,    7,   21,   23,16402,    7,   23,    7,
       23,  157,  156,  154,   36,   36,   36,   36,   36,   36,
       52,   52,   52,   52,   52,   52,   53,   43,   43,   43,
       43,   43,   43,   26,   25,   25,   25,   25,   25,   25,
        6,   20,   22,16401,    6,   20,   22,16401,    6,   20,
       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,
        6,   20,   22,16401,    6, 8209,    6,   20,   22,16401,
        6,   20,   22,16401,    6,   20,   22,16401,    6,   20,
       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,

        6,   22,    6,   22,    6,   22,    6,   22,    7,   21,
       23,16402,    7,   21,   23,16402,    7,   21,   23,16402,
        7,   21,   23,16402,    7,   21,   23,16402,    7,   21,
       23,16402,    7, 8210,    7,   21,   23,16402,    7,   21,
       23,16402,    7,   21,   23,16402,    7,   21,   23,16402,
        7,   21,   23,16402,    7,   21,   23,16402,    7,   23,
        7,   23,    7,   23,    7,   23,  155,  142,  142,   29,
       29,   29,   29,   29,   29,   28,   49,   49,   49,   49,
       49,   49,   44,   42,   27,   37,   37,   37,   37,   37,
       37,    6,   20,   22,16401,    6,   20,   22,16401,    6,

       20,   22,16401,    6,   20,   22,16401,    6,   20,   22,
    16401,    6,   20,   22,16401,    6,   20,   22,16401,    6,
       20,   22,16401,    6,   20,   22,16401,    6,   22,    7,
       21,   23,16402,    7,   21,   23,16402,    7,   21,   23,
    16402,    7,   21,   23,16402,    7,   21,   23,16402,    7,
       21,   23,16402,    7,   21,   23,16402,    7,   21,   23,
    16402,    7,   21,   23,16402,    7,   23,   30,   30,   30,
       30,   30,   30,   47,   47,   47,   47,   47,   47,   31,
       31,   31,   31,   31,   31,   38,   38,   38,   38,   38,
       38,   39,   39,   39,   39,   39,   39,   41,   35,   35,

       35,   35,   35,   35,   50,   46,   46,   46,   46,   46,
       46,  141
    } ;

static const flex_int16_t yy_accept[1651] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   18,   20,   22,   24,   26,   28,   30,
       32,   34,   36,   39,   43,   45,   49,   53,   56,   60,
       64,   67,   71,   75,   81,   85,   89,   94,   98,  101,
      105,  109,  113,  115,  117,  119,  121,  125,  130,  134,
      138,  143,  147,  151,  157,  162,  166,  171,  175,  177,
      179,  181,  185,  190,  194,  199,  203,  209,  214,  218,
      223,  225,  227,  229,  232,  235,  237,  241,  245,  250,

      254,  256,  258,  260,  262,  264,  268,  271,  274,  276,
      280,  284,  287,  289,  291,  293,  295,  299,  301,  305,
      310,  315,  320,  323,  326,  329,  332,  334,  338,  342,
      345,  349,  353,  356,  359,  363,  370,  374,  377,  381,
      383,  387,  390,  393,  395,  398,  400,  403,  406,  409,
      412,  415,  417,  421,  426,  429,  432,  435,  439,  443,
      446,  449,  452,  456,  458,  462,  466,  469,  471,  472,
      473,  474,  475,  476,  477,  478,  478,  479,  480,  481,
      482,  483,  483,  484,  485,  485,  486,  486,  487,  488,
      488,  489,  490,  491,  491,  491,  491,  491,  491,  491,

      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  492,  493,  494,  495,  495,  498,  500,  502,  503,
      503,  504,  505,  507,  509,  511,  513,  514,  514,  514,
      515,  515,  516,  516,  519,  521,  521,  524,  524,  526,
      526,  526,  526,  526,  528,  529,  530,  531,  532,  533,
      534,  535,  535,  539,  540,  541,  541,  544,  547,  549,
      550,  552,  552,  552,  552,  554,  554,  556,  559,  559,
      559,  559,  560,  563,  563,  563,  564,  564,  565,  565,
      568,  570,  570,  573,  573,  575,  575,  575,  575,  577,

      577,  581,  582,  583,  583,  586,  589,  591,  592,  594,
      594,  594,  594,  596,  596,  598,  601,  601,  601,  601,
      604,  604,  604,  604,  604,  605,  606,  607,  609,  611,
      613,  615,  617,  618,  619,  619,  619,  620,  620,  620,
      621,  622,  624,  627,  629,  631,  633,  634,  634,  634,
      635,  636,  638,  640,  641,  641,  642,  642,  644,  645,
      647,  648,  649,  649,  649,  651,  651,  655,  655,  656,
      656,  657,  658,  660,  661,  662,  663,  664,  665,  666,
      668,  670,  671,  672,  674,  675,  676,  677,  678,  679,
      680,  682,  684,  685,  686,  687,  688,  690,  691,  692,

      692,  692,  693,  694,  695,  695,  696,  696,  697,  697,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  699,  699,  699,
      701,  702,  703,  704,  708,  710,  712,  712,  715,  716,
      717,  718,  719,  720,  720,  720,  720,  720,  723,  726,
      729,  732,  732,  732,  732,  733,  736,  739,  742,  742,
      742,  742,  743,  743,  744,  744,  744,  744,  744,  744,

      745,  746,  749,  751,  753,  753,  753,  753,  755,  759,
      762,  763,  763,  763,  765,  766,  766,  767,  767,  767,
      767,  769,  770,  774,  776,  777,  779,  780,  781,  782,
      785,  789,  792,  795,  796,  799,  799,  799,  799,  800,
      800,  800,  800,  800,  800,  803,  805,  807,  807,  807,
      807,  811,  811,  811,  811,  811,  811,  811,  814,  817,
      820,  823,  823,  823,  823,  824,  827,  830,  833,  833,
      833,  833,  834,  834,  835,  835,  835,  835,  835,  835,
      838,  840,  842,  842,  842,  842,  844,  848,  851,  852,
      852,  852,  854,  855,  855,  856,  856,  856,  856,  858,

      859,  863,  865,  866,  868,  869,  870,  871,  874,  878,
      881,  884,  885,  888,  888,  888,  888,  889,  889,  889,
      889,  889,  889,  892,  894,  896,  896,  896,  896,  896,
      896,  896,  900,  900,  900,  900,  901,  902,  903,  904,
      905,  905,  907,  909,  910,  911,  912,  912,  913,  913,
      915,  915,  917,  917,  919,  920,  921,  923,  925,  927,
      928,  930,  931,  932,  933,  933,  933,  934,  935,  936,
      938,  939,  941,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,

      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  944,  945,  946,  947,  948,
      949,  949,  949,  949,  949,  949,  950,  950,  950,  950,
      950,  950,  950,  950,  953,  953,  955,  958,  960,  960,
      964,  967,  968,  968,  969,  972,  975,  978,  978,  978,
      978,  978,  978,  981,  984,  987,  987,  987,  987,  987,
      987,  988,  989,  990,  990,  990,  990,  991,  991,  991,
      991,  991,  991,  991,  994,  997, 1000, 1000, 1000, 1000,
     1000, 1000, 1003, 1004, 1005, 1005, 1005, 1005, 1006, 1007,
     1008, 1010, 1011, 1012, 1012, 1012, 1012, 1013, 1013, 1013,

     1013, 1014, 1014, 1014, 1014, 1015, 1017, 1017, 1017, 1020,
     1021, 1023, 1027, 1030, 1030, 1035, 1039, 1039, 1039, 1039,
     1039, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1043, 1046, 1049, 1049, 1049, 1049, 1049, 1049, 1053, 1053,
     1054, 1054, 1055, 1058, 1061, 1064, 1064, 1064, 1064, 1064,
     1064, 1067, 1070, 1073, 1073, 1073, 1073, 1073, 1073, 1074,
     1075, 1076, 1076, 1076, 1076, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1080, 1083, 1086, 1086, 1086, 1086, 1086, 1086,
     1089, 1090, 1091, 1091, 1091, 1091, 1092, 1093, 1094, 1096,
     1097, 1098, 1098, 1098, 1098, 1099, 1099, 1099, 1099, 1100,

     1100, 1100, 1100, 1101, 1103, 1103, 1103, 1106, 1107, 1109,
     1113, 1116, 1116, 1121, 1125, 1125, 1125, 1125, 1125, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1129, 1132,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1136, 1136, 1137,
     1137, 1138, 1142, 1142, 1145, 1148, 1149, 1150, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1152, 1152,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1154, 1154, 1154, 1154, 1154, 1154, 1155, 1156, 1157,

     1157, 1158, 1159, 1160, 1160, 1160, 1161, 1162, 1163, 1163,
     1164, 1165, 1166, 1166, 1166, 1166, 1167, 1167, 1168, 1170,
     1172, 1175, 1178, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1183, 1183, 1183, 1183, 1183,
     1183, 1184, 1184, 1184, 1184, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1186, 1187, 1187, 1187, 1187, 1187, 1187,
     1189, 1189, 1191, 1195, 1199, 1203, 1207, 1207, 1207, 1207,
     1211, 1213, 1217, 1221, 1226, 1230, 1230, 1230, 1230, 1234,
     1238, 1242, 1242, 1242, 1242, 1244, 1244, 1246, 1246, 1246,

     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1248, 1251, 1254, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1259, 1259, 1259, 1259, 1259,
     1259, 1260, 1260, 1260, 1260, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1262, 1263, 1263, 1263, 1263, 1263, 1263,
     1265, 1265, 1267, 1271, 1275, 1279, 1283, 1283, 1283, 1283,
     1287, 1289, 1293, 1297, 1302, 1306, 1306, 1306, 1306, 1310,
     1314, 1318, 1318, 1318, 1318, 1320, 1320, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,

     1323, 1324, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1326, 1327, 1328, 1328, 1329, 1330, 1331, 1331, 1332, 1333,
     1334, 1335, 1336, 1337, 1337, 1338, 1338, 1338, 1338, 1338,
     1339, 1340, 1341, 1342, 1343, 1344, 1344, 1344, 1344, 1345,
     1345, 1345, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1355, 1359, 1363, 1363, 1363, 1363, 1363, 1363, 1367,

     1371, 1375, 1375, 1375, 1375, 1377, 1381, 1385, 1389, 1389,
     1389, 1389, 1389, 1389, 1393, 1397, 1401, 1401, 1401, 1401,
     1401, 1401, 1403, 1405, 1407, 1407, 1407, 1407, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1413, 1417,
     1421, 1421, 1421, 1421, 1421, 1421, 1425, 1429, 1433, 1433,
     1433, 1433, 1435, 1439, 1443, 1447, 1447, 1447, 1447, 1447,
     1447, 1451, 1455, 1459, 1459, 1459, 1459, 1459, 1459, 1461,
     1463, 1465, 1465, 1465, 1465, 1467, 1467, 1467, 1467, 1467,

     1467, 1467, 1467, 1467, 1468, 1469, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1476,
     1477, 1478, 1479, 1480, 1481, 1482, 1483, 1483, 1483, 1483,
     1483, 1484, 1484, 1484, 1485, 1485, 1485, 1486, 1486, 1486,
     1486, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1496, 1500, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1508, 1512, 1516, 1516, 1516, 1516, 1516,
     1516, 1520, 1524, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
     1528, 1528, 1528, 1530, 1530, 1530, 1530, 1530, 1530, 1530,

     1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1534, 1538,
     1542, 1542, 1542, 1542, 1542, 1542, 1542, 1546, 1550, 1554,
     1554, 1554, 1554, 1554, 1554, 1558, 1562, 1566, 1566, 1566,
     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1569, 1570, 1571, 1572,
     1573, 1574, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1580,
     1581, 1582, 1583, 1584, 1585, 1586, 1586, 1587, 1588, 1589,
     1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1598,
     1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599,

     1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599,
     1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599,
     1599, 1599, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1605,
     1606, 1607, 1608, 1609, 1610, 1611, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1613, 1613
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    6,    9,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,    6,
       25,    6,   26,   27,   28,   28,   29,   30,   31,   29,
       32,   33,   32,   34,   32,   32,   32,   35,   32,   32,
       32,   36,   37,   38,   32,   32,   39,   32,   32,   32,
       40,   41,   42,   43,   32,   44,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   32,   54,   55,   56,   57,
       58,   59,   32,   60,   61,   62,   63,   64,   39,   65,
       66,   32,   67,   68,   69,   70,    1,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   72,   72,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   75,
       75,   75,   75,   75,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,    6,    9,
       10,    2,   11,   12,   10,   12,   13,   14,   15,   15,
       15,   15,   16,   17,    6,    6,   18,   15,   15,   15,
       15,   19,   19,   19,   19,   19,   19,   19,   19,   10,
        6,    7,   20,    1,   15,   15,   15,   15,   21,   15,
       19,   19,   19,   19,   22,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   10,    1,    7,   11,
        1,    1,   23,   23,   23
    } ;

static const flex_int16_t yy_base[1899] =
    {   0,
        0,    3,   78,    0,  153,    0,  228,    0,  302,  376,
        6,    8,  350,  356,  451,    0,  525,  599,  673,    0,
      362,  534,  715,  789,  863,  912,  961, 1030,  539,  544,
     5299, 5298, 5300,  235,11633, 5296, 5289,   11,  250,  256,
      261,   12,11633,   24,11633, 5290,11633,  621, 1099, 5272,
       30,   37,11633,  389,    0,11633, 5268,11633, 1172,11633,
    11633,11633,11633, 5203, 5202, 5198,  551,  633, 1231,11633,
     1289, 5254,   12,    6,  688,  724,   50,11633, 5195, 5191,
     5186,  572,  731, 5233, 1357,  625,  351,  752,  762,  541,
     5184, 5179, 5175,11633,  343,11633, 5242,11633,11633, 1432,

    11633, 5173, 5160, 5159,11633, 5220,11633,  345,11633, 5218,
    11633, 1505,11633, 5146, 5141, 5137,11633,11633, 5200,    0,
       41, 1552,11633, 5129, 5128, 5124,11633, 5191, 1595, 1660,
    11633,  396,  811,  318,  529,  562, 5181,   18,  402,11633,
     5185,  392,   61,11633,   13,11633, 5183,11633,11633,    0,
      344,11633, 5173,11633,  420,11633,  601,  649,  704, 5130,
     5110, 5100, 5146,11633, 5155,11633,  840,11633,11633,  558,
      584,  628,  693,11633, 5149,  728,    0,11633,  562,  736,
      746,  826,  411,  933,  821,  899,  858,11633,11633,  355,
    11633,11633,11633,  975,  986,   52,    0,  654, 1681, 1001,

      923, 1036,  728, 1184,  987,  947,  994,  991, 1188,  913,
      952, 1093, 1220, 1225, 1247, 5074, 5061, 5059,  793,  907,
     1163,  530, 1178,11633, 1744, 1306, 5111, 1319,    0, 1063,
    11633,  552,  707,11633,  825,    0,11633, 5056, 5052, 1329,
     1184, 1194, 1337, 1344, 1513, 1167, 1520, 1321, 1610, 5046,
     5045, 5040, 1382, 1617,11633,11633,11633,11633,11633,11633,
    11633, 1204, 1812,11633, 1880, 1955, 1828, 1846, 1849,  579,
     1867, 5039, 5032, 5031, 2023, 5075, 2091,    0, 5026, 5024,
     5022,  851, 2028, 5018, 5016, 1406, 1262, 1512, 1626, 2031,
     2052, 1393, 2064, 1556, 2113, 5008, 4999, 4994, 2124, 1538,

     2192,11633, 2260, 2335, 2141, 2151, 2219,  698, 2226, 4993,
     4987, 4986, 2231, 1031, 2403,    0, 4977, 4976, 4975, 2410,
     4972, 4971,  846,  546,11633,11633,  585,  869,11633,11633,
     1267,11633,    0,11633, 4969, 4968,11633,  988,  621,11633,
    11633,  659,  893,11633, 1294,    0,11633, 4960, 4959,11633,
        0, 1282, 2467,11633,  639,11633, 1556, 1570,    0,11633,
      732, 1088, 1635,  562, 1652, 1674, 1694, 4983, 1014,  645,
    11633,  943, 1176, 1093,11633,    0, 1101,11633, 1678, 1179,
     1895, 1802, 1911, 2419, 4968, 4967, 4954,11633,11633,11633,
    11633,  303,    0, 1318,  665,11633,  819, 1121,11633, 1860,

     1929,11633,11633,11633,  886,  904, 1362, 1378,    0, 2499,
     1603, 4940, 4936, 4933,  700, 4945, 1272, 4945, 1463, 4939,
     4946, 4940, 4940,  387, 4925, 1182, 4919,  259, 4905, 4907,
     2009, 2015, 2019, 2108, 2042, 2129, 2156, 2198, 2237, 2215,
     2391, 2182, 2549, 2241, 2247, 2255, 2398, 2458, 2429, 2433,
     2436, 2252, 2511, 2532, 4892, 4890, 1806, 2624,    0, 2548,
        0, 2521,11633, 2683,    0, 2582, 1915, 2561, 2123, 1269,
     1600,11633, 4932, 4878, 2423, 2725, 2696, 2711, 2714, 2732,
     2750, 4876, 4872, 4871, 2503, 2753, 2774, 2786, 4867, 4866,
     4859, 2426, 4905, 1763, 4855, 4850, 4843, 4837, 4829,11633,

    11633, 2813, 2827, 2835, 4824, 4814, 4808, 2903, 2971, 2863,
     2535, 4853, 2745, 3039, 1778, 2758, 2876, 4804, 4803, 4801,
     2539, 4848, 3107, 1831, 2830, 2922, 4797, 4793, 4786, 2897,
     3175, 2931, 2958, 1960, 2999, 4785, 4778, 4777, 2049, 4763,
     4758, 4757, 4754, 4748, 3011, 3073, 3094, 4747, 4742, 4732,
     3243, 4724, 4722, 4721, 2687, 3311, 2852, 3132, 3135, 3203,
     3214, 4711, 4710, 4708, 2704, 3277, 3282, 3318, 4702, 4699,
     4698, 3032, 4743, 2075, 4671, 4669, 4667, 4665, 4663, 3331,
     3336, 3354, 4660, 4658, 4650, 3422, 3490, 2951, 2690, 4694,
     2976, 3558, 2102, 3004, 3292, 4639, 4637, 4633, 2737, 4680,

     3626, 2118, 3045, 3399, 4628, 4627, 4625, 3168, 3694, 3408,
     3461, 2143, 3497, 4623, 4615, 4612, 2211, 4611, 4600, 4598,
     4596, 4594, 3524, 3565, 3586, 4585, 4582, 4580, 1525, 2941,
      923, 3762, 4570, 4569, 4563, 1367, 1383, 2989,11633, 4608,
     4557, 1656, 1404, 3073,11633, 4602, 4554, 3144, 2298, 2396,
        0, 3819,    0, 3151, 1716, 1419,    0,    0, 3193, 3213,
     3233, 4554, 4555, 4560,    0, 2795,11633, 3253, 3438,  989,
        0, 2844, 3851, 4532, 4531, 4543, 4549, 4537,  986, 4533,
     4534, 4535,  747, 4525, 4532, 1456, 4512,    0, 4511, 4505,
     4517, 4504, 1862, 4496, 4498, 4493, 4492, 4475, 4466, 3581,

     3612, 3618, 3661, 3665, 3718, 3740, 3748, 3752, 3785, 3840,
     3872, 3881, 3904, 3916,11633, 3920, 3951, 4454, 4452, 4451,
     3948, 3957, 4032, 4015, 1866,11633, 4055, 4130, 4046, 4090,
     4113, 4154, 4447, 3538, 3260, 3368, 3276, 3444, 3509, 3381,
     4495, 4162, 3302, 4192, 4215, 4226, 4233, 4435, 4425, 4423,
     4421, 4417, 4251, 4254, 4275, 4409, 4404, 4403, 4395, 4394,
     3553, 3743, 2858, 4388, 4383, 4381, 2950, 4377, 4369, 4366,
     4362, 4357, 4343, 4287, 4314, 4328, 4341, 4339, 4337, 4336,
     4329, 4396, 3154, 2962, 4327, 4322, 4320, 2990, 3170, 3359,
     4464, 3035, 4356, 4315, 4314, 4303, 3058, 4302, 4298, 4288,

     3757, 4287, 4281, 4264, 4171, 3470, 4249, 4246, 3523, 4361,
     3659, 4382, 4424, 4441, 4532, 4503, 3674, 4244, 4240, 4234,
     3165, 4220, 4208, 4201, 4193, 4192, 4186, 4184, 4181, 4539,
     4556, 4573, 4177, 4176, 4168, 4160, 4139, 4641, 4137, 4513,
     3684, 4600, 4616, 4627, 4649, 4135, 4125, 4124, 4118, 4109,
     4670, 4703, 4710, 4104, 4100, 4087, 4084, 4075, 3867, 4403,
     3218, 4073, 4072, 4056, 3228, 4055, 4045, 4041, 4040, 4037,
     4027, 4724, 4731, 4748, 4025, 4023, 4022, 4006, 4002, 4816,
     3373, 3254, 4000, 3999, 3997, 3295, 3577, 3621, 4884, 3363,
     4741, 3995, 3994, 3979, 3412, 3975, 3974, 3970, 4430, 3958,

     3957, 3948, 4767, 4060, 3947, 3945, 3705, 4788, 4375, 4843,
     4850, 4861, 4952, 4923, 3699, 3944, 3934, 3921, 3475, 3911,
     3910, 3901, 3899, 3896, 3890, 3886, 3881, 4959, 4976, 4993,
     3880, 3878, 3877, 3873, 3867, 1059, 1151, 3591, 3712,    0,
        0, 5061, 3863, 3790, 5118, 3871, 5167, 5236,    0,    0,
     3848, 2047, 2068, 3870, 3863, 3864, 3850, 3852, 3852, 3853,
     3845, 3830, 2235, 3846, 3817, 3824, 3800, 3815, 3802, 3804,
     3792, 3797, 3793, 3780, 2790, 3775, 2935,11633, 2951,11633,
     3910, 3862, 3781, 4087, 5306, 3901, 5381, 4519, 4290, 3139,
    11633, 4094, 4259, 4293, 5456, 4470,11633, 4369, 5487, 4632,

     3753, 3749, 3748, 4939, 4427,11633, 4494,    0, 4727, 3741,
     3736, 3732, 4757, 5550, 3174,11633, 4771, 4833, 4877, 5618,
     5001, 5069, 5082, 3727, 3723, 3717, 3707, 3706, 3691, 3690,
     3688, 3687, 3814, 3685, 3684, 3675, 3673, 3672, 3658, 3657,
     3648, 3647, 3638, 3627, 3856, 3618, 3612, 3605, 3603, 3601,
     3913, 3600, 3597, 3593, 3951, 3587, 3571, 3566, 3565, 3551,
     3550, 3548, 4879, 4998, 3545, 3535, 3534, 3531, 3524, 5686,
     3520, 4064, 5154, 5179, 5197, 5269, 3519, 3513, 3503, 5344,
     5033, 5403, 5555, 5754, 5558, 3497, 3491, 3485, 5626, 5643,
     5711, 3482, 3475, 3467, 5077, 3514, 3979, 3456, 3455, 3451,

     3447, 3445, 3444, 3437, 3432, 3428, 3423, 3409, 3408, 5822,
     5714, 5725, 5788, 3405, 3390, 3369, 3355, 3353, 3352, 3341,
     3336, 3324, 3988, 3323, 3309, 3304, 3293, 3275, 3265, 3239,
     3236, 3213, 3212, 3200, 4049, 3188, 3185, 3176, 3165, 3152,
     4077, 3145, 3133, 3132, 4143, 3130, 3129, 3120, 3113, 3103,
     3090, 3086, 5110, 5118, 3082, 3064, 3054, 3052, 3051, 5890,
     3032, 4265, 5793, 5829, 5847, 5865, 3028, 3020, 3016, 5907,
     5040, 5918, 5929, 5997, 5952, 3005, 3000, 2998, 6005, 6022,
     6030, 2996, 2986, 2981, 5190, 3025, 4147, 2972, 2970, 2968,
     2959, 2958, 2947, 2940, 2916, 2915, 2898, 2893, 2888, 6104,

    11633,11633,    0,    0, 2873, 2845, 2841, 2830, 2840, 2824,
        0, 3256, 2810, 2812, 2795, 2806,    0, 2797, 2796, 3335,
     2776, 2792, 2779,    0, 2767, 6174, 6249, 6324, 3613,11633,
     3371, 6355, 4228, 2737, 2733, 2719, 3794,11633, 3465,    0,
     2712, 2708, 2707, 3961,11633, 4249, 4268, 4291, 4558,11633,
     4307,    0, 2700, 2698, 2691, 4341, 4707, 4342,11633, 4908,
     4927, 4747,11633, 4477,    0, 2680, 2679, 2672, 6418, 2668,
     2664,  251,  255,  270,  285,  300,  312,  334,  341,  355,
      462,  469,  488,  493,  524,  558,  567,  592,  611,  642,
     6058, 6075, 6137,  651,  679,  694,  709,  725, 6196, 6269,

     6287,  761,  788,  799, 5261, 6423, 6426, 6440,  817,  828,
      859,  873,  880, 6451, 6494, 6511,  885,  896,  908,  928,
      942, 5252, 5419, 4151,  968,  986,  992, 4265, 1000, 1015,
     1020, 1031, 1036, 1068, 1070, 1072, 1119, 1131, 1137, 1148,
     1159, 1160, 1164, 1176, 1185, 1189, 1205, 1209, 1219, 1221,
     1234, 1236, 1248, 1271, 1276, 1282, 1289, 6519, 6522, 6533,
     1295, 1302, 1304, 1334, 1339, 6536, 6547, 6596, 1345, 1358,
     1440, 5412, 6607, 6610, 6618, 1451, 1452, 1456, 1464, 1471,
     6621, 6632, 6635, 1477, 1481, 1482, 1490, 1495, 5496, 5533,
     4347, 1497, 1513, 1514, 4435, 1525, 1533, 1536, 1537, 1541,

     1542, 1552, 1557,11633,11633, 1591,    0, 4599,    0, 1587,
     1592, 1592, 4640, 1587, 4683, 1590, 4723, 1591, 1604, 1606,
     1633,    0,11633, 4815, 6666, 1617, 1618, 1631, 4907,11633,
    11633, 4943,    0, 1636, 1637, 1641, 6729, 4975, 6804, 4976,
    11633, 5256, 5003,11633, 6879, 5033,11633, 5285, 6954, 7029,
     5089,11633, 5117,    0, 1652, 1662, 1664, 1669, 1690, 1759,
     1769, 1770, 1775, 6751, 6826, 6901, 1785, 1787, 1789, 1791,
     1794, 1799, 6976, 7037, 7040, 1812, 1822, 1824, 1825, 1827,
     7051, 7062, 7100, 1837, 1842, 1847, 1857, 1867, 1868, 1875,
     1876, 1881, 4563, 1901, 1966, 1970, 1972, 1973, 1976, 1982,

     1985, 1986, 1990, 1991, 1996, 1997, 2005, 7111, 7122, 7125,
     2007, 2014, 2015, 2038, 2048, 2049, 7133, 7136, 7195, 2057,
     2058, 2062, 2064, 2075, 7206, 7209, 7217, 2082, 2083, 2100,
     2102, 2109, 2114, 2118, 2124, 2125, 4606, 2130, 2136, 2137,
     2139, 2149, 2151, 2157, 2161, 2170,    0, 2183,    0, 2184,
        0, 2190,    0,    0, 5119,11633, 5199,    0, 2190, 2205,
     2224, 7292,11633, 5213,    0, 2226, 2227, 2236, 5214,11633,
     5230,    0, 2252, 2253, 2260, 7367,11633, 5286,    0, 2261,
     2281, 2341,11633, 5326,    0, 2342, 2348, 2357, 5351,11633,
     2358, 2360, 2361, 2364, 2376, 2383, 2386, 2387, 2390, 2391,

     2396, 2403, 2404, 2408, 2409, 2411, 2419, 2423, 2434, 2455,
     2465, 2467, 2468, 2492, 2500, 2503, 2504, 2516, 2681,    0,
     5352,    0,11633, 5357,    0, 2517, 2519, 2524, 5395,11633,
    11633, 5397,    0, 2528, 2529, 2540, 2544, 2548, 2570, 2630,
     2649, 2650, 2656, 2659, 5459,    0,    0,11633,11633, 7442,
     7465, 7488, 7511, 7534, 7557, 7580, 7591, 7613, 7636, 7654,
     7672, 7690, 7708, 7726, 7744, 7767, 7776, 7791, 7813, 7836,
     7859, 7882, 2830, 7900, 7911, 7933, 2721, 7951, 7969, 7987,
     8005, 8023, 8041, 8059, 8077, 8095, 8113, 8131, 8149, 8167,
     8185, 8203, 8221, 8239, 8257, 8275, 8293, 2854, 2892, 8302,

     8310, 2968, 8332, 8343, 8365, 2900, 8388, 8411, 8434, 8443,
     8451, 2914, 8468, 8479, 3000, 8496, 8514, 8532, 8550, 8568,
     8586, 8604, 8622, 8640, 8658, 8676, 8694, 8712, 8730, 8748,
     8766, 8784, 8802, 8820, 8838, 8856, 8874, 8892, 8910, 8928,
     8946, 8964, 8982, 9000, 9018, 9036, 9054, 9072, 9090, 9108,
     9126, 9144, 9162, 3068, 3204, 3485, 9171, 3080, 9193, 9216,
     3083, 3121, 9228, 9250, 9272, 9283, 9300, 9318, 9336, 9354,
     9372, 9390, 9408, 9426, 9444, 9462, 9480, 9498, 9516, 9534,
     9552, 9570, 9588, 9606, 9624, 9642, 9660, 9678, 9696, 9714,
     9732, 9750, 9768, 9786, 9804, 9822, 9840, 9858, 9876, 9894,

     9912, 9930, 9948, 9966, 9984,10002,10020,10038,10056,10074,
     3124,10083,10105, 3139, 3328,10128,10151,10169,10180,10197,
    10215,10233,10251,10269,10287,10305,10323,10341,10359,10377,
    10395,10413,10431,10449,10467,10485,10503,10521,10539,10557,
    10575,10593,10611,10629,10647,10665,10683,10701,10719,10737,
    10755,10773,10791,10814, 3357, 3393,10837,10860,10883,10906,
    10929,10947,10965,10983,11001,11019,11037,11055,11073,11091,
    11109,11127,11145,11163,11181,11199,11217,11235,11253,11271,
    11289,11307,11325,11348,11371,11394,11412,11430,11448,11471,
    11494,11517,11540,11563,11586,11609, 3435, 3447

    } ;

static const flex_int16_t yy_def[1899] =
    {   0,
     1650, 1650, 1649,    3, 1649,    5, 1649,    7, 1651, 1651,
       10,   10, 1652, 1652, 1649,   15, 1652, 1652,    3,   19,
     1652, 1652, 1652, 1652, 1653, 1653, 1654, 1654, 1652, 1652,
     1655, 1655, 1649, 1656, 1649, 1649, 1649, 1649, 1656, 1656,
     1656, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1657, 1658, 1649, 1657, 1649, 1659, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1660, 1649, 1649,
     1660, 1649, 1649,   71, 1661, 1662,   71, 1649, 1649, 1649,
     1649, 1649, 1663,   69, 1663, 1649,   85, 1664, 1665,   85,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,

     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1666, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1667,
     1667, 1667, 1649, 1649, 1649, 1649, 1649, 1649, 1668, 1666,
     1649, 1649, 1649, 1649, 1649, 1657, 1649, 1649, 1649, 1649,
     1649,  130,  130, 1649, 1649, 1649, 1649, 1649, 1649, 1669,
     1649, 1649, 1669, 1649, 1669, 1649, 1669, 1669, 1669, 1669,
     1669, 1669, 1649, 1649, 1649, 1649, 1670, 1649, 1649, 1656,
     1656, 1656, 1656, 1649, 1649, 1649, 1671, 1649, 1656, 1656,
     1656, 1649, 1672, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1673,   49, 1674, 1649, 1674,

     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1675, 1649, 1649, 1657, 1657, 1657, 1676, 1649,
     1649, 1649, 1649, 1649, 1649, 1677, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1678, 1679, 1649, 1680, 1681, 1679, 1649,
     1649, 1649, 1649, 1682, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1678, 1649, 1683, 1649,  263, 1684, 1685, 1686,
     1685, 1649, 1649, 1649, 1687, 1649, 1687,  277, 1649, 1649,
     1649, 1649, 1679, 1649, 1649, 1649, 1649, 1649, 1649, 1688,
     1689, 1649, 1690, 1691, 1689, 1649, 1649, 1649, 1692, 1649,

     1688, 1649, 1693, 1649,  301, 1694, 1695, 1696, 1695, 1649,
     1649, 1649, 1697, 1649, 1697,  315, 1649, 1649, 1649, 1689,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1698, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1699, 1649, 1649, 1649, 1649,
     1700, 1700, 1700, 1649, 1649, 1649, 1649, 1701, 1701, 1649,
     1649, 1649, 1649, 1702, 1649, 1703, 1704, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1705, 1649, 1649, 1705, 1705,
     1705, 1705, 1705, 1705, 1705, 1705, 1705, 1649, 1649, 1649,
     1649, 1706, 1707, 1708, 1709, 1649, 1709, 1649, 1649, 1710,

     1649, 1649, 1649, 1649, 1649, 1711, 1649, 1711, 1712, 1711,
     1713, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1649, 1649, 1649, 1649, 1710, 1710,
     1710, 1710, 1649, 1710, 1710, 1710, 1649, 1714, 1649, 1649,
     1649, 1649, 1715, 1649, 1649, 1716, 1649, 1717, 1717, 1718,
     1717, 1649, 1649, 1649, 1649, 1719, 1720, 1720, 1649, 1649,
     1649, 1721, 1649, 1722, 1649, 1649, 1649, 1649, 1649, 1649,

     1649, 1723, 1724, 1724, 1649, 1649, 1649, 1716, 1717,  509,
     1725, 1649, 1716, 1726, 1727, 1728, 1725, 1649, 1649, 1649,
     1725, 1649, 1726, 1727, 1728, 1725, 1649, 1649, 1649,  509,
     1729, 1730, 1730, 1731, 1730, 1649, 1649, 1649, 1732, 1649,
     1649, 1649, 1649, 1649, 1733, 1734, 1734, 1649, 1649, 1649,
     1733, 1649, 1649, 1649, 1649, 1735, 1649, 1736, 1736, 1737,
     1736, 1649, 1649, 1649, 1649, 1738, 1739, 1739, 1649, 1649,
     1649, 1740, 1649, 1741, 1649, 1649, 1649, 1649, 1649, 1742,
     1743, 1743, 1649, 1649, 1649, 1735, 1736,  587, 1744, 1649,
     1735, 1745, 1746, 1747, 1744, 1649, 1649, 1649, 1744, 1649,

     1745, 1746, 1747, 1744, 1649, 1649, 1649,  587, 1748, 1749,
     1749, 1750, 1749, 1649, 1649, 1649, 1751, 1649, 1649, 1649,
     1649, 1649, 1752, 1753, 1753, 1649, 1649, 1649, 1649, 1649,
     1754, 1752, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1755,
     1649, 1649, 1649, 1649, 1649, 1756, 1649, 1649, 1649, 1757,
     1758, 1757, 1759, 1649, 1649, 1649, 1760, 1760, 1760, 1760,
     1760, 1760, 1760, 1760, 1761, 1762, 1649, 1763, 1763, 1757,
     1757, 1757, 1757, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1764, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1765,

     1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765,
     1765, 1765, 1765, 1765, 1649, 1765, 1649, 1649, 1649, 1649,
     1765, 1765, 1765, 1765, 1649, 1649, 1765, 1765, 1765, 1765,
     1765, 1765, 1649, 1763, 1649,  734,  734,  734, 1763, 1766,
     1766, 1767, 1649, 1768, 1769, 1770, 1770, 1649, 1649, 1649,
     1649, 1649, 1771, 1771, 1771, 1649, 1649, 1649, 1649, 1649,
     1772, 1772, 1773, 1649, 1649, 1649, 1774, 1649, 1649, 1649,
     1649, 1649, 1649, 1775, 1775, 1775, 1649, 1649, 1649, 1649,
     1649, 1776, 1767, 1777, 1649, 1649, 1649, 1778, 1767, 1767,
     1776, 1779, 1767, 1649, 1649, 1649, 1780, 1649, 1649, 1649,

     1781, 1649, 1649, 1649, 1767,  791, 1649, 1649,  791, 1767,
      791, 1782, 1783, 1768, 1784, 1785, 1786, 1649, 1649, 1649,
     1787, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1788,
     1788, 1788, 1649, 1649, 1649, 1649, 1649, 1788, 1649, 1789,
     1649, 1790, 1791, 1792, 1792, 1649, 1649, 1649, 1649, 1649,
     1793, 1793, 1793, 1649, 1649, 1649, 1649, 1649, 1794, 1794,
     1795, 1649, 1649, 1649, 1796, 1649, 1649, 1649, 1649, 1649,
     1649, 1797, 1797, 1797, 1649, 1649, 1649, 1649, 1649, 1798,
     1789, 1799, 1649, 1649, 1649, 1800, 1789, 1789, 1798, 1801,
     1789, 1649, 1649, 1649, 1802, 1649, 1649, 1649, 1803, 1649,

     1649, 1649, 1789,  889, 1649, 1649,  889, 1789,  889, 1804,
     1805, 1790, 1806, 1807, 1808, 1649, 1649, 1649, 1809, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1810, 1810, 1810,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1811,
     1811, 1810, 1649, 1812, 1812, 1813, 1813, 1813, 1814, 1815,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1816, 1649,
     1649, 1817, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1649,
     1649, 1818, 1818, 1818, 1818, 1818, 1649, 1818, 1649, 1818,

     1649, 1649, 1649, 1818, 1818, 1649, 1818,  999, 1818, 1649,
     1649, 1649, 1818, 1818, 1649, 1649, 1818, 1819, 1819, 1820,
     1821, 1821, 1821, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1822, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1823, 1649, 1649, 1649, 1649, 1649,
     1824, 1649, 1649, 1649, 1825, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1826, 1826, 1649, 1649, 1649, 1649, 1649, 1820,
     1649, 1070, 1827, 1827, 1828, 1827, 1649, 1649, 1649, 1829,
     1830, 1827, 1827, 1831, 1832, 1649, 1649, 1649, 1833, 1834,
     1834, 1649, 1649, 1649, 1835, 1649, 1836, 1649, 1649, 1649,

     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1837,
     1838, 1838, 1838, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1839, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1840, 1649, 1649, 1649, 1649, 1649,
     1841, 1649, 1649, 1649, 1842, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1843, 1843, 1649, 1649, 1649, 1649, 1649, 1837,
     1649, 1160, 1844, 1844, 1845, 1844, 1649, 1649, 1649, 1846,
     1847, 1844, 1844, 1848, 1849, 1649, 1649, 1649, 1850, 1851,
     1851, 1649, 1649, 1649, 1852, 1649, 1853, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1854,

     1649, 1649, 1855, 1856, 1649, 1649, 1649, 1649, 1857, 1649,
     1858, 1649, 1649, 1649, 1649, 1649, 1859, 1649, 1649, 1649,
     1649, 1649, 1649, 1860, 1649, 1861, 1861, 1861, 1227, 1649,
     1227, 1649, 1227, 1649, 1649, 1649, 1227, 1649, 1227, 1232,
     1649, 1649, 1649, 1649, 1649, 1227, 1227, 1227, 1227, 1649,
     1227, 1232, 1649, 1649, 1649, 1227, 1227, 1649, 1649, 1227,
     1227, 1227, 1649, 1227, 1232, 1649, 1649, 1649, 1227, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1862, 1863, 1863, 1649, 1649, 1649, 1649, 1649, 1864, 1865,

     1865, 1649, 1649, 1649, 1866, 1867, 1868, 1868, 1649, 1649,
     1649, 1649, 1649, 1869, 1869, 1869, 1649, 1649, 1649, 1649,
     1649, 1870, 1870, 1871, 1649, 1649, 1649, 1872, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1873, 1874, 1874,
     1649, 1649, 1649, 1649, 1649, 1875, 1876, 1876, 1649, 1649,
     1649, 1877, 1878, 1879, 1879, 1649, 1649, 1649, 1649, 1649,
     1880, 1880, 1880, 1649, 1649, 1649, 1649, 1649, 1881, 1881,
     1882, 1649, 1649, 1649, 1883, 1649, 1649, 1649, 1649, 1649,

     1649, 1649, 1649, 1649, 1649, 1649, 1884, 1649, 1885, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1886, 1649, 1227, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1227, 1425, 1649, 1649, 1649, 1227, 1227, 1227, 1649,
     1649, 1227, 1649, 1649, 1227, 1649, 1649, 1227, 1227, 1227,
     1227, 1649, 1227, 1425, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1887, 1887, 1887, 1649, 1649, 1649, 1649,
     1649, 1649, 1888, 1888, 1888, 1649, 1649, 1649, 1649, 1649,
     1889, 1889, 1889, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1871, 1649, 1649, 1649, 1649, 1649, 1649, 1649,

     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1873, 1873, 1873,
     1649, 1649, 1649, 1649, 1649, 1649, 1875, 1875, 1875, 1649,
     1649, 1649, 1649, 1649, 1878, 1878, 1878, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1882, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1890, 1649, 1891, 1649,
     1892, 1649, 1893, 1894, 1649, 1649, 1227, 1425, 1649, 1649,
     1649, 1227, 1649, 1227, 1425, 1649, 1649, 1649, 1227, 1649,
     1227, 1425, 1649, 1649, 1649, 1227, 1649, 1227, 1425, 1649,
     1649, 1649, 1649, 1227, 1425, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,

     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1895,
     1649, 1896, 1649, 1227, 1425, 1649, 1649, 1649, 1649, 1649,
     1649, 1227, 1425, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1897, 1898, 1649,    0, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,

     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,

     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649

    } ;

static const flex_int16_t yy_nxt[11709] =
    {   0,
     1649, 1649,   35,   36,   37,   35,   36,   37,  105,  106,
      105,  106,  176,  182,  374,  176,  182,  374,  177,  183,
      232,  282,  266,  178,  178,  184,   38, 1649,  184,   42,
      265,  265,  265,  265,  177,  183,  267,  185,  222,  185,
      186,  222,  187,  187,  187,  187,  220, 1649,  221,  221,
      221,  221,  232,  282,  267,  223,  223,  223,  223,  352,
      352,  352,  224,  372,  373,  409,  246,  409,  244,  244,
      244,  244,   39,   40,   41,   39,   40,   41,   43,   44,
       45,   46,   44,   43,   47,   48,   43,   43,   49,   50,
       43,   51,   43,   51,   52,   53,   54,   54,   54,   54,

       43,   55,   43,   43,   56,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   58,   59,   50,
       43,   60,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   61,   43,   62,   43,   63,   63,
       64,   65,   66,   43,   67,   45,   46,   67,   68,   47,
       69,   68,   70,   58,   43,   68,   71,   72,   71,   73,
       53,   74,   74,   74,   74,   75,   55,   68,   68,   76,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   58,   77,   43,   70,   60,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   43,
       43,   78,   68,   63,   63,   79,   80,   81,   43,   82,
       45,   46,   82,   83,   47,   84,   83,   70,   58,   50,
       83,   85,   72,   85,   86,   83,   87,   87,   87,   87,
       88,   55,   83,   83,   89,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   58,   90,   50,
       70,   60,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   43,   43,   62,   83,   63,   63,

       91,   92,   93,   95,   96,   97,   95,  171,  172,  173,
       98,  696,   98,   98,   98,   98,  697,   98,   98,   99,
      179,  745,  171,  172,  173,  753,  180,   98,  171,  172,
      173,  181,  666,  171,  172,  173,  365,  365,  365,  365,
     1033,   98,  100,   98,  323,  377,  338,  323,  377,  338,
      666,  108,  109,  110,  108, 1459,  111,  108,  109,  110,
      108,  402,  111,  139,  140,  141,  139,  304,  111,   98,
      761,   98,  101,  101,  102,  103,  104,   95,   96,   97,
       95,  305,  767,  324,   98,  339,   98,   98,   98,   98,
      112,   98,   98,   99,  372,  373,  112,  361,  403,  305,

      361,   98,  142,  369,  774,  225,  369,  226,  226,  226,
      226, 1045,  362,  396,  397,   98,  100,   98,  341,  228,
      113,  113,  114,  115,  116, 1460,  113,  113,  114,  115,
      116,  690,  113,  113,  114,  115,  116,  228,  379,  379,
      379,  379,  370,   98,  691,   98,  101,  101,  102,  103,
      104,  117,  107,  118,  119,  107,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  120,
      120,  120,  120,  117,  117,  117,  117,  117,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      117,  117,  117,  117,  117,  120,  120,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  120,  120,  121,  120,
      120,  120,  120,  120,  120,  122,  120,  117,  117,  117,
      117,  123,  123,  124,  125,  126,  108,  127,  128,  108,
      222,  222,  783,  222,  222,  139,  140,  141,  139, 1051,
      111,  164,  165,  232,  282,  166,  164,  165,  327,  636,
      166,  129,  240,  470,  224,  240,  470,  292, 1461,  290,
      290,  290,  290, 1055,  241,  130,  241,  242,  131,  243,
      243,  243,  243,  286,  142,  651,  286,  651,  366,  167,
      367,  367,  367,  367,  167,  287,  637,  287,  288,  637,
      289,  289,  289,  289, 1462,  113,  113,  114,  115,  116,

      108,  127,  128,  108,  113,  113,  114,  115,  116,  113,
      113,  114,  115,  116,  113,  113,  114,  115,  116,  380,
      381,  381,  381,  342,  642,  129,  222,  189,  789,  222,
      171,  172,  173,  190,  171,  172,  173,  797,  191,  130,
      245,  302,  131,  303,  303,  303,  303,  372,  655,  246,
      224,  540,  541,  542,  179,  247,  171,  172,  173,  248,
      643,  192, 1063,  643,  193,  382,  194,  396,  397,  113,
      113,  114,  115,  116,  132,  249,  199,  132,  195,  383,
      133, 1463,   70,   58,  629,  196,  134,   72,  134,  135,
       43,  136,  136,  136,  136,  269,  630,  383,  180,  137,

      171,  172,  173,  631,  246,  250,  251,  252,  470,  232,
      270,  470,  801,  138,  248,   70,  139,  140,  141,  139,
      382, 1291,  384,  384,  384,  384,  412,  413,  414,  176,
      271,  276,  176,  361,  383,  177,  361,  277,  291,  277,
      178,  129,  278,  278,  278,  278,  254,  292,  362, 1470,
      199,  177,  383,  293,  676,  143,  677,  294,  131,  307,
      272,  273,  274,  181, 1471,  171,  172,  173,  292,  314,
      618,  619,  620,  295,  308,  315,  437,  315,  294, 1073,
      316,  316,  316,  316,  299,  113,  113,  114,  115,  116,
      139,  140,  141,  139,  309, 1472,  279,  280,  281,  960,

      412,  413,  414,  296,  297,  298,  179,  961,  171,  172,
      173,  457,  457,  457,  457,  129,  394,  189,  171,  172,
      173,  667,  397,  190,  310,  311,  312,  182,  191,  143,
      182, 1299,  131,  183,  317,  318,  319,  220,  178,  187,
      187,  187,  187,  471,  471,  471,  391,  323,  472,  183,
      323,  192,  470,  232,  193,  470,  194,  391, 1479,  113,
      113,  114,  115,  116,  145,  146,  147,  145,  363, 1480,
      637,  327,  148,  637,  400,  364,  187,  187,  187,  187,
      391,  149,  149,  149,  149,  391,  324, 1306,  401,  391,
      149,  149,  149,  149,  643,  342,  391,  643, 1487,  391,

      398,  391,  392,  398,  406,  406,  401,  149,  149,  149,
      149,  149,  149,  145,  146,  147,  145,  223,  223,  223,
      223,  148,  670,  670,  399,  223,  223,  223,  223, 1488,
      149,  149,  149,  149,  184,  199,  940,  184,  940,  149,
      149,  149,  149, 1082,  656,  199,  185,  656,  185,  186,
     1489,  187,  187,  187,  187, 1314,  149,  149,  149,  149,
      149,  149,  151,  152,  153,  151, 1490,  154,  155,  199,
      447,  156,  156,  156,  199,  156,  157,  433, 1491,  158,
      159,  159,  159,  156,  404,  412,  413,  414,  405,  338,
      405,  442,  338,  406,  406,  412,  413,  414, 1089,  407,

      156,  407,  156,  156,  408,  408,  408,  670,  670,  199,
      160,  448, 1492,  199,  449,  369,  199,  161,  369,  412,
      413,  414,  162,  199,  412,  413,  414,  156,  339,  156,
      163,  151,  152,  153,  151,  444,  154,  155, 1322,  441,
      156,  156,  156,  443,  156,  157,  955,  956,  158,  159,
      159,  159,  156,  299,  370,  431, 1497,  432,  199,  412,
      413,  414, 1498,  412,  413,  414,  412,  413,  414,  156,
     1328,  156,  156,  412,  413,  414,  629,  937,  937,  160,
      434,  469,  469,  469,  469, 1499,  161,  435,  630,  398,
     1500,  162,  398,  436,  374,  631,  156,  374,  156,  163,

      197, 1095,  377,  197,  198,  377, 1501,  198,  412,  413,
      414,  198,  198,  399,  198,  199,  198,  198,  198,  198,
      198,  199,  398,  198,  198,  398,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  812,  198,
      821,  450,  830,  200,  201,  202,  203,  204,  205,  206,
      198,  207,  198,  208,  209,  210,  211,  198,  212,  213,
      214,  215,  198,  198,  198,  412,  413,  414,  198,  937,
      937,  216,  217,  218,  232,  233,  234,  656,  372,  458,
      656,  221,  221,  221,  221,  485,  485,  485,  485, 1111,
      235,  235,  235,  401,  459,  382,  460,  460,  460,  460,

      475, 1502,  243,  243,  243,  243,  199,  843,  462,  383,
      199,  401,  265,  265,  265,  265,  234,  234,  851,  399,
      234,  234,  508,  508,  508,  508,  462,  383,  234, 1123,
     1503,  234,  445,  234,  859,  234,  236,  189,  438,  439,
      440,  693,  199,  190,  694,  446,  865,  199,  191,  253,
      253,  253,  253,  254,  255,  872,  412,  413,  414, 1135,
      412,  413,  414,  256,  257,  258,  259,  260,  261,  199,
      470,  192,  451,  470,  193, 1504,  194,  452,  555,  881,
      289,  289,  289,  289,  453,  638,  638,  638,  195, 1141,
      639, 1505,  412,  413,  414,  196,  245,  412,  413,  414,

      352,  352,  352,  454, 1145,  262, 1506,  263,  263,  263,
      263,  247,  644,  644,  644,  248,  679,  645,  887,  412,
      413,  414,  225,  680,  226,  226,  226,  226,  493,  681,
      240,  249,  467,  240,  467,  230,  228,  468,  468,  468,
      468,  895,  241,  494,  241,  242, 1153,  243,  243,  243,
      243,  479, 1507,  476,  228,  243,  243,  243,  243,  899,
      246,  250,  251,  252,  291, 1358,  480,  477,  637,  327,
      248,  637, 1514,  300, 1515,  301,  301,  301,  301,  293,
      408,  408,  408,  294,  637,  477,  481,  637,  179,  500,
      171,  172,  173,  495,  496,  497,  672,  672,  672,  295,

      253,  253,  253,  253, 1163,  643,  501,  286,  643, 1516,
      286,  565,  565,  565,  565, 1366,  482,  483,  484,  287,
      656,  287,  288,  656,  289,  289,  289,  289, 1523,  296,
      297,  298,  326,  326,  327,  328,  329,  326,  326,  326,
      330,  326,  330,  330,  330,  330,  326,  330,  330,  330,
      331,  331,  331,  326,  326,  326,  326,  330,  326,  326,
      326,  332,  326,  326,  326,  326,  326,  326,  332,  326,
      332,  330,  329,  330,  326,  326,  329,  329,  326,  332,
      329,  329,  326,  326,  326,  326,  326,  326,  329,  326,
      326,  329,  332,  329,  326,  329,  333,  326,  326,  330,

      326,  330,  326,  326,  326,  326,  326,  342,  343,  344,
     1524,  344,  964,  398,  344,  965,  398,  683,  684,  685,
      245, 1373, 1531,  345,  345,  345, 1532,  487,  302,  246,
      303,  303,  303,  303, 1172,  247,  246,  399,  936,  248,
      936, 1533,  270,  937,  937,  344,  248, 1381,  344,  344,
      344, 1534, 1535,  344,  344,  249,  586,  586,  586,  586,
     1179,  344,  488,  573,  344, 1536,  344, 1389,  344,  346,
      353,  353,  353,  353,  648,  648,  648,  648,  574,  353,
      353,  353,  353, 1541, 1542,  250,  251,  252,  358,  358,
      358,  358,  489,  490,  491, 1395,  353,  353,  353,  353,

      353,  353,  355, 1543,  356,  356, 1544, 1185,  357,  356,
      357, 1545,  910,  358,  358,  358,  358,  245,  471,  471,
      471,  356,  919,  472,  503,  199,  246,  928,  575,  576,
      577, 1546,  247,  246,  356, 1547,  248,  356, 1548,  270,
     1549, 1550,  556,  248,  289,  289,  289,  289,  649, 1551,
      649, 1552,  249,  650,  650,  650,  557,  643,  342,  504,
      643,  356,  342,  343,  344, 1553,  344, 1554,  653,  344,
      365,  365,  365,  365,  557,  412,  413,  414,  345,  345,
      345, 1555,  250,  251,  252,  657,  360,  411,  674,  505,
      506,  507,  654,  654,  654,  654,  379,  379,  379,  379,

      344,  675,  658,  344,  344,  344,  411,  674,  344,  344,
      366,  675,  367,  367,  367,  367,  344,  656,  372,  344,
      656,  344,  411,  344,  346,  415,  416,  417,  418,  419,
      420,  421,  674,  422,  675,  423,  424,  425,  426, 1021,
      427,  428,  429,  430,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
     1033,  463,  464,  464,  464,  464,  463,  463,  463,  463,
      463,  465,  465,  465,  466,  465,  465,  465,  465,  465,
      465,  465,  465,  463,  463,  463,  463,  463,  465,  465,
      465,  465,  466,  465,  465,  465,  465,  465,  465,  465,

      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  479,
      659,  659,  659,  659,  457,  457,  457,  457,  266, 1045,
      509,  509,  509,  509,  480,  768,  769,  770,  248, 1051,
     1055,  530,  510,  530,  246, 1063,  531,  531,  531,  531,
      798,  799,  800,  533,  481, 1464,  269, 1591,  478, 1592,
      510, 1291,  246,  725, 1593,  246,  725,  725,  534, 1073,
      725,  270,  248,  726,  269,  248,  478,  726,  460,  460,
      460,  460, 1473,  246,  482,  483,  484,  512,  535,  270,
      668,  271, 1594,  248, 1595, 1299,  513, 1596,  514,  514,

      514,  514,  515,  798,  799,  800,  516, 1481,  668,  271,
      517,  382, 1597,  384,  384,  384,  384, 1598,  536,  537,
      538,  272,  273,  274,  660,  383,  660, 1306,  517,  661,
      661,  661,  661,  669,  669,  669,  669, 1599, 1082,  272,
      273,  274,  467,  383,  467, 1314, 1600,  669,  669,  669,
      669, 1089,  518,  519,  520,  463,  463,  463,  463,  463,
      521,  463,  522,  521,  463,  463,  463,  521,  521,  463,
      521, 1493,  463,  523,  523,  523,  523,  524,  463,  521,
      521,  525,  521,  521,  521,  526,  521,  521,  521,  521,
      521,  521,  521,  521,  463,  521,  463,  463,  463,  521,

      521,  521,  521,  526,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  463,  463,  463,  521,  463,  463,  527,  528,  529,
      546,  199,  822,  823,  824,  245, 1601,  199,  559,  246,
     1602,  199, 1322, 1603,  246,  247, 1328,  292,  977,  248,
      247,  977, 1604,  560,  248, 1095, 1111,  294,  978,  291,
     1123, 1135,  701,  700,  199,  547, 1141, 1145,  292,  979,
      249,  567,  979,  561,  293, 1153,  702, 1508,  294,  980,
      292,  412,  413,  414, 1605, 1606,  308,  412,  413,  414,
      294,  412,  413,  414,  295,  548,  549,  550,  546,  705,

      250,  251,  252,  562,  563,  564,  568,  246, 1358,  551,
      551,  551,  551,  247,  412,  413,  414,  248, 1607, 1163,
      291,  540,  541,  542,  296,  297,  298, 1517, 1608,  292,
      199,  581, 1609,  547, 1366,  293,  569,  570,  571,  294,
      292,  469,  469,  469,  469, 1610,  308,  866,  867,  868,
      294,  199, 1525, 1611,  608,  295,  608,  292,  611,  609,
      609,  609,  609,  548,  549,  550,  582,  292,  703,  704,
     1612,  558, 1373,  612,  896,  897,  898,  294,  199, 1613,
      412,  413,  414,  706, 1172,  296,  297,  298, 1381,  558,
      896,  897,  898,  613, 1614, 1179,  583,  584,  585,  559,

     1537,  412,  413,  414,  199,  707, 1615, 1616,  304, 1389,
      587,  587,  587,  587,  560,  920,  921,  922,  294, 1617,
      199, 1395,  588,  614,  615,  616,  307, 1618,  412,  413,
      414, 1185, 1619,  307,  561,  292,  990,  199,  624,  990,
      588,  308,  292,  714, 1620,  294,  991,  292,  308, 1621,
      708, 1622,  294,  293,  412,  413,  414,  294,  709,  199,
      411,  309,  711,  199,  562,  563,  564,  590,  309,  199,
      412,  413,  414,  625,  199,  674,  591,  199,  592,  592,
      592,  592,  593,  618,  619,  620,  594,  412,  413,  414,
      595,  310,  311,  312,  675,  710,  411,  674,  310,  311,

      312,  721,  723,  626,  627,  628,  675,  730,  595,  412,
      413,  414,  722,  412,  413,  414,  650,  650,  650,  412,
      413,  414,  411,  674,  412,  413,  414,  412,  413,  414,
      675,  411,  596,  597,  598,  463,  463,  463,  463,  463,
      599,  463,  600,  599,  463,  463,  463,  599,  599,  463,
      599,  674,  599,  601,  601,  601,  601,  602,  463,  599,
      599,  603,  599,  599,  599,  604,  599,  599,  599,  599,
      599,  599,  599,  599,  463,  599,  463,  463,  463,  599,
      599,  599,  599,  604,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,

      599,  463,  463,  463,  599,  463,  463,  605,  606,  607,
      624,  675,  411,  199,  944,  944,  944,  291,  674,  292,
      199,  632,  632,  632,  632,  293,  292,  675, 1464,  294,
     1637, 1291,  293,  762, 1473,  382,  294,  384,  384,  384,
      384,  265,  265,  265,  265,  625, 1638,  712,  763,  383,
      713,  199,  295, 1299,  724,  199, 1481, 1639,  199,  725,
     1306, 1314,  725,  412,  413,  414, 1493,  383,  762,  726,
      412,  413,  414, 1640, 1322,  626,  627,  628, 1328, 1508,
      199, 1641,  296,  297,  298,  353,  353,  353,  353, 1358,
      727,  728,  729, 1517,  353,  353,  353,  353,  764,  765,

      766,  412,  413,  414, 1642,  412,  413,  414,  412,  413,
      414,  353,  353,  353,  353,  353,  353,  673,  673,  673,
      673,  485,  485,  485,  485, 1366,  673,  673,  673,  673,
      412,  413,  414,  199,  735, 1525,  735, 1643, 1373,  736,
      736,  736,  736,  673,  673,  673,  673,  673,  673,  715,
      715,  715,  715,  715,  199,  715,  716,  784,  715,  715,
      715,  784, 1381,  715,  459,  715,  460,  460,  460,  460,
     1537,  717,  715, 1644, 1389,  715,  731,  739,  462,  740,
      740,  740,  740,  412,  413,  414, 1395,  411,  715,  674,
      715,  716,  715,  732,  675,  467,  462,  467,  411,  674,

      738,  738,  738,  738,  412,  413,  414,  785,  786,  787,
      675,  785,  786,  787, 1464,  715,  715,  715, 1473,  715,
      715,  718,  719,  720,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
     1481,  463,  734,  734,  734,  734,  463,  463,  463,  463,
      463,  465,  465,  465,  466,  465,  465,  465,  465,  465,
      465,  465,  465,  463,  463,  463,  463,  463,  465,  465,
      465,  465,  466,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  459,

     1493,  737,  737,  737,  737,  303,  303,  303,  303,  743,
     1645,  743,  882,  462,  744,  744,  744,  744,  479, 1508,
     1517,  479,  565,  565,  565,  565, 1525,  246, 1645, 1537,
      246,  462,  512,  480, 1458,  473,  480,  248, 1021,  746,
      248,  473,  675,  514,  514,  514,  514,  515,  246,  674,
      411,  516,  512,  481,  270,  742,  481,  479,  248,  882,
      754,  675,  883,  884,  885,  512,  246,  515,  674,  246,
      411,  516,  480,  742,  747,  534,  248,  675,  674,  248,
      788,  487,  411,  482,  483,  484,  482,  483,  484,  675,
      246, 1015,  481,  487, 1015,  755,  270,  518,  519,  520,

      248, 1016,  246,  674,  748,  749,  750,  411,  270,  883,
      884,  885,  248,  949,  949,  949,  488,  518,  519,  520,
      775, 1422,  482,  483,  484,  756,  757,  758,  488,  246,
      802,  803,  804, 1421,  503,  534, 1420,  512, 1419,  248,
     1418,  410,  503,  246,  410, 1417,  489,  490,  491,  270,
      410,  246,  788,  248, 1416,  776, 1415,  270,  489,  490,
      491,  248,  672,  672,  672,  841, 1414,  841,  640,  504,
      842,  842,  842,  842,  640, 1413,  530,  504,  530,  246,
     1412,  531,  531,  531,  531,  777,  778,  779, 1411,  805,
     1410,  805, 1409,  478,  806,  806,  806,  806,  784,  505,

      506,  507,  802,  803,  804, 1408,  646,  505,  506,  507,
      512,  478,  646,  246,  665,  531,  531,  531,  531,  513,
      665,  782,  782,  782,  782,  515, 1407,  478,  410,  516,
     1034, 1035, 1036,  517,  410,  810,  977,  810,  533,  977,
      811,  811,  811,  811,  784,  478,  978,  246,  785,  786,
      787,  517,  979,  534,  938,  979,  938,  248,  623,  939,
      939,  939,  980, 1403,  608,  533,  608,  292,  928,  609,
      609,  609,  609,  535,  246,  518,  519,  520,  479,  652,
      534,  558,  652,  590,  248,  617,  610,  266,  652,  509,
      509,  509,  509,  480,  785,  786,  787,  248,  593,  558,

      535,  510,  594,  536,  537,  538,  533,  638,  638,  638,
     1402,  590,  639,  481,  473,  246,  473,  919,  831,  510,
      473,  534,  768,  769,  770,  248,  886,  246, 1401,  910,
      536,  537,  538,  480, 1046, 1047, 1048,  248, 1400,  860,
     1399,  535, 1185,  482,  483,  484,  790, 1187,  596,  597,
      598, 1388,  590,  832,  861,  513, 1387,  791,  791,  791,
      791,  792, 1052, 1053, 1054,  516, 1179,  886, 1380,  793,
     1379,  536,  537,  538,  860, 1172,  900,  901,  902,  941,
      546,  783,  941,  833,  834,  835, 1365,  793,  941,  246,
     1364,  644,  644,  644,  652,  247,  645,  949, 1163,  248,

      652,  546,  589,  949,  862,  863,  864, 1056, 1057, 1058,
      246,  794,  795,  796,  790,  547,  247,  900,  901,  902,
      248, 1357,  899,  513, 1356,  809,  809,  809,  809,  792,
      798,  799,  800,  516, 1355,  950,  547,  793,  941,  559,
      990,  950,  559,  990,  941,  548,  549,  550,  292,  783,
      991,  292, 1153, 1203,  560,  793, 1354,  560,  294, 1203,
      895,  294,  648,  648,  648,  648,  548,  549,  550,  469,
      469,  469,  469, 1353,  561, 1015,  784,  561, 1015,  794,
      795,  796,  813,  887,  292, 1016,  609,  609,  609,  609,
     1352,  814,  784,  815,  815,  815,  815,  816,  558, 1351,

     1145,  817, 1350, 1349,  562,  563,  564,  562,  563,  564,
      844,  659,  659,  659,  659, 1141,  558,  481,  640,  292,
      640,  559, 1348,  383,  640,  308,  785,  786,  787,  294,
      292,  661,  661,  661,  661,  881,  560,  822,  823,  824,
      294,  383,  785,  786,  787,  845, 1347,  818,  819,  820,
      831,  661,  661,  661,  661, 1346,  561, 1244, 1135,  246,
     1244,  838,  838,  838,  838,  480,  467, 1245,  467,  248,
      580,  738,  738,  738,  738,  846,  847,  848, 1018, 1018,
     1018, 1018, 1345,  872,  852,  832,  562,  563,  564,  567,
     1124, 1125, 1126,  292,  737,  737,  737,  737,  292,  612,

      866,  867,  868,  294,  308,  903,  572,  903,  294, 1344,
      904,  904,  904,  904,  882,  833,  834,  835,  590,  853,
      744,  744,  744,  744,  568,  567, 1136, 1137, 1138,  592,
      592,  592,  592,  593,  292,  865, 1258,  594,  873, 1258,
      308,  840, 1204,  581,  294, 1343, 1259,  292, 1204,  854,
      855,  856,  292,  612,  569,  570,  571,  294,  308,  840,
      568,  581,  294,  859,  883,  884,  885, 1142, 1143, 1144,
      292, 1405, 1649,  874, 1342, 1649,  308, 1405,  582, 1341,
      294,  792, 1649,  596,  597,  598,  736,  736,  736,  736,
      569,  570,  571, 1123,  566,  882,  582,  739,  461,  740,

      740,  740,  740,  875,  876,  877, 1340, 1406,  583,  584,
      585,  851,  908, 1406,  908,  611,  461,  909,  909,  909,
      909,  882,  558, 1339,  292,  843,  583,  584,  585,  590,
      612,  785,  786,  787,  294, 1146, 1147, 1148,  591, 1338,
      880,  880,  880,  880,  593,  883,  884,  885,  594, 1647,
      613, 1649,  595, 1649,  459, 1647,  738,  738,  738,  738,
     1337, 1648,  738,  738,  738,  738, 1649, 1648,  611, 1649,
      595,  883,  884,  885,  461, 1111, 1649,  292,  545, 1336,
      614,  615,  616,  612,  896,  897,  898,  294, 1070, 1070,
     1070, 1070,  461,  830,  596,  597,  598,  559,  539,  646,

      789,  646,  532,  613,  611,  646,  304, 1335,  587,  587,
      587,  587,  560,  292,  821, 1334,  294,  812,  789,  612,
      588, 1333, 1649,  294, 1649, 1332, 1095, 1019, 1019, 1019,
     1019,  929,  561,  614,  615,  616, 1097, 1321,  588,  613,
      292,  809,  809,  809,  809, 1320,  560,  920,  921,  922,
      294, 1649, 1089, 1649,  459, 1313,  460,  460,  460,  460,
      762, 1312,  562,  563,  564,  888,  930, 1082,  462,  614,
      615,  616,  624, 1298,  591,  763,  889,  889,  889,  889,
      890,  292,  977, 1297,  594,  977,  462,  293,  891, 1073,
      511,  294,  978,  624, 1290,  762,  931,  932,  933,  882,

      881,  801,  292,  199, 1289, 1288,  891,  625,  293,  939,
      939,  939,  294,  979, 1649, 1063,  979, 1649, 1287, 1649,
      797, 1286, 1649,  980, 1649,  764,  765,  766,  625, 1649,
      892,  893,  894,  888,  199,  789, 1285,  626,  627,  628,
      199, 1284,  591,  890,  907,  907,  907,  907,  890,  883,
      884,  885,  594,  412,  413,  414,  891, 1055,  626,  627,
      628, 1437, 1649, 1283,  981, 1649, 1649, 1282,  881, 1649,
     1051, 1281, 1649,  783,  891, 1280, 1649, 1072, 1072, 1072,
     1072, 1096, 1279,  199,  412,  413,  414,  199, 1045,  789,
      412,  413,  414,  883,  884,  885, 1097,  502,  892,  893,

      894,  911,  842,  842,  842,  842, 1186,  789, 1278,  982,
      912,  983,  913,  913,  913,  913,  914,  774,  492, 1649,
      915, 1187, 1649,  907,  907,  907,  907, 1277,  767, 1649,
      939,  939,  939,  412,  413,  414,  561,  412,  413,  414,
      199, 1649, 1276,  761, 1649, 1275, 1098, 1099, 1100, 1649,
      762, 1649, 1649, 1649, 1274, 1033, 1649,  486, 1273, 1649,
      753,  478,  199, 1649, 1064,  763,  916,  917,  918,  929,
      199, 1188, 1189, 1190,  199,  984, 1272,  745,  292,  784,
      942,  942,  942,  942,  560,  762, 1649, 1271,  294, 1649,
      412,  413,  414, 1270,  985, 1649, 1649, 1021, 1649, 1064,

      986,  987,  675,  199,  930, 1649,  674,  199,  944,  944,
      944,  411,  412,  413,  414,  764,  765,  766,  675,  674,
      412,  413,  414,  411,  412,  413,  414, 1225, 1224, 1065,
     1066, 1067, 1228,  988,  931,  932,  933,  945,  945,  945,
      945, 1649, 1439, 1223, 1649, 1222,  945,  945,  945,  945,
     1221, 1649, 1220,  412,  413,  414, 1219,  412,  413,  414,
     1218, 1217,  199,  945,  945,  945,  945,  945,  945,  673,
      673,  673,  673,  990,  860, 1216,  990, 1215,  673,  673,
      673,  673, 1649,  991,  199, 1649, 1034, 1035, 1036,  861,
     1214, 1213, 1649, 1212,  199,  673,  673,  673,  673,  673,

      673,  989, 1211,  199, 1210, 1649, 1209, 1208, 1649,  860,
     1207, 1206,  412,  413,  414, 1649, 1205, 1649,  411, 1200,
     1649, 1649, 1227,  199, 1649,  992,  199, 1649, 1046, 1047,
     1048, 1649,  199,  313,  412,  413,  414, 1199,  199,  862,
      863,  864,  199,  623,  412,  413,  414, 1198, 1197, 1649,
      928,  306, 1649,  412,  413,  414, 1196, 1237, 1649, 1649,
      617, 1649, 1244, 1226,  993, 1244, 1195,  994, 1649,  610,
      199, 1194, 1245,  412,  413,  414,  412,  413,  414,  199,
     1193,  919,  412,  413,  414, 1052, 1053, 1054,  412,  413,
      414, 1192,  412,  413,  414,  415,  416,  417,  418,  419,

      420,  421,  996,  422, 1191,  423,  424,  425,  426,  995,
      427,  428,  429,  430,  910, 1161, 1649,  589, 1159, 1649,
      412,  413,  414, 1056, 1057, 1058, 1649, 1158,  899,  412,
      413,  414,  997,  997,  997,  997,  997,  199,  997,  998,
     1152,  997,  997,  997, 1151,  895,  997, 1649,  997, 1150,
     1649, 1329, 1330, 1331,  999,  997, 1649, 1649,  997, 1649,
     1124, 1125, 1126, 1004, 1149,  887, 1649, 1140,  199, 1139,
      881,  997, 1134,  997,  998,  997,  580,  199, 1160, 1160,
     1160, 1160, 1072, 1072, 1072, 1072, 1000,  412,  413,  414,
      887, 1649, 1133, 1132, 1649,  872, 1013,  290,  997,  997,

      997, 1649,  997,  997, 1001, 1002, 1003, 1131,  887,  199,
      572, 1130,  199, 1005, 1015, 1129,  199, 1015,  412,  413,
      414, 1136, 1137, 1138, 1016,  865, 1128,  412,  413,  414,
     1006, 1006, 1006, 1006, 1006,  199, 1006, 1007, 1014, 1006,
     1006, 1006, 1127,  859, 1006, 1122, 1006, 1229, 1247, 1142,
     1143, 1144, 1008, 1006,  566, 1649, 1006, 1121, 1649,  412,
      413,  414,  412,  413,  414, 1649,  412,  413,  414, 1006,
     1120, 1006, 1007, 1006,  851,  810,  199,  810, 1009, 1119,
      811,  811,  811,  811,  784,  412,  413,  414,  558,  806,
      806,  806,  806,  784, 1118, 1117, 1006, 1006, 1006,  512,

     1006, 1006, 1010, 1011, 1012,  843, 1017,  275,  513, 1109,
     1020, 1020, 1020, 1020,  515, 1146, 1147, 1148,  516, 1396,
     1397, 1398, 1022, 1494, 1495, 1496,  412,  413,  414, 1649,
      545,  246, 1649,  746,  785,  786,  787,  534, 1108, 1649,
      746,  248,  246,  785,  786,  787, 1107,  830,  270,  246,
     1440,  268,  248, 1440, 1106,  270,  539, 1023,  754,  248,
     1441,  754, 1105,  532,  518,  519,  520,  246,  747, 1649,
      246, 1104, 1649,  534, 1438,  747,  534,  248, 1103, 1649,
      248,  199,  754, 1162, 1162, 1162, 1162, 1024, 1025, 1026,
      821,  246, 1443,  755,  775, 1443,  755,  534,  748,  749,

      750,  248, 1444,  246, 1102,  748,  749,  750, 1649,  534,
     1101, 1649,  199,  248,  812,  199, 1071,  755, 1649,  511,
     1248,  775, 1442,  756,  757,  758,  756,  757,  758,  776,
      246,  412,  413,  414, 1069,  775,  534, 1329, 1330, 1331,
      248, 1249, 1446, 1258,  246, 1446, 1258,  756,  757,  758,
      534, 1068, 1447, 1259,  248, 1246,  776,  801, 1062,  777,
      778,  779,  412,  413,  414,  412,  413,  414, 1061,  805,
      776,  805,  797, 1060,  806,  806,  806,  806,  784,  811,
      811,  811,  811,  784, 1059,  789,  777,  778,  779, 1074,
     1050,  199, 1049, 1162, 1162, 1162, 1162,  783,  246, 1044,

      777,  778,  779,  790, 1075,  887,  502, 1043,  248, 1042,
      860,  774,  513,  244,  809,  809,  809,  809,  792, 1538,
     1539, 1540,  516,  887, 1076,  861,  793, 1041,  785,  786,
      787,  479,  492,  785,  786,  787, 1040, 1154,  783, 1039,
      246,  412,  413,  414,  793,  860, 1080,  767,  512,  199,
      248, 1038,  882, 1037, 1077, 1078, 1079, 1649,  761, 1081,
     1081, 1081, 1081,  515, 1032,  486,  481,  516,  794,  795,
      796,  790, 1154, 1031, 1030,  862,  863,  864, 1649,  753,
      513, 1649,  791,  791,  791,  791,  792, 1029, 1649, 1260,
      516,  478,  199, 1028,  793, 1027,  482,  483,  484,  412,

      413,  414, 1155, 1156, 1157,  745,  783, 1396, 1397, 1398,
     1090,  230,  793,  518,  519,  520,  199,  198, 1256,  246,
     1244,  675,  674, 1244,  411,  270,  908,  976,  908,  248,
     1245,  909,  909,  909,  909,  882,  794,  795,  796, 1083,
      975,  199,  412,  413,  414, 1091,  831,  974,  814,  973,
     1084, 1084, 1084, 1084, 1085,  246,  972,  971,  817, 1649,
      970,  480, 1649,  831,  969,  248,  412,  413,  414, 1649,
      968,  967,  246,  966, 1076, 1092, 1093, 1094,  480,  963,
      831,  832,  248,  962,  959,  883,  884,  885,  958,  246,
      957,  412,  413,  414,  954,  480,  953,  952,  832,  248,

     1429,  951,  411, 1429, 1086, 1087, 1088,  590,  948,  947,
     1430,  833,  834,  835,  946,  832,  591, 1445, 1110, 1110,
     1110, 1110,  593, 1112,  347,  645,  594,  334,  833,  834,
      835,  639,  292,  320,  844, 1494, 1495, 1496,  612,  943,
      313, 1440,  294,  292, 1440,  833,  834,  835,  831,  308,
      935, 1441,  934,  294,  199,  623,  844,  246, 1113,  838,
      838,  838,  838,  480,  927,  292,  306,  248,  926,  845,
      925,  308,  596,  597,  598,  294, 1257,  852, 1538, 1539,
     1540,  617,  924,  832, 1443,  923,  292, 1443, 1114, 1115,
     1116,  845,  612,  610, 1444,  906,  294,  905,  589,  846,

      847,  848,  886,  906,  412,  413,  414,  905, 1649,  589,
      852, 1649,  853,  833,  834,  835,  886,  852, 1649,  292,
      879,  846,  847,  848, 1446,  612,  292, 1446,  878,  294,
      580,  873,  612,  871, 1447,  290,  294,  870,  873,  869,
      292,  572,  854,  855,  856,  853,  612,  292, 1649,  199,
      294, 1649,  853,  612,  903,  873,  903,  294, 1649,  904,
      904,  904,  904,  882,  292,  574,  874, 1448,  858,  857,
      612, 1261,  566,  874,  294,  854,  855,  856,  850,  199,
      849,  558,  854,  855,  856,  904,  904,  904,  904,  882,
      874,  283,  839,  199,  275, 1451,  875,  876,  877,  412,

      413,  414,  837,  875,  876,  877,  909,  909,  909,  909,
      882, 1262,  836,  883,  884,  885, 1649,  545,  829, 1649,
      875,  876,  877,  888,  268, 1269, 1649,  828,  827,  412,
      413,  414,  591,  539,  907,  907,  907,  907,  890,  883,
      884,  885,  594,  412,  413,  414,  891,  826,  825,  459,
     1164,  736,  736,  736,  736,  532,  808,  559,  881,  292,
      883,  884,  885,  807,  891, 1165,  292,  511,  590,  294,
      788,  808, 1170,  807,  511,  788,  294, 1649,  781, 1171,
     1171, 1171, 1171,  593,  780, 1166, 1064,  594,  892,  893,
      894,  888,  561, 1649,  502, 1019, 1019, 1019, 1019,  773,

      591,  784,  889,  889,  889,  889,  890,  244, 1429, 1649,
      594, 1429, 1649,  772,  891, 1167, 1168, 1169, 1430, 1649,
      771, 1064,  562,  563,  564,  492,  881,  494, 1649,  760,
     1180, 1649,  891,  596,  597,  598,  759,  486, 1649,  292,
     1258,  752,  751, 1258, 1649,  308,  478, 1649,  237,  294,
     1259, 1065, 1066, 1067, 1649,  472,  892,  893,  894, 1173,
      733,  199,  198,  699,  698, 1181,  929,  695,  912, 1449,
     1174, 1174, 1174, 1174, 1175,  292, 1649, 1440,  915, 1649,
     1440,  560,  692,  929,  689,  294, 1649, 1441, 1450,  688,
      687,  686,  292,  682, 1166, 1182, 1183, 1184,  560,  678,

      929,  930,  294,  675, 1443, 1064,  674, 1443, 1022,  292,
      411,  412,  413,  414, 1444,  560,  664,  246,  930,  294,
      784,  663,  662,  534, 1176, 1177, 1178,  248,  629,  647,
      347,  931,  932,  933, 1446,  930, 1562, 1446,  641,  334,
     1064,  635,  320, 1023, 1447,  634,  633,  313,  931,  932,
      933, 1305, 1305, 1305, 1305,  784,  622,  621, 1372, 1372,
     1372, 1372,  882,  306,  579,  931,  932,  933,  929,  578,
     1065, 1066, 1067, 1024, 1025, 1026, 1022,  292,  290,  942,
      942,  942,  942,  560, 1323,  246,  554,  294,  283, 1022,
     1589,  534,  553, 1589,  552,  248,  275,  254,  246, 1324,

     1590,  544,  543,  930,  534,  785,  786,  787,  248,  268,
      499, 1023,  883,  884,  885,  498,  244, 1154, 1649, 1323,
     1589, 1649,  474, 1589, 1023, 1154,  237,  230, 1649,  456,
     1590,  455,  882,  931,  932,  933,  945,  945,  945,  945,
      882, 1024, 1025, 1026,  198,  945,  945,  945,  945, 1325,
     1326, 1327, 1154,  175, 1024, 1025, 1026,  389,  388,  387,
     1154, 1074,  945,  945,  945,  945,  945,  945, 1201, 1201,
      246, 1201,  386, 1201,  385,  378, 1075, 1201, 1201, 1201,
      248, 1201, 1155, 1156, 1157,  375, 1074,  371,  368, 1201,
     1155, 1156, 1157,  354,  349,  246, 1076, 1390,  348,  347,

     1649, 1075,  350, 1649, 1292,  248, 1201,  349, 1201, 1201,
     1649,  348, 1391,  246, 1649, 1629,  347, 1649, 1629,  270,
      340, 1076,  337,  248, 1649, 1630, 1077, 1078, 1079,  336,
      335, 1649, 1390, 1201, 1649, 1201, 1201, 1202, 1202, 1293,
     1202, 1649, 1202,  334,  325,  322, 1202, 1202, 1202,  321,
     1202, 1077, 1078, 1079,  320,  299,  285, 1649, 1202, 1323,
     1649,  284, 1392, 1393, 1394,  283,  264, 1649,  239, 1294,
     1295, 1296,  238,  237, 1324, 1202, 1074, 1202, 1202, 1305,
     1305, 1305, 1305,  784,  230,  246, 1649, 1649,  219, 1649,
     1649, 1075,  188,  175, 1323,  248, 1649, 1649,  174, 1649,

      169,  169, 1202, 1649, 1202, 1202, 1230, 1230, 1230, 1230,
     1230, 1076, 1230, 1231, 1649, 1230, 1230, 1230, 1649, 1649,
     1230, 1569, 1230, 1649, 1325, 1326, 1327, 1649, 1232, 1230,
     1649, 1649, 1230,  785,  786,  787, 1649, 1649, 1649, 1649,
     1649, 1077, 1078, 1079, 1649, 1230, 1576, 1230, 1231, 1230,
     1649, 1300, 1589, 1629, 1233, 1589, 1629, 1649, 1649, 1649,
      246, 1649, 1590, 1630, 1649, 1649,  270, 1649, 1649, 1649,
      248, 1649, 1230, 1230, 1230, 1649, 1230, 1230, 1234, 1235,
     1236, 1238, 1238, 1238, 1238, 1238, 1301, 1238, 1239, 1649,
     1238, 1238, 1238, 1649, 1649, 1238, 1629, 1238, 1649, 1629,

     1649, 1649, 1649, 1240, 1238, 1649, 1630, 1238, 1649, 1649,
     1074, 1649, 1649, 1649, 1649, 1649, 1302, 1303, 1304,  246,
     1238, 1649, 1238, 1239, 1238, 1075, 1323, 1649, 1649,  248,
     1372, 1372, 1372, 1372,  882, 1649, 1649, 1649, 1649, 1649,
     1649, 1324, 1649, 1649, 1649, 1076, 1649, 1238, 1238, 1238,
     1649, 1238, 1238, 1241, 1242, 1243, 1250, 1250, 1250, 1250,
     1250, 1323, 1250, 1251, 1649, 1250, 1250, 1250, 1649, 1649,
     1250, 1649, 1250, 1649, 1649, 1077, 1078, 1079, 1252, 1250,
     1649, 1649, 1250, 1649,  883,  884,  885, 1646, 1646, 1646,
     1649, 1325, 1326, 1327, 1649, 1250, 1649, 1250, 1251, 1250,

     1649, 1649, 1649, 1390, 1649, 1646, 1646, 1646, 1646, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1391, 1649,
     1649, 1649, 1250, 1250, 1250, 1649, 1250, 1250, 1253, 1254,
     1255,  415,  416,  417,  418,  419,  420,  421, 1390,  422,
     1390,  423,  424,  425,  426, 1649,  427,  428,  429,  430,
     1263, 1263, 1263, 1263, 1263, 1391, 1263, 1264, 1649, 1263,
     1263, 1263, 1074, 1649, 1263, 1307, 1263, 1649, 1392, 1393,
     1394,  246, 1265, 1263,  246, 1390, 1263, 1085, 1649, 1649,
      270,  248, 1649, 1649,  248, 1649, 1649, 1649, 1649, 1263,
     1649, 1263, 1264, 1263, 1649, 1649, 1649, 1076, 1649, 1649,

     1308, 1649, 1649, 1649, 1649, 1392, 1393, 1394, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1263, 1263, 1263, 1649,
     1263, 1263, 1266, 1267, 1268,  790, 1649, 1077, 1078, 1079,
     1309, 1310, 1311, 1315,  513, 1649, 1072, 1072, 1072, 1072,
      792, 1649,  246, 1649,  516, 1649, 1649, 1649,  534, 1649,
     1090, 1649,  248, 1649, 1649, 1649, 1649, 1649, 1649,  246,
      783, 1649, 1649, 1649, 1649,  270, 1649, 1649, 1316,  248,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1091, 1649, 1649, 1649, 1649,
      794,  795,  796,  790, 1649, 1649, 1649, 1649, 1317, 1318,

     1319, 1649,  513, 1649, 1070, 1070, 1070, 1070,  792, 1649,
     1649, 1649,  516, 1649, 1649, 1092, 1093, 1094, 1090, 1649,
     1649, 1112, 1649, 1649, 1649, 1649, 1649,  246,  783, 1649,
      292, 1649, 1112,  270, 1649, 1649,  612,  248, 1649, 1649,
      294,  292, 1649, 1649, 1649, 1649, 1649,  612, 1649, 1649,
     1649,  294, 1649, 1091, 1649, 1649, 1113, 1649,  794,  795,
      796, 1083, 1649, 1649, 1649, 1649, 1649, 1113, 1649, 1649,
      814, 1649, 1084, 1084, 1084, 1084, 1085, 1649, 1649, 1649,
      817, 1649, 1649, 1092, 1093, 1094, 1114, 1115, 1116, 1649,
     1649, 1649, 1649, 1649, 1649, 1112, 1076, 1114, 1115, 1116,

     1164, 1649, 1649, 1649,  292, 1649, 1649, 1649, 1649,  292,
      612, 1649, 1649, 1649,  294, 1165, 1649, 1649, 1649,  294,
     1649, 1649, 1649, 1649, 1649, 1649, 1086, 1087, 1088,  888,
     1113, 1649, 1649, 1649, 1649, 1166, 1164, 1649,  591, 1649,
     1162, 1162, 1162, 1162,  890,  292, 1649, 1649,  594, 1649,
     1649, 1165, 1649, 1649, 1359,  294, 1649, 1649, 1649, 1649,
     1114, 1115, 1116,  292,  881, 1167, 1168, 1169, 1649,  308,
     1649, 1166, 1164,  294, 1649, 1649, 1649, 1649, 1649, 1649,
     1649,  292, 1649, 1649, 1649, 1649, 1649, 1165, 1649, 1360,
     1649,  294, 1649, 1649,  892,  893,  894,  888, 1649, 1649,

     1649, 1167, 1168, 1169, 1649, 1649,  591, 1166, 1160, 1160,
     1160, 1160,  890, 1649, 1367, 1649,  594, 1649, 1649, 1361,
     1362, 1363, 1649,  292, 1649, 1164, 1649, 1649, 1649,  308,
     1649, 1649,  881,  294,  292, 1649, 1164, 1167, 1168, 1169,
     1165, 1649, 1649, 1649,  294,  292, 1649, 1649, 1649, 1368,
     1649, 1175, 1649, 1649, 1649,  294, 1649, 1649, 1649, 1374,
     1166, 1649,  892,  893,  894, 1649, 1649, 1649,  292, 1649,
     1649, 1166, 1649, 1649,  308, 1649, 1649, 1649,  294, 1369,
     1370, 1371, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1167, 1168, 1169, 1649, 1375, 1649, 1649, 1649, 1649, 1649,

     1649, 1167, 1168, 1169, 1173, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1382,  912, 1649, 1174, 1174, 1174, 1174, 1175,
     1649,  292, 1649,  915, 1376, 1377, 1378,  612, 1649, 1180,
     1649,  294, 1649, 1649, 1649, 1649, 1649, 1180,  292, 1166,
     1649, 1649, 1649, 1649,  308, 1649,  292, 1383,  294, 1649,
     1649, 1649,  308, 1649, 1649, 1649,  294, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1181, 1465, 1649, 1649, 1649, 1176,
     1177, 1178, 1181, 1649,  246, 1649, 1649, 1384, 1385, 1386,
      534, 1649, 1292, 1649,  248, 1649, 1649, 1649, 1649, 1649,
     1649,  246, 1649, 1649, 1182, 1183, 1184,  270, 1649, 1649,

     1466,  248, 1182, 1183, 1184, 1404, 1404, 1649, 1404, 1649,
     1404, 1649, 1649, 1649, 1404, 1404, 1404, 1293, 1404, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1404, 1649, 1649, 1649,
     1467, 1468, 1469, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1404, 1292, 1404, 1404, 1294, 1295, 1296,
     1649, 1649, 1649,  246, 1649, 1649, 1649, 1649, 1649,  270,
     1649, 1649, 1649,  248, 1649, 1649, 1649, 1649, 1649, 1649,
     1404, 1649, 1404, 1404, 1423, 1423, 1423, 1423, 1423, 1293,
     1423, 1424, 1649, 1423, 1423, 1423, 1649, 1649, 1423, 1649,
     1423, 1649, 1649, 1649, 1649, 1649, 1425, 1423, 1649, 1649,

     1423, 1649, 1649, 1474, 1649, 1649, 1649, 1649, 1649, 1294,
     1295, 1296,  246, 1423, 1649, 1423, 1424, 1423,  534, 1649,
     1649, 1649,  248, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1475, 1649,
     1423, 1423, 1423, 1649, 1423, 1423, 1426, 1427, 1428, 1649,
     1429, 1649, 1649, 1429, 1649, 1649, 1649, 1649, 1649, 1649,
     1430, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1476, 1477,
     1478,  199, 1649, 1649, 1649, 1649, 1300, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649,  246, 1649, 1649, 1649, 1649,
     1649,  270, 1649, 1649, 1300,  248, 1649, 1649, 1649, 1649,

     1649, 1649, 1649,  246, 1649, 1649, 1649, 1649, 1649,  270,
     1649, 1301, 1649,  248, 1649, 1649, 1649, 1649, 1649, 1649,
     1649,  412,  413,  414, 1431, 1431, 1431, 1431, 1431, 1301,
     1431, 1432, 1649, 1431, 1431, 1431, 1649, 1649, 1431, 1649,
     1431, 1302, 1303, 1304, 1649, 1649, 1433, 1431, 1649, 1649,
     1431, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1302,
     1303, 1304, 1649, 1431, 1649, 1431, 1432, 1431, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1431, 1431, 1431, 1649, 1431, 1431, 1434, 1435, 1436,  415,

      416,  417,  418,  419,  420,  421, 1649,  422, 1649,  423,
      424,  425,  426, 1649,  427,  428,  429,  430, 1452, 1452,
     1452, 1452, 1452, 1649, 1452, 1453, 1649, 1452, 1452, 1452,
     1482, 1649, 1452, 1307, 1452, 1649, 1649, 1649, 1649,  246,
     1454, 1452,  246, 1649, 1452,  534, 1649, 1307,  270,  248,
     1649, 1649,  248, 1649, 1649, 1649,  246, 1452, 1315, 1452,
     1453, 1452,  270, 1649, 1649, 1483,  248,  246, 1308, 1649,
     1649, 1649, 1649,  534, 1649, 1649, 1649,  248, 1649, 1649,
     1649, 1649, 1308, 1649, 1452, 1452, 1452, 1649, 1452, 1452,
     1455, 1456, 1457, 1316, 1649, 1484, 1485, 1486, 1309, 1310,

     1311, 1315, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
      246, 1649, 1309, 1310, 1311, 1649,  534, 1649, 1315, 1649,
      248, 1649, 1649, 1317, 1318, 1319, 1509,  246, 1649, 1359,
     1649, 1649, 1649,  534, 1649,  292, 1316,  248,  292, 1649,
     1359,  612, 1649, 1518,  308,  294, 1649, 1649,  294,  292,
     1649, 1649,  292, 1316, 1367,  308, 1649, 1649,  612,  294,
     1649, 1510,  294,  292, 1360, 1649, 1317, 1318, 1319,  308,
     1649, 1649, 1649,  294, 1649, 1360, 1649, 1649, 1519, 1649,
     1649, 1649, 1649, 1317, 1318, 1319, 1649, 1649, 1649, 1368,
     1649, 1511, 1512, 1513, 1361, 1362, 1363, 1649, 1649, 1649,

     1649, 1649, 1649, 1367, 1649, 1361, 1362, 1363, 1520, 1521,
     1522, 1649,  292, 1649, 1526, 1649, 1649, 1374,  308, 1369,
     1370, 1371,  294,  292, 1649, 1374,  292, 1649, 1382,  612,
     1649, 1649,  308,  294,  292, 1649,  294,  292, 1368, 1382,
      308, 1649, 1382,  612,  294, 1649, 1649,  294,  292, 1527,
     1649,  292, 1375, 1649,  612, 1649, 1649,  612,  294, 1649,
     1375,  294, 1649, 1383, 1649, 1649, 1649, 1649, 1369, 1370,
     1371, 1649, 1649, 1649, 1383, 1649, 1649, 1383, 1649, 1528,
     1529, 1530, 1376, 1377, 1378, 1649, 1649, 1649, 1649, 1649,
     1376, 1377, 1378, 1384, 1385, 1386, 1649, 1649, 1649, 1649,

     1649, 1649, 1649, 1649, 1384, 1385, 1386, 1384, 1385, 1386,
      415,  416,  417,  418,  419,  420,  421, 1649,  422, 1649,
      423,  424,  425,  426, 1649,  427,  428,  429,  430, 1556,
     1556, 1556, 1556, 1556, 1649, 1556, 1557, 1649, 1556, 1556,
     1556, 1649, 1649, 1556, 1649, 1556, 1649, 1649, 1649, 1649,
     1649, 1558, 1556, 1649, 1649, 1556, 1649, 1649, 1465, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649,  246, 1556, 1649,
     1556, 1557, 1556,  534, 1649, 1649, 1649,  248, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1466, 1649, 1556, 1556, 1556, 1649, 1556,

     1556, 1559, 1560, 1561, 1563, 1563, 1563, 1563, 1563, 1649,
     1563, 1564, 1649, 1563, 1563, 1563, 1649, 1649, 1563, 1649,
     1563, 1649, 1649, 1467, 1468, 1469, 1565, 1563, 1649, 1649,
     1563, 1649, 1649, 1465, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649,  246, 1563, 1649, 1563, 1564, 1563,  534, 1649,
     1649, 1649,  248, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1466, 1649,
     1563, 1563, 1563, 1649, 1563, 1563, 1566, 1567, 1568, 1570,
     1570, 1570, 1570, 1570, 1649, 1570, 1571, 1649, 1570, 1570,
     1570, 1649, 1649, 1570, 1649, 1570, 1649, 1649, 1467, 1468,

     1469, 1572, 1570, 1649, 1649, 1570, 1649, 1649, 1465, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649,  246, 1570, 1649,
     1570, 1571, 1570,  534, 1649, 1649, 1649,  248, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1466, 1649, 1570, 1570, 1570, 1649, 1570,
     1570, 1573, 1574, 1575, 1577, 1577, 1577, 1577, 1577, 1649,
     1577, 1578, 1649, 1577, 1577, 1577, 1649, 1649, 1577, 1649,
     1577, 1649, 1649, 1467, 1468, 1469, 1579, 1577, 1649, 1649,
     1577, 1649, 1649, 1474, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649,  246, 1577, 1649, 1577, 1578, 1577,  534, 1649,

     1649, 1649,  248, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1475, 1649,
     1577, 1577, 1577, 1649, 1577, 1577, 1580, 1581, 1582, 1583,
     1583, 1583, 1583, 1583, 1649, 1583, 1584, 1649, 1583, 1583,
     1583, 1649, 1649, 1583, 1474, 1583, 1649, 1474, 1476, 1477,
     1478, 1585, 1583,  246, 1649, 1583,  246, 1649, 1482,  534,
     1649, 1649,  534,  248, 1649, 1649,  248,  246, 1583, 1482,
     1583, 1584, 1583,  534, 1649, 1649, 1649,  248,  246, 1475,
     1649, 1649, 1475, 1649,  534, 1649, 1649, 1649,  248, 1649,
     1649, 1649, 1649, 1483, 1649, 1583, 1583, 1583, 1649, 1583,

     1583, 1586, 1587, 1588, 1483, 1649, 1649, 1482, 1649, 1476,
     1477, 1478, 1476, 1477, 1478, 1649,  246, 1649, 1509, 1649,
     1649, 1649,  534, 1484, 1485, 1486,  248,  292, 1649, 1509,
     1649, 1649, 1509,  612, 1484, 1485, 1486,  294,  292, 1649,
     1518,  292, 1483, 1518,  612, 1649, 1649,  612,  294,  292,
     1649,  294,  292, 1510, 1649,  612, 1649, 1649,  612,  294,
     1649, 1649,  294, 1649, 1510, 1649, 1649, 1510, 1649, 1649,
     1649, 1649, 1484, 1485, 1486, 1519, 1649, 1649, 1519, 1649,
     1649, 1649, 1649, 1511, 1512, 1513, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1511, 1512, 1513, 1511, 1512, 1513,

     1649, 1649, 1518, 1649, 1649, 1520, 1521, 1522, 1520, 1521,
     1522,  292, 1649, 1526, 1649, 1649, 1526,  612, 1649, 1649,
     1649,  294,  292, 1649, 1526,  292, 1649, 1649,  612, 1649,
     1649,  612,  294,  292, 1649,  294, 1649, 1519, 1649,  612,
     1649, 1649, 1649,  294, 1649, 1649, 1649, 1649, 1527, 1649,
     1649, 1527, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1527,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1520, 1521, 1522,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1528, 1529,
     1530, 1528, 1529, 1530, 1649, 1649, 1649, 1649, 1649, 1528,
     1529, 1530, 1623, 1623, 1623, 1623, 1623, 1649, 1623, 1624,

     1649, 1623, 1623, 1623, 1649, 1649, 1623, 1649, 1623, 1649,
     1649, 1649, 1649, 1649, 1625, 1623, 1649, 1649, 1623, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1623, 1649, 1623, 1624, 1623, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1623, 1623,
     1623, 1649, 1623, 1623, 1626, 1627, 1628, 1631, 1631, 1631,
     1631, 1631, 1649, 1631, 1632, 1649, 1631, 1631, 1631, 1649,
     1649, 1631, 1649, 1631, 1649, 1649, 1649, 1649, 1649, 1633,
     1631, 1649, 1649, 1631, 1649, 1649, 1649, 1649, 1649, 1649,

     1649, 1649, 1649, 1649, 1649, 1649, 1631, 1649, 1631, 1632,
     1631, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1631, 1631, 1631, 1649, 1631, 1631, 1634,
     1635, 1636,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      170,  170, 1649, 1649, 1649,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170, 1649,  170,  170,

      170,  170,  170,  227, 1649,  227, 1649, 1649, 1649,  227,
     1649,  227,  227,  229,  229, 1649, 1649,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  244,
     1649,  244, 1649, 1649,  244,  244,  244, 1649,  244,  244,
     1649,  244,  244,  244,  244,  244,  244,  268, 1649,  268,
     1649, 1649,  268,  268,  268, 1649,  268,  268, 1649,  268,
      268,  268,  268,  268,  268,  275, 1649,  275, 1649, 1649,

      275,  275, 1649, 1649,  275,  275, 1649, 1649,  275, 1649,
      275,  275,  275,  290, 1649,  290, 1649, 1649,  290,  290,
      290,  290,  290,  290, 1649,  290,  290,  290,  290,  290,
      290,  306, 1649,  306, 1649, 1649,  306,  306,  306,  306,
      306,  306, 1649,  306,  306,  306,  306,  306,  306,  313,
     1649,  313, 1649, 1649,  313,  313, 1649,  313,  313,  313,
     1649, 1649,  313, 1649,  313,  313,  313,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      351, 1649, 1649, 1649,  351, 1649,  351,  351,  359,  359,

      359, 1649,  359, 1649, 1649,  359, 1649, 1649,  359,  359,
      359,  359,  359,  376, 1649, 1649,  376, 1649,  376, 1649,
      376,  376, 1649, 1649,  376,  376,  376,  376, 1649,  376,
      376,  376, 1649,  376,  376,  376,  390,  390, 1649,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  393,
      393, 1649,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,

      395,  395,  395,  395,  395,  411, 1649,  411, 1649, 1649,
      411,  411, 1649,  411,  411,  411, 1649, 1649,  411,  411,
      411,  411,  411,  461, 1649,  461, 1649, 1649, 1649,  461,
     1649,  461,  461,  229,  229, 1649, 1649,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  478, 1649,  478, 1649,
     1649,  478,  478,  478, 1649,  478,  478, 1649,  478,  478,
      478,  478,  478,  478,  244, 1649,  244, 1649, 1649,  244,
      244,  244, 1649,  244,  244, 1649,  244,  244,  244,  244,
      244,  244,  486, 1649,  486, 1649, 1649,  486,  486,  486,

     1649,  486,  486, 1649,  486,  486,  486,  486,  486,  486,
      492, 1649,  492, 1649, 1649,  492,  492, 1649, 1649,  492,
      492, 1649, 1649,  492, 1649,  492,  492,  492,  502, 1649,
      502, 1649, 1649,  502,  502,  502, 1649,  502,  502, 1649,
      502,  502,  502,  502,  502,  502,  511, 1649,  511, 1649,
     1649,  511,  511,  511, 1649,  511,  511, 1649,  511,  511,
     1649,  511,  511,  511,  532, 1649,  532, 1649, 1649,  532,
      532,  532, 1649,  532,  532, 1649,  532,  532,  532,  532,
      532,  532,  268, 1649,  268, 1649, 1649,  268,  268,  268,
     1649,  268,  268, 1649,  268,  268,  268,  268,  268,  268,

      539, 1649,  539, 1649, 1649,  539,  539, 1649, 1649,  539,
     1649, 1649, 1649,  539,  539,  539,  539,  539,  545, 1649,
      545, 1649, 1649,  545,  545,  545, 1649,  545,  545, 1649,
      545,  545,  545,  545,  545,  545,  558, 1649,  558, 1649,
     1649,  558,  558,  558,  558,  558,  558, 1649,  558,  558,
      558,  558,  558,  558,  290, 1649,  290, 1649, 1649,  290,
      290,  290,  290,  290,  290, 1649,  290,  290,  290,  290,
      290,  290,  566, 1649,  566, 1649, 1649,  566,  566,  566,
      566,  566,  566, 1649,  566,  566,  566,  566,  566,  566,
      572, 1649,  572, 1649, 1649,  572,  572, 1649,  572,  572,

      572, 1649, 1649,  572, 1649,  572,  572,  572,  580, 1649,
      580, 1649, 1649,  580,  580,  580,  580,  580,  580, 1649,
      580,  580,  580,  580,  580,  580,  589, 1649,  589, 1649,
     1649,  589,  589,  589,  589,  589,  589, 1649,  589,  589,
     1649,  589,  589,  589,  610, 1649,  610, 1649, 1649,  610,
      610,  610,  610,  610,  610, 1649,  610,  610,  610,  610,
      610,  610,  306, 1649,  306, 1649, 1649,  306,  306,  306,
      306,  306,  306, 1649,  306,  306,  306,  306,  306,  306,
      617, 1649,  617, 1649, 1649,  617,  617, 1649,  617,  617,
     1649, 1649, 1649,  617,  617,  617,  617,  617,  623, 1649,

      623, 1649, 1649,  623,  623,  623,  623,  623,  623, 1649,
      623,  623,  623,  623,  623,  623,  351, 1649, 1649, 1649,
      351, 1649,  351,  351,  359, 1649, 1649, 1649,  359, 1649,
      359,  359,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463, 1649,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  227, 1649,  227, 1649, 1649,
     1649,  227, 1649,  227,  227,  376, 1649, 1649,  376, 1649,
      376, 1649,  376,  376, 1649, 1649,  376,  376,  376,  376,
     1649,  376,  376,  376, 1649,  376,  376,  376,  393,  393,
     1649,  393,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  170,  170, 1649, 1649, 1649,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170, 1649,  170,
      170,  170,  170,  170,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  461, 1649, 1649,
     1649,  461, 1649,  461,  461,  671, 1649, 1649, 1649,  671,
     1649,  671,  671,  411, 1649,  411, 1649, 1649,  411,  411,
     1649,  411,  411,  411, 1649, 1649,  411,  411,  411,  411,
      411,  741, 1649,  741, 1649, 1649, 1649,  741, 1649,  741,

      741,  511, 1649,  511, 1649, 1649,  511,  511, 1649, 1649,
      511,  511, 1649,  511,  511, 1649,  511,  511,  511,  478,
     1649,  478, 1649, 1649,  478,  478,  478, 1649,  478,  478,
     1649,  478,  478,  478,  478,  478,  478,  745, 1649,  745,
     1649, 1649,  745,  745,  745, 1649,  745,  745, 1649,  745,
      745,  745,  745,  745,  745,  753, 1649,  753, 1649, 1649,
      753,  753,  753, 1649,  753,  753, 1649,  753,  753,  753,
      753,  753,  753,  486, 1649,  486, 1649, 1649,  486,  486,
      486, 1649,  486,  486, 1649,  486,  486,  486,  486,  486,
      486,  761, 1649,  761, 1649, 1649,  761,  761, 1649, 1649,

      761,  761, 1649, 1649,  761,  761,  761,  761,  761,  767,
     1649,  767, 1649, 1649,  767,  767, 1649, 1649,  767, 1649,
     1649, 1649,  767,  767,  767,  767,  767,  774, 1649,  774,
     1649, 1649,  774,  774,  774, 1649,  774,  774, 1649,  774,
      774,  774,  774,  774,  774,  502, 1649,  502, 1649, 1649,
      502,  502,  502, 1649,  502,  502, 1649,  502,  502,  502,
      502,  502,  502,  783, 1649,  783, 1649, 1649,  783,  783,
     1649, 1649,  783,  783, 1649, 1649,  783,  783,  783,  783,
      783,  789, 1649,  789, 1649, 1649,  789,  789,  789, 1649,
      789,  789, 1649,  789,  789,  789,  789,  789,  789,  797,

     1649,  797, 1649, 1649,  797,  797, 1649, 1649,  797, 1649,
     1649, 1649,  797,  797,  797,  797,  797,  801, 1649,  801,
     1649, 1649,  801,  801, 1649, 1649,  801,  801, 1649, 1649,
      801, 1649,  801,  801,  801,  812, 1649,  812, 1649, 1649,
      812,  812,  812, 1649,  812,  812, 1649,  812,  812,  812,
      812,  812,  812,  532, 1649,  532, 1649, 1649,  532,  532,
      532, 1649,  532,  532, 1649,  532,  532,  532,  532,  532,
      532,  821, 1649,  821, 1649, 1649,  821,  821, 1649, 1649,
      821, 1649, 1649, 1649,  821,  821,  821,  821,  821,  539,
     1649,  539, 1649, 1649,  539,  539, 1649, 1649,  539, 1649,

     1649, 1649,  539,  539,  539,  539,  539,  830, 1649,  830,
     1649, 1649,  830,  830,  830, 1649,  830,  830, 1649,  830,
      830,  830,  830,  830,  830,  545, 1649,  545, 1649, 1649,
      545,  545,  545, 1649,  545,  545, 1649,  545,  545,  545,
      545,  545,  545,  589, 1649,  589, 1649, 1649,  589,  589,
     1649,  589,  589,  589, 1649,  589,  589, 1649,  589,  589,
      589,  558, 1649,  558, 1649, 1649,  558,  558,  558,  558,
      558,  558, 1649,  558,  558,  558,  558,  558,  558,  843,
     1649,  843, 1649, 1649,  843,  843,  843,  843,  843,  843,
     1649,  843,  843,  843,  843,  843,  843,  851, 1649,  851,

     1649, 1649,  851,  851,  851,  851,  851,  851, 1649,  851,
      851,  851,  851,  851,  851,  566, 1649,  566, 1649, 1649,
      566,  566,  566,  566,  566,  566, 1649,  566,  566,  566,
      566,  566,  566,  859, 1649,  859, 1649, 1649,  859,  859,
     1649,  859,  859,  859, 1649, 1649,  859,  859,  859,  859,
      859,  865, 1649,  865, 1649, 1649,  865,  865, 1649,  865,
      865, 1649, 1649, 1649,  865,  865,  865,  865,  865,  872,
     1649,  872, 1649, 1649,  872,  872,  872,  872,  872,  872,
     1649,  872,  872,  872,  872,  872,  872,  580, 1649,  580,
     1649, 1649,  580,  580,  580,  580,  580,  580, 1649,  580,

      580,  580,  580,  580,  580,  881, 1649,  881, 1649, 1649,
      881,  881, 1649,  881,  881,  881, 1649, 1649,  881,  881,
      881,  881,  881,  887, 1649,  887, 1649, 1649,  887,  887,
      887,  887,  887,  887, 1649,  887,  887,  887,  887,  887,
      887,  895, 1649,  895, 1649, 1649,  895,  895, 1649,  895,
      895, 1649, 1649, 1649,  895,  895,  895,  895,  895,  899,
     1649,  899, 1649, 1649,  899,  899, 1649,  899,  899,  899,
     1649, 1649,  899, 1649,  899,  899,  899,  910, 1649,  910,
     1649, 1649,  910,  910,  910,  910,  910,  910, 1649,  910,
      910,  910,  910,  910,  910,  610, 1649,  610, 1649, 1649,

      610,  610,  610,  610,  610,  610, 1649,  610,  610,  610,
      610,  610,  610,  919, 1649,  919, 1649, 1649,  919,  919,
     1649,  919,  919, 1649, 1649, 1649,  919,  919,  919,  919,
      919,  617, 1649,  617, 1649, 1649,  617,  617, 1649,  617,
      617, 1649, 1649, 1649,  617,  617,  617,  617,  617,  928,
     1649,  928, 1649, 1649,  928,  928,  928,  928,  928,  928,
     1649,  928,  928,  928,  928,  928,  928,  623, 1649,  623,
     1649, 1649,  623,  623,  623,  623,  623,  623, 1649,  623,
      623,  623,  623,  623,  623,  671, 1649, 1649, 1649,  671,
     1649,  671,  671,  463,  463,  463,  463,  463,  463,  463,

      463,  463,  463,  463,  463, 1649,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  376, 1649, 1649,  376,
     1649,  376, 1649,  376,  376, 1649, 1649,  376,  376,  376,
      376, 1649,  376,  376,  376, 1649,  376,  376,  376,  461,
     1649, 1649,  461, 1649, 1649, 1649,  461, 1649,  461,  461,
      715,  715,  715,  715,  715, 1649,  715,  715,  715,  715,
     1649, 1649,  715, 1649, 1649,  715,  715,  715, 1649,  715,
     1649, 1649,  715,  411, 1649, 1649,  411,  411, 1649,  411,
     1649, 1649,  411,  411, 1649,  411,  411,  411, 1649, 1649,
      411,  411,  411,  411,  411,  741, 1649,  741, 1649, 1649,

     1649,  741, 1649,  741,  741,  783, 1649,  783, 1649, 1649,
      783,  783, 1649, 1649,  783,  783, 1649, 1649,  783,  783,
      783,  783,  783,  511, 1649,  511, 1649, 1649,  511,  511,
      511, 1649,  511,  511, 1649,  511,  511, 1649,  511,  511,
      511, 1021, 1649, 1021, 1649, 1649, 1021, 1021, 1021, 1649,
     1021, 1021, 1649, 1021, 1021, 1021, 1021, 1021, 1021,  745,
     1649,  745, 1649, 1649,  745,  745,  745, 1649,  745,  745,
     1649,  745,  745,  745,  745,  745,  745,  753, 1649,  753,
     1649, 1649,  753,  753,  753, 1649,  753,  753, 1649,  753,
      753,  753,  753,  753,  753,  761, 1649,  761, 1649, 1649,

      761,  761, 1649, 1649,  761,  761, 1649, 1649,  761,  761,
      761,  761,  761, 1033, 1649, 1033, 1649, 1649, 1033, 1033,
     1649, 1649, 1033, 1649, 1649, 1649, 1033, 1033, 1033, 1033,
     1033,  767, 1649,  767, 1649, 1649,  767,  767, 1649, 1649,
      767, 1649, 1649, 1649,  767,  767,  767,  767,  767,  774,
     1649,  774, 1649, 1649,  774,  774,  774, 1649,  774,  774,
     1649,  774,  774,  774,  774,  774,  774,  789, 1649,  789,
     1649, 1649,  789,  789,  789, 1649,  789,  789, 1649,  789,
      789,  789,  789,  789,  789, 1045, 1649, 1045, 1649, 1649,
     1045, 1045, 1649, 1649, 1045, 1649, 1649, 1649, 1045, 1045,

     1045, 1045, 1045, 1051, 1649, 1051, 1649, 1649, 1051, 1051,
     1649, 1649, 1051, 1649, 1649, 1649, 1051, 1051, 1051, 1051,
     1051, 1055, 1649, 1055, 1649, 1649, 1055, 1055, 1649, 1649,
     1055, 1649, 1649, 1649, 1055, 1055, 1055, 1055, 1055,  797,
     1649,  797, 1649, 1649,  797,  797, 1649, 1649,  797, 1649,
     1649, 1649,  797,  797,  797,  797,  797, 1063, 1649, 1063,
     1649, 1649, 1063, 1063, 1649, 1649, 1063, 1063, 1649, 1649,
     1063, 1063, 1063, 1063, 1063, 1073, 1649, 1073, 1649, 1649,
     1073, 1073, 1073, 1649, 1073, 1073, 1649, 1073, 1073, 1073,
     1073, 1073, 1073,  478, 1649,  478, 1649, 1649,  478,  478,

      478, 1649,  478,  478, 1649,  478,  478,  478,  478,  478,
      478, 1082, 1649, 1082, 1649, 1649, 1082, 1082, 1082, 1649,
     1082, 1082, 1649, 1082, 1082, 1082, 1082, 1082, 1082, 1089,
     1649, 1089, 1649, 1649, 1089, 1089, 1089, 1649, 1089, 1089,
     1649, 1089, 1089, 1089, 1089, 1089, 1089, 1095, 1649, 1095,
     1649, 1649, 1095, 1095, 1649, 1649, 1095, 1095, 1649, 1649,
     1095, 1649, 1095, 1095, 1095,  821, 1649,  821, 1649, 1649,
      821,  821, 1649, 1649,  821, 1649, 1649, 1649,  821,  821,
      821,  821,  821,  830, 1649,  830, 1649, 1649,  830,  830,
      830, 1649,  830,  830, 1649,  830,  830,  830,  830,  830,

      830,  881, 1649,  881, 1649, 1649,  881,  881, 1649,  881,
      881,  881, 1649, 1649,  881,  881,  881,  881,  881,  589,
     1649,  589, 1649, 1649,  589,  589,  589,  589,  589,  589,
     1649,  589,  589, 1649,  589,  589,  589, 1111, 1649, 1111,
     1649, 1649, 1111, 1111, 1111, 1111, 1111, 1111, 1649, 1111,
     1111, 1111, 1111, 1111, 1111,  843, 1649,  843, 1649, 1649,
      843,  843,  843,  843,  843,  843, 1649,  843,  843,  843,
      843,  843,  843,  851, 1649,  851, 1649, 1649,  851,  851,
      851,  851,  851,  851, 1649,  851,  851,  851,  851,  851,
      851,  859, 1649,  859, 1649, 1649,  859,  859, 1649,  859,

      859,  859, 1649, 1649,  859,  859,  859,  859,  859, 1123,
     1649, 1123, 1649, 1649, 1123, 1123, 1649, 1123, 1123, 1649,
     1649, 1649, 1123, 1123, 1123, 1123, 1123,  865, 1649,  865,
     1649, 1649,  865,  865, 1649,  865,  865, 1649, 1649, 1649,
      865,  865,  865,  865,  865,  872, 1649,  872, 1649, 1649,
      872,  872,  872,  872,  872,  872, 1649,  872,  872,  872,
      872,  872,  872,  887, 1649,  887, 1649, 1649,  887,  887,
      887,  887,  887,  887, 1649,  887,  887,  887,  887,  887,
      887, 1135, 1649, 1135, 1649, 1649, 1135, 1135, 1649, 1135,
     1135, 1649, 1649, 1649, 1135, 1135, 1135, 1135, 1135, 1141,

     1649, 1141, 1649, 1649, 1141, 1141, 1649, 1141, 1141, 1649,
     1649, 1649, 1141, 1141, 1141, 1141, 1141, 1145, 1649, 1145,
     1649, 1649, 1145, 1145, 1649, 1145, 1145, 1649, 1649, 1649,
     1145, 1145, 1145, 1145, 1145,  895, 1649,  895, 1649, 1649,
      895,  895, 1649,  895,  895, 1649, 1649, 1649,  895,  895,
      895,  895,  895, 1153, 1649, 1153, 1649, 1649, 1153, 1153,
     1649, 1153, 1153, 1153, 1649, 1649, 1153, 1153, 1153, 1153,
     1153, 1163, 1649, 1163, 1649, 1649, 1163, 1163, 1163, 1163,
     1163, 1163, 1649, 1163, 1163, 1163, 1163, 1163, 1163,  558,
     1649,  558, 1649, 1649,  558,  558,  558,  558,  558,  558,

     1649,  558,  558,  558,  558,  558,  558, 1172, 1649, 1172,
     1649, 1649, 1172, 1172, 1172, 1172, 1172, 1172, 1649, 1172,
     1172, 1172, 1172, 1172, 1172, 1179, 1649, 1179, 1649, 1649,
     1179, 1179, 1179, 1179, 1179, 1179, 1649, 1179, 1179, 1179,
     1179, 1179, 1179, 1185, 1649, 1185, 1649, 1649, 1185, 1185,
     1649, 1185, 1185, 1185, 1649, 1649, 1185, 1649, 1185, 1185,
     1185,  919, 1649,  919, 1649, 1649,  919,  919, 1649,  919,
      919, 1649, 1649, 1649,  919,  919,  919,  919,  919,  928,
     1649,  928, 1649, 1649,  928,  928,  928,  928,  928,  928,
     1649,  928,  928,  928,  928,  928,  928,  671, 1649, 1649,

     1649,  671, 1649,  671,  671,  376, 1649, 1649,  376, 1649,
      376, 1649,  376,  376, 1649, 1649,  376,  376,  376,  376,
     1649,  376,  376,  376, 1649,  376,  376,  376,  997,  997,
      997,  997,  997, 1649,  997,  997,  997,  997, 1649, 1649,
      997, 1649, 1649,  997,  997,  997, 1649,  997, 1649,  997,
      997, 1006, 1006, 1006, 1006, 1006, 1649, 1006, 1006, 1006,
     1006, 1649, 1649, 1006, 1649, 1649, 1006, 1006, 1006, 1649,
     1006, 1006, 1649, 1006,  411, 1649,  411, 1649, 1649,  411,
      411, 1649,  411,  411,  411, 1649, 1649,  411,  411,  411,
      411,  411,  461, 1649,  461, 1649, 1649, 1649,  461, 1649,

      461,  461,  789, 1649,  789, 1649, 1649,  789,  789,  789,
     1649,  789,  789, 1649,  789,  789,  789,  789,  789,  789,
     1021, 1649, 1021, 1649, 1649, 1021, 1021, 1021, 1649, 1021,
     1021, 1649, 1021, 1021, 1021, 1021, 1021, 1021, 1033, 1649,
     1033, 1649, 1649, 1033, 1033, 1649, 1649, 1033, 1649, 1649,
     1649, 1033, 1033, 1033, 1033, 1033, 1045, 1649, 1045, 1649,
     1649, 1045, 1045, 1649, 1649, 1045, 1649, 1649, 1649, 1045,
     1045, 1045, 1045, 1045, 1051, 1649, 1051, 1649, 1649, 1051,
     1051, 1649, 1649, 1051, 1649, 1649, 1649, 1051, 1051, 1051,
     1051, 1051, 1055, 1649, 1055, 1649, 1649, 1055, 1055, 1649,

     1649, 1055, 1649, 1649, 1649, 1055, 1055, 1055, 1055, 1055,
     1063, 1649, 1063, 1649, 1649, 1063, 1063, 1649, 1649, 1063,
     1063, 1649, 1649, 1063, 1063, 1063, 1063, 1063, 1073, 1649,
     1073, 1649, 1649, 1073, 1073, 1073, 1649, 1073, 1073, 1649,
     1073, 1073, 1073, 1073, 1073, 1073, 1291, 1649, 1291, 1649,
     1649, 1291, 1291, 1291, 1649, 1291, 1291, 1649, 1291, 1291,
     1291, 1291, 1291, 1291, 1299, 1649, 1299, 1649, 1649, 1299,
     1299, 1299, 1649, 1299, 1299, 1649, 1299, 1299, 1299, 1299,
     1299, 1299,  783, 1649,  783, 1649, 1649,  783,  783, 1649,
     1649,  783,  783, 1649, 1649,  783,  783,  783,  783,  783,

     1082, 1649, 1082, 1649, 1649, 1082, 1082, 1082, 1649, 1082,
     1082, 1649, 1082, 1082, 1082, 1082, 1082, 1082, 1306, 1649,
     1306, 1649, 1649, 1306, 1306, 1306, 1649, 1306, 1306, 1649,
     1306, 1306, 1306, 1306, 1306, 1306, 1314, 1649, 1314, 1649,
     1649, 1314, 1314, 1314, 1649, 1314, 1314, 1649, 1314, 1314,
     1314, 1314, 1314, 1314, 1089, 1649, 1089, 1649, 1649, 1089,
     1089, 1089, 1649, 1089, 1089, 1649, 1089, 1089, 1089, 1089,
     1089, 1089, 1322, 1649, 1322, 1649, 1649, 1322, 1322, 1649,
     1649, 1322, 1322, 1649, 1649, 1322, 1322, 1322, 1322, 1322,
     1328, 1649, 1328, 1649, 1649, 1328, 1328, 1649, 1649, 1328,

     1649, 1649, 1649, 1328, 1328, 1328, 1328, 1328,  887, 1649,
      887, 1649, 1649,  887,  887,  887,  887,  887,  887, 1649,
      887,  887,  887,  887,  887,  887, 1111, 1649, 1111, 1649,
     1649, 1111, 1111, 1111, 1111, 1111, 1111, 1649, 1111, 1111,
     1111, 1111, 1111, 1111, 1123, 1649, 1123, 1649, 1649, 1123,
     1123, 1649, 1123, 1123, 1649, 1649, 1649, 1123, 1123, 1123,
     1123, 1123, 1135, 1649, 1135, 1649, 1649, 1135, 1135, 1649,
     1135, 1135, 1649, 1649, 1649, 1135, 1135, 1135, 1135, 1135,
     1141, 1649, 1141, 1649, 1649, 1141, 1141, 1649, 1141, 1141,
     1649, 1649, 1649, 1141, 1141, 1141, 1141, 1141, 1145, 1649,

     1145, 1649, 1649, 1145, 1145, 1649, 1145, 1145, 1649, 1649,
     1649, 1145, 1145, 1145, 1145, 1145, 1153, 1649, 1153, 1649,
     1649, 1153, 1153, 1649, 1153, 1153, 1153, 1649, 1649, 1153,
     1153, 1153, 1153, 1153, 1163, 1649, 1163, 1649, 1649, 1163,
     1163, 1163, 1163, 1163, 1163, 1649, 1163, 1163, 1163, 1163,
     1163, 1163, 1358, 1649, 1358, 1649, 1649, 1358, 1358, 1358,
     1358, 1358, 1358, 1649, 1358, 1358, 1358, 1358, 1358, 1358,
     1366, 1649, 1366, 1649, 1649, 1366, 1366, 1366, 1366, 1366,
     1366, 1649, 1366, 1366, 1366, 1366, 1366, 1366,  881, 1649,
      881, 1649, 1649,  881,  881, 1649,  881,  881,  881, 1649,

     1649,  881,  881,  881,  881,  881, 1172, 1649, 1172, 1649,
     1649, 1172, 1172, 1172, 1172, 1172, 1172, 1649, 1172, 1172,
     1172, 1172, 1172, 1172, 1373, 1649, 1373, 1649, 1649, 1373,
     1373, 1373, 1373, 1373, 1373, 1649, 1373, 1373, 1373, 1373,
     1373, 1373, 1381, 1649, 1381, 1649, 1649, 1381, 1381, 1381,
     1381, 1381, 1381, 1649, 1381, 1381, 1381, 1381, 1381, 1381,
     1179, 1649, 1179, 1649, 1649, 1179, 1179, 1179, 1179, 1179,
     1179, 1649, 1179, 1179, 1179, 1179, 1179, 1179, 1389, 1649,
     1389, 1649, 1649, 1389, 1389, 1649, 1389, 1389, 1389, 1649,
     1649, 1389, 1389, 1389, 1389, 1389, 1395, 1649, 1395, 1649,

     1649, 1395, 1395, 1649, 1395, 1395, 1649, 1649, 1649, 1395,
     1395, 1395, 1395, 1395,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376, 1230, 1230, 1230,
     1230, 1230, 1649, 1230, 1230, 1230, 1230, 1649, 1649, 1230,
     1649, 1649, 1230, 1230, 1230, 1649, 1230, 1230, 1649, 1230,
     1238, 1238, 1238, 1238, 1238, 1649, 1238, 1238, 1238, 1238,
     1649, 1649, 1238, 1649, 1649, 1238, 1238, 1238, 1649, 1238,
     1649, 1649, 1238, 1250, 1250, 1250, 1250, 1250, 1649, 1250,
     1250, 1250, 1250, 1649, 1649, 1250, 1649, 1649, 1250, 1250,

     1250, 1649, 1250, 1649, 1649, 1250, 1263, 1263, 1263, 1263,
     1263, 1649, 1263, 1263, 1263, 1263, 1649, 1649, 1263, 1649,
     1649, 1263, 1263, 1263, 1649, 1263, 1649, 1649, 1263,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411, 1464, 1649, 1464, 1649, 1649, 1464, 1464, 1464,
     1649, 1464, 1464, 1649, 1464, 1464, 1464, 1464, 1464, 1464,
     1291, 1649, 1291, 1649, 1649, 1291, 1291, 1291, 1649, 1291,
     1291, 1649, 1291, 1291, 1291, 1291, 1291, 1291, 1473, 1649,
     1473, 1649, 1649, 1473, 1473, 1473, 1649, 1473, 1473, 1649,

     1473, 1473, 1473, 1473, 1473, 1473, 1299, 1649, 1299, 1649,
     1649, 1299, 1299, 1299, 1649, 1299, 1299, 1649, 1299, 1299,
     1299, 1299, 1299, 1299,  783, 1649,  783, 1649, 1649,  783,
      783, 1649, 1649,  783,  783, 1649, 1649,  783,  783,  783,
      783,  783, 1481, 1649, 1481, 1649, 1649, 1481, 1481, 1481,
     1649, 1481, 1481, 1649, 1481, 1481, 1481, 1481, 1481, 1481,
     1306, 1649, 1306, 1649, 1649, 1306, 1306, 1306, 1649, 1306,
     1306, 1649, 1306, 1306, 1306, 1306, 1306, 1306, 1314, 1649,
     1314, 1649, 1649, 1314, 1314, 1314, 1649, 1314, 1314, 1649,
     1314, 1314, 1314, 1314, 1314, 1314, 1322, 1649, 1322, 1649,

     1649, 1322, 1322, 1649, 1649, 1322, 1322, 1649, 1649, 1322,
     1322, 1322, 1322, 1322, 1493, 1649, 1493, 1649, 1649, 1493,
     1493, 1649, 1649, 1493, 1649, 1649, 1649, 1493, 1493, 1493,
     1493, 1493, 1328, 1649, 1328, 1649, 1649, 1328, 1328, 1649,
     1649, 1328, 1649, 1649, 1649, 1328, 1328, 1328, 1328, 1328,
     1508, 1649, 1508, 1649, 1649, 1508, 1508, 1508, 1508, 1508,
     1508, 1649, 1508, 1508, 1508, 1508, 1508, 1508, 1358, 1649,
     1358, 1649, 1649, 1358, 1358, 1358, 1358, 1358, 1358, 1649,
     1358, 1358, 1358, 1358, 1358, 1358, 1517, 1649, 1517, 1649,
     1649, 1517, 1517, 1517, 1517, 1517, 1517, 1649, 1517, 1517,

     1517, 1517, 1517, 1517, 1366, 1649, 1366, 1649, 1649, 1366,
     1366, 1366, 1366, 1366, 1366, 1649, 1366, 1366, 1366, 1366,
     1366, 1366,  881, 1649,  881, 1649, 1649,  881,  881, 1649,
      881,  881,  881, 1649, 1649,  881,  881,  881,  881,  881,
     1525, 1649, 1525, 1649, 1649, 1525, 1525, 1525, 1525, 1525,
     1525, 1649, 1525, 1525, 1525, 1525, 1525, 1525, 1373, 1649,
     1373, 1649, 1649, 1373, 1373, 1373, 1373, 1373, 1373, 1649,
     1373, 1373, 1373, 1373, 1373, 1373, 1381, 1649, 1381, 1649,
     1649, 1381, 1381, 1381, 1381, 1381, 1381, 1649, 1381, 1381,
     1381, 1381, 1381, 1381, 1389, 1649, 1389, 1649, 1649, 1389,

     1389, 1649, 1389, 1389, 1389, 1649, 1649, 1389, 1389, 1389,
     1389, 1389, 1537, 1649, 1537, 1649, 1649, 1537, 1537, 1649,
     1537, 1537, 1649, 1649, 1649, 1537, 1537, 1537, 1537, 1537,
     1395, 1649, 1395, 1649, 1649, 1395, 1395, 1649, 1395, 1395,
     1649, 1649, 1649, 1395, 1395, 1395, 1395, 1395, 1423, 1423,
     1423, 1423, 1423, 1649, 1423, 1423, 1423, 1423, 1649, 1649,
     1423, 1649, 1649, 1423, 1423, 1423, 1649, 1423, 1649, 1649,
     1423, 1431, 1431, 1431, 1431, 1431, 1649, 1431, 1431, 1431,
     1431, 1649, 1649, 1431, 1649, 1649, 1431, 1431, 1431, 1649,
     1431, 1649, 1649, 1431, 1452, 1452, 1452, 1452, 1452, 1649,

     1452, 1452, 1452, 1452, 1649, 1649, 1452, 1649, 1649, 1452,
     1452, 1452, 1649, 1452, 1649, 1649, 1452, 1464, 1649, 1464,
     1649, 1649, 1464, 1464, 1464, 1649, 1464, 1464, 1649, 1464,
     1464, 1464, 1464, 1464, 1464, 1473, 1649, 1473, 1649, 1649,
     1473, 1473, 1473, 1649, 1473, 1473, 1649, 1473, 1473, 1473,
     1473, 1473, 1473, 1481, 1649, 1481, 1649, 1649, 1481, 1481,
     1481, 1649, 1481, 1481, 1649, 1481, 1481, 1481, 1481, 1481,
     1481, 1556, 1556, 1556, 1556, 1556, 1649, 1556, 1556, 1556,
     1556, 1649, 1649, 1556, 1649, 1649, 1556, 1556, 1556, 1649,
     1556, 1649, 1649, 1556, 1563, 1563, 1563, 1563, 1563, 1649,

     1563, 1563, 1563, 1563, 1649, 1649, 1563, 1649, 1649, 1563,
     1563, 1563, 1649, 1563, 1649, 1649, 1563, 1570, 1570, 1570,
     1570, 1570, 1649, 1570, 1570, 1570, 1570, 1649, 1649, 1570,
     1649, 1649, 1570, 1570, 1570, 1649, 1570, 1649, 1649, 1570,
     1577, 1577, 1577, 1577, 1577, 1649, 1577, 1577, 1577, 1577,
     1649, 1649, 1577, 1649, 1649, 1577, 1577, 1577, 1649, 1577,
     1649, 1649, 1577, 1583, 1583, 1583, 1583, 1583, 1649, 1583,
     1583, 1583, 1583, 1649, 1649, 1583, 1649, 1649, 1583, 1583,
     1583, 1649, 1583, 1649, 1649, 1583, 1623, 1623, 1623, 1623,
     1623, 1649, 1623, 1623, 1623, 1623, 1649, 1649, 1623, 1649,

     1649, 1623, 1623, 1623, 1649, 1623, 1649, 1649, 1623, 1631,
     1631, 1631, 1631, 1631, 1649, 1631, 1631, 1631, 1631, 1649,
     1649, 1631, 1649, 1649, 1631, 1631, 1631, 1649, 1631, 1649,
     1649, 1631,   33, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,

     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649
    } ;

static const flex_int16_t yy_chk[11709] =
    {   0,
        0,    0,    1,    1,    1,    2,    2,    2,   11,   11,
       12,   12,   38,   42,  145,   38,   42,  145,   38,   42,
      138,  138,   74,   38,   42,   44,    1,    0,   44,    2,
       73,   73,   73,   73,   38,   42,   74,   44,   52,   44,
       44,   52,   44,   44,   44,   44,   51,    0,   51,   51,
       51,   51,   77,   77,   74,   52,   52,   52,   52,  121,
      121,  121,   52,  143,  143,  196,   77,  196,   77,   77,
       77,   77,    1,    1,    1,    2,    2,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    9,    9,    9,    9,   34,   34,   34,
        9,  428,    9,    9,    9,    9,  428,    9,    9,    9,
       39, 1272,   39,   39,   39, 1273,   40,    9,   40,   40,
       40,   41,  392,   41,   41,   41,  134,  134,  134,  134,
     1274,    9,    9,    9,   95,  151,  108,   95,  151,  108,
      392,   13,   13,   13,   13, 1275,   13,   14,   14,   14,
       14,  190,   14,   21,   21,   21,   21,   87,   21,    9,
     1276,    9,    9,    9,    9,    9,    9,   10,   10,   10,
       10,   87, 1277,   95,   10,  108,   10,   10,   10,   10,
       13,   10,   10,   10,  142,  142,   14,  132,  190,   87,

      132,   10,   21,  139, 1278,   54,  139,   54,   54,   54,
       54, 1279,  132,  183,  183,   10,   10,   10,  142,   54,
       13,   13,   13,   13,   13, 1280,   14,   14,   14,   14,
       14,  424,   21,   21,   21,   21,   21,   54,  155,  155,
      155,  155,  139,   10,  424,   10,   10,   10,   10,   10,
       10,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   17,   17,   17,   17,
      135,  222, 1281,  135,  222,   22,   22,   22,   22, 1282,
       22,   29,   29,   90,   90,   29,   30,   30,  324,  324,
       30,   17,   67,  232,  135,   67,  232,   90, 1283,   90,
       90,   90,   90, 1284,   67,   17,   67,   67,   17,   67,
       67,   67,   67,   82,   22,  364,   82,  364,  136,   29,
      136,  136,  136,  136,   30,   82,  327,   82,   82,  327,
       82,   82,   82,   82, 1285,   17,   17,   17,   17,   17,

       18,   18,   18,   18,   22,   22,   22,   22,   22,   29,
       29,   29,   29,   29,   30,   30,   30,   30,   30,  157,
      157,  157,  157,  339,  339,   18,   86,   48, 1286,   86,
      170,  170,  170,   48,  179,  179,  179, 1287,   48,   18,
       68,   86,   18,   86,   86,   86,   86,  370,  370,   68,
       86,  270,  270,  270,  171,   68,  171,  171,  171,   68,
      342,   48, 1288,  342,   48,  158,   48,  395,  395,   18,
       18,   18,   18,   18,   19,   68,  198,   19,   48,  158,
       19, 1289,   19,   19,  355,   48,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   75,  355,  158,  172,   19,

      172,  172,  172,  355,   75,   68,   68,   68,  233,  233,
       75,  233, 1290,   19,   75,   19,   23,   23,   23,   23,
      159, 1294,  159,  159,  159,  159,  198,  198,  198,  176,
       75,   76,  176,  361,  159,  176,  361,   76,   83,   76,
      176,   23,   76,   76,   76,   76,   76,   83,  361, 1295,
      203,  176,  159,   83,  415,   23,  415,   83,   23,   88,
       75,   75,   75,  173, 1296,  173,  173,  173,   88,   89,
      308,  308,  308,   83,   88,   89,  203,   89,   88, 1297,
       89,   89,   89,   89,   89,   23,   23,   23,   23,   23,
       24,   24,   24,   24,   88, 1298,   76,   76,   76,  683,

      203,  203,  203,   83,   83,   83,  180,  683,  180,  180,
      180,  219,  219,  219,  219,   24,  181,  133,  181,  181,
      181,  397,  397,  133,   88,   88,   88,  182,  133,   24,
      182, 1302,   24,  182,   89,   89,   89,  185,  182,  185,
      185,  185,  185,  235,  235,  235,  167,  323,  235,  182,
      323,  133,  282,  282,  133,  282,  133,  167, 1303,   24,
       24,   24,   24,   24,   25,   25,   25,   25,  133, 1304,
      328,  328,   25,  328,  187,  133,  187,  187,  187,  187,
      167,   25,   25,   25,   25,  167,  323, 1309,  187,  167,
       25,   25,   25,   25,  343,  343,  167,  343, 1310,  167,

      186,  167,  167,  186,  405,  405,  187,   25,   25,   25,
       25,   25,   25,   26,   26,   26,   26,  186,  186,  186,
      186,   26,  406,  406,  186,  220,  220,  220,  220, 1311,
       26,   26,   26,   26,  184,  210,  631,  184,  631,   26,
       26,   26,   26, 1312,  372,  201,  184,  372,  184,  184,
     1313,  184,  184,  184,  184, 1317,   26,   26,   26,   26,
       26,   26,   27,   27,   27,   27, 1318,   27,   27,  206,
      210,   27,   27,   27,  211,   27,   27,  201, 1319,   27,
       27,   27,   27,   27,  194,  210,  210,  210,  194,  338,
      194,  206,  338,  194,  194,  201,  201,  201, 1320,  195,

       27,  195,   27,   27,  195,  195,  195,  670,  670,  205,
       27,  211, 1321,  208,  211,  369,  207,   27,  369,  206,
      206,  206,   27,  200,  211,  211,  211,   27,  338,   27,
       27,   28,   28,   28,   28,  208,   28,   28, 1325,  205,
       28,   28,   28,  207,   28,   28,  679,  679,   28,   28,
       28,   28,   28,  314,  369,  200, 1326,  200,  202,  205,
      205,  205, 1327,  208,  208,  208,  207,  207,  207,   28,
     1329,   28,   28,  200,  200,  200,  314,  936,  936,   28,
      202,  230,  230,  230,  230, 1330,   28,  202,  314,  362,
     1331,   28,  362,  202,  374,  314,   28,  374,   28,   28,

       49, 1332,  377,   49,   49,  377, 1333,   49,  202,  202,
      202,   49,   49,  362,   49,  212,   49,   49,   49,   49,
       49,   49,  398,   49,   49,  398,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49, 1334,   49,
     1335,  212, 1336,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,  212,  212,  212,   49,  937,
      937,   49,   49,   49,   59,   59,   59,  373,  373,  221,
      373,  221,  221,  221,  221,  246,  246,  246,  246, 1337,
       59,   59,   59,  221,  223,  380,  223,  223,  223,  223,

      241, 1338,  241,  241,  241,  241,  204, 1339,  223,  380,
      209,  221,  242,  242,  242,  242,   59,   59, 1340,  242,
       59,   59,  262,  262,  262,  262,  223,  380,   59, 1341,
     1342,   59,  209,   59, 1343,   59,   59,   69,  204,  204,
      204,  426,  213,   69,  426,  209, 1344,  214,   69,   69,
       69,   69,   69,   69,   69, 1345,  204,  204,  204, 1346,
      209,  209,  209,   69,   69,   69,   69,   69,   69,  215,
      470,   69,  213,  470,   69, 1347,   69,  213,  287, 1348,
      287,  287,  287,  287,  214,  331,  331,  331,   69, 1349,
      331, 1350,  213,  213,  213,   69,   71,  214,  214,  214,

      352,  352,  352,  215, 1351,   71, 1352,   71,   71,   71,
       71,   71,  345,  345,  345,   71,  417,  345, 1353,  215,
      215,  215,  226,  417,  226,  226,  226,  226,  248,  417,
      240,   71,  228,  240,  228,  228,  226,  228,  228,  228,
      228, 1354,  240,  248,  240,  240, 1355,  240,  240,  240,
      240,  244, 1356,  243,  226,  243,  243,  243,  243, 1357,
      244,   71,   71,   71,   85, 1361,  244,  243,  636,  636,
      244,  636, 1362,   85, 1363,   85,   85,   85,   85,   85,
      407,  407,  407,   85,  637,  243,  244,  637,  394,  253,
      394,  394,  394,  248,  248,  248,  408,  408,  408,   85,

      253,  253,  253,  253, 1364,  643,  253,  286,  643, 1365,
      286,  292,  292,  292,  292, 1369,  244,  244,  244,  286,
      656,  286,  286,  656,  286,  286,  286,  286, 1370,   85,
       85,   85,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  112,  112,  112,
     1371,  112,  686,  288,  112,  686,  288,  419,  419,  419,
      245, 1376, 1377,  112,  112,  112, 1378,  247,  288,  245,
      288,  288,  288,  288, 1379,  245,  247,  288,  629,  245,
      629, 1380,  247,  629,  629,  112,  247, 1384,  112,  112,
      112, 1385, 1386,  112,  112,  245,  300,  300,  300,  300,
     1387,  112,  247,  294,  112, 1388,  112, 1392,  112,  112,
      122,  122,  122,  122,  357,  357,  357,  357,  294,  122,
      122,  122,  122, 1393, 1394,  245,  245,  245,  358,  358,
      358,  358,  247,  247,  247, 1396,  122,  122,  122,  122,

      122,  122,  129, 1397,  129,  129, 1398, 1399,  129,  129,
      129, 1400, 1401,  129,  129,  129,  129,  249,  471,  471,
      471,  129, 1402,  471,  254,  411,  249, 1403,  294,  294,
      294, 1406,  249,  254,  129, 1410,  249,  129, 1411,  254,
     1412, 1414,  289,  254,  289,  289,  289,  289,  363, 1416,
      363, 1418,  249,  363,  363,  363,  289,  642,  642,  254,
      642,  129,  130,  130,  130, 1419,  130, 1420,  365,  130,
      365,  365,  365,  365,  289,  411,  411,  411,  130,  130,
      130, 1421,  249,  249,  249,  379,  130, 1426, 1427,  254,
      254,  254,  366,  366,  366,  366,  379,  379,  379,  379,

      130, 1428,  379,  130,  130,  130, 1434, 1435,  130,  130,
      367, 1436,  367,  367,  367,  367,  130,  655,  655,  130,
      655,  130, 1455,  130,  130,  199,  199,  199,  199,  199,
      199,  199, 1456,  199, 1457,  199,  199,  199,  199, 1458,
      199,  199,  199,  199,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
     1459,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,

      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  263,
      382,  382,  382,  382,  457,  457,  457,  457,  263, 1460,
      263,  263,  263,  263,  263,  494,  494,  494,  263, 1461,
     1462,  267,  263,  267,  267, 1463,  267,  267,  267,  267,
      515,  515,  515,  268,  263, 1467,  269, 1468,  267, 1469,
      263, 1470,  268,  693, 1471,  269,  693,  725,  268, 1472,
      725,  269,  268,  693,  271,  269,  267,  725,  400,  400,
      400,  400, 1476,  271,  263,  263,  263,  265,  268,  271,
      400,  269, 1477,  271, 1478, 1479,  265, 1480,  265,  265,

      265,  265,  265,  524,  524,  524,  265, 1484,  400,  271,
      265,  381, 1485,  381,  381,  381,  381, 1486,  268,  268,
      268,  269,  269,  269,  383,  381,  383, 1487,  265,  383,
      383,  383,  383,  467,  467,  467,  467, 1488, 1489,  271,
      271,  271,  401,  381,  401, 1490, 1491,  401,  401,  401,
      401, 1492,  265,  265,  265,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266, 1494,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      275,  431,  534,  534,  534,  283, 1495,  432,  290,  275,
     1496,  433, 1497, 1498,  283,  275, 1499,  290,  952,  275,
      283,  952, 1500,  290,  283, 1501, 1502,  290,  952,  291,
     1503, 1504,  432,  431,  435,  275, 1505, 1506,  291,  953,
      283,  293,  953,  290,  291, 1507,  433, 1511,  291,  953,
      293,  431,  431,  431, 1512, 1513,  293,  432,  432,  432,
      293,  433,  433,  433,  291,  275,  275,  275,  277,  435,

      283,  283,  283,  290,  290,  290,  293,  277, 1514,  277,
      277,  277,  277,  277,  435,  435,  435,  277, 1515, 1516,
      295,  539,  539,  539,  291,  291,  291, 1520, 1521,  295,
      434,  299, 1522,  277, 1523,  295,  293,  293,  293,  295,
      299,  469,  469,  469,  469, 1524,  299,  574,  574,  574,
      299,  436, 1528, 1529,  305,  295,  305,  305,  306,  305,
      305,  305,  305,  277,  277,  277,  299,  306,  434,  434,
     1530,  305, 1531,  306,  593,  593,  593,  306,  437, 1532,
      434,  434,  434,  436, 1533,  295,  295,  295, 1534,  305,
      602,  602,  602,  306, 1535, 1536,  299,  299,  299,  301,

     1538,  436,  436,  436,  442,  437, 1539, 1540,  301, 1541,
      301,  301,  301,  301,  301,  612,  612,  612,  301, 1542,
      438, 1543,  301,  306,  306,  306,  307, 1544,  437,  437,
      437, 1545, 1546,  309,  301,  307,  963,  440,  313,  963,
      301,  307,  309,  442, 1548,  307,  963,  313,  309, 1550,
      438, 1552,  309,  313,  442,  442,  442,  313,  438,  439,
     1559,  307,  440,  444,  301,  301,  301,  303,  309,  445,
      438,  438,  438,  313,  452, 1560,  303,  446,  303,  303,
      303,  303,  303,  617,  617,  617,  303,  440,  440,  440,
      303,  307,  307,  307, 1561,  439, 1566, 1567,  309,  309,

      309,  444,  446,  313,  313,  313, 1568,  452,  303,  439,
      439,  439,  445,  444,  444,  444,  649,  649,  649,  445,
      445,  445, 1573, 1574,  452,  452,  452,  446,  446,  446,
     1575, 1580,  303,  303,  303,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304, 1581,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,

      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      315, 1582, 1586,  441,  650,  650,  650,  320, 1587,  315,
      447,  315,  315,  315,  315,  315,  320, 1588, 1591,  315,
     1592, 1593,  320,  492, 1594,  384,  320,  384,  384,  384,
      384,  475,  475,  475,  475,  315, 1595,  441,  492,  384,
      441,  449,  320, 1596,  447,  450, 1597, 1598,  451,  448,
     1599, 1600,  448,  441,  441,  441, 1601,  384,  492,  448,
      447,  447,  447, 1602, 1603,  315,  315,  315, 1604, 1605,
      448, 1606,  320,  320,  320,  353,  353,  353,  353, 1607,
      449,  450,  451, 1608,  353,  353,  353,  353,  492,  492,

      492,  449,  449,  449, 1609,  450,  450,  450,  451,  451,
      451,  353,  353,  353,  353,  353,  353,  410,  410,  410,
      410,  485,  485,  485,  485, 1610,  410,  410,  410,  410,
      448,  448,  448,  453,  462, 1611,  462, 1612, 1613,  462,
      462,  462,  462,  410,  410,  410,  410,  410,  410,  443,
      443,  443,  443,  443,  454,  443,  443,  511,  443,  443,
      443,  521, 1614,  443,  460,  443,  460,  460,  460,  460,
     1615,  443,  443, 1616, 1617,  443,  453,  468,  460,  468,
      468,  468,  468,  453,  453,  453, 1618, 1626,  443, 1627,
      443,  443,  443,  454, 1628,  466,  460,  466, 1634, 1635,

      466,  466,  466,  466,  454,  454,  454,  511,  511,  511,
     1636,  521,  521,  521, 1637,  443,  443,  443, 1638,  443,
      443,  443,  443,  443,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
     1639,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  464,

     1640,  464,  464,  464,  464,  555,  555,  555,  555,  477,
     1619,  477,  589,  464,  477,  477,  477,  477,  478, 1641,
     1642,  479,  565,  565,  565,  565, 1643,  478, 1619, 1644,
      479,  464,  476,  478, 1271, 1677,  479,  478, 1270,  480,
      479, 1677, 1268,  476,  476,  476,  476,  476,  480, 1267,
     1266,  476,  513,  478,  480,  476,  479,  481,  480,  599,
      486, 1255,  589,  589,  589,  516,  481,  513, 1254,  486,
     1253,  513,  481,  476,  480,  486,  481, 1243, 1242,  486,
      516,  487, 1241,  478,  478,  478,  479,  479,  479, 1236,
      487,  975,  481,  488,  975,  486,  487,  476,  476,  476,

      487,  975,  488, 1235,  480,  480,  480, 1234,  488,  599,
      599,  599,  488,  666,  666,  666,  487,  513,  513,  513,
      502, 1225,  481,  481,  481,  486,  486,  486,  488,  502,
      516,  516,  516, 1223,  503,  502, 1222,  525, 1221,  502,
     1219, 1673,  504,  503, 1673, 1218,  487,  487,  487,  503,
     1673,  504,  525,  503, 1216,  502, 1215,  504,  488,  488,
      488,  504,  672,  672,  672,  557, 1214,  557, 1698,  503,
      557,  557,  557,  557, 1698, 1213,  510,  504,  510,  510,
     1210,  510,  510,  510,  510,  502,  502,  502, 1209,  517,
     1208,  517, 1207,  510,  517,  517,  517,  517,  517,  503,

      503,  503,  525,  525,  525, 1206, 1699,  504,  504,  504,
      508,  510, 1699,  530, 1706,  530,  530,  530,  530,  508,
     1706,  508,  508,  508,  508,  508, 1205,  530, 1712,  508,
      763,  763,  763,  508, 1712,  526,  977,  526,  532,  977,
      526,  526,  526,  526,  526,  530,  977,  532,  517,  517,
      517,  508,  979,  532,  630,  979,  630,  532, 1199,  630,
      630,  630,  979, 1198,  588,  533,  588,  588, 1197,  588,
      588,  588,  588,  532,  533,  508,  508,  508,  509, 1702,
      533,  588, 1702,  591,  533, 1196, 1195,  509, 1702,  509,
      509,  509,  509,  509,  526,  526,  526,  509,  591,  588,

      533,  509,  591,  532,  532,  532,  535,  638,  638,  638,
     1194,  594,  638,  509, 1715,  535, 1715, 1193,  545,  509,
     1715,  535,  767,  767,  767,  535,  594,  545, 1192, 1191,
      533,  533,  533,  545,  784,  784,  784,  545, 1190,  572,
     1189,  535, 1188,  509,  509,  509,  514, 1186,  591,  591,
      591, 1184,  603,  545,  572,  514, 1183,  514,  514,  514,
      514,  514,  788,  788,  788,  514, 1182,  603, 1178,  514,
     1177,  535,  535,  535,  572, 1176,  594,  594,  594, 1754,
      546,  514, 1754,  545,  545,  545, 1169,  514, 1754,  546,
     1168,  644,  644,  644, 1758,  546,  644, 1761, 1167,  546,

     1758,  547, 1161, 1761,  572,  572,  572,  792,  792,  792,
      547,  514,  514,  514,  523,  546,  547,  603,  603,  603,
      547, 1159, 1158,  523, 1157,  523,  523,  523,  523,  523,
      797,  797,  797,  523, 1156, 1762,  547,  523, 1811,  558,
      990, 1762,  559,  990, 1811,  546,  546,  546,  558,  523,
      990,  559, 1155, 1814,  558,  523, 1152,  559,  558, 1814,
     1151,  559,  648,  648,  648,  648,  547,  547,  547,  654,
      654,  654,  654, 1150,  558, 1015,  783,  559, 1015,  523,
      523,  523,  531, 1149,  608, 1015,  608,  608,  608,  608,
     1148,  531,  789,  531,  531,  531,  531,  531,  608, 1147,

     1146,  531, 1144, 1143,  558,  558,  558,  559,  559,  559,
      560,  659,  659,  659,  659, 1142,  608,  531, 1755,  560,
     1755,  561, 1140,  659, 1755,  560,  783,  783,  783,  560,
      561,  660,  660,  660,  660, 1139,  561,  821,  821,  821,
      561,  659,  789,  789,  789,  560, 1138,  531,  531,  531,
      551,  661,  661,  661,  661, 1137,  561, 1212, 1136,  551,
     1212,  551,  551,  551,  551,  551,  668, 1212,  668,  551,
     1134,  668,  668,  668,  668,  560,  560,  560,  735,  735,
      735,  735, 1133, 1132,  566,  551,  561,  561,  561,  567,
      861,  861,  861,  566,  737,  737,  737,  737,  567,  566,

      865,  865,  865,  566,  567,  595, 1131,  595,  567, 1130,
      595,  595,  595,  595,  595,  551,  551,  551,  556,  566,
      743,  743,  743,  743,  567,  568,  882,  882,  882,  556,
      556,  556,  556,  556,  568, 1129, 1220,  556,  580, 1220,
      568,  556, 1815,  581,  568, 1128, 1220,  580, 1815,  566,
      566,  566,  581,  580,  567,  567,  567,  580,  581,  556,
      568,  582,  581, 1127,  595,  595,  595,  886,  886,  886,
      582, 1855, 1231,  580, 1126, 1231,  582, 1855,  581, 1125,
      582,  790, 1231,  556,  556,  556,  736,  736,  736,  736,
      568,  568,  568, 1124, 1122,  881,  582,  740,  736,  740,

      740,  740,  740,  580,  580,  580, 1121, 1856,  581,  581,
      581, 1120,  604, 1856,  604,  610,  736,  604,  604,  604,
      604,  604, 1119, 1118,  610, 1117,  582,  582,  582,  586,
      610,  790,  790,  790,  610,  890,  890,  890,  586, 1116,
      586,  586,  586,  586,  586,  881,  881,  881,  586, 1897,
      610,  669,  586,  669,  669, 1897,  669,  669,  669,  669,
     1115, 1898,  738,  738,  738,  738, 1239, 1898,  611, 1239,
      586,  604,  604,  604,  738, 1114, 1239,  611, 1109, 1108,
      610,  610,  610,  611,  895,  895,  895,  611,  806,  806,
      806,  806,  738, 1107,  586,  586,  586,  587, 1106, 1756,

      806, 1756, 1105,  611,  613, 1756,  587, 1104,  587,  587,
      587,  587,  587,  613, 1103, 1102,  587, 1101,  806,  613,
      587, 1100,  739,  613,  739, 1099, 1098,  739,  739,  739,
      739,  623,  587,  611,  611,  611, 1096, 1094,  587,  613,
      623,  809,  809,  809,  809, 1093,  623,  919,  919,  919,
      623,  734, 1092,  734,  734, 1088,  734,  734,  734,  734,
      761, 1087,  587,  587,  587,  592,  623, 1086,  734,  613,
      613,  613,  624, 1079,  592,  761,  592,  592,  592,  592,
      592,  624,  700, 1078,  592,  700,  734,  624,  592, 1077,
     1071,  624,  700,  625, 1069,  761,  623,  623,  623,  887,

      592, 1068,  625,  700, 1067, 1066,  592,  624,  625,  938,
      938,  938,  625,  701, 1229, 1065,  701, 1229, 1062,  702,
     1061, 1060,  702,  701, 1229,  761,  761,  761,  625,  702,
      592,  592,  592,  601,  701, 1059, 1058,  624,  624,  624,
      702, 1057,  601,  888,  601,  601,  601,  601,  601,  887,
      887,  887,  601,  700,  700,  700,  601, 1056,  625,  625,
      625, 1229,  703, 1054,  702,  703,  704, 1053,  601,  704,
     1052, 1050,  703, 1049,  601, 1048,  704,  811,  811,  811,
      811,  817, 1047,  703,  701,  701,  701,  704, 1046,  811,
      702,  702,  702,  888,  888,  888,  817, 1044,  601,  601,

      601,  609,  841,  841,  841,  841,  915,  811, 1043,  703,
      609,  704,  609,  609,  609,  609,  609, 1042, 1041,  705,
      609,  915,  705,  907,  907,  907,  907, 1040, 1039,  705,
      939,  939,  939,  703,  703,  703,  609,  704,  704,  704,
      705,  706, 1038, 1037,  706, 1036,  817,  817,  817,  707,
      762,  706,  707,  708, 1035, 1034,  708, 1032, 1031,  707,
     1030, 1029,  706,  708,  801,  762,  609,  609,  609,  632,
      707,  915,  915,  915,  708,  705, 1028, 1027,  632,  801,
      632,  632,  632,  632,  632,  762,  709, 1026,  632,  709,
      705,  705,  705, 1025,  706, 1237,  709, 1024, 1237,  801,

      707,  708, 1012,  983,  632, 1237, 1011,  709,  944,  944,
      944, 1010,  706,  706,  706,  762,  762,  762, 1003, 1002,
      707,  707,  707, 1001,  708,  708,  708,  976,  974,  801,
      801,  801,  983,  709,  632,  632,  632,  652,  652,  652,
      652,  710, 1237,  973,  710,  972,  652,  652,  652,  652,
      971,  710,  970,  983,  983,  983,  969,  709,  709,  709,
      968,  967,  710,  652,  652,  652,  652,  652,  652,  673,
      673,  673,  673,  711,  859,  966,  711,  965,  673,  673,
      673,  673,  712,  711,  982,  712, 1033, 1033, 1033,  859,
      964,  962,  712,  961,  711,  673,  673,  673,  673,  673,

      673,  710,  960,  712,  959,  713,  958,  957,  713,  859,
      956,  955,  710,  710,  710,  713,  954,  714,  951,  946,
      714,  716,  982,  986,  716,  712,  713,  714, 1045, 1045,
     1045,  716,  981,  943,  982,  982,  982,  935,  714,  859,
      859,  859,  716,  934,  711,  711,  711,  933,  932,  721,
      931,  927,  721,  712,  712,  712,  926,  986,  722,  721,
      925,  722, 1244,  981,  713, 1244,  924,  714,  722,  923,
      721,  922, 1244,  986,  986,  986,  713,  713,  713,  722,
      921,  920,  981,  981,  981, 1051, 1051, 1051,  714,  714,
      714,  918,  716,  716,  716,  717,  717,  717,  717,  717,

      717,  717,  722,  717,  917,  717,  717,  717,  717,  721,
      717,  717,  717,  717,  916,  906,  724,  905,  902,  724,
      721,  721,  721, 1055, 1055, 1055,  724,  901,  900,  722,
      722,  722,  723,  723,  723,  723,  723,  724,  723,  723,
      898,  723,  723,  723,  897,  896,  723,  729,  723,  894,
      729, 1097, 1097, 1097,  723,  723,  727,  729,  723,  727,
     1123, 1123, 1123,  724,  893,  892,  727,  885,  729,  884,
      883,  723,  879,  723,  723,  723,  878,  727,  904,  904,
      904,  904, 1072, 1072, 1072, 1072,  723,  724,  724,  724,
      904,  730,  877,  876,  730,  875,  729,  871,  723,  723,

      723,  730,  723,  723,  723,  723,  723,  870,  904,  984,
      869,  868,  730,  727,  731,  867,  992,  731,  729,  729,
      729, 1135, 1135, 1135,  731,  866,  864,  727,  727,  727,
      728,  728,  728,  728,  728,  731,  728,  728,  730,  728,
      728,  728,  863,  862,  728,  858,  728,  984,  992, 1141,
     1141, 1141,  728,  728,  857,  732,  728,  856,  732,  984,
      984,  984,  730,  730,  730,  732,  992,  992,  992,  728,
      855,  728,  728,  728,  854,  742,  732,  742,  728,  850,
      742,  742,  742,  742,  742,  731,  731,  731,  849,  805,
      805,  805,  805,  805,  848,  847,  728,  728,  728,  744,

      728,  728,  728,  728,  728,  846,  732,  839,  744,  837,
      744,  744,  744,  744,  744, 1145, 1145, 1145,  744, 1187,
     1187, 1187,  745, 1324, 1324, 1324,  732,  732,  732, 1233,
      836,  745, 1233,  746,  742,  742,  742,  745,  835, 1233,
      747,  745,  746,  805,  805,  805,  834,  833,  746,  747,
     1246,  829,  746, 1246,  828,  747,  827,  745,  753,  747,
     1246,  754,  826,  825,  744,  744,  744,  753,  746, 1247,
      754,  824, 1247,  753, 1233,  747,  754,  753,  823, 1247,
      754,  993,  755, 1162, 1162, 1162, 1162,  745,  745,  745,
      822,  755, 1248,  753,  774, 1248,  754,  755,  746,  746,

      746,  755, 1248,  774,  820,  747,  747,  747, 1251,  774,
      819, 1251,  989,  774,  818,  994,  808,  755, 1251,  807,
      993,  775, 1247,  753,  753,  753,  754,  754,  754,  774,
      775,  993,  993,  993,  804,  776,  775, 1328, 1328, 1328,
      775,  994, 1256, 1258,  776, 1256, 1258,  755,  755,  755,
      776,  803, 1256, 1258,  776,  989,  775,  802,  800,  774,
      774,  774,  989,  989,  989,  994,  994,  994,  799,  793,
      776,  793,  798,  796,  793,  793,  793,  793,  793,  810,
      810,  810,  810,  810,  795,  794,  775,  775,  775,  812,
      787,  998,  786,  909,  909,  909,  909,  785,  812,  781,

      776,  776,  776,  782,  812,  909,  780,  779,  812,  778,
      860,  777,  782,  773,  782,  782,  782,  782,  782, 1391,
     1391, 1391,  782,  909,  812,  860,  782,  772,  793,  793,
      793,  813,  771,  810,  810,  810,  770,  899,  782,  769,
      813,  998,  998,  998,  782,  860,  813,  768,  814, 1005,
      813,  766,  899,  765,  812,  812,  812,  814,  764,  814,
      814,  814,  814,  814,  760,  759,  813,  814,  782,  782,
      782,  791,  899,  758,  757,  860,  860,  860, 1264,  756,
      791, 1264,  791,  791,  791,  791,  791,  752, 1264, 1005,
      791,  751,  996,  750,  791,  749,  813,  813,  813, 1005,

     1005, 1005,  899,  899,  899,  748,  791, 1395, 1395, 1395,
      816,  741,  791,  814,  814,  814, 1007,  733,  996,  816,
      988,  720,  719,  988,  718,  816,  840,  699,  840,  816,
      988,  840,  840,  840,  840,  840,  791,  791,  791,  815,
      698,  988,  996,  996,  996,  816,  830,  697,  815,  696,
      815,  815,  815,  815,  815,  830,  695,  694,  815, 1249,
      692,  830, 1249,  831,  691,  830, 1007, 1007, 1007, 1249,
      690,  689,  831,  687,  815,  816,  816,  816,  831,  685,
      832,  830,  831,  684,  682,  840,  840,  840,  681,  832,
      680,  988,  988,  988,  678,  832,  677,  676,  831,  832,

     1408,  675,  674, 1408,  815,  815,  815,  842,  664,  663,
     1408,  830,  830,  830,  662,  832,  842, 1249,  842,  842,
      842,  842,  842,  843,  647,  646,  842,  641,  831,  831,
      831,  640,  843,  635,  844, 1493, 1493, 1493,  843,  634,
      633, 1413,  843,  844, 1413,  832,  832,  832,  838,  844,
      628, 1413,  627,  844, 1000,  626,  845,  838,  843,  838,
      838,  838,  838,  838,  622,  845,  621,  838,  620,  844,
      619,  845,  842,  842,  842,  845, 1000,  851, 1537, 1537,
     1537,  618,  616,  838, 1415,  615,  851, 1415,  843,  843,
      843,  845,  851,  614, 1415,  607,  851,  606,  605,  844,

      844,  844,  600,  598, 1000, 1000, 1000,  597, 1257,  596,
      852, 1257,  851,  838,  838,  838,  590,  853, 1257,  852,
      585,  845,  845,  845, 1417,  852,  853, 1417,  584,  852,
      583,  872,  853,  579, 1417,  578,  853,  577,  873,  576,
      872,  575,  851,  851,  851,  852,  872,  873, 1262, 1009,
      872, 1262,  853,  873,  891,  874,  891,  873, 1262,  891,
      891,  891,  891,  891,  874,  573,  872, 1257,  571,  570,
      874, 1009,  569,  873,  874,  852,  852,  852,  564, 1013,
      563,  562,  853,  853,  853,  903,  903,  903,  903,  903,
      874,  554,  553, 1017,  552, 1262,  872,  872,  872, 1009,

     1009, 1009,  550,  873,  873,  873,  908,  908,  908,  908,
      908, 1013,  549,  891,  891,  891, 1424,  548,  544, 1424,
      874,  874,  874,  880,  543, 1017, 1424,  542,  541, 1013,
     1013, 1013,  880,  540,  880,  880,  880,  880,  880,  903,
      903,  903,  880, 1017, 1017, 1017,  880,  538,  537, 1018,
      910, 1018, 1018, 1018, 1018,  536,  529,  911,  880,  910,
      908,  908,  908,  528,  880,  910,  911,  527,  912,  910,
      522,  520,  911,  519,  518,  512,  911,  912,  507,  912,
      912,  912,  912,  912,  506,  910, 1063,  912,  880,  880,
      880,  889,  911, 1019,  505, 1019, 1019, 1019, 1019,  499,

      889, 1063,  889,  889,  889,  889,  889,  498, 1429, 1260,
      889, 1429, 1260,  497,  889,  910,  910,  910, 1429, 1260,
      496, 1063,  911,  911,  911,  495,  889,  493, 1261,  491,
      914, 1261,  889,  912,  912,  912,  490,  489, 1261,  914,
     1004,  484,  483, 1004, 1432,  914,  482, 1432,  474,  914,
     1004, 1063, 1063, 1063, 1432,  473,  889,  889,  889,  913,
      456, 1004,  455,  430,  429,  914,  928,  427,  913, 1260,
      913,  913,  913,  913,  913,  928, 1438, 1440,  913, 1438,
     1440,  928,  425,  929,  423,  928, 1438, 1440, 1261,  422,
      421,  420,  929,  418,  913,  914,  914,  914,  929,  416,

      930,  928,  929,  414, 1443, 1064,  413, 1443, 1021,  930,
      412, 1004, 1004, 1004, 1443,  930,  387, 1021,  929,  930,
     1064,  386,  385, 1021,  913,  913,  913, 1021,  368,  349,
      348,  928,  928,  928, 1446,  930, 1438, 1446,  336,  335,
     1064,  322,  321, 1021, 1446,  319,  318,  317,  929,  929,
      929, 1081, 1081, 1081, 1081, 1081,  312,  311, 1171, 1171,
     1171, 1171, 1171,  310,  298,  930,  930,  930,  942,  297,
     1064, 1064, 1064, 1021, 1021, 1021, 1022,  942,  296,  942,
      942,  942,  942,  942, 1095, 1022,  285,  942,  284, 1023,
     1451, 1022,  281, 1451,  280, 1022,  279,  276, 1023, 1095,

     1451,  274,  273,  942, 1023, 1081, 1081, 1081, 1023,  272,
      252, 1022, 1171, 1171, 1171,  251,  250, 1153, 1453, 1095,
     1555, 1453,  239, 1555, 1023, 1154,  238,  227, 1453,  218,
     1555,  217, 1153,  942,  942,  942,  945,  945,  945,  945,
     1154, 1022, 1022, 1022,  216,  945,  945,  945,  945, 1095,
     1095, 1095, 1153,  175, 1023, 1023, 1023,  165,  163,  162,
     1154, 1073,  945,  945,  945,  945,  945,  945,  947,  947,
     1073,  947,  161,  947,  160,  153, 1073,  947,  947,  947,
     1073,  947, 1153, 1153, 1153,  147, 1074,  141,  137,  947,
     1154, 1154, 1154,  128,  126, 1074, 1073, 1185,  125,  124,

     1557, 1074,  119, 1557, 1075, 1074,  947,  116,  947,  947,
     1557,  115, 1185, 1075, 1564, 1569,  114, 1564, 1569, 1075,
      110, 1074,  106, 1075, 1564, 1569, 1073, 1073, 1073,  104,
      103, 1571, 1185,  947, 1571,  947,  947,  948,  948, 1075,
      948, 1571,  948,  102,   97,   93,  948,  948,  948,   92,
      948, 1074, 1074, 1074,   91,   84,   81, 1442,  948, 1322,
     1442,   80, 1185, 1185, 1185,   79,   72, 1442,   66, 1075,
     1075, 1075,   65,   64, 1322,  948, 1076,  948,  948, 1305,
     1305, 1305, 1305, 1305,   57, 1076, 1448, 1578,   50, 1448,
     1578, 1076,   46,   37, 1322, 1076, 1448, 1578,   36,   33,

       32,   31,  948,    0,  948,  948,  985,  985,  985,  985,
      985, 1076,  985,  985,    0,  985,  985,  985,    0,    0,
      985, 1442,  985,    0, 1322, 1322, 1322, 1584,  985,  985,
     1584,    0,  985, 1305, 1305, 1305,    0, 1584,    0,    0,
        0, 1076, 1076, 1076,    0,  985, 1448,  985,  985,  985,
        0, 1080, 1589, 1621,  985, 1589, 1621,    0, 1624,    0,
     1080, 1624, 1589, 1621,    0,    0, 1080,    0, 1624,    0,
     1080,    0,  985,  985,  985,    0,  985,  985,  985,  985,
      985,  987,  987,  987,  987,  987, 1080,  987,  987,    0,
      987,  987,  987,    0,    0,  987, 1629,  987, 1632, 1629,

        0, 1632,    0,  987,  987,    0, 1629,  987, 1632,    0,
     1082,    0,    0,    0,    0,    0, 1080, 1080, 1080, 1082,
      987,    0,  987,  987,  987, 1082, 1323,    0,    0, 1082,
     1372, 1372, 1372, 1372, 1372,    0,    0,    0,    0,    0,
        0, 1323,    0,    0,    0, 1082,    0,  987,  987,  987,
        0,  987,  987,  987,  987,  987,  995,  995,  995,  995,
      995, 1323,  995,  995,    0,  995,  995,  995,    0,    0,
      995,    0,  995,    0,    0, 1082, 1082, 1082,  995,  995,
        0,    0,  995,    0, 1372, 1372, 1372, 1645, 1645, 1645,
        0, 1323, 1323, 1323,    0,  995,    0,  995,  995,  995,

        0,    0,    0, 1389,    0, 1645, 1645, 1645, 1645,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1389,    0,
        0,    0,  995,  995,  995,    0,  995,  995,  995,  995,
      995,  999,  999,  999,  999,  999,  999,  999, 1389,  999,
     1390,  999,  999,  999,  999,    0,  999,  999,  999,  999,
     1014, 1014, 1014, 1014, 1014, 1390, 1014, 1014,    0, 1014,
     1014, 1014, 1083,    0, 1014, 1085, 1014,    0, 1389, 1389,
     1389, 1083, 1014, 1014, 1085, 1390, 1014, 1083,    0,    0,
     1085, 1083,    0,    0, 1085,    0,    0,    0,    0, 1014,
        0, 1014, 1014, 1014,    0,    0,    0, 1083,    0,    0,

     1085,    0,    0,    0,    0, 1390, 1390, 1390,    0,    0,
        0,    0,    0,    0,    0,    0, 1014, 1014, 1014,    0,
     1014, 1014, 1014, 1014, 1014, 1020,    0, 1083, 1083, 1083,
     1085, 1085, 1085, 1089, 1020,    0, 1020, 1020, 1020, 1020,
     1020,    0, 1089,    0, 1020,    0,    0,    0, 1089,    0,
     1090,    0, 1089,    0,    0,    0,    0,    0,    0, 1090,
     1020,    0,    0,    0,    0, 1090,    0,    0, 1089, 1090,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1090,    0,    0,    0,    0,
     1020, 1020, 1020, 1070,    0,    0,    0,    0, 1089, 1089,

     1089,    0, 1070,    0, 1070, 1070, 1070, 1070, 1070,    0,
        0,    0, 1070,    0,    0, 1090, 1090, 1090, 1091,    0,
        0, 1111,    0,    0,    0,    0,    0, 1091, 1070,    0,
     1111,    0, 1112, 1091,    0,    0, 1111, 1091,    0,    0,
     1111, 1112,    0,    0,    0,    0,    0, 1112,    0,    0,
        0, 1112,    0, 1091,    0,    0, 1111,    0, 1070, 1070,
     1070, 1084,    0,    0,    0,    0,    0, 1112,    0,    0,
     1084,    0, 1084, 1084, 1084, 1084, 1084,    0,    0,    0,
     1084,    0,    0, 1091, 1091, 1091, 1111, 1111, 1111,    0,
        0,    0,    0,    0,    0, 1113, 1084, 1112, 1112, 1112,

     1163,    0,    0,    0, 1113,    0,    0,    0,    0, 1163,
     1113,    0,    0,    0, 1113, 1163,    0,    0,    0, 1163,
        0,    0,    0,    0,    0,    0, 1084, 1084, 1084, 1110,
     1113,    0,    0,    0,    0, 1163, 1164,    0, 1110,    0,
     1110, 1110, 1110, 1110, 1110, 1164,    0,    0, 1110,    0,
        0, 1164,    0,    0, 1165, 1164,    0,    0,    0,    0,
     1113, 1113, 1113, 1165, 1110, 1163, 1163, 1163,    0, 1165,
        0, 1164, 1166, 1165,    0,    0,    0,    0,    0,    0,
        0, 1166,    0,    0,    0,    0,    0, 1166,    0, 1165,
        0, 1166,    0,    0, 1110, 1110, 1110, 1160,    0,    0,

        0, 1164, 1164, 1164,    0,    0, 1160, 1166, 1160, 1160,
     1160, 1160, 1160,    0, 1170,    0, 1160,    0,    0, 1165,
     1165, 1165,    0, 1170,    0, 1172,    0,    0,    0, 1170,
        0,    0, 1160, 1170, 1172,    0, 1173, 1166, 1166, 1166,
     1172,    0,    0,    0, 1172, 1173,    0,    0,    0, 1170,
        0, 1173,    0,    0,    0, 1173,    0,    0,    0, 1175,
     1172,    0, 1160, 1160, 1160,    0,    0,    0, 1175,    0,
        0, 1173,    0,    0, 1175,    0,    0,    0, 1175, 1170,
     1170, 1170,    0,    0,    0,    0,    0,    0,    0,    0,
     1172, 1172, 1172,    0, 1175,    0,    0,    0,    0,    0,

        0, 1173, 1173, 1173, 1174,    0,    0,    0,    0,    0,
        0,    0, 1179, 1174,    0, 1174, 1174, 1174, 1174, 1174,
        0, 1179,    0, 1174, 1175, 1175, 1175, 1179,    0, 1180,
        0, 1179,    0,    0,    0,    0,    0, 1181, 1180, 1174,
        0,    0,    0,    0, 1180,    0, 1181, 1179, 1180,    0,
        0,    0, 1181,    0,    0,    0, 1181,    0,    0,    0,
        0,    0,    0,    0, 1180, 1291,    0,    0,    0, 1174,
     1174, 1174, 1181,    0, 1291,    0,    0, 1179, 1179, 1179,
     1291,    0, 1292,    0, 1291,    0,    0,    0,    0,    0,
        0, 1292,    0,    0, 1180, 1180, 1180, 1292,    0,    0,

     1291, 1292, 1181, 1181, 1181, 1200, 1200,    0, 1200,    0,
     1200,    0,    0,    0, 1200, 1200, 1200, 1292, 1200,    0,
        0,    0,    0,    0,    0,    0, 1200,    0,    0,    0,
     1291, 1291, 1291,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1200, 1293, 1200, 1200, 1292, 1292, 1292,
        0,    0,    0, 1293,    0,    0,    0,    0,    0, 1293,
        0,    0,    0, 1293,    0,    0,    0,    0,    0,    0,
     1200,    0, 1200, 1200, 1226, 1226, 1226, 1226, 1226, 1293,
     1226, 1226,    0, 1226, 1226, 1226,    0,    0, 1226,    0,
     1226,    0,    0,    0,    0,    0, 1226, 1226,    0,    0,

     1226,    0,    0, 1299,    0,    0,    0,    0,    0, 1293,
     1293, 1293, 1299, 1226,    0, 1226, 1226, 1226, 1299,    0,
        0,    0, 1299,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1299,    0,
     1226, 1226, 1226,    0, 1226, 1226, 1226, 1226, 1226, 1227,
     1227, 1227, 1227, 1227,    0, 1227,    0,    0, 1227, 1227,
     1227,    0,    0, 1227,    0, 1227,    0,    0, 1299, 1299,
     1299, 1227, 1227,    0,    0, 1227, 1300,    0,    0,    0,
        0,    0,    0,    0,    0, 1300,    0,    0, 1227,    0,
     1227, 1300, 1227,    0, 1301, 1300,    0,    0,    0,    0,

        0,    0,    0, 1301,    0,    0,    0,    0,    0, 1301,
        0, 1300,    0, 1301,    0, 1227, 1227, 1227,    0, 1227,
     1227, 1227, 1227, 1227, 1228, 1228, 1228, 1228, 1228, 1301,
     1228, 1228,    0, 1228, 1228, 1228,    0,    0, 1228,    0,
     1228, 1300, 1300, 1300,    0,    0, 1228, 1228,    0,    0,
     1228,    0,    0,    0,    0,    0,    0,    0,    0, 1301,
     1301, 1301,    0, 1228,    0, 1228, 1228, 1228,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1228, 1228, 1228,    0, 1228, 1228, 1228, 1228, 1228, 1232,

     1232, 1232, 1232, 1232, 1232, 1232,    0, 1232,    0, 1232,
     1232, 1232, 1232,    0, 1232, 1232, 1232, 1232, 1269, 1269,
     1269, 1269, 1269,    0, 1269, 1269,    0, 1269, 1269, 1269,
     1306,    0, 1269, 1307, 1269,    0,    0,    0,    0, 1306,
     1269, 1269, 1307,    0, 1269, 1306,    0, 1308, 1307, 1306,
        0,    0, 1307,    0,    0,    0, 1308, 1269, 1314, 1269,
     1269, 1269, 1308,    0,    0, 1306, 1308, 1314, 1307,    0,
        0,    0,    0, 1314,    0,    0,    0, 1314,    0,    0,
        0,    0, 1308,    0, 1269, 1269, 1269,    0, 1269, 1269,
     1269, 1269, 1269, 1314,    0, 1306, 1306, 1306, 1307, 1307,

     1307, 1315,    0,    0,    0,    0,    0,    0,    0,    0,
     1315,    0, 1308, 1308, 1308,    0, 1315,    0, 1316,    0,
     1315,    0,    0, 1314, 1314, 1314, 1358, 1316,    0, 1359,
        0,    0,    0, 1316,    0, 1358, 1315, 1316, 1359,    0,
     1360, 1358,    0, 1366, 1359, 1358,    0,    0, 1359, 1360,
        0,    0, 1366, 1316, 1367, 1360,    0,    0, 1366, 1360,
        0, 1358, 1366, 1367, 1359,    0, 1315, 1315, 1315, 1367,
        0,    0,    0, 1367,    0, 1360,    0,    0, 1366,    0,
        0,    0,    0, 1316, 1316, 1316,    0,    0,    0, 1367,
        0, 1358, 1358, 1358, 1359, 1359, 1359,    0,    0,    0,

        0,    0,    0, 1368,    0, 1360, 1360, 1360, 1366, 1366,
     1366,    0, 1368,    0, 1373,    0,    0, 1374, 1368, 1367,
     1367, 1367, 1368, 1373,    0, 1375, 1374,    0, 1381, 1373,
        0,    0, 1374, 1373, 1375,    0, 1374, 1381, 1368, 1382,
     1375,    0, 1383, 1381, 1375,    0,    0, 1381, 1382, 1373,
        0, 1383, 1374,    0, 1382,    0,    0, 1383, 1382,    0,
     1375, 1383,    0, 1381,    0,    0,    0,    0, 1368, 1368,
     1368,    0,    0,    0, 1382,    0,    0, 1383,    0, 1373,
     1373, 1373, 1374, 1374, 1374,    0,    0,    0,    0,    0,
     1375, 1375, 1375, 1381, 1381, 1381,    0,    0,    0,    0,

        0,    0,    0,    0, 1382, 1382, 1382, 1383, 1383, 1383,
     1425, 1425, 1425, 1425, 1425, 1425, 1425,    0, 1425,    0,
     1425, 1425, 1425, 1425,    0, 1425, 1425, 1425, 1425, 1437,
     1437, 1437, 1437, 1437,    0, 1437, 1437,    0, 1437, 1437,
     1437,    0,    0, 1437,    0, 1437,    0,    0,    0,    0,
        0, 1437, 1437,    0,    0, 1437,    0,    0, 1464,    0,
        0,    0,    0,    0,    0,    0,    0, 1464, 1437,    0,
     1437, 1437, 1437, 1464,    0,    0,    0, 1464,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1464,    0, 1437, 1437, 1437,    0, 1437,

     1437, 1437, 1437, 1437, 1439, 1439, 1439, 1439, 1439,    0,
     1439, 1439,    0, 1439, 1439, 1439,    0,    0, 1439,    0,
     1439,    0,    0, 1464, 1464, 1464, 1439, 1439,    0,    0,
     1439,    0,    0, 1465,    0,    0,    0,    0,    0,    0,
        0,    0, 1465, 1439,    0, 1439, 1439, 1439, 1465,    0,
        0,    0, 1465,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1465,    0,
     1439, 1439, 1439,    0, 1439, 1439, 1439, 1439, 1439, 1445,
     1445, 1445, 1445, 1445,    0, 1445, 1445,    0, 1445, 1445,
     1445,    0,    0, 1445,    0, 1445,    0,    0, 1465, 1465,

     1465, 1445, 1445,    0,    0, 1445,    0,    0, 1466,    0,
        0,    0,    0,    0,    0,    0,    0, 1466, 1445,    0,
     1445, 1445, 1445, 1466,    0,    0,    0, 1466,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1466,    0, 1445, 1445, 1445,    0, 1445,
     1445, 1445, 1445, 1445, 1449, 1449, 1449, 1449, 1449,    0,
     1449, 1449,    0, 1449, 1449, 1449,    0,    0, 1449,    0,
     1449,    0,    0, 1466, 1466, 1466, 1449, 1449,    0,    0,
     1449,    0,    0, 1473,    0,    0,    0,    0,    0,    0,
        0,    0, 1473, 1449,    0, 1449, 1449, 1449, 1473,    0,

        0,    0, 1473,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1473,    0,
     1449, 1449, 1449,    0, 1449, 1449, 1449, 1449, 1449, 1450,
     1450, 1450, 1450, 1450,    0, 1450, 1450,    0, 1450, 1450,
     1450,    0,    0, 1450, 1474, 1450,    0, 1475, 1473, 1473,
     1473, 1450, 1450, 1474,    0, 1450, 1475,    0, 1481, 1474,
        0,    0, 1475, 1474,    0,    0, 1475, 1481, 1450, 1482,
     1450, 1450, 1450, 1481,    0,    0,    0, 1481, 1482, 1474,
        0,    0, 1475,    0, 1482,    0,    0,    0, 1482,    0,
        0,    0,    0, 1481,    0, 1450, 1450, 1450,    0, 1450,

     1450, 1450, 1450, 1450, 1482,    0,    0, 1483,    0, 1474,
     1474, 1474, 1475, 1475, 1475,    0, 1483,    0, 1508,    0,
        0,    0, 1483, 1481, 1481, 1481, 1483, 1508,    0, 1509,
        0,    0, 1510, 1508, 1482, 1482, 1482, 1508, 1509,    0,
     1517, 1510, 1483, 1518, 1509,    0,    0, 1510, 1509, 1517,
        0, 1510, 1518, 1508,    0, 1517,    0,    0, 1518, 1517,
        0,    0, 1518,    0, 1509,    0,    0, 1510,    0,    0,
        0,    0, 1483, 1483, 1483, 1517,    0,    0, 1518,    0,
        0,    0,    0, 1508, 1508, 1508,    0,    0,    0,    0,
        0,    0,    0,    0, 1509, 1509, 1509, 1510, 1510, 1510,

        0,    0, 1519,    0,    0, 1517, 1517, 1517, 1518, 1518,
     1518, 1519,    0, 1525,    0,    0, 1526, 1519,    0,    0,
        0, 1519, 1525,    0, 1527, 1526,    0,    0, 1525,    0,
        0, 1526, 1525, 1527,    0, 1526,    0, 1519,    0, 1527,
        0,    0,    0, 1527,    0,    0,    0,    0, 1525,    0,
        0, 1526,    0,    0,    0,    0,    0,    0,    0, 1527,
        0,    0,    0,    0,    0,    0,    0, 1519, 1519, 1519,
        0,    0,    0,    0,    0,    0,    0,    0, 1525, 1525,
     1525, 1526, 1526, 1526,    0,    0,    0,    0,    0, 1527,
     1527, 1527, 1562, 1562, 1562, 1562, 1562,    0, 1562, 1562,

        0, 1562, 1562, 1562,    0,    0, 1562,    0, 1562,    0,
        0,    0,    0,    0, 1562, 1562,    0,    0, 1562,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1562,    0, 1562, 1562, 1562,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1562, 1562,
     1562,    0, 1562, 1562, 1562, 1562, 1562, 1576, 1576, 1576,
     1576, 1576,    0, 1576, 1576,    0, 1576, 1576, 1576,    0,
        0, 1576,    0, 1576,    0,    0,    0,    0,    0, 1576,
     1576,    0,    0, 1576,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 1576,    0, 1576, 1576,
     1576,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1576, 1576, 1576,    0, 1576, 1576, 1576,
     1576, 1576, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
     1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
     1650, 1650, 1650, 1650, 1650, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1652, 1652,
     1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652,

     1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652,
     1652, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1655, 1655, 1655,
     1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655,
     1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655,
     1656, 1656,    0,    0,    0, 1656, 1656, 1656, 1656, 1656,
     1656, 1656, 1656, 1656, 1656, 1656, 1656,    0, 1656, 1656,

     1656, 1656, 1656, 1657,    0, 1657,    0,    0,    0, 1657,
        0, 1657, 1657, 1658, 1658,    0,    0, 1658, 1658, 1658,
     1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658,
     1658, 1658, 1658, 1658, 1658, 1658, 1659, 1659, 1659, 1659,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1660,
        0, 1660,    0,    0, 1660, 1660, 1660,    0, 1660, 1660,
        0, 1660, 1660, 1660, 1660, 1660, 1660, 1661,    0, 1661,
        0,    0, 1661, 1661, 1661,    0, 1661, 1661,    0, 1661,
     1661, 1661, 1661, 1661, 1661, 1662,    0, 1662,    0,    0,

     1662, 1662,    0,    0, 1662, 1662,    0,    0, 1662,    0,
     1662, 1662, 1662, 1663,    0, 1663,    0,    0, 1663, 1663,
     1663, 1663, 1663, 1663,    0, 1663, 1663, 1663, 1663, 1663,
     1663, 1664,    0, 1664,    0,    0, 1664, 1664, 1664, 1664,
     1664, 1664,    0, 1664, 1664, 1664, 1664, 1664, 1664, 1665,
        0, 1665,    0,    0, 1665, 1665,    0, 1665, 1665, 1665,
        0,    0, 1665,    0, 1665, 1665, 1665, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1667,    0,    0,    0, 1667,    0, 1667, 1667, 1668, 1668,

     1668,    0, 1668,    0,    0, 1668,    0,    0, 1668, 1668,
     1668, 1668, 1668, 1669,    0,    0, 1669,    0, 1669,    0,
     1669, 1669,    0,    0, 1669, 1669, 1669, 1669,    0, 1669,
     1669, 1669,    0, 1669, 1669, 1669, 1670, 1670,    0, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1671,
     1671,    0, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1672, 1672, 1672, 1672, 1672, 1674,    0, 1674,    0,    0,
     1674, 1674,    0, 1674, 1674, 1674,    0,    0, 1674, 1674,
     1674, 1674, 1674, 1675,    0, 1675,    0,    0,    0, 1675,
        0, 1675, 1675, 1676, 1676,    0,    0, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1678,    0, 1678,    0,
        0, 1678, 1678, 1678,    0, 1678, 1678,    0, 1678, 1678,
     1678, 1678, 1678, 1678, 1679,    0, 1679,    0,    0, 1679,
     1679, 1679,    0, 1679, 1679,    0, 1679, 1679, 1679, 1679,
     1679, 1679, 1680,    0, 1680,    0,    0, 1680, 1680, 1680,

        0, 1680, 1680,    0, 1680, 1680, 1680, 1680, 1680, 1680,
     1681,    0, 1681,    0,    0, 1681, 1681,    0,    0, 1681,
     1681,    0,    0, 1681,    0, 1681, 1681, 1681, 1682,    0,
     1682,    0,    0, 1682, 1682, 1682,    0, 1682, 1682,    0,
     1682, 1682, 1682, 1682, 1682, 1682, 1683,    0, 1683,    0,
        0, 1683, 1683, 1683,    0, 1683, 1683,    0, 1683, 1683,
        0, 1683, 1683, 1683, 1684,    0, 1684,    0,    0, 1684,
     1684, 1684,    0, 1684, 1684,    0, 1684, 1684, 1684, 1684,
     1684, 1684, 1685,    0, 1685,    0,    0, 1685, 1685, 1685,
        0, 1685, 1685,    0, 1685, 1685, 1685, 1685, 1685, 1685,

     1686,    0, 1686,    0,    0, 1686, 1686,    0,    0, 1686,
        0,    0,    0, 1686, 1686, 1686, 1686, 1686, 1687,    0,
     1687,    0,    0, 1687, 1687, 1687,    0, 1687, 1687,    0,
     1687, 1687, 1687, 1687, 1687, 1687, 1688,    0, 1688,    0,
        0, 1688, 1688, 1688, 1688, 1688, 1688,    0, 1688, 1688,
     1688, 1688, 1688, 1688, 1689,    0, 1689,    0,    0, 1689,
     1689, 1689, 1689, 1689, 1689,    0, 1689, 1689, 1689, 1689,
     1689, 1689, 1690,    0, 1690,    0,    0, 1690, 1690, 1690,
     1690, 1690, 1690,    0, 1690, 1690, 1690, 1690, 1690, 1690,
     1691,    0, 1691,    0,    0, 1691, 1691,    0, 1691, 1691,

     1691,    0,    0, 1691,    0, 1691, 1691, 1691, 1692,    0,
     1692,    0,    0, 1692, 1692, 1692, 1692, 1692, 1692,    0,
     1692, 1692, 1692, 1692, 1692, 1692, 1693,    0, 1693,    0,
        0, 1693, 1693, 1693, 1693, 1693, 1693,    0, 1693, 1693,
        0, 1693, 1693, 1693, 1694,    0, 1694,    0,    0, 1694,
     1694, 1694, 1694, 1694, 1694,    0, 1694, 1694, 1694, 1694,
     1694, 1694, 1695,    0, 1695,    0,    0, 1695, 1695, 1695,
     1695, 1695, 1695,    0, 1695, 1695, 1695, 1695, 1695, 1695,
     1696,    0, 1696,    0,    0, 1696, 1696,    0, 1696, 1696,
        0,    0,    0, 1696, 1696, 1696, 1696, 1696, 1697,    0,

     1697,    0,    0, 1697, 1697, 1697, 1697, 1697, 1697,    0,
     1697, 1697, 1697, 1697, 1697, 1697, 1700,    0,    0,    0,
     1700,    0, 1700, 1700, 1701,    0,    0,    0, 1701,    0,
     1701, 1701, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703,
     1703, 1703, 1703, 1703,    0, 1703, 1703, 1703, 1703, 1703,
     1703, 1703, 1703, 1703, 1703, 1704,    0, 1704,    0,    0,
        0, 1704,    0, 1704, 1704, 1705,    0,    0, 1705,    0,
     1705,    0, 1705, 1705,    0,    0, 1705, 1705, 1705, 1705,
        0, 1705, 1705, 1705,    0, 1705, 1705, 1705, 1707, 1707,
        0, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,

     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
     1707, 1708, 1708,    0,    0,    0, 1708, 1708, 1708, 1708,
     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,    0, 1708,
     1708, 1708, 1708, 1708, 1709, 1709, 1709, 1709, 1709, 1709,
     1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709,
     1709, 1709, 1709, 1709, 1709, 1709, 1709, 1710,    0,    0,
        0, 1710,    0, 1710, 1710, 1711,    0,    0,    0, 1711,
        0, 1711, 1711, 1713,    0, 1713,    0,    0, 1713, 1713,
        0, 1713, 1713, 1713,    0,    0, 1713, 1713, 1713, 1713,
     1713, 1714,    0, 1714,    0,    0,    0, 1714,    0, 1714,

     1714, 1716,    0, 1716,    0,    0, 1716, 1716,    0,    0,
     1716, 1716,    0, 1716, 1716,    0, 1716, 1716, 1716, 1717,
        0, 1717,    0,    0, 1717, 1717, 1717,    0, 1717, 1717,
        0, 1717, 1717, 1717, 1717, 1717, 1717, 1718,    0, 1718,
        0,    0, 1718, 1718, 1718,    0, 1718, 1718,    0, 1718,
     1718, 1718, 1718, 1718, 1718, 1719,    0, 1719,    0,    0,
     1719, 1719, 1719,    0, 1719, 1719,    0, 1719, 1719, 1719,
     1719, 1719, 1719, 1720,    0, 1720,    0,    0, 1720, 1720,
     1720,    0, 1720, 1720,    0, 1720, 1720, 1720, 1720, 1720,
     1720, 1721,    0, 1721,    0,    0, 1721, 1721,    0,    0,

     1721, 1721,    0,    0, 1721, 1721, 1721, 1721, 1721, 1722,
        0, 1722,    0,    0, 1722, 1722,    0,    0, 1722,    0,
        0,    0, 1722, 1722, 1722, 1722, 1722, 1723,    0, 1723,
        0,    0, 1723, 1723, 1723,    0, 1723, 1723,    0, 1723,
     1723, 1723, 1723, 1723, 1723, 1724,    0, 1724,    0,    0,
     1724, 1724, 1724,    0, 1724, 1724,    0, 1724, 1724, 1724,
     1724, 1724, 1724, 1725,    0, 1725,    0,    0, 1725, 1725,
        0,    0, 1725, 1725,    0,    0, 1725, 1725, 1725, 1725,
     1725, 1726,    0, 1726,    0,    0, 1726, 1726, 1726,    0,
     1726, 1726,    0, 1726, 1726, 1726, 1726, 1726, 1726, 1727,

        0, 1727,    0,    0, 1727, 1727,    0,    0, 1727,    0,
        0,    0, 1727, 1727, 1727, 1727, 1727, 1728,    0, 1728,
        0,    0, 1728, 1728,    0,    0, 1728, 1728,    0,    0,
     1728,    0, 1728, 1728, 1728, 1729,    0, 1729,    0,    0,
     1729, 1729, 1729,    0, 1729, 1729,    0, 1729, 1729, 1729,
     1729, 1729, 1729, 1730,    0, 1730,    0,    0, 1730, 1730,
     1730,    0, 1730, 1730,    0, 1730, 1730, 1730, 1730, 1730,
     1730, 1731,    0, 1731,    0,    0, 1731, 1731,    0,    0,
     1731,    0,    0,    0, 1731, 1731, 1731, 1731, 1731, 1732,
        0, 1732,    0,    0, 1732, 1732,    0,    0, 1732,    0,

        0,    0, 1732, 1732, 1732, 1732, 1732, 1733,    0, 1733,
        0,    0, 1733, 1733, 1733,    0, 1733, 1733,    0, 1733,
     1733, 1733, 1733, 1733, 1733, 1734,    0, 1734,    0,    0,
     1734, 1734, 1734,    0, 1734, 1734,    0, 1734, 1734, 1734,
     1734, 1734, 1734, 1735,    0, 1735,    0,    0, 1735, 1735,
        0, 1735, 1735, 1735,    0, 1735, 1735,    0, 1735, 1735,
     1735, 1736,    0, 1736,    0,    0, 1736, 1736, 1736, 1736,
     1736, 1736,    0, 1736, 1736, 1736, 1736, 1736, 1736, 1737,
        0, 1737,    0,    0, 1737, 1737, 1737, 1737, 1737, 1737,
        0, 1737, 1737, 1737, 1737, 1737, 1737, 1738,    0, 1738,

        0,    0, 1738, 1738, 1738, 1738, 1738, 1738,    0, 1738,
     1738, 1738, 1738, 1738, 1738, 1739,    0, 1739,    0,    0,
     1739, 1739, 1739, 1739, 1739, 1739,    0, 1739, 1739, 1739,
     1739, 1739, 1739, 1740,    0, 1740,    0,    0, 1740, 1740,
        0, 1740, 1740, 1740,    0,    0, 1740, 1740, 1740, 1740,
     1740, 1741,    0, 1741,    0,    0, 1741, 1741,    0, 1741,
     1741,    0,    0,    0, 1741, 1741, 1741, 1741, 1741, 1742,
        0, 1742,    0,    0, 1742, 1742, 1742, 1742, 1742, 1742,
        0, 1742, 1742, 1742, 1742, 1742, 1742, 1743,    0, 1743,
        0,    0, 1743, 1743, 1743, 1743, 1743, 1743,    0, 1743,

     1743, 1743, 1743, 1743, 1743, 1744,    0, 1744,    0,    0,
     1744, 1744,    0, 1744, 1744, 1744,    0,    0, 1744, 1744,
     1744, 1744, 1744, 1745,    0, 1745,    0,    0, 1745, 1745,
     1745, 1745, 1745, 1745,    0, 1745, 1745, 1745, 1745, 1745,
     1745, 1746,    0, 1746,    0,    0, 1746, 1746,    0, 1746,
     1746,    0,    0,    0, 1746, 1746, 1746, 1746, 1746, 1747,
        0, 1747,    0,    0, 1747, 1747,    0, 1747, 1747, 1747,
        0,    0, 1747,    0, 1747, 1747, 1747, 1748,    0, 1748,
        0,    0, 1748, 1748, 1748, 1748, 1748, 1748,    0, 1748,
     1748, 1748, 1748, 1748, 1748, 1749,    0, 1749,    0,    0,

     1749, 1749, 1749, 1749, 1749, 1749,    0, 1749, 1749, 1749,
     1749, 1749, 1749, 1750,    0, 1750,    0,    0, 1750, 1750,
        0, 1750, 1750,    0,    0,    0, 1750, 1750, 1750, 1750,
     1750, 1751,    0, 1751,    0,    0, 1751, 1751,    0, 1751,
     1751,    0,    0,    0, 1751, 1751, 1751, 1751, 1751, 1752,
        0, 1752,    0,    0, 1752, 1752, 1752, 1752, 1752, 1752,
        0, 1752, 1752, 1752, 1752, 1752, 1752, 1753,    0, 1753,
        0,    0, 1753, 1753, 1753, 1753, 1753, 1753,    0, 1753,
     1753, 1753, 1753, 1753, 1753, 1757,    0,    0,    0, 1757,
        0, 1757, 1757, 1759, 1759, 1759, 1759, 1759, 1759, 1759,

     1759, 1759, 1759, 1759, 1759,    0, 1759, 1759, 1759, 1759,
     1759, 1759, 1759, 1759, 1759, 1759, 1760,    0,    0, 1760,
        0, 1760,    0, 1760, 1760,    0,    0, 1760, 1760, 1760,
     1760,    0, 1760, 1760, 1760,    0, 1760, 1760, 1760, 1763,
        0,    0, 1763,    0,    0,    0, 1763,    0, 1763, 1763,
     1764, 1764, 1764, 1764, 1764,    0, 1764, 1764, 1764, 1764,
        0,    0, 1764,    0,    0, 1764, 1764, 1764,    0, 1764,
        0,    0, 1764, 1765,    0,    0, 1765, 1765,    0, 1765,
        0,    0, 1765, 1765,    0, 1765, 1765, 1765,    0,    0,
     1765, 1765, 1765, 1765, 1765, 1766,    0, 1766,    0,    0,

        0, 1766,    0, 1766, 1766, 1767,    0, 1767,    0,    0,
     1767, 1767,    0,    0, 1767, 1767,    0,    0, 1767, 1767,
     1767, 1767, 1767, 1768,    0, 1768,    0,    0, 1768, 1768,
     1768,    0, 1768, 1768,    0, 1768, 1768,    0, 1768, 1768,
     1768, 1769,    0, 1769,    0,    0, 1769, 1769, 1769,    0,
     1769, 1769,    0, 1769, 1769, 1769, 1769, 1769, 1769, 1770,
        0, 1770,    0,    0, 1770, 1770, 1770,    0, 1770, 1770,
        0, 1770, 1770, 1770, 1770, 1770, 1770, 1771,    0, 1771,
        0,    0, 1771, 1771, 1771,    0, 1771, 1771,    0, 1771,
     1771, 1771, 1771, 1771, 1771, 1772,    0, 1772,    0,    0,

     1772, 1772,    0,    0, 1772, 1772,    0,    0, 1772, 1772,
     1772, 1772, 1772, 1773,    0, 1773,    0,    0, 1773, 1773,
        0,    0, 1773,    0,    0,    0, 1773, 1773, 1773, 1773,
     1773, 1774,    0, 1774,    0,    0, 1774, 1774,    0,    0,
     1774,    0,    0,    0, 1774, 1774, 1774, 1774, 1774, 1775,
        0, 1775,    0,    0, 1775, 1775, 1775,    0, 1775, 1775,
        0, 1775, 1775, 1775, 1775, 1775, 1775, 1776,    0, 1776,
        0,    0, 1776, 1776, 1776,    0, 1776, 1776,    0, 1776,
     1776, 1776, 1776, 1776, 1776, 1777,    0, 1777,    0,    0,
     1777, 1777,    0,    0, 1777,    0,    0,    0, 1777, 1777,

     1777, 1777, 1777, 1778,    0, 1778,    0,    0, 1778, 1778,
        0,    0, 1778,    0,    0,    0, 1778, 1778, 1778, 1778,
     1778, 1779,    0, 1779,    0,    0, 1779, 1779,    0,    0,
     1779,    0,    0,    0, 1779, 1779, 1779, 1779, 1779, 1780,
        0, 1780,    0,    0, 1780, 1780,    0,    0, 1780,    0,
        0,    0, 1780, 1780, 1780, 1780, 1780, 1781,    0, 1781,
        0,    0, 1781, 1781,    0,    0, 1781, 1781,    0,    0,
     1781, 1781, 1781, 1781, 1781, 1782,    0, 1782,    0,    0,
     1782, 1782, 1782,    0, 1782, 1782,    0, 1782, 1782, 1782,
     1782, 1782, 1782, 1783,    0, 1783,    0,    0, 1783, 1783,

     1783,    0, 1783, 1783,    0, 1783, 1783, 1783, 1783, 1783,
     1783, 1784,    0, 1784,    0,    0, 1784, 1784, 1784,    0,
     1784, 1784,    0, 1784, 1784, 1784, 1784, 1784, 1784, 1785,
        0, 1785,    0,    0, 1785, 1785, 1785,    0, 1785, 1785,
        0, 1785, 1785, 1785, 1785, 1785, 1785, 1786,    0, 1786,
        0,    0, 1786, 1786,    0,    0, 1786, 1786,    0,    0,
     1786,    0, 1786, 1786, 1786, 1787,    0, 1787,    0,    0,
     1787, 1787,    0,    0, 1787,    0,    0,    0, 1787, 1787,
     1787, 1787, 1787, 1788,    0, 1788,    0,    0, 1788, 1788,
     1788,    0, 1788, 1788,    0, 1788, 1788, 1788, 1788, 1788,

     1788, 1789,    0, 1789,    0,    0, 1789, 1789,    0, 1789,
     1789, 1789,    0,    0, 1789, 1789, 1789, 1789, 1789, 1790,
        0, 1790,    0,    0, 1790, 1790, 1790, 1790, 1790, 1790,
        0, 1790, 1790,    0, 1790, 1790, 1790, 1791,    0, 1791,
        0,    0, 1791, 1791, 1791, 1791, 1791, 1791,    0, 1791,
     1791, 1791, 1791, 1791, 1791, 1792,    0, 1792,    0,    0,
     1792, 1792, 1792, 1792, 1792, 1792,    0, 1792, 1792, 1792,
     1792, 1792, 1792, 1793,    0, 1793,    0,    0, 1793, 1793,
     1793, 1793, 1793, 1793,    0, 1793, 1793, 1793, 1793, 1793,
     1793, 1794,    0, 1794,    0,    0, 1794, 1794,    0, 1794,

     1794, 1794,    0,    0, 1794, 1794, 1794, 1794, 1794, 1795,
        0, 1795,    0,    0, 1795, 1795,    0, 1795, 1795,    0,
        0,    0, 1795, 1795, 1795, 1795, 1795, 1796,    0, 1796,
        0,    0, 1796, 1796,    0, 1796, 1796,    0,    0,    0,
     1796, 1796, 1796, 1796, 1796, 1797,    0, 1797,    0,    0,
     1797, 1797, 1797, 1797, 1797, 1797,    0, 1797, 1797, 1797,
     1797, 1797, 1797, 1798,    0, 1798,    0,    0, 1798, 1798,
     1798, 1798, 1798, 1798,    0, 1798, 1798, 1798, 1798, 1798,
     1798, 1799,    0, 1799,    0,    0, 1799, 1799,    0, 1799,
     1799,    0,    0,    0, 1799, 1799, 1799, 1799, 1799, 1800,

        0, 1800,    0,    0, 1800, 1800,    0, 1800, 1800,    0,
        0,    0, 1800, 1800, 1800, 1800, 1800, 1801,    0, 1801,
        0,    0, 1801, 1801,    0, 1801, 1801,    0,    0,    0,
     1801, 1801, 1801, 1801, 1801, 1802,    0, 1802,    0,    0,
     1802, 1802,    0, 1802, 1802,    0,    0,    0, 1802, 1802,
     1802, 1802, 1802, 1803,    0, 1803,    0,    0, 1803, 1803,
        0, 1803, 1803, 1803,    0,    0, 1803, 1803, 1803, 1803,
     1803, 1804,    0, 1804,    0,    0, 1804, 1804, 1804, 1804,
     1804, 1804,    0, 1804, 1804, 1804, 1804, 1804, 1804, 1805,
        0, 1805,    0,    0, 1805, 1805, 1805, 1805, 1805, 1805,

        0, 1805, 1805, 1805, 1805, 1805, 1805, 1806,    0, 1806,
        0,    0, 1806, 1806, 1806, 1806, 1806, 1806,    0, 1806,
     1806, 1806, 1806, 1806, 1806, 1807,    0, 1807,    0,    0,
     1807, 1807, 1807, 1807, 1807, 1807,    0, 1807, 1807, 1807,
     1807, 1807, 1807, 1808,    0, 1808,    0,    0, 1808, 1808,
        0, 1808, 1808, 1808,    0,    0, 1808,    0, 1808, 1808,
     1808, 1809,    0, 1809,    0,    0, 1809, 1809,    0, 1809,
     1809,    0,    0,    0, 1809, 1809, 1809, 1809, 1809, 1810,
        0, 1810,    0,    0, 1810, 1810, 1810, 1810, 1810, 1810,
        0, 1810, 1810, 1810, 1810, 1810, 1810, 1812,    0,    0,

        0, 1812,    0, 1812, 1812, 1813,    0,    0, 1813,    0,
     1813,    0, 1813, 1813,    0,    0, 1813, 1813, 1813, 1813,
        0, 1813, 1813, 1813,    0, 1813, 1813, 1813, 1816, 1816,
     1816, 1816, 1816,    0, 1816, 1816, 1816, 1816,    0,    0,
     1816,    0,    0, 1816, 1816, 1816,    0, 1816,    0, 1816,
     1816, 1817, 1817, 1817, 1817, 1817,    0, 1817, 1817, 1817,
     1817,    0,    0, 1817,    0,    0, 1817, 1817, 1817,    0,
     1817, 1817,    0, 1817, 1818,    0, 1818,    0,    0, 1818,
     1818,    0, 1818, 1818, 1818,    0,    0, 1818, 1818, 1818,
     1818, 1818, 1819,    0, 1819,    0,    0,    0, 1819,    0,

     1819, 1819, 1820,    0, 1820,    0,    0, 1820, 1820, 1820,
        0, 1820, 1820,    0, 1820, 1820, 1820, 1820, 1820, 1820,
     1821,    0, 1821,    0,    0, 1821, 1821, 1821,    0, 1821,
     1821,    0, 1821, 1821, 1821, 1821, 1821, 1821, 1822,    0,
     1822,    0,    0, 1822, 1822,    0,    0, 1822,    0,    0,
        0, 1822, 1822, 1822, 1822, 1822, 1823,    0, 1823,    0,
        0, 1823, 1823,    0,    0, 1823,    0,    0,    0, 1823,
     1823, 1823, 1823, 1823, 1824,    0, 1824,    0,    0, 1824,
     1824,    0,    0, 1824,    0,    0,    0, 1824, 1824, 1824,
     1824, 1824, 1825,    0, 1825,    0,    0, 1825, 1825,    0,

        0, 1825,    0,    0,    0, 1825, 1825, 1825, 1825, 1825,
     1826,    0, 1826,    0,    0, 1826, 1826,    0,    0, 1826,
     1826,    0,    0, 1826, 1826, 1826, 1826, 1826, 1827,    0,
     1827,    0,    0, 1827, 1827, 1827,    0, 1827, 1827,    0,
     1827, 1827, 1827, 1827, 1827, 1827, 1828,    0, 1828,    0,
        0, 1828, 1828, 1828,    0, 1828, 1828,    0, 1828, 1828,
     1828, 1828, 1828, 1828, 1829,    0, 1829,    0,    0, 1829,
     1829, 1829,    0, 1829, 1829,    0, 1829, 1829, 1829, 1829,
     1829, 1829, 1830,    0, 1830,    0,    0, 1830, 1830,    0,
        0, 1830, 1830,    0,    0, 1830, 1830, 1830, 1830, 1830,

     1831,    0, 1831,    0,    0, 1831, 1831, 1831,    0, 1831,
     1831,    0, 1831, 1831, 1831, 1831, 1831, 1831, 1832,    0,
     1832,    0,    0, 1832, 1832, 1832,    0, 1832, 1832,    0,
     1832, 1832, 1832, 1832, 1832, 1832, 1833,    0, 1833,    0,
        0, 1833, 1833, 1833,    0, 1833, 1833,    0, 1833, 1833,
     1833, 1833, 1833, 1833, 1834,    0, 1834,    0,    0, 1834,
     1834, 1834,    0, 1834, 1834,    0, 1834, 1834, 1834, 1834,
     1834, 1834, 1835,    0, 1835,    0,    0, 1835, 1835,    0,
        0, 1835, 1835,    0,    0, 1835, 1835, 1835, 1835, 1835,
     1836,    0, 1836,    0,    0, 1836, 1836,    0,    0, 1836,

        0,    0,    0, 1836, 1836, 1836, 1836, 1836, 1837,    0,
     1837,    0,    0, 1837, 1837, 1837, 1837, 1837, 1837,    0,
     1837, 1837, 1837, 1837, 1837, 1837, 1838,    0, 1838,    0,
        0, 1838, 1838, 1838, 1838, 1838, 1838,    0, 1838, 1838,
     1838, 1838, 1838, 1838, 1839,    0, 1839,    0,    0, 1839,
     1839,    0, 1839, 1839,    0,    0,    0, 1839, 1839, 1839,
     1839, 1839, 1840,    0, 1840,    0,    0, 1840, 1840,    0,
     1840, 1840,    0,    0,    0, 1840, 1840, 1840, 1840, 1840,
     1841,    0, 1841,    0,    0, 1841, 1841,    0, 1841, 1841,
        0,    0,    0, 1841, 1841, 1841, 1841, 1841, 1842,    0,

     1842,    0,    0, 1842, 1842,    0, 1842, 1842,    0,    0,
        0, 1842, 1842, 1842, 1842, 1842, 1843,    0, 1843,    0,
        0, 1843, 1843,    0, 1843, 1843, 1843,    0,    0, 1843,
     1843, 1843, 1843, 1843, 1844,    0, 1844,    0,    0, 1844,
     1844, 1844, 1844, 1844, 1844,    0, 1844, 1844, 1844, 1844,
     1844, 1844, 1845,    0, 1845,    0,    0, 1845, 1845, 1845,
     1845, 1845, 1845,    0, 1845, 1845, 1845, 1845, 1845, 1845,
     1846,    0, 1846,    0,    0, 1846, 1846, 1846, 1846, 1846,
     1846,    0, 1846, 1846, 1846, 1846, 1846, 1846, 1847,    0,
     1847,    0,    0, 1847, 1847,    0, 1847, 1847, 1847,    0,

        0, 1847, 1847, 1847, 1847, 1847, 1848,    0, 1848,    0,
        0, 1848, 1848, 1848, 1848, 1848, 1848,    0, 1848, 1848,
     1848, 1848, 1848, 1848, 1849,    0, 1849,    0,    0, 1849,
     1849, 1849, 1849, 1849, 1849,    0, 1849, 1849, 1849, 1849,
     1849, 1849, 1850,    0, 1850,    0,    0, 1850, 1850, 1850,
     1850, 1850, 1850,    0, 1850, 1850, 1850, 1850, 1850, 1850,
     1851,    0, 1851,    0,    0, 1851, 1851, 1851, 1851, 1851,
     1851,    0, 1851, 1851, 1851, 1851, 1851, 1851, 1852,    0,
     1852,    0,    0, 1852, 1852,    0, 1852, 1852, 1852,    0,
        0, 1852, 1852, 1852, 1852, 1852, 1853,    0, 1853,    0,

        0, 1853, 1853,    0, 1853, 1853,    0,    0,    0, 1853,
     1853, 1853, 1853, 1853, 1854, 1854, 1854, 1854, 1854, 1854,
     1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854,
     1854, 1854, 1854, 1854, 1854, 1854, 1854, 1857, 1857, 1857,
     1857, 1857,    0, 1857, 1857, 1857, 1857,    0,    0, 1857,
        0,    0, 1857, 1857, 1857,    0, 1857, 1857,    0, 1857,
     1858, 1858, 1858, 1858, 1858,    0, 1858, 1858, 1858, 1858,
        0,    0, 1858,    0,    0, 1858, 1858, 1858,    0, 1858,
        0,    0, 1858, 1859, 1859, 1859, 1859, 1859,    0, 1859,
     1859, 1859, 1859,    0,    0, 1859,    0,    0, 1859, 1859,

     1859,    0, 1859,    0,    0, 1859, 1860, 1860, 1860, 1860,
     1860,    0, 1860, 1860, 1860, 1860,    0,    0, 1860,    0,
        0, 1860, 1860, 1860,    0, 1860,    0,    0, 1860, 1861,
     1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861,
     1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861,
     1861, 1861, 1862,    0, 1862,    0,    0, 1862, 1862, 1862,
        0, 1862, 1862,    0, 1862, 1862, 1862, 1862, 1862, 1862,
     1863,    0, 1863,    0,    0, 1863, 1863, 1863,    0, 1863,
     1863,    0, 1863, 1863, 1863, 1863, 1863, 1863, 1864,    0,
     1864,    0,    0, 1864, 1864, 1864,    0, 1864, 1864,    0,

     1864, 1864, 1864, 1864, 1864, 1864, 1865,    0, 1865,    0,
        0, 1865, 1865, 1865,    0, 1865, 1865,    0, 1865, 1865,
     1865, 1865, 1865, 1865, 1866,    0, 1866,    0,    0, 1866,
     1866,    0,    0, 1866, 1866,    0,    0, 1866, 1866, 1866,
     1866, 1866, 1867,    0, 1867,    0,    0, 1867, 1867, 1867,
        0, 1867, 1867,    0, 1867, 1867, 1867, 1867, 1867, 1867,
     1868,    0, 1868,    0,    0, 1868, 1868, 1868,    0, 1868,
     1868,    0, 1868, 1868, 1868, 1868, 1868, 1868, 1869,    0,
     1869,    0,    0, 1869, 1869, 1869,    0, 1869, 1869,    0,
     1869, 1869, 1869, 1869, 1869, 1869, 1870,    0, 1870,    0,

        0, 1870, 1870,    0,    0, 1870, 1870,    0,    0, 1870,
     1870, 1870, 1870, 1870, 1871,    0, 1871,    0,    0, 1871,
     1871,    0,    0, 1871,    0,    0,    0, 1871, 1871, 1871,
     1871, 1871, 1872,    0, 1872,    0,    0, 1872, 1872,    0,
        0, 1872,    0,    0,    0, 1872, 1872, 1872, 1872, 1872,
     1873,    0, 1873,    0,    0, 1873, 1873, 1873, 1873, 1873,
     1873,    0, 1873, 1873, 1873, 1873, 1873, 1873, 1874,    0,
     1874,    0,    0, 1874, 1874, 1874, 1874, 1874, 1874,    0,
     1874, 1874, 1874, 1874, 1874, 1874, 1875,    0, 1875,    0,
        0, 1875, 1875, 1875, 1875, 1875, 1875,    0, 1875, 1875,

     1875, 1875, 1875, 1875, 1876,    0, 1876,    0,    0, 1876,
     1876, 1876, 1876, 1876, 1876,    0, 1876, 1876, 1876, 1876,
     1876, 1876, 1877,    0, 1877,    0,    0, 1877, 1877,    0,
     1877, 1877, 1877,    0,    0, 1877, 1877, 1877, 1877, 1877,
     1878,    0, 1878,    0,    0, 1878, 1878, 1878, 1878, 1878,
     1878,    0, 1878, 1878, 1878, 1878, 1878, 1878, 1879,    0,
     1879,    0,    0, 1879, 1879, 1879, 1879, 1879, 1879,    0,
     1879, 1879, 1879, 1879, 1879, 1879, 1880,    0, 1880,    0,
        0, 1880, 1880, 1880, 1880, 1880, 1880,    0, 1880, 1880,
     1880, 1880, 1880, 1880, 1881,    0, 1881,    0,    0, 1881,

     1881,    0, 1881, 1881, 1881,    0,    0, 1881, 1881, 1881,
     1881, 1881, 1882,    0, 1882,    0,    0, 1882, 1882,    0,
     1882, 1882,    0,    0,    0, 1882, 1882, 1882, 1882, 1882,
     1883,    0, 1883,    0,    0, 1883, 1883,    0, 1883, 1883,
        0,    0,    0, 1883, 1883, 1883, 1883, 1883, 1884, 1884,
     1884, 1884, 1884,    0, 1884, 1884, 1884, 1884,    0,    0,
     1884,    0,    0, 1884, 1884, 1884,    0, 1884,    0,    0,
     1884, 1885, 1885, 1885, 1885, 1885,    0, 1885, 1885, 1885,
     1885,    0,    0, 1885,    0,    0, 1885, 1885, 1885,    0,
     1885,    0,    0, 1885, 1886, 1886, 1886, 1886, 1886,    0,

     1886, 1886, 1886, 1886,    0,    0, 1886,    0,    0, 1886,
     1886, 1886,    0, 1886,    0,    0, 1886, 1887,    0, 1887,
        0,    0, 1887, 1887, 1887,    0, 1887, 1887,    0, 1887,
     1887, 1887, 1887, 1887, 1887, 1888,    0, 1888,    0,    0,
     1888, 1888, 1888,    0, 1888, 1888,    0, 1888, 1888, 1888,
     1888, 1888, 1888, 1889,    0, 1889,    0,    0, 1889, 1889,
     1889,    0, 1889, 1889,    0, 1889, 1889, 1889, 1889, 1889,
     1889, 1890, 1890, 1890, 1890, 1890,    0, 1890, 1890, 1890,
     1890,    0,    0, 1890,    0,    0, 1890, 1890, 1890,    0,
     1890,    0,    0, 1890, 1891, 1891, 1891, 1891, 1891,    0,

     1891, 1891, 1891, 1891,    0,    0, 1891,    0,    0, 1891,
     1891, 1891,    0, 1891,    0,    0, 1891, 1892, 1892, 1892,
     1892, 1892,    0, 1892, 1892, 1892, 1892,    0,    0, 1892,
        0,    0, 1892, 1892, 1892,    0, 1892,    0,    0, 1892,
     1893, 1893, 1893, 1893, 1893,    0, 1893, 1893, 1893, 1893,
        0,    0, 1893,    0,    0, 1893, 1893, 1893,    0, 1893,
        0,    0, 1893, 1894, 1894, 1894, 1894, 1894,    0, 1894,
     1894, 1894, 1894,    0,    0, 1894,    0,    0, 1894, 1894,
     1894,    0, 1894,    0,    0, 1894, 1895, 1895, 1895, 1895,
     1895,    0, 1895, 1895, 1895, 1895,    0,    0, 1895,    0,

        0, 1895, 1895, 1895,    0, 1895,    0,    0, 1895, 1896,
     1896, 1896, 1896, 1896,    0, 1896, 1896, 1896, 1896,    0,
        0, 1896,    0,    0, 1896, 1896, 1896,    0, 1896,    0,
        0, 1896, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,

     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parser.l"
/* Copyright 2009-2021
 * Kaz Kylheku <kaz@kylheku.com>
 * Vancouver, Canada
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#line 29 "parser.l"

#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <stdlib.h>
#include <limits.h>
#include <wchar.h>
#include <signal.h>
#include "config.h"
#include "lib.h"
#include "gc.h"
#include "stream.h"
#include "utf8.h"
#include "signal.h"
#include "unwind.h"
#include "hash.h"
#include "y.tab.h"
#include "parser.h"
#include "txr.h"

#define YY_INPUT(buf, result, max_size)                                 \
  do {                                                                  \
    val self = lit("parser");                                           \
    val n = get_bytes(self, yyextra->stream,                            \
                      coerce(mem_t *, buf), max_size);                  \
    result = c_num(n, self);                                            \
  } while (0)

#define YY_DECL \
  static int yylex_impl(YYSTYPE *yylval_param, yyscan_t yyscanner)

int opt_loglevel = 1;   /* 0 - quiet; 1 - normal; 2 - verbose */

val form_to_ln_hash;

static int directive_tok(scanner_t *yyg, int tok, int state);

#define FLEX_NUM_VERSION 10000*YY_FLEX_MAJOR_VERSION + \
                         100*YY_FLEX_MINOR_VERSION + \
                         YY_FLEX_SUBMINOR_VERSION

#if FLEX_NUM_VERSION < 20509
int yylex_destroy(void)
{
  return 0;
}
#endif

/* Missing prototypes not generated by flex. */
int yyget_column(yyscan_t);
void yyset_column (int column_no, yyscan_t yyscanner);

/* The following function is all that libflex provides.
   By providing it here, we eliminate the need to link libflex. */
#define YY_SKIP_YYWRAP
INLINE int yywrap(yyscan_t scanner)
{
  (void) scanner;
  return 1;
}

void yyerror(scanner_t *scanner, parser_t *parser, const char *s)
{
  yyerrorf(scanner, lit("~a"), string_utf8(s), nao);
  if (parser->prepared_msg) {
    yyerrorf(scanner, lit("~a"), parser->prepared_msg, nao);
    parser->prepared_msg = nil;
  }
}

void yyerrorf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    if (opt_compat && opt_compat <= 114)
      format(std_error, lit("~a: (~a:~d): "), prog_string,
             parser->name, num(parser->lineno), nao);
    else
      format(std_error, lit("~a:~d: "),
             parser->name, num(parser->lineno), nao);

    vformat(std_error, fmt, vl);
    put_char(chr('\n'), std_error);
    va_end (vl);
  }
  parser->errors++;
}

static void yyerrprepf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    set(mkloc(parser->prepared_msg, parser->parser),
        vformat_to_string(fmt, vl));
    va_end (vl);
  }
}

static void out_of_range_float(scanner_t *scanner, const char *tok)
{
    yyerrorf(scanner, lit("out-of-range floating-point literal: ~a"),
             string_utf8(tok), nao);
}

static wchar_t char_esc(int letter)
{
  switch (letter) {
  case ' ': return L' ';
  case 'a': return L'\a';
  case 'b': return L'\b';
  case 't': return L'\t';
  case 'n': return L'\n';
  case 'v': return L'\v';
  case 'f': return L'\f';
  case 'r': return L'\r';
  case 'e': return 27;
  case '"': return L'"';
  case '\'': return L'\'';
  case '`': return L'`';
  case '/': return L'/';
  case '@': return L'@';
  case '\\': return L'\\';
  }

  internal_error("unhandled escape character");
}

static wchar_t num_esc(scanner_t *scn, char *num)
{
  long val = 0;

  if (num[0] == 'x' || num[0] == 'u') {
    if (strlen(num) > 7)
      yyerror(scn, yyget_extra(scn), "too many digits in hex character escape");
    else
      val = strtol(num + 1, 0, 16);
  } else {
    if (num[0] == 'o')
      num++;
    if (strlen(num) > 8)
      yyerror(scn, yyget_extra(scn), "too many digits in octal character escape");
    else
      val = strtol(num, 0, 8);
  }

  if (val < 0 || val > 0x10FFFF || convert(wchar_t, val) != val) {
    yyerror(scn, yyget_extra(scn), "numeric character escape out of range");
    val = 0;
  }

  return val;
}

static wchar_t *unicode_ident(scanner_t *scn, const char *lex)
{
  wchar_t *wlex = utf8_dup_from(lex), *ptr = wlex, wch;

  while ((wch = *ptr++)) {
    if (wch < 0x1680 || (wch >= 0x3000 && wch < 0xdc00))
      continue;

    if ((wch >= 0xdc00 && wch <= 0xdcff) ||
        (wch >= 0xd800 && wch <= 0xdbff) ||
#if FULL_UNICODE
        (wch >= 0xf0000 && wch <= 0xffffd) ||
        (wch >= 0x100000 && wch <= 0x10fffd) ||
#endif
        (wch >= 0xe000 && wch <= 0xf8ff) ||
        (wch == 0xfffe) ||
        (wch == 0xffff))
    {
      yyerror(scn, yyget_extra(scn),
              "disallowed Unicode character in identifier");
      break;
    }

    switch (wch) {
    case 0x1680: case 0x180e: case 0x2000: case 0x2001: case 0x2002:
    case 0x2003: case 0x2004: case 0x2005: case 0x2006: case 0x2007:
    case 0x2008: case 0x2009: case 0x200a: case 0x2028: case 0x2029:
    case 0x205f: case 0x3000:
      yyerror(scn, yyget_extra(scn),
              "Unicode space occurs in identifier");
      break;
    default:
      continue;
    }

    break;
  }

  return wlex;
}

#line 4025 "lex.yy.c"
#define YY_NO_INPUT 1

#line 4028 "lex.yy.c"

#define INITIAL 0
#define SPECIAL 1
#define BRACED 2
#define NESTED 3
#define REGEX 4
#define SREGEX 5
#define STRLIT 6
#define CHRLIT 7
#define QSILIT 8
#define QSPECIAL 9
#define WLIT 10
#define QWLIT 11
#define BUFLIT 12
#define JSON 13
#define JLIT 14
#define JMARKER 15

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE parser_t *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		/* Create the reject buffer large enough to save one state per allowed character. */
		if ( ! yyg->yy_state_buf )
			yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
		if ( ! yyg->yy_state_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 290 "parser.l"


#line 4344 "lex.yy.c"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1650 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1649 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 292 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num(10));
  return NUMBER;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 304 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 2));
  int base;

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 323 "parser.l"
{
  int base = 0;
  val str = string_own(utf8_dup_from(yytext + 2));

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  yyerrorf(yyg, lit("trailing junk in numeric literal: ~a~a~a"),
           chr(yytext[0]), chr(yytext[1]), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 345 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str_utf8(yytext)) == nil)
    out_of_range_float(yyg, yytext);

  return NUMBER;
}
	YY_BREAK
case 5:
#line 358 "parser.l"
case 6:
#line 359 "parser.l"
case 7:
YY_RULE_SETUP
#line 359 "parser.l"
{
  val str = string_utf8(yytext);

  yyerrorf(yyg, lit("trailing junk in floating-point literal: ~a"), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str_utf8(yytext)) == nil)
    out_of_range_float(yyg, yytext);

  return NUMBER;
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 375 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str_utf8(yytext)) == nil)
    out_of_range_float(yyg, yytext);

  return NUMBER;
}
	YY_BREAK
case 9:
#line 388 "parser.l"
case 10:
YY_RULE_SETUP
#line 388 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(10));
  return METANUM;
}
	YY_BREAK
case 11:
#line 400 "parser.l"
case 12:
YY_RULE_SETUP
#line 400 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(16));
  return METANUM;
}
	YY_BREAK
case 13:
#line 412 "parser.l"
case 14:
YY_RULE_SETUP
#line 412 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(8));
  return METANUM;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 423 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(2));
  return METANUM;
}
	YY_BREAK
case 16:
#line 435 "parser.l"
case 17:
#line 436 "parser.l"
case 18:
YY_RULE_SETUP
#line 436 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 19:
#line 453 "parser.l"
case 20:
#line 454 "parser.l"
case 21:
YY_RULE_SETUP
#line 454 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 22:
#line 465 "parser.l"
case 23:
YY_RULE_SETUP
#line 465 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yyerrorf(yyg, lit("bad token: ~a"),
                    string_own(utf8_dup_from(yytext)),
                    nao);
  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 478 "parser.l"
{
  return directive_tok(yyg, ALL, 0);
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 482 "parser.l"
{
  return directive_tok(yyg, SOME, NESTED);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 486 "parser.l"
{
  return directive_tok(yyg, NONE, 0);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 490 "parser.l"
{
  return directive_tok(yyg, MAYBE, 0);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 494 "parser.l"
{
  return directive_tok(yyg, CASES, 0);
}
	YY_BREAK
case 29:
/* rule 29 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 498 "parser.l"
{
  return directive_tok(yyg, BLOCK, NESTED);
}
	YY_BREAK
case 30:
/* rule 30 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 502 "parser.l"
{
  return directive_tok(yyg, CHOOSE, NESTED);
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 506 "parser.l"
{
  return directive_tok(yyg, GATHER, NESTED);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 510 "parser.l"
{
  return directive_tok(yyg, AND, 0);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 514 "parser.l"
{
  return directive_tok(yyg, OR, 0);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 518 "parser.l"
{
  return directive_tok(yyg, END, 0);
}
	YY_BREAK
case 35:
/* rule 35 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 522 "parser.l"
{
  return directive_tok(yyg, COLLECT, NESTED);
}
	YY_BREAK
case 36:
/* rule 36 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 526 "parser.l"
{
  return directive_tok(yyg, COLL, NESTED);
}
	YY_BREAK
case 37:
/* rule 37 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 530 "parser.l"
{
  return directive_tok(yyg, UNTIL, NESTED);
}
	YY_BREAK
case 38:
/* rule 38 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 534 "parser.l"
{
  return directive_tok(yyg, OUTPUT, NESTED);
}
	YY_BREAK
case 39:
/* rule 39 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 538 "parser.l"
{
  return directive_tok(yyg, REPEAT, NESTED);
}
	YY_BREAK
case 40:
/* rule 40 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 542 "parser.l"
{
  return directive_tok(yyg, REP, NESTED);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 546 "parser.l"
{
  return directive_tok(yyg, SINGLE, 0);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 550 "parser.l"
{
  return directive_tok(yyg, FIRST, 0);
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 554 "parser.l"
{
  return directive_tok(yyg, LAST, NESTED);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 558 "parser.l"
{
  return directive_tok(yyg, EMPTY, 0);
}
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 562 "parser.l"
{
  return directive_tok(yyg, MOD, NESTED);
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 566 "parser.l"
{
  return directive_tok(yyg, MODLAST, NESTED);
}
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 570 "parser.l"
{
  return directive_tok(yyg, DEFINE, NESTED);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 574 "parser.l"
{
  return directive_tok(yyg, TRY, 0);
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 578 "parser.l"
{
  return directive_tok(yyg, CATCH, NESTED);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 582 "parser.l"
{
  return directive_tok(yyg, FINALLY, 0);
}
	YY_BREAK
case 51:
/* rule 51 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 586 "parser.l"
{
  return directive_tok(yyg, IF, NESTED);
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 590 "parser.l"
{
  return directive_tok(yyg, ELIF, NESTED);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 594 "parser.l"
{
  return directive_tok(yyg, ELSE, 0);
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 598 "parser.l"
{
  yy_push_state(BRACED, yyscanner);
  yylval->lineno = yyextra->lineno;
  return yytext[0];
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 604 "parser.l"
{
 yy_push_state(NESTED, yyscanner);
 yylval->lineno = yyextra->lineno;
 return yytext[0];
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 610 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 248) ? OLD_AT : '@';
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 615 "parser.l"
{
  yylval->chr = '*';
  return SPLICE;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 620 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 625 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 60:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 634 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space or 0 needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 649 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 658 "parser.l"
{
  /* Eat whitespace in directive */
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 662 "parser.l"
{
  yy_push_state(STRLIT, yyscanner);
  return '"';
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 667 "parser.l"
{
  yy_push_state(CHRLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_BACKSLASH;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 673 "parser.l"
{
  yy_push_state(BUFLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_B_QUOTE;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 679 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_SLASH;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 685 "parser.l"
{
  yy_push_state(QSILIT, yyscanner);
  return '`';
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 690 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WORDS;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 696 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WSPLICE;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 702 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWORDS;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 708 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWSPLICE;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 714 "parser.l"
{
  return '#';
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 718 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_H;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 723 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_S;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 728 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_R;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 733 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_N;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 738 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_T;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 743 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  yy_push_state(JSON, yyscanner);
  return HASH_J;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 749 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_SEMI;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 754 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));
  yylval->val = int_str(str, num(10));
  return HASH_N_EQUALS;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 760 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));
  yylval->val = int_str(str, num(10));
  return HASH_N_HASH;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 766 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 185) ? OLD_DOTDOT : DOTDOT;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 771 "parser.l"
{
  yy_pop_state(yyscanner);
  yylval->lexeme = chk_strdup(L"@");
  return TEXT;
}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 777 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 781 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  return '/';
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 786 "parser.l"
{
  yylval->chr = '.';
  return CONSDOT;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 791 "parser.l"
{
  yylval->chr = '.';
  return LAMBDOT;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 796 "parser.l"
{
  yylval->chr = '.';
  return UREFDOT;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 801 "parser.l"
{
  yylval->chr = '.';
  return '.';
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 806 "parser.l"
{
  yylval->chr = '.';
  return OREFDOT;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 811 "parser.l"
{
  yylval->chr = '.';
  return UOREFDOT;
}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 816 "parser.l"
{
  if (YYSTATE == SPECIAL)
    yy_pop_state(yyscanner);  /* @\ continuation */
  yyextra->lineno++;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 822 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = char_esc(yytext[1]);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);
  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 831 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = num_esc(yyg, yytext + 1);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);

  {
    char lastchar = yytext[yyleng-1];
    if (lastchar == ';' && opt_compat && opt_compat <= 109)
      unput(lastchar);
  }

  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 847 "parser.l"
{
  yyerrorf(yyg, lit("\\x escape without digits"), nao);
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 851 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 855 "parser.l"
{
  /* comment */
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 859 "parser.l"
{
  val ch = chr_str(string_utf8(yytext), zero);
  if (chr_isspace(ch))
    yyerrprepf(yyg, lit("unexpected whitespace character #\\x~,02x"),
               ch, nao);
  else if (chr_isunisp(ch))
    yyerrprepf(yyg, lit("unexpected Unicode space character #\\x~,02x"),
               ch, nao);
  else if (chr_iscntrl(ch))
    yyerrprepf(yyg, lit("unexpected control character #\\x~,02x"),
               ch, nao);
  else
    yyerrprepf(yyg, lit("unexpected character #\\~a"),
               ch, nao);
  return ERRTOK;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 876 "parser.l"
{
  yyerrprepf(yyg, lit("non-UTF-8 byte #x~02x in directive"),
             num(convert(unsigned char, yytext[0])), nao);
  return ERRTOK;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 882 "parser.l"
{
  yylval->chr = '/';
  return (YYSTATE == SREGEX) ? REGCHAR : '/';
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 887 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return REGCHAR;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 892 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext + 1);
  return REGCHAR;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 897 "parser.l"
{
  yylval->chr = yytext[1];
  return REGTOKEN;
}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 902 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 906 "parser.l"
{
  yyextra->lineno++;
  yyerrprepf(yyg, lit("newline in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 912 "parser.l"
{
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return REGCHAR;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 918 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 923 "parser.l"
{
  yylval->chr = yytext[1];
  return REGCHAR;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 928 "parser.l"
{
  if (opt_compat && opt_compat <= 105) {
    yylval->chr = yytext[1];
    return REGCHAR;
  }

  if (yytext[1] == 'x')
    yyerrprepf(yyg, lit("\\x escape without digits in regex"), nao);
  else
    yyerrprepf(yyg, lit("unrecognized escape in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 941 "parser.l"
{
  yyerrprepf(yyg, lit("dangling backslash in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 946 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yylval->lexeme = chk_strdup(wchr);
    return TEXT;
  }
  yylval->chr = wchr[0];
  return REGCHAR;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 956 "parser.l"
{
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return REGCHAR;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 961 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SPACE;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 966 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return TEXT;
}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 971 "parser.l"
{
  yyextra->lineno++;
  return '\n';
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 976 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
  return '*';
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 981 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 985 "parser.l"
{
  /* eat whole line comment */
  yyextra->lineno++;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 990 "parser.l"
{
  /* comment to end of line */
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 994 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 999 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1004 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1009 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 1014 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 1018 "parser.l"
{
  yyextra->lineno++;

  if (!opt_compat || opt_compat > 109)
    return ' ';
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1026 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext+1);
  return LITCHAR;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1031 "parser.l"
{
  yyerrorf(yyg, lit("\\x escape without digits"), nao);
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1035 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape: \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1039 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext);
  return LITCHAR;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1044 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1049 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK; /* hack */
}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1054 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1061 "parser.l"
{
  yyerrprepf(yyg, lit("newline in character literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 1068 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string quasiliteral"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 1075 "parser.l"
{
  yyextra->lineno++;

  if (opt_compat && opt_compat <= 109)
    return ' ';

  yyerrprepf(yyg, lit("newline in word list literal"), nao);
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 136:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1086 "parser.l"
{
  yy_push_state(QSPECIAL, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1091 "parser.l"
{
  yyerrprepf(yyg, lit("malformed @ expression in quasiliteral"), nao);
  return ERRTOK;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1096 "parser.l"
{
  return ' ';
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1100 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1105 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1110 "parser.l"
{
  wchar_t ch0, ch1;
  yytext[6] = 0;
  ch0 = num_esc(yyg, yytext + 1);
  ch1 = num_esc(yyg, yytext + 7);
  yylval->chr = ((ch0 - 0xD800) << 10 | (ch1 - 0xDC00)) + 0x10000;
  return LITCHAR;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1119 "parser.l"
{
  wchar_t ch = num_esc(yyg, yytext + 1);
  yylval->chr = if3(ch, ch, 0xDC00);
  return LITCHAR;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1125 "parser.l"
{
  yyerrorf(yyg, lit("JSON \\u escape needs four digits"), nao);
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1129 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized JSON escape: \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 1133 "parser.l"
{
  yyerrprepf(yyg, lit("newline in JSON string"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1140 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yylval->lexeme = chk_strdup(wchr);
    return TEXT;
  }
  yylval->chr = wchr[0];
  return LITCHAR;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1150 "parser.l"
{
  yylval->chr = strtol(yytext, 0, 16);
  return LITCHAR;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1155 "parser.l"
{
  return '\'';
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1159 "parser.l"
{
}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 1162 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1166 "parser.l"
{
  yyerrorf(yyg, lit("bad character ~s in buffer literal"),
           chr(yytext[0]), nao);
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1171 "parser.l"
{
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return LITCHAR;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1176 "parser.l"
{
  if ((yylval->val = flo_str_utf8(yytext)) == nil)
    out_of_range_float(yyg, yytext);
  return NUMBER;
}
	YY_BREAK
case 154:
/* rule 154 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1182 "parser.l"
{
  yylval->val = t;
  return JSKW;
}
	YY_BREAK
case 155:
/* rule 155 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1187 "parser.l"
{
  yylval->val = nil;
  return JSKW;
}
	YY_BREAK
case 156:
/* rule 156 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1192 "parser.l"
{
  yylval->val = null_s;
  return JSKW;
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1197 "parser.l"
{
  if (strcmp("true", yytext) == 0) {
    yylval->val = t;
    return JSKW;
  }

  if (strcmp("false", yytext) == 0) {
    yylval->val = nil;
    return JSKW;
  }

  if (strcmp("null", yytext) == 0) {
    yylval->val = null_s;
    return JSKW;
  }

  {
    val str = string_own(utf8_dup_from(yytext));
    yyerrorf(yyg, lit("unrecognized JSON syntax: ~a"), str, nao);
  }
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1219 "parser.l"
{
  yy_push_state(JLIT, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1224 "parser.l"
{
  yy_push_state(JMARKER, yyscanner);
  yy_push_state(NESTED, yyscanner);
  return JSPLICE;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1230 "parser.l"
{
  yy_push_state(JMARKER, yyscanner);
  yy_push_state(NESTED, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1236 "parser.l"
{
  return yytext[0];
}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 1240 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1244 "parser.l"
{
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1247 "parser.l"
{
  yyerrorf(yyg, lit("bad character ~s in JSON literal"),
           chr(yytext[0]), nao);
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1252 "parser.l"
{
  yy_push_state(JLIT, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1257 "parser.l"
{
  internal_error("scanner processed input JMARKER state");
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1261 "parser.l"
ECHO;
	YY_BREAK
#line 6001 "lex.yy.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(SPECIAL):
			case YY_STATE_EOF(BRACED):
			case YY_STATE_EOF(NESTED):
			case YY_STATE_EOF(REGEX):
			case YY_STATE_EOF(SREGEX):
			case YY_STATE_EOF(STRLIT):
			case YY_STATE_EOF(CHRLIT):
			case YY_STATE_EOF(QSILIT):
			case YY_STATE_EOF(QSPECIAL):
			case YY_STATE_EOF(WLIT):
			case YY_STATE_EOF(QWLIT):
			case YY_STATE_EOF(BUFLIT):
			case YY_STATE_EOF(JSON):
			case YY_STATE_EOF(JLIT):
			case YY_STATE_EOF(JMARKER):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1650 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1650 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1649);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1261 "parser.l"


static int directive_tok(scanner_t *yyscanner, int tok, int state)
{
  struct yyguts_t *yyg = convert(struct yyguts_t *, yyscanner);
  char *pstart = yytext + 1 + strspn(yytext + 1, " \t");
  char *pcolon = strchr(pstart, ':');
  char *pend = pstart + strspn(pstart, ":-abcdefghijklmnopqrstuvwxyz");

  *pend = 0;

  if (pcolon != 0) {
    val pkgname = string_utf8((*pcolon = 0, pstart));
    val package = if3(pstart[0], find_package(pkgname), keyword_package);
    if (!package) {
      yyerrprepf(yyg, lit("package ~a not found"), pkgname, nao);
      tok = ERRTOK;
    }
    if (package != user_package && package != keyword_package) {
      val sym = string_utf8(pcolon + 1);
      yyerrprepf(yyg, lit("~a:~a: original usr package expected, not ~a"),
                 pkgname, sym, pkgname, nao);
      tok = ERRTOK;
    }
  } else {
    val symname = string_utf8(pstart);
    val sym = intern_fallback(symname, cur_package);
    val package = symbol_package(sym);

    if (package != user_package && package != keyword_package) {
      yyerrprepf(yyg, lit("~a: this is ~a:~a, not usr:~a"),
                 symname, package_name(package), symname, symname, nao);
      tok = ERRTOK;
    }
  }

  if (state != 0)
    yy_push_state(state, yyscanner);
  else
    yy_pop_state(yyscanner);
  yylval->lineno = yyextra->lineno;
  return tok;
}

void end_of_regex(scanner_t *yyg)
{
  if (YYSTATE != REGEX && YYSTATE != SREGEX)
    internal_error("end_of_regex called in wrong scanner state");

  yy_pop_state(yyg);

  if (YYSTATE != INITIAL) {
    if (yy_top_state(yyg) == INITIAL
      || yy_top_state(yyg) == QSILIT
      || yy_top_state(yyg) == QWLIT)
      yy_pop_state(yyg);
  }
}

void end_of_char(scanner_t *yyg)
{
  if (YYSTATE != CHRLIT)
    internal_error("end_of_char called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_buflit(scanner_t *yyg)
{
  if (YYSTATE != BUFLIT)
    internal_error("end_of_buflit called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_json(scanner_t *yyg)
{
  if (YYSTATE == JLIT)
    yy_pop_state(yyg);

  if (YYSTATE != JSON)
    internal_error("end_of_json called in wrong scanner state");

  yy_pop_state(yyg);
}

/* The complexity here is necessary because TXR Lisp parsing looks ahead
 * by one token. (The reason for *that* is the support of a.b.c referencing dot
 * syntax in TXR Lisp.)
 *
 * Consider these two different cases:
 *
 * ^#J[,~(+ 2.0 2.0)]
 * ^#J[,~(+ 2.0 2.0) #J42]
 *
 * This end_of_json_unquote function gets called when the (+ 2.0 2.0)
 * has been parsed, but the Yacc-generated parser has shifted one tokan
 * ahead.  It has read the ] token in the one case or the #J token in
 * the other. These tokens have totally different effects on the Lex
 * start condition. When the lexer reads the ] token, it pops off a NESTED
 * state, whereas the #J token wants to push on a new JSON state.
 * By the time end_of_json_unquote has been called, this has already happened.
 *
 * To deal with this, we use the dummy JMARKER start state which serves as a
 * kind of parenthesis inside the start condition stack. BHefore scanning Lisp
 * unquote within JSON, we push JMARKER state first, then the NESTED state.
 *
 * If the lookahead token is like ], and pops off a state, it will pop off
 * our NESTED state, so we are left at the JMARKER state. If the lookahead
 * token is something else like #J (HASH_J), then it will push a new
 * state like JSON on top, and we have JMARKER NESTED JSON.
 *
 * So what we are doing here is popping off everything until we get down
 * to the JMARKER state, and putting it into our little save area.
 *
 * Then we lose the JMARKER state.
 *
 * If the save area is empty, it means that the lookahead token consumed
 * our NESTED state, and so we are done.
 *
 * If the save area is not empty, it means the lookahead put something
 * extra over our NESTED state. We drop that state from our save area,
 * and restore the rest of the save area back into the stack.
 * Effectively, we are deleting the unquote-related states from the
 * interior of the start condition stack, not to disturb new material
 * initiated by the lookahead token.
 */
void end_of_json_unquote(scanner_t *yyg)
{
  int stacksave[8];
  int top = 0;

  while (YYSTATE != JMARKER) {
    stacksave[top++] = YYSTATE;
    yy_pop_state(yyg);
  }

  yy_pop_state(yyg);

  if (top-- > 0) {
    while (top > 0)
      yy_push_state(stacksave[--top], yyg);
  }
}

val source_loc(val form)
{
  return gethash(form_to_ln_hash, form);
}

val source_loc_str(val form, val alt)
{
  cons_bind (line, file, gethash(form_to_ln_hash, form));
  if (missingp(alt))
    alt = lit("source location n/a");
  return if3(line, format(nil, lit("~a:~d"), file, line, nao), alt);
}

int yylex(YYSTYPE *yylval_param, yyscan_t yyscanner)
{
  struct yyguts_t * yyg = convert(struct yyguts_t *, yyscanner);
  int yy_char;

  if (yyextra->tok_idx > 0) {
    struct yy_token *tok = &yyextra->tok_pushback[--yyextra->tok_idx];
    yyextra->recent_tok = *tok;
    *yylval_param = tok->yy_lval;
    if (tok->yy_lex_state && tok->yy_lex_state != YYSTATE)
      yy_push_state(tok->yy_lex_state, yyg);
    return tok->yy_char;
  }

  yy_char = yyextra->recent_tok.yy_char = yylex_impl(yylval_param, yyscanner);
  yyextra->recent_tok.yy_lval = *yylval_param;
  yyextra->recent_tok.yy_lex_state = YYSTATE;

  return yy_char;
}

void prime_scanner(scanner_t *yyg, enum prime_parser prim)
{
  while (YYSTATE != INITIAL)
    yy_pop_state(yyg);

  switch (prim) {
  case prime_lisp:
  case prime_interactive:
    yy_push_state(SPECIAL, yyg);
    yy_push_state(NESTED, yyg);
    yy_push_state(NESTED, yyg);
    break;
  case prime_regex:
    yy_push_state(SREGEX, yyg);
    break;
  case prime_json:
    yy_push_state(JSON, yyg);
    break;
  }
}

void scrub_scanner(scanner_t *yyg, int yy_char, wchar_t *lexeme)
{
  struct yy_token *rtok = &yyextra->recent_tok;

  if (rtok->yy_char == yy_char && rtok->yy_lval.lexeme == lexeme) {
    rtok->yy_char = 0;
    rtok->yy_lval.lexeme = 0;
  }
}

void parser_l_init(void)
{
  prot1(&form_to_ln_hash);
  form_to_ln_hash = make_eq_hash(t, nil);
}

