
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 145
#define YY_END_OF_BUFFER 146
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1499] =
    {   0,
       62,   62,   62,   62,   62,   62,   62,   62,  137,  137,
      137,  137,  141,  141,  146,  113,  145,  114,  145,  114,
      145,  112,  145,  116,  145,  113,  145,  113,  145,  113,
      145,  116,  145,   97,   98,  145,   62,   97,   98,  145,
       83,  145,   83,   97,   98,  145,   63,   97,   98,  145,
       97,   98,  145,   55,   97,   98,  145,   61,   97,   98,
      145,   97,   98,  145,   88,   97,   98,  145,   84,   97,
       98,  145,    1,   19,   97,   98,  145,16400,   96,   97,
       98,  145,   82,   97,   98,  145,   19,   97,   98,  145,
    16400,   55,   97,   98,  145,   97,   98,  145,   67,   97,

       98,  145,   54,   97,   98,  145,   98,  145,   98,  145,
       98,  145,   98,  145,   62,   97,   98,  145,   20,   97,
       98,  145,16401,   72,   97,   98,  145,   58,   97,   98,
      145,   20,   97,   98,  145,16401,   58,   97,   98,  145,
       88,   97,   98,  145,    1,   20,   97,   98,  145,16401,
       20,   97,   98,  145,16401,   56,   97,   98,  145,   20,
       97,   98,  145,16401,   59,   97,   98,  145,   98,  145,
       98,  145,   98,  145,   62,   97,   98,  145,   21,   97,
       98,  145,16402,   72,   97,   98,  145,   21,   97,   98,
      145,16402,   88,   97,   98,  145,    1,   21,   97,   98,

      145,16402,   21,   97,   98,  145,16402,   56,   97,   98,
      145,   21,   97,   98,  145,16402,   98,  145,   98,  145,
       98,  145,  110,  111,  145,  110,  111,  145,  104,  145,
      104,  110,  111,  145,  106,  110,  111,  145,   99,  106,
      110,  111,  145,  109,  110,  111,  145,  111,  145,  111,
      145,  111,  145,  111,  145,  105,  145,  105,  110,  111,
      145,  138,  144,  145,  138,  144,  145,  131,  145,  131,
      138,  144,  145,  119,  138,  144,  145,  138,  144,  145,
      144,  145,  144,  145,  144,  145,  144,  145,  130,  138,
      144,  145,  132,  145,  132,  138,  144,  145,  129,  130,

      138,  144,  145,  129,  130,  138,  144,  145,  129,  130,
      138,  144,  145,  130,  144,  145,  130,  144,  145,  130,
      144,  145,  130,  144,  145,  133,  145,  133,  138,  144,
      145,  136,  138,  144,  145,  138,  144,  145,  120,  138,
      144,  145,   62,   97,   98,  145,   97,   98,  145,   97,
       98,  145,   88,   97,   98,  145,    1,   10,   19,   97,
       98,  145,16400,   56,   97,   98,  145,   97,   98,  145,
      137,  138,  144,  145,  134,  145,  134,  138,  144,  145,
      138,  144,  145,  138,  144,  145,  143,  145,  141,  143,
      145,  142,  145,  142,  143,  145,  140,  143,  145,  139,

      143,  145,  113,  113,  113,  113,  114,  112,  118,  115,
      113,  113,  113,  118,   62,   87,   83,   68,   66,   64,
       70,    1,   86,    4,   89,    1,   19,16400,   19,16400,
       19,16400,   96,   95,   91,   91,   95,   92,   95,   93,
       95,   94,   95,   97,   62,   87,   20,   22,16401,   20,
    16401,   20,   22,16401,   20,16401,   20,16401,   78,   73,
       76,   75,   74,   77,    1,   20,   22,16401,   57,    4,
       20,   22,16401,   20,   22,16401,   20,16401,   22,   20,
    16401,   20,16401,   20,16401,    9,   20,16401,   91,   20,
       97,16401,   62,   87,   21,   23,16402,   21,16402,   21,

       23,16402,   21,16402,   21,16402,    1,   21,   23,16402,
       81,    4,   21,   23,16402,   21,   23,16402,   21,16402,
       23,   21,16402,   21,16402,   21,16402,    9,   21,16402,
       21,   97,16402,  104,  108,  103,  103,  108,  100,  108,
      107,  108,  101,  108,  102,  108,  108,  110,  105,  131,
      127,  123,  124,  123,  124,  127,  121,  127,  125,  127,
      126,  127,  138,  132,  129,  128,  129,  128,  129,  133,
      135,    9,  135,  135,  122,  127,   62,   87,    1,   10,
        1,   10,   19,16400,  137,  134,  124,  124,  127,  141,
      142,  118,  113,  118,  117,  117,  118,   85,   90,   69,

       71,   65,    2,    2,    2,   60,    4,    5,    5,    5,
        8,    4,    5,    8, 8208,    5,    8,    5,    8,    4,
       19,16400, 8208,   91,   93,   93,   93,   20,   22,16401,
       20,   22,16401,   20,   22,16401,   20,   22,16401, 8209,
       20,   22,16401,   20,   22,16401,   20,   22,16401,   22,
       22,   80,   79,   20,   22,16401,   20,16401,   20,16401,
        4, 8209,    1,   20,   22,16401,   20,   22,16401,    6,
        4,    6,    6,    6,    6,    8,    8,    4,    6,    8,
     8209,    6,    8,    8,    6,    8,    8,    8,    8,   20,
       22,16401,    4,   20,   22,16401,   20,   22,16401,   20,

       22,16401,   22,   20,   22,16401,   22,   20,   22,16401,
       20,16401,   20,16401,    9,   20,   22,16401,   21,   23,
    16402,   21,   23,16402,   21,   23,16402,   21,   23,16402,
     8210,   21,   23,16402,   21,   23,16402,   21,   23,16402,
       23,   23,   21,   23,16402,   21,16402,   21,16402,    4,
     8210,    1,   21,   23,16402,   21,   23,16402,    7,    4,
        7,    7,    7,    7,    8,    8,    4,    7,    8, 8210,
        7,    8,    8,    7,    8,    8,    8,    8,   21,   23,
    16402,    4,   21,   23,16402,   21,   23,16402,   21,   23,
    16402,   23,   21,   23,16402,   23,   21,   23,16402,   21,

    16402,   21,16402,    9,   21,   23,16402,  103,  103,  101,
      101,  101,  123,  124,  123,  124,  125,  125,  125,    9,
        2,   14,    2,   12,    8, 8208,  124,  124,  117,    5,
        4,    2,    3,    3,    2,    3,    2,    3,   51,   51,
       51,   51,   51,   51,   33,    4,    5,    8,    4,    5,
        4,    5, 8208,    4,    5,    4,    5,   19,16400,    5,
       19,16400,    6,    4,   20,   22,16401,   20,   22,16401,
       20,   22,16401,   20,   22,16401,   20,   22,16401,   20,
       22,16401,   22,   22,   22,   22,   20,   22,16401,   20,
       22,16401,   20,   22,16401,    4,    6, 8209,    6,    6,

        6,    6,    6,    4,    6,    6,    6,    6,    6,    6,
        4,    6,    4,    6, 8209,    6,    4,    6,    6,   20,
       22,16401,   20,   22,16401,    4,    6,   20,   22,16401,
        6,   20,   22,16401,   22,   20,   22,16401,   20,   22,
    16401,   20,   22,16401,    9,   20,   22,16401,    7,    4,
       21,   23,16402,   21,   23,16402,   21,   23,16402,   21,
       23,16402,   21,   23,16402,   21,   23,16402,   23,   23,
       23,   23,   21,   23,16402,   21,   23,16402,   21,   23,
    16402,    4,    7, 8210,    7,    7,    7,    7,    7,    4,
        7,    7,    7,    7,    7,    7,    4,    7,    4,    7,

     8210,    7,    4,    7,    7,   21,   23,16402,   21,   23,
    16402,    4,    7,   21,   23,16402,    7,   21,   23,16402,
       23,   21,   23,16402,   21,   23,16402,   21,   23,16402,
       15,   13,   11,    9,   21,   23,16402,    2,    3,   14,
        2,    3,   12,   24,   32,   34,   45,   45,   45,   45,
       45,   45,   40,   40,   40,   40,   40,   40,   48,    4,
        5, 8208,    4,    6,   20,   22,16401,   20,   22,16401,
       20,   22,16401,   22,    6,    6,    6,    6,    6,    4,
        6,    4,    6,    6,   20,   22,16401,    6,   20,   22,
    16401,    6,   20,   22,16401,    6,   20,   22,16401,    6,

       20,   22,16401,    6, 8209,    6,   20,   22,16401,    6,
       20,   22,16401,    4,    6,   20,   22,16401,    6,   20,
       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,
        6,   20,   22,16401,    6,   22,    6,   22,    4,    7,
       21,   23,16402,   21,   23,16402,   21,   23,16402,   23,
        7,    7,    7,    7,    7,    4,    7,    4,    7,    7,
       21,   23,16402,    7,   21,   23,16402,    7,   21,   23,
    16402,    7,   21,   23,16402,    7,   21,   23,16402,    7,
     8210,    7,   21,   23,16402,    7,   21,   23,16402,    4,
        7,   21,   23,16402,    7,   21,   23,16402,    7,   21,

       23,16402,    7,   21,   23,16402,    7,   21,   23,16402,
        7,   23,    7,   23,   36,   36,   36,   36,   36,   36,
       52,   52,   52,   52,   52,   52,   53,   43,   43,   43,
       43,   43,   43,   26,   25,   25,   25,   25,   25,   25,
        6,   20,   22,16401,    6,   20,   22,16401,    6,   20,
       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,
        6,   20,   22,16401,    6, 8209,    6,   20,   22,16401,
        6,   20,   22,16401,    6,   20,   22,16401,    6,   20,
       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,
        6,   22,    6,   22,    6,   22,    6,   22,    7,   21,

       23,16402,    7,   21,   23,16402,    7,   21,   23,16402,
        7,   21,   23,16402,    7,   21,   23,16402,    7,   21,
       23,16402,    7, 8210,    7,   21,   23,16402,    7,   21,
       23,16402,    7,   21,   23,16402,    7,   21,   23,16402,
        7,   21,   23,16402,    7,   21,   23,16402,    7,   23,
        7,   23,    7,   23,    7,   23,   29,   29,   29,   29,
       29,   29,   28,   49,   49,   49,   49,   49,   49,   44,
       42,   27,   37,   37,   37,   37,   37,   37,    6,   20,
       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,
        6,   20,   22,16401,    6,   20,   22,16401,    6,   20,

       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,
        6,   20,   22,16401,    6,   22,    7,   21,   23,16402,
        7,   21,   23,16402,    7,   21,   23,16402,    7,   21,
       23,16402,    7,   21,   23,16402,    7,   21,   23,16402,
        7,   21,   23,16402,    7,   21,   23,16402,    7,   21,
       23,16402,    7,   23,   30,   30,   30,   30,   30,   30,
       47,   47,   47,   47,   47,   47,   31,   31,   31,   31,
       31,   31,   38,   38,   38,   38,   38,   38,   39,   39,
       39,   39,   39,   39,   41,   35,   35,   35,   35,   35,
       35,   50,   46,   46,   46,   46,   46,   46

    } ;

static const flex_int16_t yy_accept[1577] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   18,   20,
       22,   24,   26,   28,   30,   32,   34,   37,   41,   43,
       47,   51,   54,   58,   62,   65,   69,   73,   79,   83,
       87,   92,   96,   99,  103,  107,  109,  111,  113,  115,
      119,  124,  128,  132,  137,  141,  145,  151,  156,  160,
      165,  169,  171,  173,  175,  179,  184,  188,  193,  197,
      203,  208,  212,  217,  219,  221,  223,  226,  229,  231,
      235,  239,  244,  248,  250,  252,  254,  256,  258,  262,

      265,  268,  270,  274,  278,  281,  283,  285,  287,  289,
      293,  295,  299,  304,  309,  314,  317,  320,  323,  326,
      328,  332,  336,  339,  343,  347,  350,  353,  357,  364,
      368,  371,  375,  377,  381,  384,  387,  389,  392,  394,
      397,  400,  403,  404,  405,  406,  407,  408,  409,  409,
      410,  411,  412,  413,  414,  414,  415,  416,  416,  417,
      417,  418,  419,  419,  420,  421,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  423,  424,  425,  426,  426,  429,

      431,  433,  434,  434,  435,  436,  438,  440,  442,  444,
      445,  445,  445,  446,  446,  447,  447,  450,  452,  452,
      455,  455,  457,  457,  457,  457,  457,  459,  460,  461,
      462,  463,  464,  465,  465,  469,  470,  471,  471,  474,
      477,  479,  480,  482,  482,  482,  482,  484,  484,  486,
      489,  489,  489,  489,  490,  493,  493,  493,  494,  494,
      495,  495,  498,  500,  500,  503,  503,  505,  505,  505,
      505,  507,  507,  511,  512,  513,  513,  516,  519,  521,
      522,  524,  524,  524,  524,  526,  526,  528,  531,  531,
      531,  531,  534,  534,  534,  534,  534,  535,  536,  537,

      539,  541,  543,  545,  547,  548,  549,  549,  549,  550,
      550,  550,  551,  552,  554,  557,  559,  561,  563,  564,
      564,  564,  565,  566,  568,  570,  571,  571,  572,  572,
      574,  575,  577,  578,  579,  579,  579,  581,  581,  585,
      585,  586,  586,  587,  588,  590,  591,  592,  593,  594,
      595,  596,  598,  599,  600,  600,  600,  601,  602,  603,
      603,  604,  604,  605,  605,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,

      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  607,  607,  607,  609,  610,  611,  612,  616,
      618,  620,  620,  623,  624,  625,  626,  627,  628,  628,
      628,  628,  628,  631,  634,  637,  640,  640,  640,  640,
      641,  644,  647,  650,  650,  650,  650,  651,  651,  652,
      652,  652,  652,  652,  652,  653,  654,  657,  659,  661,
      661,  661,  661,  663,  667,  670,  671,  671,  671,  673,
      674,  674,  675,  675,  675,  675,  677,  678,  682,  684,
      685,  687,  688,  689,  690,  693,  697,  700,  703,  704,
      707,  707,  707,  707,  708,  708,  708,  708,  708,  708,

      711,  713,  715,  715,  715,  715,  719,  719,  719,  719,
      719,  719,  719,  722,  725,  728,  731,  731,  731,  731,
      732,  735,  738,  741,  741,  741,  741,  742,  742,  743,
      743,  743,  743,  743,  743,  746,  748,  750,  750,  750,
      750,  752,  756,  759,  760,  760,  760,  762,  763,  763,
      764,  764,  764,  764,  766,  767,  771,  773,  774,  776,
      777,  778,  779,  782,  786,  789,  792,  793,  796,  796,
      796,  796,  797,  797,  797,  797,  797,  797,  800,  802,
      804,  804,  804,  804,  804,  804,  804,  808,  808,  808,
      808,  809,  810,  811,  812,  813,  813,  815,  817,  818,

      819,  820,  820,  821,  821,  823,  823,  825,  825,  827,
      828,  829,  830,  831,  832,  834,  835,  837,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      840,  841,  842,  843,  844,  845,  845,  845,  845,  845,
      845,  846,  846,  846,  846,  846,  846,  846,  846,  849,
      849,  851,  854,  856,  856,  860,  863,  864,  864,  865,
      868,  871,  874,  874,  874,  874,  874,  874,  877,  880,

      883,  883,  883,  883,  883,  883,  884,  885,  886,  886,
      886,  886,  887,  887,  887,  887,  887,  887,  887,  890,
      893,  896,  896,  896,  896,  896,  896,  899,  900,  901,
      901,  901,  901,  902,  903,  904,  906,  907,  908,  908,
      908,  908,  909,  909,  909,  909,  910,  910,  910,  910,
      911,  913,  913,  913,  916,  917,  919,  923,  926,  926,
      931,  935,  935,  935,  935,  935,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  939,  942,  945,  945,  945,
      945,  945,  945,  949,  949,  950,  950,  951,  954,  957,
      960,  960,  960,  960,  960,  960,  963,  966,  969,  969,

      969,  969,  969,  969,  970,  971,  972,  972,  972,  972,
      973,  973,  973,  973,  973,  973,  973,  976,  979,  982,
      982,  982,  982,  982,  982,  985,  986,  987,  987,  987,
      987,  988,  989,  990,  992,  993,  994,  994,  994,  994,
      995,  995,  995,  995,  996,  996,  996,  996,  997,  999,
      999,  999, 1002, 1003, 1005, 1009, 1012, 1012, 1017, 1021,
     1021, 1021, 1021, 1021, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1025, 1028, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1032, 1032, 1033, 1033, 1034, 1038, 1038, 1041,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,

     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1045, 1045,
     1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1047, 1047, 1047, 1047, 1047, 1047, 1048, 1049, 1050,
     1050, 1051, 1052, 1053, 1053, 1053, 1054, 1055, 1056, 1056,
     1057, 1058, 1059, 1059, 1059, 1059, 1060, 1060, 1061, 1063,
     1065, 1068, 1071, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1076, 1076, 1076, 1076, 1076,
     1076, 1077, 1077, 1077, 1077, 1078, 1078, 1078, 1078, 1078,

     1078, 1078, 1078, 1079, 1080, 1080, 1080, 1080, 1080, 1080,
     1082, 1082, 1084, 1088, 1092, 1096, 1100, 1100, 1100, 1100,
     1104, 1106, 1110, 1114, 1119, 1123, 1123, 1123, 1123, 1127,
     1131, 1135, 1135, 1135, 1135, 1137, 1137, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1141, 1144, 1147, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1152, 1152, 1152, 1152, 1152,
     1152, 1153, 1153, 1153, 1153, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1155, 1156, 1156, 1156, 1156, 1156, 1156,

     1158, 1158, 1160, 1164, 1168, 1172, 1176, 1176, 1176, 1176,
     1180, 1182, 1186, 1190, 1195, 1199, 1199, 1199, 1199, 1203,
     1207, 1211, 1211, 1211, 1211, 1213, 1213, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1216, 1217, 1218, 1218, 1219,
     1220, 1221, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1227,
     1228, 1228, 1228, 1228, 1228, 1229, 1230, 1231, 1232, 1233,
     1234, 1234, 1234, 1234, 1235, 1235, 1235, 1235, 1236, 1237,

     1238, 1239, 1240, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1245, 1249, 1253, 1253,
     1253, 1253, 1253, 1253, 1257, 1261, 1265, 1265, 1265, 1265,
     1267, 1271, 1275, 1279, 1279, 1279, 1279, 1279, 1279, 1283,
     1287, 1291, 1291, 1291, 1291, 1291, 1291, 1293, 1295, 1297,
     1297, 1297, 1297, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1303, 1307, 1311, 1311, 1311, 1311, 1311,

     1311, 1315, 1319, 1323, 1323, 1323, 1323, 1325, 1329, 1333,
     1337, 1337, 1337, 1337, 1337, 1337, 1341, 1345, 1349, 1349,
     1349, 1349, 1349, 1349, 1351, 1353, 1355, 1355, 1355, 1355,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1358, 1359, 1360, 1361, 1362,
     1363, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1370,
     1370, 1370, 1370, 1371, 1371, 1371, 1372, 1372, 1372, 1373,
     1373, 1373, 1373, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1383, 1387, 1391, 1391,

     1391, 1391, 1391, 1391, 1391, 1395, 1399, 1403, 1403, 1403,
     1403, 1403, 1403, 1407, 1411, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1421, 1425, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1433,
     1437, 1441, 1441, 1441, 1441, 1441, 1441, 1445, 1449, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1456, 1457, 1458,
     1459, 1460, 1461, 1461, 1462, 1463, 1464, 1465, 1466, 1467,

     1467, 1468, 1469, 1470, 1471, 1472, 1473, 1473, 1474, 1475,
     1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
     1485, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486,
     1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486,
     1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486,
     1486, 1486, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1492,
     1493, 1494, 1495, 1496, 1497, 1498, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    6,    9,    9,   10,   11,
       12,   13,   14,   15,   14,   16,   17,   18,   18,   19,
       19,   19,   19,   19,   19,   20,   20,   21,   22,    6,
       23,    6,   24,   25,   26,   26,   26,   27,   28,   26,
       29,   30,   29,   29,   29,   29,   29,   31,   29,   29,
       29,   32,   33,   34,   29,   29,   35,   29,   29,   29,
       36,   37,   38,   39,   29,   40,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   29,   50,   51,   52,   53,
       54,   55,   29,   56,   57,   58,   59,   60,   35,   61,
       62,   29,   63,   64,   65,    9,    1,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   67,   67,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   70,
       70,   70,   70,   70,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67
    } ;

static const YY_CHAR yy_meta[71] =
    {   0,
        1,    2,    3,    4,    5,    6,    1,    7,    6,    8,
        8,    2,    6,    9,    8,   10,   11,   12,   12,   12,
       13,   14,    6,    6,   15,   12,   12,   12,   16,   16,
       16,   16,   16,   16,   16,    8,    6,    1,   17,    1,
       12,   12,   12,   12,   18,   12,   16,   16,   16,   16,
       19,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,    8,    1,    1,    1,    1,   20,   20,   20
    } ;

static const flex_int16_t yy_base[1806] =
    {   0,
        0,    3,   73,    0,  143,    0,  213,    0,  282,  351,
        6,    8,  420,  489,  559,    0,  628,  697,  766,    0,
      804,  873,  942, 1011, 1080, 1125, 4932,  220,10190, 4928,
     4925,   11,  234,  239,  244,   13,10190,   18,10190, 4917,
    10190,  389, 1170, 4901,   11,   37,10190,  312,    0,10190,
     4900,10190, 1238,10190,10190,10190, 4848, 4847, 4846,   44,
      308, 1293,10190, 1347, 4898,   25,  299,  365,  391,  318,
    10190, 4843, 4842, 4841,  435,  431, 4885, 1410,  460,  355,
      635,  658,  494, 4839, 4837, 4835,10190,  321,10190, 4890,
    10190,10190, 1480,10190, 4824, 4822, 4820,10190, 4882,10190,

      337,10190, 4868,10190, 1548,10190, 4801, 4798, 4788,10190,
    10190, 4846,    0,   22, 1592,10190, 4765, 4764, 4762,10190,
     4823, 1631, 1692,10190,   49,  627,  373,  377,  426, 4817,
       44,  393,10190, 4821,  460,   49,10190,   12,10190, 4820,
    10190,10190,  398,  403,  436,  449,10190, 4814,  519,    0,
    10190,  413,  465,  470,  633,   63,  643,  526,  688,  664,
    10190,10190,  285,10190,10190,10190,  418,  366, 4804,    0,
      482, 1713,  670,  690,  748,  725,  769,  729,  783,  766,
      789,  792,  827,  823,  798,  834,  758,  848, 4744, 4738,
     4736,  489,  510,  697,  364,  893,10190, 1772,  904, 4782,

      729,    0,  529,10190,  392,  411,10190,  667,    0,10190,
     4726, 4723,  946,  713,  700,  909,  953,  735,  845,  960,
      949,  915, 4722, 4721, 4716,  975, 1018,10190,10190,10190,
    10190,10190,10190,  866, 1835,10190, 1898, 1968, 1026, 1093,
     1239,  830, 1250, 4712, 4709, 4695, 1313, 4739, 2031,    0,
     4693, 4692, 4691,  472,  968, 4690, 4689, 1045,  984, 1050,
     1075, 1320, 1323,  887, 1335, 1068, 1386, 4688, 4687, 4678,
     1398,  953, 2094,10190, 2157, 2227, 1420, 1553, 1556,  921,
     1636, 4677, 4676, 4670, 1639,  999, 2290,    0, 4666, 4663,
     4662, 1860, 4656, 4646,  634,  404,10190,10190,  436,  520,

    10190,10190,  934,10190,    0,10190, 4642, 4625,10190, 1030,
      550,10190,10190,  645,  770,10190, 1093,    0,10190, 4624,
     4623,10190,    0,  717, 2343,10190,  995,10190,  987, 1121,
        0,10190,  840,  953,  738, 4673, 1130, 1136, 1162, 4644,
     1155,  758,10190,  647, 1022,  668,10190,    0, 1140,  797,
    10190,  828,  845,10190, 1216, 1231,10190,10190,10190, 4667,
     4663,  871,  896,    0, 2372, 1233, 4614, 4613, 4606,  290,
     4611, 1056, 4615, 1216, 4609, 4615, 4609, 4607,  318, 4593,
     1016, 4601,  462, 4587, 4589, 1328, 1340, 1391, 1406, 1403,
     1547, 1374, 1301, 1559, 1619, 1645, 1611, 2418, 1655, 1622,

     1672, 1650, 1865, 1824, 1828, 1868, 1843, 1840, 1886, 4572,
     4557, 1254, 2488,    0, 2026,    0, 1267,10190, 2039,    0,
     1432, 1357, 1828, 1381, 1100, 1155,10190, 4599, 4554, 1564,
     2551, 1654, 2056, 2066, 2072, 2082, 4553, 4552, 4551, 1708,
     2122, 2296, 2306, 4547, 4546, 4542, 2088, 4583, 1789, 4531,
     4526, 4516, 4512, 4502,10190,10190, 2312, 2559, 2565, 4500,
     4497, 4495, 2628, 2691, 2152, 1879, 4539, 2570, 2754, 1803,
     2138, 2334, 4491, 4490, 4486, 1894, 4522, 2817, 1871, 2146,
     2391, 4476, 4474, 4473, 2168, 2880, 2591, 2616, 1882, 2654,
     4467, 4466, 4465, 1889, 4461, 4459, 4458, 4454, 4446, 2679,

     2717, 2742, 4444, 4443, 4439, 2943, 4437, 4433, 4432, 2042,
     3006, 2175, 2780, 2805, 2838, 2844, 4431, 4427, 4425, 2098,
     2901, 2907, 2917, 4424, 4423, 4418, 2926, 4461, 2130, 4412,
     4398, 4397, 4392, 4390, 2976, 3014, 3033, 4389, 4388, 4377,
     3096, 3159, 2322, 2153, 4420, 2597, 3222, 2135, 2326, 3041,
     4373, 4372, 4371, 2309, 4414, 3285, 2141, 2684, 3050, 4367,
     4364, 4362, 2569, 3348, 3069, 3124, 2149, 3187, 4360, 4348,
     4339, 2231, 4337, 4336, 4333, 4327, 4324, 3194, 3250, 3257,
     4323, 4319, 4312,  283, 1234, 4360, 3411, 4306, 4305, 4304,
     1114, 1129, 1538,10190, 4345, 4294, 1260, 1288, 1557,10190,

     4331, 4285, 2305,  978, 1140,    0, 3464,    0, 2388, 1560,
     1290,10190, 2417, 2428, 4329,    0, 1146, 3493, 4278, 4277,
     4291, 4296, 4285, 1128, 4282, 4284, 4282,  766, 4268, 4278,
     1284, 4253,    0, 4244, 4237, 4250, 4239, 1595, 4227, 4229,
     4226, 4226, 4214, 4216, 2997, 3084, 3211, 3326, 3331, 3337,
     3121, 3376, 3447, 3455, 3473, 3247, 3528, 3542, 3546,10190,
     3550, 3580, 4206, 4204, 4202, 3572, 3641, 3711, 3661, 1734,
    10190, 3580, 3781, 3673, 3793, 3669, 3686, 4190, 2852, 2431,
     2448, 2875, 2455, 2458, 2544, 4238, 3137, 2574, 3814, 3354,
     3802, 3848, 4175, 4174, 4165, 4164, 4163, 3860, 3870, 3880,

     4161, 4159, 4158, 4153, 4150, 3011, 3092, 2532, 4144, 4142,
     4138, 2540, 4136, 4129, 4125, 4123, 4122, 4121, 3886, 3906,
     3926, 4086, 4081, 4080, 4072, 4071, 3989, 2582, 2608, 4064,
     4058, 4045, 2612, 2621, 2633, 4052, 2645, 3394, 4041, 4040,
     4038, 2658, 4037, 4017, 4016, 3427, 4012, 4010, 4009, 2771,
     2789, 3997, 3996, 2721, 3216, 2960, 3952, 3962, 4017, 4115,
     3977, 3291, 3989, 3988, 3983, 2675, 3978, 3977, 3963, 3961,
     3960, 3958, 3953, 3952, 4040, 4073, 4080, 3949, 3940, 3938,
     3934, 3933, 4178, 3920, 3419, 2746, 4137, 4143, 4153, 4193,
     3918, 3916, 3906, 3903, 3901, 4212, 4218, 4228, 3900, 3878,

     3858, 3855, 3854, 3433, 4045, 2708, 3849, 3846, 3842, 2734,
     3838, 3831, 3827, 3826, 3824, 3823, 4234, 4244, 4250, 3814,
     3813, 3811, 3809, 3808, 4313, 2759, 2746, 3800, 3793, 3777,
     2861, 2968, 3066, 4376, 2867, 3586, 3776, 3774, 3771, 2875,
     3770, 3765, 3763, 4256, 3762, 3759, 3758, 3739, 2988, 3750,
     3749, 2934, 3943, 3364, 4338, 4341, 4404, 4467, 4348, 3676,
     3738, 3721, 3697, 2904, 3695, 3687, 3674, 3668, 3662, 3659,
     3642, 3639, 4411, 4426, 4432, 3630, 3629, 3626, 3623, 3606,
     3652, 3647, 1258, 1286,    0,    0, 4530, 3598, 1298, 4583,
     3595, 1920, 2061, 3617, 3606, 3604, 3591, 3593, 3579, 3571,

     3568, 3551, 2063, 3567, 3546, 3554, 3537, 3549, 3536, 3533,
     3520, 3527, 3523, 3511, 2074, 3504, 2143,10190, 2314,10190,
     3078, 3152, 3176, 3511, 4629, 3276, 4699, 4447, 3631, 2344,
    10190, 3743, 3101, 3253, 4769, 3703,10190, 3239, 4799, 3911,
     3484, 3480, 3479, 4502, 3731,10190, 3889,    0, 3982, 3463,
     3456, 3452, 3920, 4858, 2955,10190, 4048, 3541, 3570, 4921,
     4505, 4537, 4879, 3448, 3438, 3433, 3432, 3420, 3411, 3408,
     3407, 3395, 3023, 3390, 3387, 3385, 3381, 3377, 3376, 3368,
     3362, 3360, 3355, 3354, 3113, 3345, 3344, 3332, 3324, 3323,
     3131, 3320, 3319, 3314, 3334, 3311, 3310, 3306, 3299, 3297,

     3291, 3285, 4392, 4520, 3284, 3282, 3275, 3274, 3271, 4984,
     3269, 3451, 4894, 4945, 4957, 4960, 3268, 3266, 3248, 4972,
     4107, 5023, 5030, 5093, 5051, 3245, 3236, 3234, 5057, 5108,
     5114, 3229, 3228, 3222, 4526, 3266, 3458, 3217, 3211, 3210,
     3206, 3204, 3203, 3187, 3185, 3182, 3173, 3165, 3159, 5177,
     5120, 5135, 5192, 3152, 3151, 3148, 3145, 3130, 3122, 3120,
     3119, 3110, 3496, 3108, 3102, 3084, 3078, 3077, 3064, 3063,
     3061, 3059, 3041, 3040, 3589, 3032, 3031, 3029, 3022, 3012,
     3599, 3007, 2997, 2991, 3634, 2990, 2986, 2982, 2981, 2977,
     2976, 2974, 4546, 4614, 2963, 2962, 2957, 2955, 2954, 5255,

     2951, 3747, 5198, 5213, 5219, 5270, 2944, 2938, 2937, 5276,
     4657, 5282, 5292, 5355, 5333, 2932, 2925, 2917, 5361, 5371,
     5383, 2915, 2900, 2892, 4649, 2934, 3700, 2875, 2873, 2861,
     2858, 2855, 2852, 2850, 2845, 2844, 2838, 2836, 2826, 2829,
     2810, 2813, 2790, 2798, 2779,    0, 2988, 2769, 2769, 2760,
     2753,    0, 2750, 2753, 3453, 2725, 2742, 2720,    0, 2718,
     5453, 5523, 5593, 3853,10190, 3571, 5623, 3674, 2702, 2691,
     2689, 3855,10190, 3675,    0, 2685, 2680, 2671, 3901,10190,
     3921, 3941, 4062, 4088,10190, 4090,    0, 2668, 2666, 2655,
     4127, 4158, 4188,10190, 4233, 4303, 4305,10190, 4288,    0,

     2654, 2651, 2642, 5682, 2640, 2617, 2606, 2605, 2603, 2579,
     2577, 2560, 2549,  245,  251,  269,  279,  295,  304,  337,
      382,  392,  429,  454,  471, 5411, 5692, 5698,  477,  571,
      576,  588,  592, 5717, 5749, 5755,  609,  621,  644, 4727,
     5774, 5781, 5806,  648,  664,  678,  722,  726, 5813, 5832,
     5838,  759,  763,  774,  783,  788, 4808, 4948, 3784,  821,
      828,  842, 3867,  853,  860,  864,  870,  884,  893,  897,
      909,  914,  935,  965,  967,  972,  992,  996, 1007, 1026,
     1030, 1047, 1067, 1076, 1081, 1129, 1167, 1171, 1180, 1193,
     1204, 1216, 5848, 5864, 5870, 1222, 1231, 1266, 1276, 1280,

     5889, 5904, 5928, 1287, 1291, 1298, 4731, 5939, 5954, 5960,
     1307, 1312, 1314, 1319, 1321, 5979, 5994, 6018, 1347, 1355,
     1356, 1366, 1367, 5011, 5035, 3971, 1375, 1381, 1387, 4097,
     1392, 1396, 1403, 1404, 1411, 1488, 1493, 1504,    0, 4304,
        0, 1526, 1530, 1541, 4325, 1536, 4343, 1535, 4363, 1539,
     1541, 1544, 1558,    0,10190, 4374,    0, 1539, 1547, 1564,
     4386,10190,10190, 4464,    0, 1565, 1582, 1587, 6088, 4506,
     6158, 4465,10190, 4517, 4575,10190, 6228, 4579,10190, 4647,
     6298, 6368, 4581,10190, 4659,    0, 1588, 1592, 1593, 1596,
     1599, 1611, 1616, 1617, 1619, 6378, 6384, 6403, 1620, 1634,

     1655, 1656, 1664, 1665, 6435, 6441, 6460, 1669, 1677, 1678,
     1681, 1683, 6467, 6492, 6499, 1685, 1695, 1697, 1702, 1722,
     1784, 1786, 1796, 1799, 4103, 1800, 1803, 1809, 1812, 1813,
     1818, 1821, 1822, 1824, 1825, 1835, 1854, 1858, 1861, 6518,
     6524, 6534, 1865, 1876, 1879, 1880, 1887, 1894, 6550, 6556,
     6575, 1895, 1899, 1918, 1974, 1975, 6590, 6614, 6625, 1977,
     1982, 1987, 2003, 2012, 2017, 2019, 2023, 2026, 4111, 2028,
     2038, 2040, 2042, 2054, 2057, 2062, 2063,    0, 2073,    0,
     2070,    0, 2079,    0,    0, 4661,10190, 4711,    0, 2078,
     2083, 2087, 6695,10190, 4728,    0, 2094, 2103, 2113, 4729,

    10190, 4781,    0, 2115, 2117, 2135, 6765,10190, 4801,    0,
     2146, 2154, 2158,10190, 4809,    0, 2177, 2236, 2237, 4810,
    10190, 2239, 2241, 2247, 2252, 2266, 2273, 2277, 2278, 2291,
     2302, 2306, 2307, 2317, 2327, 2331, 2335, 2358, 2361, 2366,
     2372, 2375, 2379, 2386, 2387, 2389, 2397, 2399, 2404,    0,
     4815,    0,10190, 4870,    0, 2413, 2414, 2438, 4879,10190,
    10190, 4887,    0, 2495, 2499, 2500, 2502, 2508, 2511, 2516,
     2517, 2540, 2545, 2547,10190, 6835, 6855, 6875, 6895, 6915,
     6926, 6945, 6965, 6980, 6995, 7010, 7025, 7040, 7055, 7075,
     7084, 7097, 7116, 7136, 2788, 7151, 7162, 2605, 7176, 7191,

     7206, 7221, 7236, 7251, 7266, 7281, 7296, 7311, 7326, 7341,
     7356, 7371, 7386, 7401, 7416, 7431, 7446, 2613, 2645, 7455,
     7463, 2846, 7482, 7493, 7512, 7532, 7552, 7561, 7569, 2646,
     7583, 7594, 2717, 7608, 7623, 7638, 7653, 7668, 7683, 7698,
     7713, 7728, 7743, 7758, 7773, 7788, 7803, 7818, 7833, 7848,
     7863, 7878, 7893, 7908, 7923, 7938, 7953, 7968, 7983, 7998,
     8013, 8028, 8043, 8058, 8073, 8088, 8103, 8118, 8133, 8148,
     8163, 2872, 2839, 2864, 8172, 2656, 8191, 8203, 8222, 8241,
     8252, 8266, 8281, 8296, 8311, 8326, 8341, 8356, 8371, 8386,
     8401, 8416, 8431, 8446, 8461, 8476, 8491, 8506, 8521, 8536,

     8551, 8566, 8581, 8596, 8611, 8626, 8641, 8656, 8671, 8686,
     8701, 8716, 8731, 8746, 8761, 8776, 8791, 8806, 8821, 8836,
     8851, 8866, 8881, 8896, 8911, 2676, 8920, 8939, 8959, 8974,
     8985, 8999, 9014, 9029, 9044, 9059, 9074, 9089, 9104, 9119,
     9134, 9149, 9164, 9179, 9194, 9209, 9224, 9239, 9254, 9269,
     9284, 9299, 9314, 9329, 9344, 9359, 9374, 9389, 9404, 9419,
     9434, 9449, 9464, 9479, 9494, 9514, 9534, 9554, 9574, 9594,
     9609, 9624, 9639, 9654, 9669, 9684, 9699, 9714, 9729, 9744,
     9759, 9774, 9789, 9804, 9819, 9834, 9849, 9864, 9879, 9894,
     9909, 9924, 9944, 9964, 9984, 9999,10014,10029,10049,10069,

    10089,10109,10129,10149,10169
    } ;

static const flex_int16_t yy_def[1806] =
    {   0,
     1576, 1576, 1575,    3, 1575,    5, 1575,    7, 1577, 1577,
       10,   10, 1578, 1578, 1575,   15, 1578, 1578,    3,   19,
     1578, 1578, 1578, 1578, 1579, 1579, 1575, 1580, 1575, 1575,
     1575, 1575, 1580, 1580, 1580, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1581, 1582, 1575,
     1581, 1575, 1583, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1584, 1575, 1575, 1584, 1575, 1575,   64, 1585, 1586,   64,
     1575, 1575, 1575, 1575, 1575, 1587,   62, 1587, 1575,   78,
     1588, 1589,   78, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1590, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1591, 1591, 1591, 1575, 1575, 1575, 1575, 1575,
     1575, 1592, 1590, 1575, 1575, 1575, 1575, 1575, 1581, 1575,
     1575, 1575, 1575, 1575,  123,  123, 1575, 1575, 1575, 1575,
     1575, 1575, 1580, 1580, 1580, 1580, 1575, 1575, 1575, 1593,
     1575, 1580, 1580, 1580, 1575, 1594, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1595,   43,
     1596, 1575, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1597, 1575, 1575, 1581, 1581,

     1581, 1582, 1575, 1575, 1575, 1575, 1575, 1575, 1598, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1599,   64, 1575, 1600,
     1601,   64, 1575, 1575, 1575, 1575, 1602, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1599, 1575, 1603, 1575,  235, 1604,
     1605, 1606, 1605, 1575, 1575, 1575, 1607, 1575, 1607,  249,
     1575, 1575, 1575, 1575,   64, 1575, 1575, 1575, 1575, 1575,
     1575, 1608, 1609, 1575, 1610, 1611, 1609, 1575, 1575, 1575,
     1612, 1575, 1608, 1575, 1613, 1575,  273, 1614, 1615, 1616,
     1615, 1575, 1575, 1575, 1617, 1575, 1617,  287, 1575, 1575,
     1575, 1609, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1618, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1619, 1575, 1575,
     1575, 1575, 1620, 1620, 1620, 1575, 1575, 1575, 1575, 1621,
     1621, 1575, 1575, 1575, 1575, 1622, 1575, 1623, 1624, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1625, 1626, 1627,
     1575, 1627, 1575, 1575, 1628, 1575, 1575, 1575, 1575, 1575,
     1629, 1575, 1629, 1630, 1629, 1631, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1631, 1631, 1631, 1631, 1631,
     1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631,

     1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1575,
     1575, 1575, 1575, 1628, 1628, 1628, 1628, 1575, 1628, 1628,
     1628, 1575, 1632, 1575, 1575, 1575, 1575, 1633, 1575, 1575,
     1634, 1575, 1635, 1635, 1636, 1635, 1575, 1575, 1575, 1575,
     1637, 1638, 1638, 1575, 1575, 1575, 1639, 1575, 1640, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1641, 1642, 1642, 1575,
     1575, 1575, 1634, 1635,  464, 1643, 1575, 1634, 1644, 1645,
     1646, 1643, 1575, 1575, 1575, 1643, 1575, 1644, 1645, 1646,
     1643, 1575, 1575, 1575,  464, 1647, 1648, 1648, 1649, 1648,
     1575, 1575, 1575, 1650, 1575, 1575, 1575, 1575, 1575, 1651,

     1652, 1652, 1575, 1575, 1575, 1651, 1575, 1575, 1575, 1575,
     1653, 1575, 1654, 1654, 1655, 1654, 1575, 1575, 1575, 1575,
     1656, 1657, 1657, 1575, 1575, 1575, 1658, 1575, 1659, 1575,
     1575, 1575, 1575, 1575, 1660, 1661, 1661, 1575, 1575, 1575,
     1653, 1654,  542, 1662, 1575, 1653, 1663, 1664, 1665, 1662,
     1575, 1575, 1575, 1662, 1575, 1663, 1664, 1665, 1662, 1575,
     1575, 1575,  542, 1666, 1667, 1667, 1668, 1667, 1575, 1575,
     1575, 1669, 1575, 1575, 1575, 1575, 1575, 1670, 1671, 1671,
     1575, 1575, 1575, 1575, 1575, 1672, 1670, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1673, 1575, 1575, 1575, 1575, 1575,

     1674, 1575, 1575, 1575, 1675, 1676, 1675, 1677, 1575, 1575,
     1575, 1575, 1678, 1678, 1675, 1675, 1675, 1675, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1679, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1680, 1680, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1575,
     1680, 1575, 1575, 1575, 1575, 1680, 1680, 1680, 1680, 1575,
     1575, 1680, 1680, 1680, 1680, 1680, 1680, 1575, 1678, 1575,
     1678, 1678, 1678, 1678, 1681, 1681, 1682, 1575, 1683, 1684,
     1685, 1685, 1575, 1575, 1575, 1575, 1575, 1686, 1686, 1686,

     1575, 1575, 1575, 1575, 1575, 1687, 1687, 1688, 1575, 1575,
     1575, 1689, 1575, 1575, 1575, 1575, 1575, 1575, 1690, 1690,
     1690, 1575, 1575, 1575, 1575, 1575, 1691, 1682, 1692, 1575,
     1575, 1575, 1693, 1682, 1682, 1691, 1694, 1682, 1575, 1575,
     1575, 1695, 1575, 1575, 1575, 1696, 1575, 1575, 1575, 1682,
      736, 1575, 1575,  736, 1682,  736, 1697, 1698, 1683, 1699,
     1700, 1701, 1575, 1575, 1575, 1702, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1703, 1703, 1703, 1575, 1575, 1575,
     1575, 1575, 1703, 1575, 1704, 1575, 1705, 1706, 1707, 1707,
     1575, 1575, 1575, 1575, 1575, 1708, 1708, 1708, 1575, 1575,

     1575, 1575, 1575, 1709, 1709, 1710, 1575, 1575, 1575, 1711,
     1575, 1575, 1575, 1575, 1575, 1575, 1712, 1712, 1712, 1575,
     1575, 1575, 1575, 1575, 1713, 1704, 1714, 1575, 1575, 1575,
     1715, 1704, 1704, 1713, 1716, 1704, 1575, 1575, 1575, 1717,
     1575, 1575, 1575, 1718, 1575, 1575, 1575, 1704,  834, 1575,
     1575,  834, 1704,  834, 1719, 1720, 1705, 1721, 1722, 1723,
     1575, 1575, 1575, 1724, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1725, 1725, 1725, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1726, 1726, 1725, 1575, 1727, 1727,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1728, 1575,
     1575, 1729, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1575,
     1575, 1730, 1730, 1730, 1730, 1730, 1575, 1730, 1575, 1730,
     1575, 1575, 1575, 1730, 1730, 1575, 1730,  939, 1730, 1575,
     1575, 1575, 1730, 1730, 1575, 1575, 1730, 1731, 1731, 1732,
     1733, 1733, 1733, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1734, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1735, 1575, 1575, 1575, 1575, 1575,
     1736, 1575, 1575, 1575, 1737, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1738, 1738, 1575, 1575, 1575, 1575, 1575, 1732,
     1575, 1010, 1739, 1739, 1740, 1739, 1575, 1575, 1575, 1741,
     1742, 1739, 1739, 1743, 1744, 1575, 1575, 1575, 1745, 1746,
     1746, 1575, 1575, 1575, 1747, 1575, 1748, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1749,
     1750, 1750, 1750, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1751, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1752, 1575, 1575, 1575, 1575, 1575,
     1753, 1575, 1575, 1575, 1754, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1755, 1755, 1575, 1575, 1575, 1575, 1575, 1749,

     1575, 1100, 1756, 1756, 1757, 1756, 1575, 1575, 1575, 1758,
     1759, 1756, 1756, 1760, 1761, 1575, 1575, 1575, 1762, 1763,
     1763, 1575, 1575, 1575, 1764, 1575, 1765, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1766, 1575, 1767, 1575, 1575, 1575, 1575,
     1575, 1768, 1575, 1575, 1575, 1575, 1575, 1575, 1769, 1575,
     1770, 1770, 1770, 1162, 1575, 1162, 1575, 1162, 1575, 1575,
     1575, 1162, 1575, 1162, 1167, 1575, 1575, 1575, 1575, 1575,
     1162, 1162, 1162, 1162, 1575, 1162, 1167, 1575, 1575, 1575,
     1162, 1162, 1575, 1575, 1162, 1162, 1162, 1575, 1162, 1167,

     1575, 1575, 1575, 1162, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1771, 1772, 1772, 1575, 1575,
     1575, 1575, 1575, 1773, 1774, 1774, 1575, 1575, 1575, 1775,
     1776, 1777, 1777, 1575, 1575, 1575, 1575, 1575, 1778, 1778,
     1778, 1575, 1575, 1575, 1575, 1575, 1779, 1779, 1780, 1575,
     1575, 1575, 1781, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1782, 1783, 1783, 1575, 1575, 1575, 1575, 1575,

     1784, 1785, 1785, 1575, 1575, 1575, 1786, 1787, 1788, 1788,
     1575, 1575, 1575, 1575, 1575, 1789, 1789, 1789, 1575, 1575,
     1575, 1575, 1575, 1790, 1790, 1791, 1575, 1575, 1575, 1792,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1793, 1575,
     1794, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1795, 1575, 1162, 1167, 1575, 1575, 1575,
     1575, 1575, 1575, 1162, 1167, 1575, 1575, 1575, 1162, 1162,
     1162, 1575, 1575, 1162, 1575, 1575, 1162, 1575, 1575, 1162,
     1162, 1162, 1162, 1575, 1162, 1167, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1796, 1796, 1796, 1575, 1575,

     1575, 1575, 1575, 1575, 1797, 1797, 1797, 1575, 1575, 1575,
     1575, 1575, 1798, 1798, 1798, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1780, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1782,
     1782, 1782, 1575, 1575, 1575, 1575, 1575, 1575, 1784, 1784,
     1784, 1575, 1575, 1575, 1575, 1575, 1787, 1787, 1787, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1791, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1799, 1575, 1800,
     1575, 1801, 1575, 1802, 1803, 1575, 1575, 1162, 1167, 1575,
     1575, 1575, 1162, 1575, 1162, 1167, 1575, 1575, 1575, 1162,

     1575, 1162, 1167, 1575, 1575, 1575, 1162, 1575, 1162, 1167,
     1575, 1575, 1575, 1575, 1162, 1167, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1804,
     1575, 1805, 1575, 1162, 1167, 1575, 1575, 1575, 1575, 1575,
     1575, 1162, 1167, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575,    0, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575
    } ;

static const flex_int16_t yy_nxt[10261] =
    {   0,
     1575, 1575,   29,   30,   31,   29,   30,   31,   98,   99,
       98,   99,  149,  346,  155,  149,  346,  155,  150,  157,
      156, 1575,  157,  151,   32,  151,  193,   36,  194,  194,
      194,  158,  150,  159,  156,  160,  160,  160,  195,  324,
      324,  195,  237,  237,  237,  213,  205,  254,  213, 1575,
      333,  344,  345,  333,  196,  196,  196,  214, 1575,  215,
      197,  216,  216,  216,  334,  351,  352,   33,   34,   35,
       33,   34,   35,   37,   38,   39,   40,   38,   37,   41,
       42,   37,   37,   43,   44,   37,   45,   37,   46,   47,
       48,   48,   48,   37,   49,   37,   37,   50,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   52,   53,
       44,   37,   54,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   55,   37,   37,   56,   56,
       57,   58,   59,   37,   60,   39,   40,   60,   61,   41,
       62,   61,   63,   52,   37,   61,   64,   65,   66,   47,
       67,   67,   67,   68,   49,   61,   61,   69,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   52,   70,
       37,   63,   54,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   37,   37,   71,   56,   56,
       72,   73,   74,   37,   75,   39,   40,   75,   76,   41,
       77,   76,   63,   52,   44,   76,   78,   65,   79,   76,
       80,   80,   80,   81,   49,   76,   76,   82,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   52,   83,
       44,   63,   54,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   37,   37,   37,   56,   56,
       84,   85,   86,   88,   89,   90,   88,  144,  145,  146,
       91,  357,   91,   91,   91,   91,  881,   91,   92,  152,

      882,  144,  145,  146,  153,   91,  144,  145,  146,  154,
      985,  144,  145,  146,  238,  218, 1392,   91,   93,   91,
      205,  254,  295,  219,  358,  295,  239,  198,  220,  199,
      199,  199,  221,  219,  728,  217,  217,  217,  310,  201,
      621,  310,  622,  239,  991,   91,  222,   94,   94,   95,
       96,   97,   88,   89,   90,   88,  201,  296,  635,   91,
     1393,   91,   91,   91,   91,  195,   91,   92,  195,  995,
      276,  636,  241,  311,   91,  223,  224,  225,  195,  362,
      219,  195,  277,  363,  363,  242,   91,   93,   91,  221,
      337,  337,  337,  425,  341,  162,  425,  341,  248,  277,

      197,  163, 1394,  243,  249,  164,  299,  591,  250,  250,
      250,  227,  425,  205,   91,  425,   94,   94,   95,   96,
       97,  101,  102,  103,  101,  165,  104,  359,  166,  342,
      167,  360,  244,  245,  246,  361,  258,  592,  263,  258,
      592,  338,  168,  339,  339,  339,  264,  734,  259,  169,
      260,  265,  261,  261,  261,  266,  105,  742,  251,  252,
      253,  195,  344,  345,  195,  144,  145,  146,  152,  267,
      144,  145,  146,  425,  205,  274,  425,  275,  275,  275,
      144,  145,  146,  197,  313,  106,  106,  107,  108,  109,
      101,  102,  103,  101, 1003,  104,  205,  254,  268,  269,

      270,  153,  172,  144,  145,  146,  412,  412,  412,  264,
      641,  262,  262,  262,  154,  642,  144,  145,  146, 1395,
      149,  592,  299,  149,  592,  105,  150,  196,  196,  196,
      152,  151,  144,  145,  146,  349,  746,  144,  145,  146,
      150,  193, 1226,  160,  160,  160,  424,  424,  424,  367,
      368,  369,  314,  597,  106,  106,  107,  108,  109,  110,
      100,  111,  112,  100,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  113,  113,  113,  110,
      110,  110,  110,  110,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  110,  110,  110,  110,  110,  113,

      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  114,  113,  113,  113,  113,  113,  113,  115,
      113,  110,  110,  110,  116,  116,  117,  118,  119,  101,
      120,  121,  101,  162,  155,  295, 1402,  155,  295,  163,
      156, 1403,  279,  164,  157,  151,  598,  157,  611,  598,
      264,  611,  122, 1013,  156,  280,  158, 1404,  159,  266,
      160,  160,  160,  165,  123,  286,  166,  124,  167,  346,
      296,  287,  346,  281, 1234,  288,  288,  288,  271,  355,
      335,  160,  160,  160,  426,  426, 1411,  336,  427,  353,
      172,  356,  353,  106,  106,  107,  108,  109,  101,  120,

      121,  101,  282,  283,  284,  196,  196,  196,  356, 1412,
      172,  354,  413, 1241,  194,  194,  194,  237,  237,  237,
      386,  122,  387,  354,  356,  289,  290,  291,  430, 1419,
      216,  216,  216,  123,  324,  324,  124,  367,  368,  369,
      388,  356,  422, 1420,  203,  172,  423,  423,  423,  172,
      219,  604,  217,  217,  217,  605,  605,  367,  368,  369,
      344,  610,  106,  106,  107,  108,  109,  125,  172,  392,
      125,  598,  314,  126,  598,   63,   52,  396,  172,  127,
       65,  128,   37,  129,  129,  129,  172, 1022,  389,  172,
      130, 1421,  367,  368,  369,  390,  367,  368,  369,  351,

      352,  391,  131,  172,   63,  132,  133,  134,  132,  172,
      104,  398,  172,  408,  900,  367,  368,  369,  172,  393,
      394,  395,  901,  397, 1249,  367,  368,  369, 1422,  399,
      612,  352,  400,  367,  368,  369,  367,  368,  369, 1423,
      135,  333,  405,  172,  333,  401,  353,  172, 1029,  353,
      367,  368,  369, 1424,  172,  334,  367,  368,  369,  367,
      368,  369,  440,  440,  440,  367,  368,  369,  172,  106,
      106,  107,  108,  109,  132,  133,  134,  132,  403,  104,
      402,  404,  406,  463,  463,  463, 1257,  407,  363,  363,
      367,  368,  369, 1429,  367,  368,  369,  495,  496,  497,

      409,  367,  368,  369,  520,  520,  520, 1430,  414,  135,
      415,  415,  415,  617,  617,  367,  368,  369, 1263,  198,
      417,  199,  199,  199,  431, 1431,  216,  216,  216, 1432,
      219,  201,  217,  217,  217, 1035,  432,  417,  106,  106,
      107,  108,  109,  132,  133,  134,  132,  213,  201, 1433,
      213,  593,  593,  432,  353,  594,  448,  353,  757,  214,
      434,  215,  766,  216,  216,  216,  122,  442,  219,  449,
      541,  541,  541,  435,  775,  219,  354,  221,  136, 1051,
      242,  124,  455,  219,  221,  217,  217,  217,  573,  574,
      575,  436,  226,  226,  226,  605,  605,  456,  443,  510,

     1434,  261,  261,  261,  603,  603,  603,  106,  106,  107,
      108,  109,  132,  133,  134,  132,  450,  451,  452,  271,
      437,  438,  439,  611,  344,  458,  611,  444,  445,  446,
      788,  310,  796,  219,  310,  122,  584, 1063,  242,  485,
      584,  219,  221,  486,  486,  486,  258,  136,  585,  258,
      124,  353,  585,  433,  353,  586,  459, 1435,  259,  586,
      260,  804,  261,  261,  261,  274,  311,  275,  275,  275,
      433,  638,  810,  354,  639,  528,  106,  106,  107,  108,
      109,  138,  139,  140,  138,  460,  461,  462,  529,  141,
      511,  817,  261,  261,  261, 1075,  624,  142,  142,  142,

      488,  425,  512,  625,  425,  142,  142,  142,  219,  626,
      599,  599, 1436,  489,  600,  592,  299,  221,  592,  512,
      142,  142,  142,  142,  142,  142,  138,  139,  140,  138,
      592,  490,  826,  592,  141,  530,  531,  532,  330,  330,
      330, 1081,  142,  142,  142,  608, 1437,  337,  337,  337,
      142,  142,  142,  609,  609,  609,  341,  889,  889,  341,
      491,  492,  493,  617,  617,  142,  142,  142,  142,  142,
      142,  170,  426,  426,  170,  171,  427,  338,  171,  339,
      339,  339,  171,  171,  895,  896,  171,  171,  171,  171,
      172,  342,  171,  171, 1085,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  152,  171,  144,  145,  146,
      173,  174,  175,  176,  177,  178,  179,  171,  180,  171,
      181,  182,  183,  184,  171,  185,  186,  187,  188,  171,
      171,  171, 1438,  415,  415,  415,  832,  189,  190,  191,
      205,  206,  207,  613,  422,  840,  241,  883,  614,  614,
      614,  884,  884,  172,  219,  208,  208,  241, 1093,  242,
      613,  598,  314,  221,  598,  219,  628,  629,  630, 1439,
      242,  412,  412,  412,  221,  884,  884,  243,  207,  207,
      680,  844,  207,  207,  681,  681,  681, 1293,  243,  598,
      207,  611,  598,  207,  611,  207, 1446,  207,  209,  162,

      367,  368,  369,  884,  884,  163,  244,  245,  246,  164,
      226,  226,  226,  227,  228,  889,  889,  244,  245,  246,
      501,  172,  229,  230,  231,  232,  233,  514,  219,  165,
      263, 1447,  166,  220,  167,  264,  904,  221,  264,  905,
      515, 1103,  522,  265,  266, 1448,  168,  266,  172,  653,
      264,  502, 1301,  169,  218,  280, 1455,  654,  516,  266,
      172,  267,  234, 1456,  235,  235,  235,  220,  367,  368,
      369,  221, 1308,  523,  614,  614,  614, 1463,  645, 1464,
      503,  504,  505,  646, 1112,  222, 1465,  517,  518,  519,
      268,  269,  270,  263,  172,  367,  368,  369,  424,  424,

      424,  264,  524,  525,  526,  536,  265,  367,  368,  369,
      266,  172, 1316,  264,  223,  224,  225,  263,  280,  652,
     1466, 1467,  266,  172,  267,  272,  172,  273,  273,  273,
      265, 1119, 1468,  563,  266,  264,  537,  564,  564,  564,
     1324,  367,  368,  369,  647,  422, 1473,  513,  267,  683,
      683,  683, 1474,  268,  269,  270,  650, 1330,  367,  368,
      369, 1475,  648,  649,  513,  538,  539,  540, 1476, 1125,
      367,  368,  369,  367,  368,  369, 1477,  268,  269,  270,
      298,  298,  299,  300,  301,  298,  298,  298,  302,  298,
      302,  302,  302,  302,  298,  302,  302,  303,  303,  298,

      298,  298,  298,  302,  298,  298,  304,  298,  298,  298,
      298,  298,  304,  298,  304,  302,  301,  302,  298,  298,
      301,  301,  298,  304,  301,  301,  298,  298,  298,  298,
      298,  298,  301,  298,  298,  301,  304,  301,  298,  301,
      305,  298,  298,  302,  298,  298,  298,  298,  298,  298,
      314,  315,  316,  855,  316,  593,  593,  316,  864,  594,
      566,  611,  344,  279,  611,  317,  317,  172,  264,  873,
     1478,  264, 1479,  567,  599,  599,  280,  266,  600,  172,
      266,  237,  237,  237,  316, 1480, 1481,  316,  316,  316,
     1482,  568,  316,  316,  281, 1483,  670,  651, 1484,  670,

      316, 1485, 1486,  316,  366,  316,  671,  316,  318,  325,
      325,  325,  619,  655,  367,  368,  369,  325,  325,  325,
      569,  570,  571,  282,  283,  284,  367,  368,  369,  620,
      366,  172,  325,  325,  325,  325,  325,  325,  327,  172,
      328,  328,  172,  279,  329,  328,  579,  619,  330,  330,
      330,  264,  620,  366,  264,  328,  280,  619,  620,  265,
      266,  961,  656,  266,  973,  172,  328,  688,  659,  328,
      172,  689,  689,  689,  281,  172,  985,  580,  367,  368,
      369,  991,  995,  667, 1003, 1396,  367,  368,  369,  367,
      368,  369,  172,  328,  314,  315,  316,  657,  316, 1522,

      658,  316,  669,  282,  283,  284,  581,  582,  583,  317,
      317,  666,  367,  368,  369,  668,  332,  367,  368,  369,
     1523, 1226,  367,  368,  369,  440,  440,  440,  316, 1524,
     1013,  316,  316,  316, 1405,  670,  316,  316,  670,  367,
      368,  369, 1525, 1526,  316,  671, 1234,  316, 1527,  316,
     1413,  316,  318,  370,  371,  372,  373,  374,  375,  376,
     1528,  377, 1529,  378,  379,  380,  381, 1241,  382,  383,
      384,  385,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418, 1530,  418,  419,
      419,  419,  418,  418,  418,  418,  418,  420,  420,  421,

      420,  420,  420,  420,  420,  420,  420,  418,  418,  418,
      418,  418,  420,  420,  420,  420,  421,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  418,  418,  418,  418,  418,  418,
      418,  418,  434,  684,  172,  685,  685,  685,  172, 1022,
      238, 1249,  464,  464,  464,  435,  713,  714,  715,  221,
      172, 1531,  465,  172, 1029, 1425,  670,  263, 1532,  670,
      743,  744,  745,  436, 1533,  264,  671, 1257, 1534,  465,
      265,  672,  673, 1263,  266,  172, 1535, 1035,  172, 1051,
     1063,  367,  368,  369,  675,  367,  368,  369,  267,  729,

     1075,  676,  437,  438,  439,  467,  172,  367,  368,  369,
      367,  368,  369,  468,  729,  469,  469,  469,  470, 1081,
      674,  917,  471, 1085,  917,  472, 1093,  268,  269,  270,
     1440,  918,  367,  368,  369,  367,  368,  369,  743,  744,
      745, 1536,  472,  677, 1537, 1293,  730,  731,  732,  767,
      768,  769, 1538,  367,  368,  369,  495,  496,  497, 1103,
     1449,  730,  731,  732, 1539,  473,  474,  475,  418,  418,
      418,  418,  418,  476,  418,  477,  476,  418,  418,  418,
      476,  476,  418, 1540,  418,  478,  478,  478,  479,  418,
      476,  476,  480,  476,  476,  481,  476,  476,  476,  476,

      476,  476,  476,  418,  476,  418,  418,  418,  476,  476,
      476,  476,  481,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      418,  418,  418,  418,  418,  482,  483,  484,  501, 1301,
     1541,  414, 1457,  415,  415,  415,  219, 1542,  506,  506,
      506,  220, 1543,  417,  414,  221,  682,  682,  682,  275,
      275,  275,  919,  434,  930,  919,  417,  930, 1308,  502,
      417,  219,  920,  434,  931,  955,  435, 1544,  955,  691,
      221,  219, 1112,  417, 1316,  956,  435,  219, 1545,  434,
      221, 1119,  242, 1469,  436,  707,  221,  219,  503,  504,

      505,  514,  435, 1546,  436, 1547,  221, 1324,  708,  276,
      692,  542,  542,  542,  515,  520,  520,  520,  266, 1548,
      436,  543, 1330,  437,  438,  439,  707, 1549, 1125,  699,
     1550, 1551,  516,  437,  438,  439, 1552,  219,  543,  693,
      694,  695,  489,  366,  917,  467,  221,  917,  619,  437,
      438,  439,  620,  467,  918,  709,  710,  711,  733,  366,
      700,  517,  518,  519,  545,  485,  733,  219,  619,  486,
      486,  486,  546,  827,  547,  547,  547,  548,  620,  433,
      366,  549,  619,  219,  550,  486,  486,  486,  786,  701,
      702,  703,  787,  787,  787,  433,  433,  811,  812,  813,

      620,  550,  841,  842,  843,  747,  748,  749,  841,  842,
      843,  366,  433,  747,  748,  749,  865,  866,  867,  619,
      828,  829,  830,  620,  551,  552,  553,  418,  418,  418,
      418,  418,  554,  418,  555,  554,  418,  418,  418,  554,
      554,  418,  366,  554,  556,  556,  556,  557,  418,  554,
      554,  558,  554,  554,  559,  554,  554,  554,  554,  554,
      554,  554,  418,  554,  418,  418,  418,  554,  554,  554,
      554,  559,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  418,
      418,  418,  418,  418,  560,  561,  562,  579,  573,  574,

      575,  619,  620,  442, 1396,  264, 1567,  587,  587,  587,
      265,  219, 1226,  442,  266,  919,  242, 1405,  919,  720,
      221,  219,  603,  603,  603,  920,  242,  219,  580,  827,
      221, 1568,  489,  545,  443,  563,  221,  264, 1234,  564,
      564,  564, 1413, 1569,  443,  930,  831,  750,  930,  513,
      721,  751,  751,  751,  729,  931, 1241,  581,  582,  583,
      325,  325,  325,  444,  445,  446,  513, 1249,  325,  325,
      325, 1425, 1570,  444,  445,  446,  828,  829,  830,  722,
      723,  724, 1257,  325,  325,  325,  325,  325,  325,  618,
      618,  618, 1263,  845,  846,  847, 1440,  618,  618,  618,

     1571,  730,  731,  732,  755,  424,  424,  424,  756,  756,
      756,  729,  618,  618,  618,  618,  618,  618,  660,  660,
      660,  660,  660, 1293,  660,  661, 1449,  660,  660,  660,
      422, 1572,  660,  660,  683,  683,  683, 1301,  662,  660,
     1457, 1575,  660,  414, 1573,  683,  683,  683,  958,  958,
      958, 1308, 1316,  660, 1469,  660,  661,  660,  730,  731,
      732, 1575, 1574,  414, 1324,  681,  681,  681, 1575, 1330,
      414, 1575,  683,  683,  683,  959,  959,  959,  366,  619,
      660,  660,  660,  660,  660,  663,  664,  665,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,

      418,  418,  418,  620,  418,  679,  679,  679,  418,  418,
      418,  418,  418,  420,  420,  421,  420,  420,  420,  420,
      420,  420,  420,  418,  418,  418,  418,  418,  420,  420,
      420,  420,  421,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      418,  418,  418,  418,  418,  418,  418,  418,  467,  684,
      366,  685,  685,  685,  619,  620,  458, 1396,  469,  469,
      469,  470,  458, 1405,  219,  471, 1413,  467,  687,  242,
      219, 1425, 1440,  221,  264,  242,  564,  564,  564,  221,
      470,  689,  689,  689,  471,  687,  513,  459,  488,  974,

      975,  976,  729,  459,  545, 1449,  219,  713,  714,  715,
     1457,  489, 1469,  513,  719,  221,  428,  548,  473,  474,
      475,  549,  428,  488,  595,  712,  460,  461,  462,  490,
      595,  219,  460,  461,  462,  467,  489,  473,  474,  475,
      221,  729,  706,  468, 1391,  727,  727,  727,  470,  730,
      731,  732,  471,  737,  490,  472,  601,  365,  491,  492,
      493,  488,  601,  365,  551,  552,  553,  607,  973,  219,
      698,  690,  472,  607,  489,  986,  987,  988,  221,  992,
      993,  994, 1390,  491,  492,  493,  776,  886,  730,  731,
      732,  545,  490,  886,  219,  473,  474,  475,  434,  435,

      730,  731,  732,  221,  831,  961,  238,  620,  464,  464,
      464,  435,  996,  997,  998,  221,  619,  777,  465,  366,
      620,  491,  492,  493,  501,  743,  744,  745,  428,  436,
      428,  619,  219,  366,  428,  465,  620,  220,  754,  754,
      754,  221,  767,  768,  769,  619,  778,  779,  780,  501,
      366,  845,  846,  847,  620,  502,  619,  219,  437,  438,
      439,  735,  220,  787,  787,  787,  221,  366, 1354,  468,
     1353,  736,  736,  736,  737, 1064, 1065, 1066,  471,  827,
      502,  738, 1352, 1351,  503,  504,  505,  514,  751,  751,
      751,  729,  728, 1350, 1349,  264,  365, 1348,  738,  365,

      515,  811,  812,  813,  266,  365, 1010, 1010, 1010,  503,
      504,  505,  514, 1076, 1077, 1078,  734, 1347,  516, 1346,
      264,  739,  740,  741,  735,  515,  828,  829,  830,  266,
     1345, 1344,  468,  734,  754,  754,  754,  737,  730,  731,
      732,  471, 1343,  516,  738,  789, 1342,  517,  518,  519,
      595,  514,  595,  264,  607,  728,  595,  607,  280,  264,
     1341,  738,  266,  607,  515, 1575, 1340,  414,  266,  415,
      415,  415,  517,  518,  519,  601,  790,  601, 1339,  417,
      886,  601,  516,  886,  739,  740,  741,  758, 1575,  886,
      414,  578,  682,  682,  682,  759,  417,  760,  760,  760,

      761, 1338,  417,  873,  762,  791,  792,  793,  797,  572,
      565,  517,  518,  519,  522, 1337,  264,  864,  436,  417,
     1336,  567,  264,  855,  522,  266, 1335,  280, 1082, 1083,
     1084,  266,  264,  805, 1086, 1087, 1088,  280, 1334,  798,
     1125,  266,  841,  842,  843,  523,  806,  763,  764,  765,
      776,  852,  852,  852, 1127,  523,  955, 1323,  219,  955,
      783,  783,  783,  435,  805, 1322,  956,  221,  799,  800,
      801,  865,  866,  867,  524,  525,  526, 1012, 1012, 1012,
     1119,  777, 1315,  818,  524,  525,  526,  734,  827, 1179,
     1314,  264, 1179,  807,  808,  809,  567, 1112,  917, 1180,

      266,  917, 1300, 1299,  734, 1100, 1100, 1100,  918, 1103,
      778,  779,  780,  545,  819,  832,  544,  172,  707, 1292,
      844,  536, 1291,  547,  547,  547,  548, 1290, 1093,  264,
      549,  708,  832,  785,  280,  828,  829,  830,  266, 1289,
      536,  840, 1288,  820,  821,  822,  832, 1287,  264,  707,
      785, 1286,  537,  280,  848, 1085, 1285,  266,  849,  849,
      849,  827, 1284,  853,  367,  368,  369,  854,  854,  854,
      827,  537, 1081,  551,  552,  553,  566, 1283,  709,  710,
      711,  538,  539,  540,  264,  919,  835,  826,  919,  567,
      974,  975,  976,  266, 1282,  920, 1281, 1075,  172,  707,

      538,  539,  540,  545,  172,  535, 1280,  568,  828,  829,
      830,  546,  708,  825,  825,  825,  548,  828,  829,  830,
      549,  172, 1575,  550,  817, 1575,  527, 1161, 1279,  810,
      707,  566, 1575,  828,  829,  830,  569,  570,  571,  264,
      550,  172, 1278,  804,  567,  367,  368,  369,  266, 1277,
      755,  367,  368,  369,  756,  756,  756,  729, 1183,  709,
      710,  711,  568,  551,  552,  553,  514, 1276,  367,  368,
      369,  925,  172, 1063,  276,  521,  542,  542,  542,  515,
      986,  987,  988,  266, 1275,  796,  543,  513,  367,  368,
      369,  569,  570,  571,  566, 1274,  172,  516,  992,  993,

      994,  874,  264,  543,  730,  731,  732,  567, 1162,  264,
      788,  266, 1575, 1273,  515, 1575, 1272, 1051,  266,  367,
      368,  369, 1575, 1163,  500,  568,  517,  518,  519,  833,
     1271,  172,  875,  756,  756,  756,  729,  546,  775,  834,
      834,  834,  835,  367,  368,  369,  549,  494,  930,  836,
      487,  930, 1270,  921,  569,  570,  571,  579,  931,  172,
      826,  876,  877,  878,  579,  264,  836,  172,  766, 1269,
      265,  757,  264,  172,  266, 1268, 1267,  265,  367,  368,
      369,  266, 1035,  730,  731,  732, 1037, 1256,  580,  837,
      838,  839,  833, 1255, 1029,  580,  172, 1184, 1036, 1248,

      546, 1247,  852,  852,  852,  835,  367,  368,  369,  549,
     1022, 1037,  836, 1233,  367,  368,  369,  581,  582,  583,
      367,  368,  369,  826,  581,  582,  583, 1575, 1172,  836,
     1575, 1232, 1575, 1013,  466, 1575, 1225, 1575, 1575,  746,
     1224, 1575, 1575,  367,  368,  369,  172, 1223, 1575, 1003,
     1222,  172,  837,  838,  839,  856,  742,  172, 1038, 1039,
     1040,  962, 1221,  857,  734,  858,  858,  858,  859,  219,
      922, 1220,  860,  923,  489, 1219,  995, 1575,  221, 1218,
     1575, 1102, 1102, 1102, 1217,  991,  516, 1575, 1216,  728,
      924,  832,  963,  367,  368,  369,  172, 1215,  367,  368,

      369,  996,  997,  998,  367,  368,  369,  750,  832, 1214,
      985,  751,  751,  751,  729,  861,  862,  863,  874,  457,
     1213,  964,  965,  966,  926,  719,  264,  447,  887,  887,
      887,  515,  853, 1212, 1004,  266,  854,  854,  854,  827,
      805,  712, 1211,  367,  368,  369,  706,  729, 1575,  875,
     1210, 1575, 1209,  806, 1193,  973, 1575, 1193, 1575, 1575,
      441,  730,  731,  732, 1194, 1004, 1575,  172, 1012, 1012,
     1012,  805, 1208,  698, 1575,  172,  433, 1575,  876,  877,
      878,  890,  890,  890, 1575, 1207,  828,  829,  830,  890,
      890,  890,  927,  172, 1005, 1006, 1007,  690, 1206,  928,

      807,  808,  809, 1205,  890,  890,  890,  890,  890,  890,
      618,  618,  618,  961,  367,  368,  369,  620,  618,  618,
      618,  619,  367,  368,  369, 1264, 1265, 1266,  366, 1575,
      929,  172, 1575,  618,  618,  618,  618,  618,  618, 1575,
      367,  368,  369, 1575,  620,  619, 1575, 1575,  172,  366,
     1575, 1575, 1160, 1575, 1575, 1159,  414, 1575,  681,  681,
      681, 1575,  172, 1064, 1065, 1066,  172, 1164,  932, 1158,
      172, 1157, 1575, 1575, 1156, 1575, 1575, 1155,  367,  368,
      369, 1575, 1575, 1575, 1575, 1575, 1154,  959,  959,  959,
     1153, 1575,  172,  934, 1152,  367,  368,  369,  933,  848,

      172, 1151, 1150,  849,  849,  849,  827, 1149, 1148,  367,
      368,  369, 1147,  367,  368,  369, 1146,  367,  368,  369,
      370,  371,  372,  373,  374,  375,  376, 1145,  377,  935,
      378,  379,  380,  381,  945,  382,  383,  384,  385,  367,
      368,  369, 1575, 1144, 1143, 1575, 1142,  367,  368,  369,
     1141,  172, 1575,  828,  829,  830, 1076, 1077, 1078, 1140,
      366,  172, 1575,  285,  882, 1575, 1082, 1083, 1084,  882,
      955, 1139, 1575,  955, 1575, 1575, 1575, 1575, 1575, 1575,
      956,  172,  936, 1126, 1575, 1575, 1575, 1575,  578,  172,
     1575, 1138, 1181,  172, 1137,  873, 1127, 1575,  367,  368,

      369, 1086, 1087, 1088,  278,  944,  172, 1136,  367,  368,
      369,  937,  937,  937,  937,  937, 1370,  937,  938,  953,
      937,  937,  937,  172,  572,  937,  937, 1135,  367,  368,
      369,  939,  937,  565,  957,  937,  367,  368,  369, 1134,
      367,  368,  369, 1128, 1129, 1130,  937, 1191,  937,  938,
      937,  172, 1133,  367,  368,  369,  849,  849,  849,  827,
      864,  940, 1132,  172, 1102, 1102, 1102, 1331, 1332, 1333,
      367,  368,  369,  937,  937,  937,  937,  937,  941,  942,
      943,  946,  946,  946,  946,  946, 1131,  946,  947, 1195,
      946,  946,  946, 1182, 1575,  946,  946, 1575,  367,  368,

      369,  948,  946,  855, 1575,  946,  828,  829,  830,  691,
      367,  368,  369,  172, 1101,  544,  946,  219,  946,  947,
      946,  467,  242, 1099, 1098,  949,  221,  844, 1092,  468,
     1091,  960,  960,  960,  470,  840, 1090,  954,  471, 1089,
      692,  832, 1080,  946,  946,  946,  946,  946,  950,  951,
      952, 1426, 1427, 1428, 1575,  691, 1575, 1575, 1079, 1575,
      367,  368,  369,  219, 1575,  826, 1575,  699,  242,  693,
      694,  695,  221, 1074,  535,  219, 1073,  699, 1072,  817,
      489,  473,  474,  475,  221,  219,  692,  699,  262, 1071,
      489,  527, 1070,  720,  221,  219, 1069, 1369,  700, 1371,

      489,  219, 1179,  810,  221, 1179,  489, 1068,  700,  172,
      221, 1067, 1180,  720,  804,  693,  694,  695,  700, 1062,
      521,  219, 1372, 1061,  721, 1372,  489,  701,  702,  703,
      221,  172, 1373,  720, 1264, 1265, 1266,  701,  702,  703,
      172,  219, 1575, 1060,  721, 1575,  489,  701,  702,  703,
      221, 1192, 1575,  722,  723,  724,  367,  368,  369, 1014,
      854,  854,  854,  827,  721,  796, 1059,  219,  513,  434,
     1197, 1058, 1015,  722,  723,  724,  221,  219,  367,  368,
      369, 1057, 1020,  788, 1030,  247,  221,  367,  368,  369,
     1016, 1374,  219,  722,  723,  724,  735,  242, 1049,  500,

      436,  221,  172, 1048,  468, 1047,  754,  754,  754,  737,
      828,  829,  830,  471,  775, 1031,  738,  240, 1046, 1017,
     1018, 1019, 1196,  494,  467, 1045,  487,  728, 1044,  437,
      438,  439, 1575,  738, 1021, 1021, 1021,  470, 1470, 1471,
     1472,  471, 1043,  766, 1032, 1033, 1034,  776, 1042,  367,
      368,  369,  805, 1041,  757,  219,  739,  740,  741,  735,
      435, 1011,  466, 1375,  221,  806, 1375,  468,  172,  736,
      736,  736,  737, 1376, 1009, 1008,  471,  746,  777,  738,
      776, 1002, 1001,  805,  473,  474,  475,  776,  219, 1575,
      728, 1575, 1575,  435, 1575,  219,  738,  221, 1204, 1575,

      435, 1575,  742, 1000,  221,  999,  734,  778,  779,  780,
      990,  777,  807,  808,  809,  367,  368,  369,  777,  739,
      740,  741, 1023,  989, 1240, 1240, 1240,  729, 1378,  728,
      759, 1378, 1024, 1024, 1024, 1025,  984,  457, 1379,  762,
      778,  779,  780, 1377,  545,  983,  982,  778,  779,  780,
     1052,  719,  546, 1016, 1050, 1050, 1050,  548,  264, 1575,
      789,  549, 1575,  567, 1331, 1332, 1333,  266,  264, 1575,
     1426, 1427, 1428,  280,  730,  731,  732,  266, 1470, 1471,
     1472, 1053, 1026, 1027, 1028,  776,  217,  981,  447, 1193,
      980,  790, 1193,  219,  979,  783,  783,  783,  435, 1194,

      789,  712,  221,  978,  551,  552,  553,  977,  264,  706,
     1054, 1055, 1056,  280, 1380,  972,  777,  266,  441,  797,
      791,  792,  793,  971,  970,  797,  698,  264,  969,  433,
      968,  790,  567,  264, 1575,  797,  266, 1575,  567,  967,
      690,  818,  266,  264, 1575,  778,  779,  780,  567,  264,
      798,  818,  266,  203,  567,  171,  798,  818,  266,  264,
      791,  792,  793, 1094,  567,  264,  798,  620,  266,  619,
      567,  366,  819,  916,  266,  915,  827,  914,  913,  799,
      800,  801,  819,  912,  911,  799,  800,  801,  819, 1575,
     1381,  910, 1575,  909, 1094,  799,  800,  801,  908, 1575,

      907,  820,  821,  822, 1575, 1361, 1575, 1575, 1361, 1575,
      906,  820,  821,  822, 1575, 1362, 1575,  820,  821,  822,
      833,  903,  902, 1095, 1096, 1097, 1372,  899,  546, 1372,
      852,  852,  852,  835,  898,  897, 1373,  549,  894,  893,
      836,  892,  891,  366, 1375, 1104,  615, 1375,  514, 1383,
      319,  826,  600,  264, 1376, 1120,  264,  836, 1105,  306,
     1382, 1110,  266,  264, 1378,  266,  594, 1378,  280,  292,
      888,  285,  266,  885, 1379, 1575, 1106,  880, 1575,  516,
      837,  838,  839,  833,  879, 1575, 1121, 1361,  578,  872,
     1361,  546,  278,  834,  834,  834,  835, 1362,  871, 1004,

      549,  870,  572,  836,  869, 1107, 1108, 1109,  517,  518,
      519,  545,  729,  868,  826, 1122, 1123, 1124,  874, 1575,
      836, 1111, 1111, 1111,  548,  565,  264,  851,  549,  850,
     1004,  515,  544,  874,  831,  266,  851,  850,  544,  874,
      831,  264,  824,  837,  838,  839,  515,  264, 1179,  875,
      266, 1179,  515,  823,  535,  816,  266,  262, 1180, 1005,
     1006, 1007,  815,  814,  875, 1575, 1372,  172, 1575, 1372,
      875,  551,  552,  553, 1113, 1575, 1373,  527,  876,  877,
      878,  529,  857,  803, 1114, 1114, 1114, 1115,  802,  521,
      795,  860,  794,  876,  877,  878,  513,  255,  784,  876,

      877,  878,  247, 1193,  782, 1106, 1193, 1575,  781,  500,
     1575,  774,  962, 1194,  367,  368,  369, 1575, 1575,  240,
      219, 1575,  172,  773,  772,  489,  494, 1004, 1575,  221,
      771,  770,  487, 1258, 1116, 1117, 1118,  874,  753,  752,
      729,  466,  733,  963,  962,  264, 1259,  887,  887,  887,
      515,  753,  219, 1094,  266,  752,  466,  489, 1004,  733,
      726,  221,  725, 1493, 1258,  457,  827,  718,  875,  367,
      368,  369,  964,  965,  966,  963, 1375,  217, 1500, 1375,
     1378,  717, 1520, 1378, 1094, 1520, 1376, 1005, 1006, 1007,
     1379,  716, 1521, 1260, 1261, 1262,  447,  876,  877,  878,

      890,  890,  890,  449,  964,  965,  966,  705,  890,  890,
      890,  704,  441, 1095, 1096, 1097,  697,  696,  433,  210,
      427, 1094,  678,  890,  890,  890,  890,  890,  890, 1165,
     1165, 1165, 1165, 1165,  827, 1165, 1166,  171, 1165, 1165,
     1165,  644,  643, 1165, 1165,  640,  637,  634, 1575, 1167,
     1165, 1575, 1094, 1165,  633,  632, 1325,  631, 1575,  627,
     1575,  623, 1520, 1575, 1165, 1520, 1165, 1166, 1165, 1326,
     1575,  620, 1521, 1168, 1307, 1307, 1307,  827,  619,  366,
      615, 1095, 1096, 1097,  361,  584,  606, 1325,  602,  319,
      596, 1165, 1165, 1165, 1165, 1165, 1169, 1170, 1171, 1173,

     1173, 1173, 1173, 1173, 1507, 1173, 1174,  306, 1173, 1173,
     1173,  590, 1575, 1173, 1173, 1575, 1327, 1328, 1329, 1175,
     1173,  292, 1575, 1173,  828,  829,  830,  589,  588, 1575,
     1559,  285, 1575, 1559, 1173,  577, 1173, 1174, 1173, 1575,
     1560,  576,  278,  534, 1240, 1240, 1240,  729, 1307, 1307,
     1307,  827,  533,  262,  509,  255,  508,  507,  247,  227,
      499, 1173, 1173, 1173, 1173, 1173, 1176, 1177, 1178, 1185,
     1185, 1185, 1185, 1185,  498, 1185, 1186,  240, 1185, 1185,
     1185,  454, 1575, 1185, 1185, 1575,  453,  217,  429, 1187,
     1185,  210, 1575, 1185,  730,  731,  732,  203,  828,  829,

      830,  411, 1575,  410, 1185, 1575, 1185, 1186, 1185,  171,
     1575, 1520, 1575, 1575, 1520, 1258, 1559,  364,  148, 1559,
     1575, 1521,  347,  343,  340,  326, 1560,  321, 1259,  320,
      319, 1185, 1185, 1185, 1185, 1185, 1188, 1189, 1190,  370,
      371,  372,  373,  374,  375,  376, 1258,  377,  322,  378,
      379,  380,  381,  321,  382,  383,  384,  385, 1198, 1198,
     1198, 1198, 1198,  320, 1198, 1199,  319, 1198, 1198, 1198,
      312, 1575, 1198, 1198, 1575, 1260, 1261, 1262, 1200, 1198,
     1559, 1575, 1198, 1559,  309,  308,  962,  307, 1575,  306,
     1560, 1575,  297, 1198,  219, 1198, 1199, 1198, 1575,  489,

      294, 1014,  293,  221,  292,  271,  257,  256,  255,  219,
      236,  212,  211,  210, 1015,  203,  192,  963,  221,  161,
     1198, 1198, 1198, 1198, 1198, 1201, 1202, 1203,  735,  148,
      147, 1575, 1016, 1575, 1575, 1575,  468, 1575, 1012, 1012,
     1012,  737, 1575, 1575, 1575,  471,  964,  965,  966, 1575,
     1575, 1575, 1014, 1575, 1575, 1258, 1575, 1575, 1575,  728,
      219, 1017, 1018, 1019, 1227, 1015, 1575, 1014, 1259,  221,
     1575, 1575,  219, 1575, 1575,  219, 1575,  242, 1575, 1235,
     1015,  221, 1575, 1016,  221, 1575, 1258,  219,  739,  740,
      741,  735,  242, 1575, 1575, 1228,  221, 1575, 1016,  468,

     1575, 1010, 1010, 1010,  737, 1575, 1575, 1575,  471, 1575,
     1236, 1575, 1017, 1018, 1019, 1260, 1261, 1262, 1325, 1575,
     1575, 1575,  728, 1575, 1229, 1230, 1231, 1017, 1018, 1019,
     1014, 1326, 1575, 1575, 1575, 1575, 1575, 1014,  219, 1237,
     1238, 1239, 1325, 1015, 1575,  219, 1575,  221, 1575, 1325,
     1025,  739,  740,  741,  221, 1326, 1575, 1575, 1242, 1575,
     1575, 1016, 1575, 1575, 1250, 1575,  219, 1575, 1016, 1575,
     1575,  242,  219, 1325, 1575,  221, 1575,  489, 1327, 1328,
     1329,  221, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1243,
     1017, 1018, 1019, 1575, 1575, 1251, 1575, 1017, 1018, 1019,

     1023, 1575, 1327, 1328, 1329, 1575, 1575, 1575,  759, 1575,
     1024, 1024, 1024, 1025, 1575, 1030, 1575,  762, 1244, 1245,
     1246, 1030, 1575,  219, 1252, 1253, 1254, 1052,  242,  219,
     1575, 1016,  221, 1575,  242,  264, 1575, 1575,  221, 1575,
      567, 1575, 1052, 1575,  266, 1575, 1031, 1575, 1575, 1575,
      264, 1575, 1031, 1575, 1575,  567, 1575, 1575, 1053,  266,
     1026, 1027, 1028, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1053, 1575, 1032, 1033, 1034, 1575, 1575,
     1575, 1032, 1033, 1034,  833, 1575, 1575, 1054, 1055, 1056,
     1575, 1575,  546, 1575, 1102, 1102, 1102,  835, 1575, 1052,

     1575,  549, 1054, 1055, 1056, 1104, 1575,  264, 1575, 1575,
     1575, 1575,  567,  264, 1575,  826,  266, 1575, 1105, 1575,
     1104, 1575,  266, 1575, 1575, 1575, 1294, 1575,  264, 1575,
     1053, 1575, 1575, 1105,  264, 1575, 1106,  266, 1575,  280,
     1575, 1575, 1575,  266,  837,  838,  839, 1575, 1575, 1575,
     1575, 1106, 1575, 1575, 1575, 1575, 1575, 1295, 1575, 1054,
     1055, 1056,  833, 1575, 1575, 1107, 1108, 1109, 1575, 1575,
      546, 1575, 1100, 1100, 1100,  835, 1575, 1104, 1575,  549,
     1107, 1108, 1109, 1302, 1575,  264, 1296, 1297, 1298, 1104,
     1105,  264, 1575,  826,  266, 1575,  280,  264, 1575, 1104,

      266, 1575, 1105, 1575, 1575, 1575,  266,  264, 1106, 1575,
     1575, 1575, 1115, 1575, 1303, 1575,  266, 1575, 1575, 1575,
     1106, 1575,  837,  838,  839, 1575, 1575, 1575, 1575, 1575,
     1106, 1575, 1575, 1575, 1575, 1575, 1575, 1107, 1108, 1109,
     1309, 1575, 1575, 1304, 1305, 1306, 1575, 1575,  264, 1107,
     1108, 1109, 1575,  280, 1575, 1575, 1575,  266, 1575, 1107,
     1108, 1109, 1113, 1575, 1575, 1575, 1575, 1575, 1317, 1575,
      857, 1310, 1114, 1114, 1114, 1115,  264, 1575, 1120,  860,
     1575,  567, 1575, 1575, 1575,  266,  264, 1575, 1575, 1575,
     1120,  280, 1575, 1106, 1575,  266, 1575, 1575,  264, 1318,

     1311, 1312, 1313,  280, 1575, 1575, 1575,  266, 1575, 1121,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1397, 1575,
     1575, 1121, 1116, 1117, 1118, 1575,  219, 1575, 1319, 1320,
     1321,  489, 1575, 1575, 1575,  221, 1575, 1575, 1122, 1123,
     1124, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1398,
     1122, 1123, 1124, 1355, 1355, 1355, 1355, 1355, 1575, 1355,
     1356, 1575, 1355, 1355, 1355, 1575, 1575, 1355, 1355, 1575,
     1575, 1575, 1575, 1357, 1355, 1575, 1575, 1355, 1399, 1400,
     1401, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1355, 1575,
     1355, 1356, 1355, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1355, 1355, 1355, 1355, 1355,
     1358, 1359, 1360, 1575, 1361, 1575, 1575, 1361, 1575, 1575,
     1575, 1575, 1575, 1575, 1362, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575,  172, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
      367,  368,  369, 1363, 1363, 1363, 1363, 1363, 1575, 1363,

     1364, 1575, 1363, 1363, 1363, 1575, 1575, 1363, 1363, 1575,
     1575, 1575, 1575, 1365, 1363, 1575, 1575, 1363, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1363, 1575,
     1363, 1364, 1363, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1363, 1363, 1363, 1363, 1363,
     1366, 1367, 1368,  370,  371,  372,  373,  374,  375,  376,
     1575,  377, 1575,  378,  379,  380,  381, 1575,  382,  383,
      384,  385, 1384, 1384, 1384, 1384, 1384, 1575, 1384, 1385,
     1575, 1384, 1384, 1384, 1575, 1575, 1384, 1384, 1575, 1227,

     1575, 1575, 1386, 1384, 1575, 1227, 1384,  219, 1575, 1575,
     1575, 1575,  242,  219, 1575, 1575,  221, 1384,  242, 1384,
     1385, 1384,  221, 1575, 1406, 1575, 1575, 1575, 1575, 1575,
     1228, 1575,  219, 1575, 1575, 1575, 1228,  489, 1575, 1575,
     1575,  221, 1575, 1575, 1384, 1384, 1384, 1384, 1384, 1387,
     1388, 1389, 1575, 1575, 1575, 1407, 1235, 1575, 1575, 1229,
     1230, 1231, 1235, 1575,  219, 1229, 1230, 1231, 1575,  242,
      219, 1575, 1575,  221, 1575,  242, 1575, 1575, 1575,  221,
     1575, 1414, 1575, 1575, 1408, 1409, 1410, 1236, 1242,  219,
     1575, 1575, 1575, 1236,  489, 1575,  219, 1575,  221, 1575,

     1575,  242, 1575, 1575, 1575,  221, 1575, 1575, 1575, 1575,
     1575, 1575, 1415, 1242, 1575, 1575, 1237, 1238, 1239, 1243,
     1250,  219, 1237, 1238, 1239, 1575,  242, 1575,  219, 1575,
      221, 1575, 1575,  489, 1575, 1575, 1575,  221, 1575, 1250,
     1575, 1416, 1417, 1418, 1243, 1250, 1575,  219, 1244, 1245,
     1246, 1251,  489,  219, 1575, 1441,  221, 1575,  489, 1575,
     1575, 1575,  221,  264, 1575, 1575, 1575, 1575,  567, 1575,
     1251, 1294,  266, 1244, 1245, 1246, 1251, 1294, 1575,  264,
     1252, 1253, 1254, 1575,  280,  264, 1442, 1575,  266, 1575,
      280, 1575, 1575, 1575,  266, 1575, 1450, 1575, 1575, 1252,

     1253, 1254, 1295, 1575,  264, 1252, 1253, 1254, 1295,  567,
     1575, 1302, 1575,  266, 1575, 1443, 1444, 1445, 1575,  264,
     1575, 1575, 1575, 1575,  280, 1575, 1575, 1451,  266, 1575,
     1575, 1296, 1297, 1298, 1575, 1302, 1575, 1296, 1297, 1298,
     1575, 1575, 1303,  264, 1575, 1575, 1458, 1575,  280, 1575,
     1575, 1575,  266, 1575,  264, 1575, 1452, 1453, 1454,  567,
     1575, 1309, 1575,  266, 1575, 1575, 1303, 1309, 1575,  264,
     1575, 1304, 1305, 1306,  280,  264, 1575, 1459,  266, 1575,
      280, 1575, 1575, 1575,  266, 1575, 1317, 1575, 1575, 1575,
     1575, 1575, 1310, 1575,  264, 1304, 1305, 1306, 1310,  567,

     1575, 1317, 1575,  266, 1575, 1575, 1460, 1461, 1462,  264,
     1575, 1575, 1575, 1575,  567, 1575, 1575, 1318,  266, 1575,
     1575, 1311, 1312, 1313, 1575, 1317, 1575, 1311, 1312, 1313,
     1575, 1575, 1318,  264, 1575, 1575, 1575, 1575,  567, 1575,
     1575, 1575,  266, 1575, 1575, 1575, 1319, 1320, 1321, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1318, 1575, 1575, 1575,
     1575, 1319, 1320, 1321, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1319, 1320, 1321, 1487, 1487,
     1487, 1487, 1487, 1575, 1487, 1488, 1575, 1487, 1487, 1487,

     1575, 1575, 1487, 1487, 1575, 1575, 1575, 1575, 1489, 1487,
     1575, 1575, 1487, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1487, 1575, 1487, 1488, 1487, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1487, 1487, 1487, 1487, 1487, 1490, 1491, 1492, 1494, 1494,
     1494, 1494, 1494, 1575, 1494, 1495, 1575, 1494, 1494, 1494,
     1575, 1575, 1494, 1494, 1575, 1575, 1575, 1575, 1496, 1494,
     1575, 1575, 1494, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1494, 1575, 1494, 1495, 1494, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1494, 1494, 1494, 1494, 1494, 1497, 1498, 1499, 1501, 1501,
     1501, 1501, 1501, 1575, 1501, 1502, 1575, 1501, 1501, 1501,
     1575, 1575, 1501, 1501, 1575, 1575, 1575, 1575, 1503, 1501,
     1575, 1575, 1501, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1501, 1575, 1501, 1502, 1501, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1501, 1501, 1501, 1501, 1501, 1504, 1505, 1506, 1508, 1508,

     1508, 1508, 1508, 1575, 1508, 1509, 1575, 1508, 1508, 1508,
     1575, 1575, 1508, 1508, 1575, 1575, 1575, 1575, 1510, 1508,
     1575, 1575, 1508, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1508, 1575, 1508, 1509, 1508, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1508, 1508, 1508, 1508, 1508, 1511, 1512, 1513, 1514, 1514,
     1514, 1514, 1514, 1575, 1514, 1515, 1575, 1514, 1514, 1514,
     1575, 1575, 1514, 1514, 1575, 1397, 1575, 1575, 1516, 1514,
     1575, 1397, 1514,  219, 1575, 1575, 1575, 1575,  489,  219,

     1575, 1575,  221, 1514,  489, 1514, 1515, 1514,  221, 1575,
     1397, 1575, 1575, 1575, 1575, 1575, 1398, 1575,  219, 1575,
     1575, 1575, 1398,  489, 1575, 1575, 1575,  221, 1575, 1575,
     1514, 1514, 1514, 1514, 1514, 1517, 1518, 1519, 1575, 1575,
     1575, 1398, 1406, 1575, 1575, 1399, 1400, 1401, 1406, 1575,
      219, 1399, 1400, 1401, 1575,  489,  219, 1575, 1575,  221,
     1575,  489, 1575, 1575, 1575,  221, 1575, 1406, 1575, 1575,
     1399, 1400, 1401, 1407, 1414,  219, 1575, 1575, 1575, 1407,
      489, 1575,  219, 1575,  221, 1575, 1575,  489, 1575, 1575,
     1575,  221, 1575, 1575, 1575, 1575, 1575, 1575, 1407, 1414,

     1575, 1575, 1408, 1409, 1410, 1415, 1414,  219, 1408, 1409,
     1410, 1575,  489, 1575,  219, 1575,  221, 1575, 1575,  489,
     1575, 1575, 1575,  221, 1575, 1441, 1575, 1408, 1409, 1410,
     1415, 1441, 1575,  264, 1416, 1417, 1418, 1415,  567,  264,
     1575, 1441,  266, 1575,  567, 1575, 1575, 1575,  266,  264,
     1575, 1575, 1575, 1575,  567, 1575, 1442, 1450,  266, 1416,
     1417, 1418, 1442, 1450, 1575,  264, 1416, 1417, 1418, 1575,
      567,  264, 1442, 1575,  266, 1575,  567, 1575, 1575, 1575,
      266, 1575, 1450, 1575, 1575, 1443, 1444, 1445, 1451, 1575,
      264, 1443, 1444, 1445, 1451,  567, 1575, 1458, 1575,  266,

     1575, 1443, 1444, 1445, 1575,  264, 1575, 1575, 1575, 1575,
      567, 1575, 1575, 1451,  266, 1575, 1575, 1452, 1453, 1454,
     1575, 1458, 1575, 1452, 1453, 1454, 1575, 1575, 1459,  264,
     1575, 1575, 1458, 1575,  567, 1575, 1575, 1575,  266, 1575,
      264, 1575, 1452, 1453, 1454,  567, 1575, 1575, 1575,  266,
     1575, 1575, 1459, 1575, 1575, 1575, 1575, 1460, 1461, 1462,
     1575, 1575, 1575, 1459, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1460, 1461, 1462, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1460, 1461, 1462, 1553, 1553, 1553, 1553, 1553,

     1575, 1553, 1554, 1575, 1553, 1553, 1553, 1575, 1575, 1553,
     1553, 1575, 1575, 1575, 1575, 1555, 1553, 1575, 1575, 1553,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1553, 1575, 1553, 1554, 1553, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1553, 1553, 1553,
     1553, 1553, 1556, 1557, 1558, 1561, 1561, 1561, 1561, 1561,
     1575, 1561, 1562, 1575, 1561, 1561, 1561, 1575, 1575, 1561,
     1561, 1575, 1575, 1575, 1575, 1563, 1561, 1575, 1575, 1561,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1561, 1575, 1561, 1562, 1561, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1561, 1561, 1561,
     1561, 1561, 1564, 1565, 1566,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  137,  137,  137,  137,  137,

      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  143,  143, 1575, 1575, 1575,
      143,  143,  143,  143,  143,  143,  143,  143,  143, 1575,
      143,  143,  143,  143,  143,  200, 1575,  200, 1575, 1575,
     1575,  200, 1575,  200,  200,  202,  202, 1575, 1575,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  217,  217, 1575,  217,  217,
     1575,  217,  217, 1575,  217,  217,  217,  217,  217,  217,

      240,  240, 1575,  240,  240, 1575,  240,  240, 1575,  240,
      240,  240,  240,  240,  240,  247,  247, 1575,  247, 1575,
     1575,  247,  247, 1575, 1575,  247, 1575,  247,  247,  247,
      262,  262, 1575,  262,  262,  262,  262,  262, 1575,  262,
      262,  262,  262,  262,  262,  278,  278, 1575,  278,  278,
      278,  278,  278, 1575,  278,  278,  278,  278,  278,  278,
      285,  285, 1575,  285, 1575,  285,  285,  285, 1575, 1575,
      285, 1575,  285,  285,  285,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  323, 1575, 1575, 1575,  323,

     1575,  323,  323,  331,  331,  331, 1575, 1575,  331, 1575,
     1575,  331,  331,  331,  331,  331,  348,  348, 1575,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  366,  366, 1575,  366,
     1575,  366,  366,  366, 1575, 1575,  366,  366,  366,  366,
      366,  416, 1575,  416, 1575, 1575, 1575,  416, 1575,  416,
      416,  433,  433, 1575,  433,  433, 1575,  433,  433, 1575,
      433,  433,  433,  433,  433,  433,  441,  441, 1575,  441,

      441, 1575,  441,  441, 1575,  441,  441,  441,  441,  441,
      441,  447,  447, 1575,  447, 1575, 1575,  447,  447, 1575,
     1575,  447, 1575,  447,  447,  447,  457,  457, 1575,  457,
      457, 1575,  457,  457, 1575,  457,  457,  457,  457,  457,
      457,  466,  466, 1575,  466,  466, 1575,  466,  466, 1575,
      466,  466, 1575,  466,  466,  466,  487,  487, 1575,  487,
      487, 1575,  487,  487, 1575,  487,  487,  487,  487,  487,
      487,  240,  240, 1575,  240,  240, 1575,  240,  240, 1575,
      240,  240,  240,  240,  240,  240,  494,  494, 1575,  494,
     1575, 1575,  494, 1575, 1575, 1575,  494,  494,  494,  494,

      494,  500,  500, 1575,  500,  500, 1575,  500,  500, 1575,
      500,  500,  500,  500,  500,  500,  513,  513, 1575,  513,
      513,  513,  513,  513, 1575,  513,  513,  513,  513,  513,
      513,  262,  262, 1575,  262,  262,  262,  262,  262, 1575,
      262,  262,  262,  262,  262,  262,  521,  521, 1575,  521,
      521,  521,  521,  521, 1575,  521,  521,  521,  521,  521,
      521,  527,  527, 1575,  527, 1575,  527,  527,  527, 1575,
     1575,  527, 1575,  527,  527,  527,  535,  535, 1575,  535,
      535,  535,  535,  535, 1575,  535,  535,  535,  535,  535,
      535,  544,  544, 1575,  544,  544,  544,  544,  544, 1575,

      544,  544, 1575,  544,  544,  544,  565,  565, 1575,  565,
      565,  565,  565,  565, 1575,  565,  565,  565,  565,  565,
      565,  278,  278, 1575,  278,  278,  278,  278,  278, 1575,
      278,  278,  278,  278,  278,  278,  572,  572, 1575,  572,
     1575,  572,  572, 1575, 1575, 1575,  572,  572,  572,  572,
      572,  578,  578, 1575,  578,  578,  578,  578,  578, 1575,
      578,  578,  578,  578,  578,  578,  323, 1575, 1575, 1575,
      323, 1575,  323,  323,  331, 1575, 1575, 1575,  331, 1575,
      331,  331,  418,  418,  418,  418,  418,  418,  418,  418,
      418, 1575,  418,  418,  418,  418,  418,  418,  418,  418,

      418,  418,  200, 1575,  200, 1575, 1575, 1575,  200, 1575,
      200,  200,  348,  348, 1575,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  143,  143, 1575, 1575, 1575,  143,  143,  143,
      143,  143,  143,  143,  143,  143, 1575,  143,  143,  143,
      143,  143,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  416, 1575, 1575, 1575,  416, 1575,  416,  416,
      616, 1575, 1575, 1575,  616, 1575,  616,  616,  366,  366,
     1575,  366, 1575,  366,  366,  366, 1575, 1575,  366,  366,

      366,  366,  366,  686, 1575,  686, 1575, 1575, 1575,  686,
     1575,  686,  686,  466,  466, 1575,  466, 1575, 1575,  466,
      466, 1575,  466,  466, 1575,  466,  466,  466,  433,  433,
     1575,  433,  433, 1575,  433,  433, 1575,  433,  433,  433,
      433,  433,  433,  690,  690, 1575,  690,  690, 1575,  690,
      690, 1575,  690,  690,  690,  690,  690,  690,  698,  698,
     1575,  698,  698, 1575,  698,  698, 1575,  698,  698,  698,
      698,  698,  698,  441,  441, 1575,  441,  441, 1575,  441,
      441, 1575,  441,  441,  441,  441,  441,  441,  706,  706,
     1575,  706, 1575, 1575,  706,  706, 1575, 1575,  706,  706,

      706,  706,  706,  712,  712, 1575,  712, 1575, 1575,  712,
     1575, 1575, 1575,  712,  712,  712,  712,  712,  719,  719,
     1575,  719,  719, 1575,  719,  719, 1575,  719,  719,  719,
      719,  719,  719,  457,  457, 1575,  457,  457, 1575,  457,
      457, 1575,  457,  457,  457,  457,  457,  457,  728,  728,
     1575,  728, 1575, 1575,  728,  728, 1575, 1575,  728,  728,
      728,  728,  728,  734,  734, 1575,  734,  734, 1575,  734,
      734, 1575,  734,  734,  734,  734,  734,  734,  742,  742,
     1575,  742, 1575, 1575,  742, 1575, 1575, 1575,  742,  742,
      742,  742,  742,  746,  746, 1575,  746, 1575, 1575,  746,

      746, 1575, 1575,  746, 1575,  746,  746,  746,  757,  757,
     1575,  757,  757, 1575,  757,  757, 1575,  757,  757,  757,
      757,  757,  757,  487,  487, 1575,  487,  487, 1575,  487,
      487, 1575,  487,  487,  487,  487,  487,  487,  766,  766,
     1575,  766, 1575, 1575,  766, 1575, 1575, 1575,  766,  766,
      766,  766,  766,  494,  494, 1575,  494, 1575, 1575,  494,
     1575, 1575, 1575,  494,  494,  494,  494,  494,  775,  775,
     1575,  775,  775, 1575,  775,  775, 1575,  775,  775,  775,
      775,  775,  775,  500,  500, 1575,  500,  500, 1575,  500,
      500, 1575,  500,  500,  500,  500,  500,  500,  544,  544,

     1575,  544, 1575,  544,  544,  544, 1575,  544,  544, 1575,
      544,  544,  544,  513,  513, 1575,  513,  513,  513,  513,
      513, 1575,  513,  513,  513,  513,  513,  513,  788,  788,
     1575,  788,  788,  788,  788,  788, 1575,  788,  788,  788,
      788,  788,  788,  796,  796, 1575,  796,  796,  796,  796,
      796, 1575,  796,  796,  796,  796,  796,  796,  521,  521,
     1575,  521,  521,  521,  521,  521, 1575,  521,  521,  521,
      521,  521,  521,  804,  804, 1575,  804, 1575,  804,  804,
      804, 1575, 1575,  804,  804,  804,  804,  804,  810,  810,
     1575,  810, 1575,  810,  810, 1575, 1575, 1575,  810,  810,

      810,  810,  810,  817,  817, 1575,  817,  817,  817,  817,
      817, 1575,  817,  817,  817,  817,  817,  817,  535,  535,
     1575,  535,  535,  535,  535,  535, 1575,  535,  535,  535,
      535,  535,  535,  826,  826, 1575,  826, 1575,  826,  826,
      826, 1575, 1575,  826,  826,  826,  826,  826,  832,  832,
     1575,  832,  832,  832,  832,  832, 1575,  832,  832,  832,
      832,  832,  832,  840,  840, 1575,  840, 1575,  840,  840,
     1575, 1575, 1575,  840,  840,  840,  840,  840,  844,  844,
     1575,  844, 1575,  844,  844,  844, 1575, 1575,  844, 1575,
      844,  844,  844,  855,  855, 1575,  855,  855,  855,  855,

      855, 1575,  855,  855,  855,  855,  855,  855,  565,  565,
     1575,  565,  565,  565,  565,  565, 1575,  565,  565,  565,
      565,  565,  565,  864,  864, 1575,  864, 1575,  864,  864,
     1575, 1575, 1575,  864,  864,  864,  864,  864,  572,  572,
     1575,  572, 1575,  572,  572, 1575, 1575, 1575,  572,  572,
      572,  572,  572,  873,  873, 1575,  873,  873,  873,  873,
      873, 1575,  873,  873,  873,  873,  873,  873,  578,  578,
     1575,  578,  578,  578,  578,  578, 1575,  578,  578,  578,
      578,  578,  578,  616, 1575, 1575, 1575,  616, 1575,  616,
      616,  418,  418,  418,  418,  418,  418,  418,  418,  418,

     1575,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  416, 1575, 1575,  416, 1575, 1575, 1575,  416, 1575,
      416,  416,  660,  660,  660,  660,  660, 1575,  660,  660,
     1575,  660, 1575, 1575,  660,  660,  660, 1575,  660, 1575,
     1575,  660,  366, 1575, 1575,  366,  366,  366, 1575,  366,
     1575,  366,  366,  366, 1575, 1575,  366,  366,  366,  366,
      366,  686, 1575,  686, 1575, 1575, 1575,  686, 1575,  686,
      686,  728,  728, 1575,  728, 1575, 1575,  728,  728, 1575,
     1575,  728,  728,  728,  728,  728,  466,  466, 1575,  466,
      466, 1575,  466,  466, 1575,  466,  466, 1575,  466,  466,

      466,  961,  961, 1575,  961,  961, 1575,  961,  961, 1575,
      961,  961,  961,  961,  961,  961,  690,  690, 1575,  690,
      690, 1575,  690,  690, 1575,  690,  690,  690,  690,  690,
      690,  698,  698, 1575,  698,  698, 1575,  698,  698, 1575,
      698,  698,  698,  698,  698,  698,  706,  706, 1575,  706,
     1575, 1575,  706,  706, 1575, 1575,  706,  706,  706,  706,
      706,  973,  973, 1575,  973, 1575, 1575,  973, 1575, 1575,
     1575,  973,  973,  973,  973,  973,  712,  712, 1575,  712,
     1575, 1575,  712, 1575, 1575, 1575,  712,  712,  712,  712,
      712,  719,  719, 1575,  719,  719, 1575,  719,  719, 1575,

      719,  719,  719,  719,  719,  719,  734,  734, 1575,  734,
      734, 1575,  734,  734, 1575,  734,  734,  734,  734,  734,
      734,  985,  985, 1575,  985, 1575, 1575,  985, 1575, 1575,
     1575,  985,  985,  985,  985,  985,  991,  991, 1575,  991,
     1575, 1575,  991, 1575, 1575, 1575,  991,  991,  991,  991,
      991,  995,  995, 1575,  995, 1575, 1575,  995, 1575, 1575,
     1575,  995,  995,  995,  995,  995,  742,  742, 1575,  742,
     1575, 1575,  742, 1575, 1575, 1575,  742,  742,  742,  742,
      742, 1003, 1003, 1575, 1003, 1575, 1575, 1003, 1003, 1575,
     1575, 1003, 1003, 1003, 1003, 1003, 1013, 1013, 1575, 1013,

     1013, 1575, 1013, 1013, 1575, 1013, 1013, 1013, 1013, 1013,
     1013,  433,  433, 1575,  433,  433, 1575,  433,  433, 1575,
      433,  433,  433,  433,  433,  433, 1022, 1022, 1575, 1022,
     1022, 1575, 1022, 1022, 1575, 1022, 1022, 1022, 1022, 1022,
     1022, 1029, 1029, 1575, 1029, 1029, 1575, 1029, 1029, 1575,
     1029, 1029, 1029, 1029, 1029, 1029, 1035, 1035, 1575, 1035,
     1575, 1575, 1035, 1035, 1575, 1575, 1035, 1575, 1035, 1035,
     1035,  766,  766, 1575,  766, 1575, 1575,  766, 1575, 1575,
     1575,  766,  766,  766,  766,  766,  775,  775, 1575,  775,
      775, 1575,  775,  775, 1575,  775,  775,  775,  775,  775,

      775,  826,  826, 1575,  826, 1575,  826,  826,  826, 1575,
     1575,  826,  826,  826,  826,  826,  544,  544, 1575,  544,
      544,  544,  544,  544, 1575,  544,  544, 1575,  544,  544,
      544, 1051, 1051, 1575, 1051, 1051, 1051, 1051, 1051, 1575,
     1051, 1051, 1051, 1051, 1051, 1051,  788,  788, 1575,  788,
      788,  788,  788,  788, 1575,  788,  788,  788,  788,  788,
      788,  796,  796, 1575,  796,  796,  796,  796,  796, 1575,
      796,  796,  796,  796,  796,  796,  804,  804, 1575,  804,
     1575,  804,  804,  804, 1575, 1575,  804,  804,  804,  804,
      804, 1063, 1063, 1575, 1063, 1575, 1063, 1063, 1575, 1575,

     1575, 1063, 1063, 1063, 1063, 1063,  810,  810, 1575,  810,
     1575,  810,  810, 1575, 1575, 1575,  810,  810,  810,  810,
      810,  817,  817, 1575,  817,  817,  817,  817,  817, 1575,
      817,  817,  817,  817,  817,  817,  832,  832, 1575,  832,
      832,  832,  832,  832, 1575,  832,  832,  832,  832,  832,
      832, 1075, 1075, 1575, 1075, 1575, 1075, 1075, 1575, 1575,
     1575, 1075, 1075, 1075, 1075, 1075, 1081, 1081, 1575, 1081,
     1575, 1081, 1081, 1575, 1575, 1575, 1081, 1081, 1081, 1081,
     1081, 1085, 1085, 1575, 1085, 1575, 1085, 1085, 1575, 1575,
     1575, 1085, 1085, 1085, 1085, 1085,  840,  840, 1575,  840,

     1575,  840,  840, 1575, 1575, 1575,  840,  840,  840,  840,
      840, 1093, 1093, 1575, 1093, 1575, 1093, 1093, 1093, 1575,
     1575, 1093, 1093, 1093, 1093, 1093, 1103, 1103, 1575, 1103,
     1103, 1103, 1103, 1103, 1575, 1103, 1103, 1103, 1103, 1103,
     1103,  513,  513, 1575,  513,  513,  513,  513,  513, 1575,
      513,  513,  513,  513,  513,  513, 1112, 1112, 1575, 1112,
     1112, 1112, 1112, 1112, 1575, 1112, 1112, 1112, 1112, 1112,
     1112, 1119, 1119, 1575, 1119, 1119, 1119, 1119, 1119, 1575,
     1119, 1119, 1119, 1119, 1119, 1119, 1125, 1125, 1575, 1125,
     1575, 1125, 1125, 1125, 1575, 1575, 1125, 1575, 1125, 1125,

     1125,  864,  864, 1575,  864, 1575,  864,  864, 1575, 1575,
     1575,  864,  864,  864,  864,  864,  873,  873, 1575,  873,
      873,  873,  873,  873, 1575,  873,  873,  873,  873,  873,
      873,  616, 1575, 1575, 1575,  616, 1575,  616,  616,  937,
      937,  937,  937,  937, 1575,  937,  937, 1575,  937, 1575,
     1575,  937,  937,  937, 1575,  937, 1575,  937,  937,  946,
      946,  946,  946,  946, 1575,  946,  946, 1575,  946, 1575,
     1575,  946,  946,  946, 1575,  946,  946, 1575,  946,  366,
      366, 1575,  366, 1575,  366,  366,  366, 1575, 1575,  366,
      366,  366,  366,  366,  416, 1575,  416, 1575, 1575, 1575,

      416, 1575,  416,  416,  734,  734, 1575,  734,  734, 1575,
      734,  734, 1575,  734,  734,  734,  734,  734,  734,  961,
      961, 1575,  961,  961, 1575,  961,  961, 1575,  961,  961,
      961,  961,  961,  961,  973,  973, 1575,  973, 1575, 1575,
      973, 1575, 1575, 1575,  973,  973,  973,  973,  973,  985,
      985, 1575,  985, 1575, 1575,  985, 1575, 1575, 1575,  985,
      985,  985,  985,  985,  991,  991, 1575,  991, 1575, 1575,
      991, 1575, 1575, 1575,  991,  991,  991,  991,  991,  995,
      995, 1575,  995, 1575, 1575,  995, 1575, 1575, 1575,  995,
      995,  995,  995,  995, 1003, 1003, 1575, 1003, 1575, 1575,

     1003, 1003, 1575, 1575, 1003, 1003, 1003, 1003, 1003, 1013,
     1013, 1575, 1013, 1013, 1575, 1013, 1013, 1575, 1013, 1013,
     1013, 1013, 1013, 1013, 1226, 1226, 1575, 1226, 1226, 1575,
     1226, 1226, 1575, 1226, 1226, 1226, 1226, 1226, 1226, 1234,
     1234, 1575, 1234, 1234, 1575, 1234, 1234, 1575, 1234, 1234,
     1234, 1234, 1234, 1234,  728,  728, 1575,  728, 1575, 1575,
      728,  728, 1575, 1575,  728,  728,  728,  728,  728, 1022,
     1022, 1575, 1022, 1022, 1575, 1022, 1022, 1575, 1022, 1022,
     1022, 1022, 1022, 1022, 1241, 1241, 1575, 1241, 1241, 1575,
     1241, 1241, 1575, 1241, 1241, 1241, 1241, 1241, 1241, 1249,

     1249, 1575, 1249, 1249, 1575, 1249, 1249, 1575, 1249, 1249,
     1249, 1249, 1249, 1249, 1029, 1029, 1575, 1029, 1029, 1575,
     1029, 1029, 1575, 1029, 1029, 1029, 1029, 1029, 1029, 1257,
     1257, 1575, 1257, 1575, 1575, 1257, 1257, 1575, 1575, 1257,
     1257, 1257, 1257, 1257, 1263, 1263, 1575, 1263, 1575, 1575,
     1263, 1575, 1575, 1575, 1263, 1263, 1263, 1263, 1263,  832,
      832, 1575,  832,  832,  832,  832,  832, 1575,  832,  832,
      832,  832,  832,  832, 1051, 1051, 1575, 1051, 1051, 1051,
     1051, 1051, 1575, 1051, 1051, 1051, 1051, 1051, 1051, 1063,
     1063, 1575, 1063, 1575, 1063, 1063, 1575, 1575, 1575, 1063,

     1063, 1063, 1063, 1063, 1075, 1075, 1575, 1075, 1575, 1075,
     1075, 1575, 1575, 1575, 1075, 1075, 1075, 1075, 1075, 1081,
     1081, 1575, 1081, 1575, 1081, 1081, 1575, 1575, 1575, 1081,
     1081, 1081, 1081, 1081, 1085, 1085, 1575, 1085, 1575, 1085,
     1085, 1575, 1575, 1575, 1085, 1085, 1085, 1085, 1085, 1093,
     1093, 1575, 1093, 1575, 1093, 1093, 1093, 1575, 1575, 1093,
     1093, 1093, 1093, 1093, 1103, 1103, 1575, 1103, 1103, 1103,
     1103, 1103, 1575, 1103, 1103, 1103, 1103, 1103, 1103, 1293,
     1293, 1575, 1293, 1293, 1293, 1293, 1293, 1575, 1293, 1293,
     1293, 1293, 1293, 1293, 1301, 1301, 1575, 1301, 1301, 1301,

     1301, 1301, 1575, 1301, 1301, 1301, 1301, 1301, 1301,  826,
      826, 1575,  826, 1575,  826,  826,  826, 1575, 1575,  826,
      826,  826,  826,  826, 1112, 1112, 1575, 1112, 1112, 1112,
     1112, 1112, 1575, 1112, 1112, 1112, 1112, 1112, 1112, 1308,
     1308, 1575, 1308, 1308, 1308, 1308, 1308, 1575, 1308, 1308,
     1308, 1308, 1308, 1308, 1316, 1316, 1575, 1316, 1316, 1316,
     1316, 1316, 1575, 1316, 1316, 1316, 1316, 1316, 1316, 1119,
     1119, 1575, 1119, 1119, 1119, 1119, 1119, 1575, 1119, 1119,
     1119, 1119, 1119, 1119, 1324, 1324, 1575, 1324, 1575, 1324,
     1324, 1324, 1575, 1575, 1324, 1324, 1324, 1324, 1324, 1330,

     1330, 1575, 1330, 1575, 1330, 1330, 1575, 1575, 1575, 1330,
     1330, 1330, 1330, 1330, 1165, 1165, 1165, 1165, 1165, 1575,
     1165, 1165, 1575, 1165, 1575, 1575, 1165, 1165, 1165, 1575,
     1165, 1165, 1575, 1165, 1173, 1173, 1173, 1173, 1173, 1575,
     1173, 1173, 1575, 1173, 1575, 1575, 1173, 1173, 1173, 1575,
     1173, 1575, 1575, 1173, 1185, 1185, 1185, 1185, 1185, 1575,
     1185, 1185, 1575, 1185, 1575, 1575, 1185, 1185, 1185, 1575,
     1185, 1575, 1575, 1185, 1198, 1198, 1198, 1198, 1198, 1575,
     1198, 1198, 1575, 1198, 1575, 1575, 1198, 1198, 1198, 1575,
     1198, 1575, 1575, 1198,  366,  366,  366,  366,  366,  366,

      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366, 1396, 1396, 1575, 1396, 1396, 1575,
     1396, 1396, 1575, 1396, 1396, 1396, 1396, 1396, 1396, 1226,
     1226, 1575, 1226, 1226, 1575, 1226, 1226, 1575, 1226, 1226,
     1226, 1226, 1226, 1226, 1405, 1405, 1575, 1405, 1405, 1575,
     1405, 1405, 1575, 1405, 1405, 1405, 1405, 1405, 1405, 1234,
     1234, 1575, 1234, 1234, 1575, 1234, 1234, 1575, 1234, 1234,
     1234, 1234, 1234, 1234,  728,  728, 1575,  728, 1575, 1575,
      728,  728, 1575, 1575,  728,  728,  728,  728,  728, 1413,
     1413, 1575, 1413, 1413, 1575, 1413, 1413, 1575, 1413, 1413,

     1413, 1413, 1413, 1413, 1241, 1241, 1575, 1241, 1241, 1575,
     1241, 1241, 1575, 1241, 1241, 1241, 1241, 1241, 1241, 1249,
     1249, 1575, 1249, 1249, 1575, 1249, 1249, 1575, 1249, 1249,
     1249, 1249, 1249, 1249, 1257, 1257, 1575, 1257, 1575, 1575,
     1257, 1257, 1575, 1575, 1257, 1257, 1257, 1257, 1257, 1425,
     1425, 1575, 1425, 1575, 1575, 1425, 1575, 1575, 1575, 1425,
     1425, 1425, 1425, 1425, 1263, 1263, 1575, 1263, 1575, 1575,
     1263, 1575, 1575, 1575, 1263, 1263, 1263, 1263, 1263, 1440,
     1440, 1575, 1440, 1440, 1440, 1440, 1440, 1575, 1440, 1440,
     1440, 1440, 1440, 1440, 1293, 1293, 1575, 1293, 1293, 1293,

     1293, 1293, 1575, 1293, 1293, 1293, 1293, 1293, 1293, 1449,
     1449, 1575, 1449, 1449, 1449, 1449, 1449, 1575, 1449, 1449,
     1449, 1449, 1449, 1449, 1301, 1301, 1575, 1301, 1301, 1301,
     1301, 1301, 1575, 1301, 1301, 1301, 1301, 1301, 1301,  826,
      826, 1575,  826, 1575,  826,  826,  826, 1575, 1575,  826,
      826,  826,  826,  826, 1457, 1457, 1575, 1457, 1457, 1457,
     1457, 1457, 1575, 1457, 1457, 1457, 1457, 1457, 1457, 1308,
     1308, 1575, 1308, 1308, 1308, 1308, 1308, 1575, 1308, 1308,
     1308, 1308, 1308, 1308, 1316, 1316, 1575, 1316, 1316, 1316,
     1316, 1316, 1575, 1316, 1316, 1316, 1316, 1316, 1316, 1324,

     1324, 1575, 1324, 1575, 1324, 1324, 1324, 1575, 1575, 1324,
     1324, 1324, 1324, 1324, 1469, 1469, 1575, 1469, 1575, 1469,
     1469, 1575, 1575, 1575, 1469, 1469, 1469, 1469, 1469, 1330,
     1330, 1575, 1330, 1575, 1330, 1330, 1575, 1575, 1575, 1330,
     1330, 1330, 1330, 1330, 1355, 1355, 1355, 1355, 1355, 1575,
     1355, 1355, 1575, 1355, 1575, 1575, 1355, 1355, 1355, 1575,
     1355, 1575, 1575, 1355, 1363, 1363, 1363, 1363, 1363, 1575,
     1363, 1363, 1575, 1363, 1575, 1575, 1363, 1363, 1363, 1575,
     1363, 1575, 1575, 1363, 1384, 1384, 1384, 1384, 1384, 1575,
     1384, 1384, 1575, 1384, 1575, 1575, 1384, 1384, 1384, 1575,

     1384, 1575, 1575, 1384, 1396, 1396, 1575, 1396, 1396, 1575,
     1396, 1396, 1575, 1396, 1396, 1396, 1396, 1396, 1396, 1405,
     1405, 1575, 1405, 1405, 1575, 1405, 1405, 1575, 1405, 1405,
     1405, 1405, 1405, 1405, 1413, 1413, 1575, 1413, 1413, 1575,
     1413, 1413, 1575, 1413, 1413, 1413, 1413, 1413, 1413, 1487,
     1487, 1487, 1487, 1487, 1575, 1487, 1487, 1575, 1487, 1575,
     1575, 1487, 1487, 1487, 1575, 1487, 1575, 1575, 1487, 1494,
     1494, 1494, 1494, 1494, 1575, 1494, 1494, 1575, 1494, 1575,
     1575, 1494, 1494, 1494, 1575, 1494, 1575, 1575, 1494, 1501,
     1501, 1501, 1501, 1501, 1575, 1501, 1501, 1575, 1501, 1575,

     1575, 1501, 1501, 1501, 1575, 1501, 1575, 1575, 1501, 1508,
     1508, 1508, 1508, 1508, 1575, 1508, 1508, 1575, 1508, 1575,
     1575, 1508, 1508, 1508, 1575, 1508, 1575, 1575, 1508, 1514,
     1514, 1514, 1514, 1514, 1575, 1514, 1514, 1575, 1514, 1575,
     1575, 1514, 1514, 1514, 1575, 1514, 1575, 1575, 1514, 1553,
     1553, 1553, 1553, 1553, 1575, 1553, 1553, 1575, 1553, 1575,
     1575, 1553, 1553, 1553, 1575, 1553, 1575, 1575, 1553, 1561,
     1561, 1561, 1561, 1561, 1575, 1561, 1561, 1575, 1561, 1575,
     1575, 1561, 1561, 1561, 1575, 1561, 1575, 1575, 1561,   27,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575
    } ;

static const flex_int16_t yy_chk[10261] =
    {   0,
        0,    0,    1,    1,    1,    2,    2,    2,   11,   11,
       12,   12,   32,  138,   36,   32,  138,   36,   32,   38,
       36,    0,   38,   32,    1,   36,   45,    2,   45,   45,
       45,   38,   32,   38,   36,   38,   38,   38,   46,  114,
      114,   46,   66,   66,   66,   60,  131,  131,   60,    0,
      125,  136,  136,  125,   46,   46,   46,   60,    0,   60,
       46,   60,   60,   60,  125,  156,  156,    1,    1,    1,
        2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    9,    9,    9,    9,   28,   28,   28,
        9,  163,    9,    9,    9,    9,  584,    9,    9,   33,

      584,   33,   33,   33,   34,    9,   34,   34,   34,   35,
     1214,   35,   35,   35,   67,   61, 1215,    9,    9,    9,
       70,   70,   88,   61,  163,   88,   67,   48,   61,   48,
       48,   48,   61,   70, 1216,   70,   70,   70,  101,   48,
      370,  101,  370,   67, 1217,    9,   61,    9,    9,    9,
        9,    9,   10,   10,   10,   10,   48,   88,  379,   10,
     1218,   10,   10,   10,   10,  195,   10,   10,  195, 1219,
       80,  379,   68,  101,   10,   61,   61,   61,  128,  168,
       68,  128,   80,  168,  168,   68,   10,   10,   10,   68,
      127,  127,  127,  205,  132,   42,  205,  132,   69,   80,

      128,   42, 1220,   68,   69,   42,  296,  296,   69,   69,
       69,   69,  206,  206,   10,  206,   10,   10,   10,   10,
       10,   13,   13,   13,   13,   42,   13,  167,   42,  132,
       42,  167,   68,   68,   68,  167,   75,  299,   76,   75,
      299,  129,   42,  129,  129,  129,   76, 1221,   75,   42,
       75,   76,   75,   75,   75,   76,   13, 1222,   69,   69,
       69,   79,  135,  135,   79,  143,  143,  143,  144,   76,
      144,  144,  144,  254,  254,   79,  254,   79,   79,   79,
      152,  152,  152,   79,  135,   13,   13,   13,   13,   13,
       14,   14,   14,   14, 1223,   14,   83,   83,   76,   76,

       76,  145,  171,  145,  145,  145,  192,  192,  192,   83,
      383,   83,   83,   83,  146,  383,  146,  146,  146, 1224,
      149,  300,  300,  149,  300,   14,  149,  193,  193,  193,
      153,  149,  153,  153,  153,  154, 1225,  154,  154,  154,
      149,  158, 1229,  158,  158,  158,  203,  203,  203,  171,
      171,  171,  311,  311,   14,   14,   14,   14,   14,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   17,
       17,   17,   17,  126,  155,  295, 1230,  155,  295,  126,
      155, 1231,   81,  126,  157,  155,  314,  157,  344,  314,
       81,  344,   17, 1232,  155,   81,  157, 1233,  157,   81,
      157,  157,  157,  126,   17,   82,  126,   17,  126,  346,
      295,   82,  346,   81, 1237,   82,   82,   82,   82,  160,
      126,  160,  160,  160,  208,  208, 1238,  126,  208,  159,
      173,  160,  159,   17,   17,   17,   17,   17,   18,   18,

       18,   18,   81,   81,   81,  159,  159,  159,  160, 1239,
      174,  159,  194, 1244,  194,  194,  194,  215,  215,  215,
      173,   18,  173,  215,  194,   82,   82,   82,  214, 1245,
      214,  214,  214,   18,  324,  324,   18,  173,  173,  173,
      174,  194,  201, 1246,  201,  176,  201,  201,  201,  178,
      218,  335,  218,  218,  218,  335,  335,  174,  174,  174,
      342,  342,   18,   18,   18,   18,   18,   19,  175,  176,
       19,  315,  315,   19,  315,   19,   19,  178,  187,   19,
       19,   19,   19,   19,   19,   19,  180, 1247,  175,  177,
       19, 1248,  176,  176,  176,  175,  178,  178,  178,  350,

      350,  175,   19,  179,   19,   21,   21,   21,   21,  181,
       21,  180,  182,  187,  628,  175,  175,  175,  185,  177,
      177,  177,  628,  179, 1252,  187,  187,  187, 1253,  181,
      352,  352,  182,  180,  180,  180,  177,  177,  177, 1254,
       21,  333,  185,  184,  333,  182,  353,  183, 1255,  353,
      179,  179,  179, 1256,  186,  333,  181,  181,  181,  182,
      182,  182,  219,  219,  219,  185,  185,  185,  188,   21,
       21,   21,   21,   21,   22,   22,   22,   22,  184,   22,
      183,  184,  186,  234,  234,  234, 1260,  186,  362,  362,
      184,  184,  184, 1261,  183,  183,  183,  242,  242,  242,

      188,  186,  186,  186,  264,  264,  264, 1262,  196,   22,
      196,  196,  196,  363,  363,  188,  188,  188, 1264,  199,
      196,  199,  199,  199,  216, 1265,  216,  216,  216, 1266,
      222,  199,  222,  222,  222, 1267,  216,  196,   22,   22,
       22,   22,   22,   23,   23,   23,   23,  213,  199, 1268,
      213,  303,  303,  216,  334,  303,  221,  334, 1269,  213,
      217,  213, 1270,  213,  213,  213,   23,  220,  217,  221,
      272,  272,  272,  217, 1271,  220,  334,  217,   23, 1272,
      220,   23,  226,  255,  220,  255,  255,  255,  280,  280,
      280,  217,  226,  226,  226,  604,  604,  226,  220,  259,

     1273,  259,  259,  259,  329,  329,  329,   23,   23,   23,
       23,   23,   24,   24,   24,   24,  221,  221,  221,  286,
      217,  217,  217,  345,  345,  227,  345,  220,  220,  220,
     1274,  310, 1275,  227,  310,   24,  327, 1276,  227,  239,
      286,  239,  227,  239,  239,  239,  258,   24,  327,  258,
       24,  260,  286,  239,  260,  327,  227, 1277,  258,  286,
      258, 1278,  258,  258,  258,  260,  310,  260,  260,  260,
      239,  381, 1279,  260,  381,  266,   24,   24,   24,   24,
       24,   25,   25,   25,   25,  227,  227,  227,  266,   25,
      261, 1280,  261,  261,  261, 1281,  372,   25,   25,   25,

      240,  425,  261,  372,  425,   25,   25,   25,  240,  372,
      317,  317, 1282,  240,  317,  591,  591,  240,  591,  261,
       25,   25,   25,   25,   25,   25,   26,   26,   26,   26,
      592,  240, 1283,  592,   26,  266,  266,  266,  330,  330,
      330, 1284,   26,   26,   26,  337, 1285,  337,  337,  337,
       26,   26,   26,  338,  338,  338,  341,  605,  605,  341,
      240,  240,  240,  617,  617,   26,   26,   26,   26,   26,
       26,   43,  426,  426,   43,   43,  426,  339,   43,  339,
      339,  339,   43,   43,  624,  624,   43,   43,   43,   43,
       43,  341,   43,   43, 1286,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,  349,   43,  349,  349,  349,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43, 1287,  355,  355,  355, 1288,   43,   43,   43,
       53,   53,   53,  355,  356, 1289,  241,  585,  356,  356,
      356,  585,  585,  366,  241,   53,   53,  243, 1290,  241,
      355,  597,  597,  241,  597,  243,  374,  374,  374, 1291,
      243,  412,  412,  412,  243,  883,  883,  241,   53,   53,
      417, 1292,   53,   53,  417,  417,  417, 1296,  243,  598,
       53,  611,  598,   53,  611,   53, 1297,   53,   53,   62,

      366,  366,  366,  884,  884,   62,  241,  241,  241,   62,
       62,   62,   62,   62,   62,  889,  889,  243,  243,  243,
      247,  393,   62,   62,   62,   62,   62,  262,  247,   62,
      263, 1298,   62,  247,   62,  262,  631,  247,  263,  631,
      262, 1299,  265,  263,  262, 1300,   62,  263,  386,  393,
      265,  247, 1304,   62,   64,  265, 1305,  393,  262,  265,
      387,  263,   64, 1306,   64,   64,   64,   64,  393,  393,
      393,   64, 1311,  265,  422,  422,  422, 1312,  386, 1313,
      247,  247,  247,  387, 1314,   64, 1315,  262,  262,  262,
      263,  263,  263,  267,  392,  386,  386,  386,  424,  424,

      424,  267,  265,  265,  265,  271,  267,  387,  387,  387,
      267,  388, 1319,  271,   64,   64,   64,   78,  271,  392,
     1320, 1321,  271,  390,  267,   78,  389,   78,   78,   78,
       78, 1322, 1323,  277,   78,  277,  271,  277,  277,  277,
     1327,  392,  392,  392,  388,  421, 1328,  277,   78,  421,
      421,  421, 1329,  267,  267,  267,  390, 1331,  388,  388,
      388, 1332,  389,  389,  277,  271,  271,  271, 1333, 1334,
      390,  390,  390,  389,  389,  389, 1335,   78,   78,   78,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,

       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
      105,  105,  105, 1336,  105,  593,  593,  105, 1337,  593,
      278,  610,  610,  279,  610,  105,  105,  391,  278, 1338,
     1342,  279, 1343,  278,  599,  599,  279,  278,  599,  394,
      279,  430,  430,  430,  105, 1344, 1346,  105,  105,  105,
     1348,  278,  105,  105,  279, 1350,  638,  391, 1351,  638,

      105, 1352, 1353,  105, 1358,  105,  638,  105,  105,  115,
      115,  115, 1359,  394,  391,  391,  391,  115,  115,  115,
      278,  278,  278,  279,  279,  279,  394,  394,  394, 1360,
     1366,  397,  115,  115,  115,  115,  115,  115,  122,  395,
      122,  122,  400,  281,  122,  122,  285, 1367,  122,  122,
      122,  281, 1368, 1387,  285,  122,  281, 1388, 1389,  285,
      281, 1390,  395,  285, 1391,  396,  122,  432,  397,  122,
      402,  432,  432,  432,  281,  399, 1392,  285,  397,  397,
      397, 1393, 1394,  400, 1395, 1399,  395,  395,  395,  400,
      400,  400,  401,  122,  123,  123,  123,  396,  123, 1400,

      396,  123,  402,  281,  281,  281,  285,  285,  285,  123,
      123,  399,  396,  396,  396,  401,  123,  402,  402,  402,
     1401, 1402,  399,  399,  399,  440,  440,  440,  123, 1403,
     1404,  123,  123,  123, 1408,  670,  123,  123,  670,  401,
      401,  401, 1409, 1410,  123,  670, 1411,  123, 1412,  123,
     1416,  123,  123,  172,  172,  172,  172,  172,  172,  172,
     1417,  172, 1418,  172,  172,  172,  172, 1419,  172,  172,
      172,  172,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198, 1420,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,

      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  235,  423,  404,  423,  423,  423,  405, 1421,
      235, 1422,  235,  235,  235,  235,  449,  449,  449,  235,
      408, 1423,  235,  407, 1424, 1426,  403,  292, 1427,  403,
      470,  470,  470,  235, 1428,  292,  403, 1429, 1430,  235,
      292,  404,  405, 1431,  292,  403, 1432, 1433,  406, 1434,
     1435,  404,  404,  404,  407,  405,  405,  405,  292,  466,

     1436,  408,  235,  235,  235,  237,  409,  408,  408,  408,
      407,  407,  407,  237,  476,  237,  237,  237,  237, 1437,
      406,  892,  237, 1438,  892,  237, 1439,  292,  292,  292,
     1443,  892,  403,  403,  403,  406,  406,  406,  479,  479,
      479, 1444,  237,  409, 1445, 1446,  466,  466,  466,  489,
      489,  489, 1447,  409,  409,  409,  494,  494,  494, 1448,
     1452,  476,  476,  476, 1453,  237,  237,  237,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238, 1454,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,

      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  249, 1455,
     1456,  415, 1460,  415,  415,  415,  249, 1461,  249,  249,
      249,  249, 1462,  415,  419,  249,  419,  419,  419,  510,
      510,  510,  893,  433,  903,  893,  419,  903, 1463,  249,
      415,  433,  893,  434,  903,  915,  433, 1464,  915,  435,
      433,  434, 1465,  419, 1466,  915,  434,  435, 1467,  436,
      434, 1468,  435, 1470,  433,  447,  435,  436,  249,  249,

      249,  273,  436, 1471,  434, 1472,  436, 1473,  447,  273,
      435,  273,  273,  273,  273,  520,  520,  520,  273, 1474,
      436,  273, 1475,  433,  433,  433,  447, 1476, 1477,  441,
     1479, 1481,  273,  434,  434,  434, 1483,  441,  273,  435,
      435,  435,  441, 1490,  917,  471,  441,  917, 1491,  436,
      436,  436, 1492,  480,  917,  447,  447,  447,  471, 1497,
      441,  273,  273,  273,  275,  465,  480,  465, 1498,  465,
      465,  465,  275,  544,  275,  275,  275,  275, 1499,  465,
     1504,  275, 1505,  485,  275,  485,  485,  485,  512,  441,
      441,  441,  512,  512,  512,  485,  465,  529,  529,  529,

     1506,  275,  548,  548,  548,  471,  471,  471,  557,  557,
      557, 1511,  485,  480,  480,  480,  567,  567,  567, 1512,
      544,  544,  544, 1513,  275,  275,  275,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276, 1517,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  287,  572,  572,

      572, 1518, 1519,  442, 1522,  287, 1523,  287,  287,  287,
      287,  442, 1524,  443,  287,  919,  442, 1525,  919,  457,
      442,  443,  603,  603,  603,  919,  443,  457,  287,  554,
      443, 1526,  457,  549,  442,  543,  457,  543, 1527,  543,
      543,  543, 1528, 1529,  443,  930,  549,  472,  930,  543,
      457,  472,  472,  472,  472,  930, 1530,  287,  287,  287,
      325,  325,  325,  442,  442,  442,  543, 1531,  325,  325,
      325, 1532, 1533,  443,  443,  443,  554,  554,  554,  457,
      457,  457, 1534,  325,  325,  325,  325,  325,  325,  365,
      365,  365, 1535,  549,  549,  549, 1536,  365,  365,  365,

     1537,  472,  472,  472,  481,  609,  609,  609,  481,  481,
      481,  481,  365,  365,  365,  365,  365,  365,  398,  398,
      398,  398,  398, 1538,  398,  398, 1539,  398,  398,  398,
      613, 1540,  398,  398,  613,  613,  613, 1541,  398,  398,
     1542,  614,  398,  614, 1543,  614,  614,  614,  680,  680,
      680, 1544, 1545,  398, 1546,  398,  398,  398,  481,  481,
      481,  681, 1547,  681, 1548,  681,  681,  681,  683, 1549,
      683,  684,  683,  683,  683,  684,  684,  684, 1556, 1557,
      398,  398,  398,  398,  398,  398,  398,  398,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,

      413,  413,  413, 1558,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  431,  685,
     1564,  685,  685,  685, 1565, 1566,  458, 1567,  431,  431,
      431,  431,  459, 1568,  458,  431, 1569,  468,  431,  458,
      459, 1570, 1571,  458,  563,  459,  563,  563,  563,  459,
      468,  688,  688,  688,  468,  431,  563,  458,  487,  708,

      708,  708,  728,  459,  546, 1572,  487,  712,  712,  712,
     1573,  487, 1574,  563, 1213,  487, 1598,  546,  431,  431,
      431,  546, 1598,  488, 1618, 1212,  458,  458,  458,  487,
     1618,  488,  459,  459,  459,  463,  488,  468,  468,  468,
      488,  734, 1211,  463, 1210,  463,  463,  463,  463,  728,
      728,  728,  463,  735,  488,  463, 1619, 1630,  487,  487,
      487,  490, 1619, 1630,  546,  546,  546, 1676, 1209,  490,
     1208, 1207,  463, 1676,  490,  729,  729,  729,  490,  733,
      733,  733, 1206,  488,  488,  488,  500, 1726,  734,  734,
      734,  558,  490, 1726,  500,  463,  463,  463,  464,  500,

      735,  735,  735,  500,  558, 1205,  464, 1203,  464,  464,
      464,  464,  737,  737,  737,  464, 1202,  500,  464, 1201,
     1190,  490,  490,  490,  501,  742,  742,  742, 1633,  464,
     1633, 1189,  501, 1188, 1633,  464, 1178,  501,  754,  754,
      754,  501,  766,  766,  766, 1177,  500,  500,  500,  502,
     1176,  558,  558,  558, 1171,  501, 1170,  502,  464,  464,
      464,  469,  502,  786,  786,  786,  502, 1169, 1160,  469,
     1158,  469,  469,  469,  469,  806,  806,  806,  469,  826,
      502,  469, 1157, 1156,  501,  501,  501,  513,  750,  750,
      750,  750,  469, 1154, 1153,  513, 1595, 1151,  469, 1595,

      513,  810,  810,  810,  513, 1595,  751,  751,  751,  502,
      502,  502,  514,  827,  827,  827,  751, 1150,  513, 1149,
      514,  469,  469,  469,  478,  514,  826,  826,  826,  514,
     1148, 1145,  478,  751,  478,  478,  478,  478,  750,  750,
      750,  478, 1144,  514,  478,  515, 1143,  513,  513,  513,
     1673,  516, 1673,  515, 1622,  478, 1673, 1622,  515,  516,
     1142,  478,  515, 1622,  516,  679, 1141,  679,  516,  679,
      679,  679,  514,  514,  514, 1674,  515, 1674, 1140,  679,
     1672, 1674,  516, 1672,  478,  478,  478,  486,  682, 1672,
      682, 1139,  682,  682,  682,  486,  679,  486,  486,  486,

      486, 1138,  682, 1137,  486,  515,  515,  515,  521, 1136,
     1135,  516,  516,  516,  522, 1134,  521, 1133,  486,  682,
     1132,  521,  522, 1131,  523,  521, 1130,  522,  831,  831,
      831,  522,  523,  527,  835,  835,  835,  523, 1129,  521,
     1128,  523,  840,  840,  840,  522,  527,  486,  486,  486,
      506,  852,  852,  852, 1126,  523,  955, 1124,  506,  955,
      506,  506,  506,  506,  527, 1123,  955,  506,  521,  521,
      521,  864,  864,  864,  522,  522,  522,  756,  756,  756,
     1122,  506, 1118,  535,  523,  523,  523,  756,  832, 1147,
     1117,  535, 1147,  527,  527,  527,  535, 1116,  645, 1147,

      535,  645, 1109, 1108,  756,  849,  849,  849,  645, 1107,
      506,  506,  506,  511,  535,  849, 1101,  645,  706, 1099,
     1098,  536, 1097,  511,  511,  511,  511, 1096, 1095,  536,
      511,  706,  849,  511,  536,  832,  832,  832,  536, 1092,
      537, 1091, 1090,  535,  535,  535, 1089, 1088,  537,  706,
      511, 1087,  536,  537,  550, 1086, 1084,  537,  550,  550,
      550,  550, 1083,  559,  645,  645,  645,  559,  559,  559,
      559,  537, 1082,  511,  511,  511,  565, 1080,  706,  706,
      706,  536,  536,  536,  565,  646,  833, 1079,  646,  565,
      973,  973,  973,  565, 1078,  646, 1077, 1076,  921,  707,

      537,  537,  537,  541,  646, 1074, 1073,  565,  550,  550,
      550,  541,  707,  541,  541,  541,  541,  559,  559,  559,
      541,  933,  651,  541, 1072,  651, 1071,  921, 1070, 1069,
      707,  566,  651,  833,  833,  833,  565,  565,  565,  566,
      541,  651, 1068, 1067,  566,  921,  921,  921,  566, 1066,
      687,  646,  646,  646,  687,  687,  687,  687,  933,  707,
      707,  707,  566,  541,  541,  541,  542, 1065,  933,  933,
      933,  651,  922, 1064,  542, 1062,  542,  542,  542,  542,
      985,  985,  985,  542, 1061, 1060,  542, 1059,  651,  651,
      651,  566,  566,  566,  568, 1058,  923,  542,  991,  991,

      991,  578,  568,  542,  687,  687,  687,  568,  922,  578,
     1057,  568,  647, 1056,  578,  647, 1055, 1054,  578,  922,
      922,  922,  647,  923, 1049,  568,  542,  542,  542,  547,
     1048,  647,  578,  755,  755,  755,  755,  547, 1047,  547,
      547,  547,  547,  923,  923,  923,  547, 1046,  656,  547,
     1045,  656, 1044,  647,  568,  568,  568,  579,  656,  938,
      547,  578,  578,  578,  580,  579,  547,  656, 1043, 1042,
      579, 1041,  580,  934,  579, 1040, 1039,  580,  647,  647,
      647,  580, 1038,  755,  755,  755, 1036, 1034,  579,  547,
      547,  547,  556, 1033, 1032,  580,  926,  934,  762, 1028,

      556, 1027,  556,  556,  556,  556,  938,  938,  938,  556,
     1026,  762,  556, 1019,  656,  656,  656,  579,  579,  579,
      934,  934,  934,  556,  580,  580,  580,  648,  926,  556,
      648, 1018,  649, 1017, 1011,  649, 1009,  648,  650, 1008,
     1007,  650,  649,  926,  926,  926,  648, 1006,  650, 1005,
     1002,  649,  556,  556,  556,  564, 1001,  650,  762,  762,
      762,  690, 1000,  564,  999,  564,  564,  564,  564,  690,
      648,  998,  564,  649,  690,  997,  996,  652,  690,  994,
      652,  854,  854,  854,  993,  992,  564,  652,  990,  989,
      650,  854,  690,  648,  648,  648,  652,  988,  649,  649,

      649,  995,  995,  995,  650,  650,  650,  738,  854,  987,
      986,  738,  738,  738,  738,  564,  564,  564,  587,  984,
      983,  690,  690,  690,  652,  982,  587,  981,  587,  587,
      587,  587,  785,  980,  746,  587,  785,  785,  785,  785,
      804,  979,  978,  652,  652,  652,  977,  746,  653,  587,
      976,  653,  975,  804, 1155,  974,  654, 1155,  653,  654,
      972,  738,  738,  738, 1155,  746,  654,  653, 1012, 1012,
     1012,  804,  971,  970,  655,  654,  969,  655,  587,  587,
      587,  607,  607,  607,  655,  968,  785,  785,  785,  607,
      607,  607,  653,  655,  746,  746,  746,  967,  966,  654,

      804,  804,  804,  965,  607,  607,  607,  607,  607,  607,
      618,  618,  618,  964,  653,  653,  653,  952,  618,  618,
      618,  951,  654,  654,  654, 1037, 1037, 1037,  950,  657,
      655,  924,  657,  618,  618,  618,  618,  618,  618,  657,
      655,  655,  655,  658,  943,  942,  658,  659,  657,  941,
      659,  661,  916,  658,  661,  914,  958,  659,  958,  958,
      958,  661,  658, 1063, 1063, 1063,  659,  924,  657,  913,
      661,  912, 1166,  666,  911, 1166,  666,  910,  924,  924,
      924,  672, 1166,  666,  672,  959,  909,  959,  959,  959,
      908,  672,  666,  659,  907,  657,  657,  657,  658,  836,

      672,  906,  905,  836,  836,  836,  836,  904,  902,  658,
      658,  658,  901,  659,  659,  659,  900,  661,  661,  661,
      662,  662,  662,  662,  662,  662,  662,  899,  662,  666,
      662,  662,  662,  662,  672,  662,  662,  662,  662,  666,
      666,  666,  667,  898,  897,  667,  896,  672,  672,  672,
      895,  929,  667,  836,  836,  836, 1075, 1075, 1075,  894,
      891,  667,  669,  888,  882,  669, 1081, 1081, 1081,  881,
      676,  880,  669,  676,  674, 1168, 1174,  674, 1168, 1174,
      676,  669,  667,  860,  674, 1168, 1174,  677,  879,  676,
      677,  878,  929,  674,  877,  876,  860,  677,  929,  929,

      929, 1085, 1085, 1085,  872,  669,  677,  871,  667,  667,
      667,  668,  668,  668,  668,  668, 1168,  668,  668,  674,
      668,  668,  668,  936,  870,  668,  668,  869,  669,  669,
      669,  668,  668,  868,  677,  668,  676,  676,  676,  867,
      674,  674,  674,  860,  860,  860,  668,  936,  668,  668,
      668,  945,  866,  677,  677,  677,  848,  848,  848,  848,
      865,  668,  863,  932, 1102, 1102, 1102, 1127, 1127, 1127,
      936,  936,  936,  668,  668,  668,  668,  668,  668,  668,
      668,  673,  673,  673,  673,  673,  862,  673,  673,  945,
      673,  673,  673,  932,  675,  673,  673,  675,  945,  945,

      945,  673,  673,  861,  675,  673,  848,  848,  848,  691,
      932,  932,  932,  675,  851,  850,  673,  691,  673,  673,
      673,  689,  691,  847,  846,  673,  691,  845,  843,  689,
      842,  689,  689,  689,  689,  841,  839,  675,  689,  838,
      691,  837,  830,  673,  673,  673,  673,  673,  673,  673,
      673, 1259, 1259, 1259, 1164,  692, 1172, 1164,  829, 1172,
      675,  675,  675,  692, 1164,  828, 1172,  698,  692,  691,
      691,  691,  692,  824,  823,  698,  822,  699,  821,  820,
      698,  689,  689,  689,  698,  699,  692,  700,  816,  815,
      699,  814,  813,  719,  699,  700,  812, 1164,  698, 1172,

      700,  719, 1179,  811,  700, 1179,  719,  809,  699,  947,
      719,  808, 1179,  720,  807,  692,  692,  692,  700,  803,
      802,  720, 1181,  801,  719, 1181,  720,  698,  698,  698,
      720,  940, 1181,  721, 1263, 1263, 1263,  699,  699,  699,
      953,  721, 1182,  800,  720, 1182,  721,  700,  700,  700,
      721,  940, 1182,  719,  719,  719,  947,  947,  947,  757,
      853,  853,  853,  853,  721,  799,  795,  757,  794,  758,
      953,  793,  757,  720,  720,  720,  757,  758,  940,  940,
      940,  792,  758,  791,  761,  784,  758,  953,  953,  953,
      757, 1182,  761,  721,  721,  721,  727,  761,  782,  781,

      758,  761,  949,  780,  727,  779,  727,  727,  727,  727,
      853,  853,  853,  727,  778,  761,  727,  774,  773,  757,
      757,  757,  949,  772,  759,  771,  770,  727,  769,  758,
      758,  758,  759,  727,  759,  759,  759,  759, 1326, 1326,
     1326,  759,  768,  767,  761,  761,  761,  775,  765,  949,
      949,  949,  805,  764,  763,  775,  727,  727,  727,  736,
      775,  753,  752, 1183,  775,  805, 1183,  736,  957,  736,
      736,  736,  736, 1183,  749,  748,  736,  747,  775,  736,
      776,  745,  744,  805,  759,  759,  759,  777,  776, 1184,
      736, 1186, 1184,  776, 1186,  777,  736,  776,  957, 1184,

      777, 1186,  743,  741,  777,  740,  739,  775,  775,  775,
      732,  776,  805,  805,  805,  957,  957,  957,  777,  736,
      736,  736,  760,  731, 1021, 1021, 1021, 1021, 1191,  730,
      760, 1191,  760,  760,  760,  760,  726,  725, 1191,  760,
      776,  776,  776, 1184,  787,  724,  723,  777,  777,  777,
      788,  722,  787,  760,  787,  787,  787,  787,  788, 1192,
      789,  787, 1192,  788, 1330, 1330, 1330,  788,  789, 1192,
     1425, 1425, 1425,  789, 1021, 1021, 1021,  789, 1469, 1469,
     1469,  788,  760,  760,  760,  783,  718,  717,  716, 1193,
      715,  789, 1193,  783,  714,  783,  783,  783,  783, 1193,

      790,  713,  783,  711,  787,  787,  787,  710,  790,  709,
      788,  788,  788,  790, 1192,  705,  783,  790,  704,  796,
      789,  789,  789,  703,  702,  797,  701,  796,  697,  696,
      695,  790,  796,  797, 1195,  798,  796, 1195,  797,  694,
      693,  817,  797,  798, 1195,  783,  783,  783,  798,  817,
      796,  818,  798,  686,  817,  678,  797,  819,  817,  818,
      790,  790,  790,  844,  818,  819,  798,  665,  818,  664,
      819,  663,  817,  644,  819,  643,  844,  642,  641,  796,
      796,  796,  818,  640,  639,  797,  797,  797,  819, 1199,
     1195,  637, 1199,  636,  844,  798,  798,  798,  635, 1199,

      634,  817,  817,  817, 1196, 1340, 1197, 1196, 1340, 1197,
      632,  818,  818,  818, 1196, 1340, 1197,  819,  819,  819,
      825,  630,  629,  844,  844,  844, 1345,  627,  825, 1345,
      825,  825,  825,  825,  626,  625, 1345,  825,  623,  622,
      825,  621,  620,  619, 1347,  855,  615, 1347,  856, 1197,
      602,  825,  601,  855, 1347,  859,  856,  825,  855,  596,
     1196,  856,  855,  859, 1349,  856,  595, 1349,  859,  590,
      589,  588,  859,  586, 1349, 1356,  855,  583, 1356,  856,
      825,  825,  825,  834,  582, 1356,  859, 1361,  581,  577,
     1361,  834,  576,  834,  834,  834,  834, 1361,  575, 1003,

      834,  574,  573,  834,  571,  855,  855,  855,  856,  856,
      856,  857, 1003,  570,  834,  859,  859,  859,  873,  857,
      834,  857,  857,  857,  857,  569,  873,  562,  857,  561,
     1003,  873,  560,  874,  555,  873,  553,  552,  551,  875,
      545,  874,  540,  834,  834,  834,  874,  875,  928,  873,
      874,  928,  875,  539,  538,  534,  875,  533,  928, 1003,
     1003, 1003,  532,  531,  874, 1364, 1372,  928, 1364, 1372,
      875,  857,  857,  857,  858, 1364, 1372,  530,  873,  873,
      873,  528,  858,  526,  858,  858,  858,  858,  525,  524,
      519,  858,  518,  874,  874,  874,  517,  509,  508,  875,

      875,  875,  507,  944,  505,  858,  944, 1370,  504,  503,
     1370,  499,  961,  944,  928,  928,  928, 1370, 1374,  498,
      961, 1374,  944,  497,  496,  961,  495, 1004, 1374,  961,
      493,  492,  491, 1035,  858,  858,  858,  887,  484,  483,
     1004,  482,  477,  961,  962,  887, 1035,  887,  887,  887,
      887,  475,  962, 1093,  887,  474,  473,  962, 1004,  467,
      462,  962,  461, 1370, 1035,  460, 1093,  454,  887,  944,
      944,  944,  961,  961,  961,  962, 1375,  453, 1374, 1375,
     1378,  452, 1383, 1378, 1093, 1383, 1375, 1004, 1004, 1004,
     1378,  451, 1383, 1035, 1035, 1035,  450,  887,  887,  887,

      890,  890,  890,  448,  962,  962,  962,  446,  890,  890,
      890,  445,  444, 1093, 1093, 1093,  439,  438,  437,  429,
      428, 1094,  411,  890,  890,  890,  890,  890,  890,  925,
      925,  925,  925,  925, 1094,  925,  925,  410,  925,  925,
      925,  385,  384,  925,  925,  382,  380,  378, 1380,  925,
      925, 1380, 1094,  925,  377,  376, 1125,  375, 1380,  373,
     1385,  371, 1486, 1385,  925, 1486,  925,  925,  925, 1125,
     1385,  369, 1486,  925, 1111, 1111, 1111, 1111,  368,  367,
      361, 1094, 1094, 1094,  360,  340,  336, 1125,  321,  320,
      308,  925,  925,  925,  925,  925,  925,  925,  925,  927,

      927,  927,  927,  927, 1380,  927,  927,  307,  927,  927,
      927,  294, 1488,  927,  927, 1488, 1125, 1125, 1125,  927,
      927,  293, 1488,  927, 1111, 1111, 1111,  291,  290, 1495,
     1500,  289, 1495, 1500,  927,  284,  927,  927,  927, 1495,
     1500,  283,  282,  270, 1240, 1240, 1240, 1240, 1307, 1307,
     1307, 1307,  269,  268,  257,  256,  253,  252,  251,  248,
      246,  927,  927,  927,  927,  927,  927,  927,  927,  935,
      935,  935,  935,  935,  245,  935,  935,  244,  935,  935,
      935,  225, 1502,  935,  935, 1502,  224,  223,  212,  935,
      935,  211, 1502,  935, 1240, 1240, 1240,  200, 1307, 1307,

     1307,  191, 1509,  190,  935, 1509,  935,  935,  935,  189,
     1515, 1520, 1509, 1515, 1520, 1257, 1551,  169,  148, 1551,
     1515, 1520,  140,  134,  130,  121, 1551,  119, 1257,  118,
      117,  935,  935,  935,  935,  935,  935,  935,  935,  939,
      939,  939,  939,  939,  939,  939, 1257,  939,  112,  939,
      939,  939,  939,  109,  939,  939,  939,  939,  954,  954,
      954,  954,  954,  108,  954,  954,  107,  954,  954,  954,
      103, 1554,  954,  954, 1554, 1257, 1257, 1257,  954,  954,
     1559, 1554,  954, 1559,   99,   97,  963,   96, 1562,   95,
     1559, 1562,   90,  954,  963,  954,  954,  954, 1562,  963,

       86, 1013,   85,  963,   84,   77,   74,   73,   72, 1013,
       65,   59,   58,   57, 1013,   51,   44,  963, 1013,   40,
      954,  954,  954,  954,  954,  954,  954,  954,  960,   31,
       30,   27, 1013,    0,    0,    0,  960,    0,  960,  960,
      960,  960,    0,    0,    0,  960,  963,  963,  963,    0,
        0,    0, 1014,    0,    0, 1258,    0,    0,    0,  960,
     1014, 1013, 1013, 1013, 1015, 1014,    0, 1016, 1258, 1014,
        0,    0, 1015,    0,    0, 1016,    0, 1015,    0, 1020,
     1016, 1015,    0, 1014, 1016,    0, 1258, 1020,  960,  960,
      960, 1010, 1020,    0,    0, 1015, 1020,    0, 1016, 1010,

        0, 1010, 1010, 1010, 1010,    0,    0,    0, 1010,    0,
     1020,    0, 1014, 1014, 1014, 1258, 1258, 1258, 1324,    0,
        0,    0, 1010,    0, 1015, 1015, 1015, 1016, 1016, 1016,
     1022, 1324,    0,    0,    0,    0,    0, 1023, 1022, 1020,
     1020, 1020, 1325, 1022,    0, 1023,    0, 1022,    0, 1324,
     1023, 1010, 1010, 1010, 1023, 1325,    0,    0, 1025,    0,
        0, 1022,    0,    0, 1029,    0, 1025,    0, 1023,    0,
        0, 1025, 1029, 1325,    0, 1025,    0, 1029, 1324, 1324,
     1324, 1029,    0,    0,    0,    0,    0,    0,    0, 1025,
     1022, 1022, 1022,    0,    0, 1029,    0, 1023, 1023, 1023,

     1024,    0, 1325, 1325, 1325,    0,    0,    0, 1024,    0,
     1024, 1024, 1024, 1024,    0, 1030,    0, 1024, 1025, 1025,
     1025, 1031,    0, 1030, 1029, 1029, 1029, 1051, 1030, 1031,
        0, 1024, 1030,    0, 1031, 1051,    0,    0, 1031,    0,
     1051,    0, 1052,    0, 1051,    0, 1030,    0,    0,    0,
     1052,    0, 1031,    0,    0, 1052,    0,    0, 1051, 1052,
     1024, 1024, 1024,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1052,    0, 1030, 1030, 1030,    0,    0,
        0, 1031, 1031, 1031, 1050,    0,    0, 1051, 1051, 1051,
        0,    0, 1050,    0, 1050, 1050, 1050, 1050,    0, 1053,

        0, 1050, 1052, 1052, 1052, 1103,    0, 1053,    0,    0,
        0,    0, 1053, 1103,    0, 1050, 1053,    0, 1103,    0,
     1104,    0, 1103,    0,    0,    0, 1105,    0, 1104,    0,
     1053,    0,    0, 1104, 1105,    0, 1103, 1104,    0, 1105,
        0,    0,    0, 1105, 1050, 1050, 1050,    0,    0,    0,
        0, 1104,    0,    0,    0,    0,    0, 1105,    0, 1053,
     1053, 1053, 1100,    0,    0, 1103, 1103, 1103,    0,    0,
     1100,    0, 1100, 1100, 1100, 1100,    0, 1106,    0, 1100,
     1104, 1104, 1104, 1110,    0, 1106, 1105, 1105, 1105, 1112,
     1106, 1110,    0, 1100, 1106,    0, 1110, 1112,    0, 1113,

     1110,    0, 1112,    0,    0,    0, 1112, 1113, 1106,    0,
        0,    0, 1113,    0, 1110,    0, 1113,    0,    0,    0,
     1112,    0, 1100, 1100, 1100,    0,    0,    0,    0,    0,
     1113,    0,    0,    0,    0,    0,    0, 1106, 1106, 1106,
     1115,    0,    0, 1110, 1110, 1110,    0,    0, 1115, 1112,
     1112, 1112,    0, 1115,    0,    0,    0, 1115,    0, 1113,
     1113, 1113, 1114,    0,    0,    0,    0,    0, 1119,    0,
     1114, 1115, 1114, 1114, 1114, 1114, 1119,    0, 1120, 1114,
        0, 1119,    0,    0,    0, 1119, 1120,    0,    0,    0,
     1121, 1120,    0, 1114,    0, 1120,    0,    0, 1121, 1119,

     1115, 1115, 1115, 1121,    0,    0,    0, 1121,    0, 1120,
        0,    0,    0,    0,    0,    0,    0,    0, 1226,    0,
        0, 1121, 1114, 1114, 1114,    0, 1226,    0, 1119, 1119,
     1119, 1226,    0,    0,    0, 1226,    0,    0, 1120, 1120,
     1120,    0,    0,    0,    0,    0,    0,    0,    0, 1226,
     1121, 1121, 1121, 1161, 1161, 1161, 1161, 1161,    0, 1161,
     1161,    0, 1161, 1161, 1161,    0,    0, 1161, 1161,    0,
        0,    0,    0, 1161, 1161,    0,    0, 1161, 1226, 1226,
     1226,    0,    0,    0,    0,    0,    0,    0, 1161,    0,
     1161, 1161, 1161,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1162, 1162, 1162, 1162, 1162,    0, 1162,
        0,    0, 1162, 1162, 1162,    0,    0, 1162, 1162,    0,
        0,    0,    0, 1162, 1162,    0,    0, 1162,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1162,    0,
     1162,    0, 1162,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1163, 1163, 1163, 1163, 1163,    0, 1163,

     1163,    0, 1163, 1163, 1163,    0,    0, 1163, 1163,    0,
        0,    0,    0, 1163, 1163,    0,    0, 1163,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1163,    0,
     1163, 1163, 1163,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
        0, 1167,    0, 1167, 1167, 1167, 1167,    0, 1167, 1167,
     1167, 1167, 1204, 1204, 1204, 1204, 1204,    0, 1204, 1204,
        0, 1204, 1204, 1204,    0,    0, 1204, 1204,    0, 1227,

        0,    0, 1204, 1204,    0, 1228, 1204, 1227,    0,    0,
        0,    0, 1227, 1228,    0,    0, 1227, 1204, 1228, 1204,
     1204, 1204, 1228,    0, 1234,    0,    0,    0,    0,    0,
     1227,    0, 1234,    0,    0,    0, 1228, 1234,    0,    0,
        0, 1234,    0,    0, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204,    0,    0,    0, 1234, 1235,    0,    0, 1227,
     1227, 1227, 1236,    0, 1235, 1228, 1228, 1228,    0, 1235,
     1236,    0,    0, 1235,    0, 1236,    0,    0,    0, 1236,
        0, 1241,    0,    0, 1234, 1234, 1234, 1235, 1242, 1241,
        0,    0,    0, 1236, 1241,    0, 1242,    0, 1241,    0,

        0, 1242,    0,    0,    0, 1242,    0,    0,    0,    0,
        0,    0, 1241, 1243,    0,    0, 1235, 1235, 1235, 1242,
     1249, 1243, 1236, 1236, 1236,    0, 1243,    0, 1249,    0,
     1243,    0,    0, 1249,    0,    0,    0, 1249,    0, 1250,
        0, 1241, 1241, 1241, 1243, 1251,    0, 1250, 1242, 1242,
     1242, 1249, 1250, 1251,    0, 1293, 1250,    0, 1251,    0,
        0,    0, 1251, 1293,    0,    0,    0,    0, 1293,    0,
     1250, 1294, 1293, 1243, 1243, 1243, 1251, 1295,    0, 1294,
     1249, 1249, 1249,    0, 1294, 1295, 1293,    0, 1294,    0,
     1295,    0,    0,    0, 1295,    0, 1301,    0,    0, 1250,

     1250, 1250, 1294,    0, 1301, 1251, 1251, 1251, 1295, 1301,
        0, 1302,    0, 1301,    0, 1293, 1293, 1293,    0, 1302,
        0,    0,    0,    0, 1302,    0,    0, 1301, 1302,    0,
        0, 1294, 1294, 1294,    0, 1303,    0, 1295, 1295, 1295,
        0,    0, 1302, 1303,    0,    0, 1308,    0, 1303,    0,
        0,    0, 1303,    0, 1308,    0, 1301, 1301, 1301, 1308,
        0, 1309,    0, 1308,    0,    0, 1303, 1310,    0, 1309,
        0, 1302, 1302, 1302, 1309, 1310,    0, 1308, 1309,    0,
     1310,    0,    0,    0, 1310,    0, 1316,    0,    0,    0,
        0,    0, 1309,    0, 1316, 1303, 1303, 1303, 1310, 1316,

        0, 1317,    0, 1316,    0,    0, 1308, 1308, 1308, 1317,
        0,    0,    0,    0, 1317,    0,    0, 1316, 1317,    0,
        0, 1309, 1309, 1309,    0, 1318,    0, 1310, 1310, 1310,
        0,    0, 1317, 1318,    0,    0,    0,    0, 1318,    0,
        0,    0, 1318,    0,    0,    0, 1316, 1316, 1316,    0,
        0,    0,    0,    0,    0,    0, 1318,    0,    0,    0,
        0, 1317, 1317, 1317,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1318, 1318, 1318, 1369, 1369,
     1369, 1369, 1369,    0, 1369, 1369,    0, 1369, 1369, 1369,

        0,    0, 1369, 1369,    0,    0,    0,    0, 1369, 1369,
        0,    0, 1369,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1369,    0, 1369, 1369, 1369,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1371, 1371,
     1371, 1371, 1371,    0, 1371, 1371,    0, 1371, 1371, 1371,
        0,    0, 1371, 1371,    0,    0,    0,    0, 1371, 1371,
        0,    0, 1371,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1371,    0, 1371, 1371, 1371,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1377, 1377,
     1377, 1377, 1377,    0, 1377, 1377,    0, 1377, 1377, 1377,
        0,    0, 1377, 1377,    0,    0,    0,    0, 1377, 1377,
        0,    0, 1377,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1377,    0, 1377, 1377, 1377,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1381, 1381,

     1381, 1381, 1381,    0, 1381, 1381,    0, 1381, 1381, 1381,
        0,    0, 1381, 1381,    0,    0,    0,    0, 1381, 1381,
        0,    0, 1381,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1381,    0, 1381, 1381, 1381,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1382, 1382,
     1382, 1382, 1382,    0, 1382, 1382,    0, 1382, 1382, 1382,
        0,    0, 1382, 1382,    0, 1396,    0,    0, 1382, 1382,
        0, 1397, 1382, 1396,    0,    0,    0,    0, 1396, 1397,

        0,    0, 1396, 1382, 1397, 1382, 1382, 1382, 1397,    0,
     1398,    0,    0,    0,    0,    0, 1396,    0, 1398,    0,
        0,    0, 1397, 1398,    0,    0,    0, 1398,    0,    0,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,    0,    0,
        0, 1398, 1405,    0,    0, 1396, 1396, 1396, 1406,    0,
     1405, 1397, 1397, 1397,    0, 1405, 1406,    0,    0, 1405,
        0, 1406,    0,    0,    0, 1406,    0, 1407,    0,    0,
     1398, 1398, 1398, 1405, 1413, 1407,    0,    0,    0, 1406,
     1407,    0, 1413,    0, 1407,    0,    0, 1413,    0,    0,
        0, 1413,    0,    0,    0,    0,    0,    0, 1407, 1414,

        0,    0, 1405, 1405, 1405, 1413, 1415, 1414, 1406, 1406,
     1406,    0, 1414,    0, 1415,    0, 1414,    0,    0, 1415,
        0,    0,    0, 1415,    0, 1440,    0, 1407, 1407, 1407,
     1414, 1441,    0, 1440, 1413, 1413, 1413, 1415, 1440, 1441,
        0, 1442, 1440,    0, 1441,    0,    0,    0, 1441, 1442,
        0,    0,    0,    0, 1442,    0, 1440, 1449, 1442, 1414,
     1414, 1414, 1441, 1450,    0, 1449, 1415, 1415, 1415,    0,
     1449, 1450, 1442,    0, 1449,    0, 1450,    0,    0,    0,
     1450,    0, 1451,    0,    0, 1440, 1440, 1440, 1449,    0,
     1451, 1441, 1441, 1441, 1450, 1451,    0, 1457,    0, 1451,

        0, 1442, 1442, 1442,    0, 1457,    0,    0,    0,    0,
     1457,    0,    0, 1451, 1457,    0,    0, 1449, 1449, 1449,
        0, 1458,    0, 1450, 1450, 1450,    0,    0, 1457, 1458,
        0,    0, 1459,    0, 1458,    0,    0,    0, 1458,    0,
     1459,    0, 1451, 1451, 1451, 1459,    0,    0,    0, 1459,
        0,    0, 1458,    0,    0,    0,    0, 1457, 1457, 1457,
        0,    0,    0, 1459,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1458, 1458, 1458,    0,    0,    0,    0,    0,    0,
        0,    0, 1459, 1459, 1459, 1493, 1493, 1493, 1493, 1493,

        0, 1493, 1493,    0, 1493, 1493, 1493,    0,    0, 1493,
     1493,    0,    0,    0,    0, 1493, 1493,    0,    0, 1493,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1493,    0, 1493, 1493, 1493,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1507, 1507, 1507, 1507, 1507,
        0, 1507, 1507,    0, 1507, 1507, 1507,    0,    0, 1507,
     1507,    0,    0,    0,    0, 1507, 1507,    0,    0, 1507,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1507,    0, 1507, 1507, 1507,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1577, 1577, 1577, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1578, 1578, 1578, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1579, 1579, 1579, 1579, 1579,

     1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579,
     1579, 1579, 1579, 1579, 1579, 1580, 1580,    0,    0,    0,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,    0,
     1580, 1580, 1580, 1580, 1580, 1581,    0, 1581,    0,    0,
        0, 1581,    0, 1581, 1581, 1582, 1582,    0,    0, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1584, 1584,    0, 1584, 1584,
        0, 1584, 1584,    0, 1584, 1584, 1584, 1584, 1584, 1584,

     1585, 1585,    0, 1585, 1585,    0, 1585, 1585,    0, 1585,
     1585, 1585, 1585, 1585, 1585, 1586, 1586,    0, 1586,    0,
        0, 1586, 1586,    0,    0, 1586,    0, 1586, 1586, 1586,
     1587, 1587,    0, 1587, 1587, 1587, 1587, 1587,    0, 1587,
     1587, 1587, 1587, 1587, 1587, 1588, 1588,    0, 1588, 1588,
     1588, 1588, 1588,    0, 1588, 1588, 1588, 1588, 1588, 1588,
     1589, 1589,    0, 1589,    0, 1589, 1589, 1589,    0,    0,
     1589,    0, 1589, 1589, 1589, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1591,    0,    0,    0, 1591,

        0, 1591, 1591, 1592, 1592, 1592,    0,    0, 1592,    0,
        0, 1592, 1592, 1592, 1592, 1592, 1593, 1593,    0, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1594, 1594, 1594, 1594,
     1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594,
     1594, 1594, 1594, 1594, 1594, 1594, 1596, 1596,    0, 1596,
        0, 1596, 1596, 1596,    0,    0, 1596, 1596, 1596, 1596,
     1596, 1597,    0, 1597,    0,    0,    0, 1597,    0, 1597,
     1597, 1599, 1599,    0, 1599, 1599,    0, 1599, 1599,    0,
     1599, 1599, 1599, 1599, 1599, 1599, 1600, 1600,    0, 1600,

     1600,    0, 1600, 1600,    0, 1600, 1600, 1600, 1600, 1600,
     1600, 1601, 1601,    0, 1601,    0,    0, 1601, 1601,    0,
        0, 1601,    0, 1601, 1601, 1601, 1602, 1602,    0, 1602,
     1602,    0, 1602, 1602,    0, 1602, 1602, 1602, 1602, 1602,
     1602, 1603, 1603,    0, 1603, 1603,    0, 1603, 1603,    0,
     1603, 1603,    0, 1603, 1603, 1603, 1604, 1604,    0, 1604,
     1604,    0, 1604, 1604,    0, 1604, 1604, 1604, 1604, 1604,
     1604, 1605, 1605,    0, 1605, 1605,    0, 1605, 1605,    0,
     1605, 1605, 1605, 1605, 1605, 1605, 1606, 1606,    0, 1606,
        0,    0, 1606,    0,    0,    0, 1606, 1606, 1606, 1606,

     1606, 1607, 1607,    0, 1607, 1607,    0, 1607, 1607,    0,
     1607, 1607, 1607, 1607, 1607, 1607, 1608, 1608,    0, 1608,
     1608, 1608, 1608, 1608,    0, 1608, 1608, 1608, 1608, 1608,
     1608, 1609, 1609,    0, 1609, 1609, 1609, 1609, 1609,    0,
     1609, 1609, 1609, 1609, 1609, 1609, 1610, 1610,    0, 1610,
     1610, 1610, 1610, 1610,    0, 1610, 1610, 1610, 1610, 1610,
     1610, 1611, 1611,    0, 1611,    0, 1611, 1611, 1611,    0,
        0, 1611,    0, 1611, 1611, 1611, 1612, 1612,    0, 1612,
     1612, 1612, 1612, 1612,    0, 1612, 1612, 1612, 1612, 1612,
     1612, 1613, 1613,    0, 1613, 1613, 1613, 1613, 1613,    0,

     1613, 1613,    0, 1613, 1613, 1613, 1614, 1614,    0, 1614,
     1614, 1614, 1614, 1614,    0, 1614, 1614, 1614, 1614, 1614,
     1614, 1615, 1615,    0, 1615, 1615, 1615, 1615, 1615,    0,
     1615, 1615, 1615, 1615, 1615, 1615, 1616, 1616,    0, 1616,
        0, 1616, 1616,    0,    0,    0, 1616, 1616, 1616, 1616,
     1616, 1617, 1617,    0, 1617, 1617, 1617, 1617, 1617,    0,
     1617, 1617, 1617, 1617, 1617, 1617, 1620,    0,    0,    0,
     1620,    0, 1620, 1620, 1621,    0,    0,    0, 1621,    0,
     1621, 1621, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623,    0, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,

     1623, 1623, 1624,    0, 1624,    0,    0,    0, 1624,    0,
     1624, 1624, 1625, 1625,    0, 1625, 1625, 1625, 1625, 1625,
     1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625,
     1625, 1625, 1626, 1626,    0,    0,    0, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626,    0, 1626, 1626, 1626,
     1626, 1626, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1628,    0,    0,    0, 1628,    0, 1628, 1628,
     1629,    0,    0,    0, 1629,    0, 1629, 1629, 1631, 1631,
        0, 1631,    0, 1631, 1631, 1631,    0,    0, 1631, 1631,

     1631, 1631, 1631, 1632,    0, 1632,    0,    0,    0, 1632,
        0, 1632, 1632, 1634, 1634,    0, 1634,    0,    0, 1634,
     1634,    0, 1634, 1634,    0, 1634, 1634, 1634, 1635, 1635,
        0, 1635, 1635,    0, 1635, 1635,    0, 1635, 1635, 1635,
     1635, 1635, 1635, 1636, 1636,    0, 1636, 1636,    0, 1636,
     1636,    0, 1636, 1636, 1636, 1636, 1636, 1636, 1637, 1637,
        0, 1637, 1637,    0, 1637, 1637,    0, 1637, 1637, 1637,
     1637, 1637, 1637, 1638, 1638,    0, 1638, 1638,    0, 1638,
     1638,    0, 1638, 1638, 1638, 1638, 1638, 1638, 1639, 1639,
        0, 1639,    0,    0, 1639, 1639,    0,    0, 1639, 1639,

     1639, 1639, 1639, 1640, 1640,    0, 1640,    0,    0, 1640,
        0,    0,    0, 1640, 1640, 1640, 1640, 1640, 1641, 1641,
        0, 1641, 1641,    0, 1641, 1641,    0, 1641, 1641, 1641,
     1641, 1641, 1641, 1642, 1642,    0, 1642, 1642,    0, 1642,
     1642,    0, 1642, 1642, 1642, 1642, 1642, 1642, 1643, 1643,
        0, 1643,    0,    0, 1643, 1643,    0,    0, 1643, 1643,
     1643, 1643, 1643, 1644, 1644,    0, 1644, 1644,    0, 1644,
     1644,    0, 1644, 1644, 1644, 1644, 1644, 1644, 1645, 1645,
        0, 1645,    0,    0, 1645,    0,    0,    0, 1645, 1645,
     1645, 1645, 1645, 1646, 1646,    0, 1646,    0,    0, 1646,

     1646,    0,    0, 1646,    0, 1646, 1646, 1646, 1647, 1647,
        0, 1647, 1647,    0, 1647, 1647,    0, 1647, 1647, 1647,
     1647, 1647, 1647, 1648, 1648,    0, 1648, 1648,    0, 1648,
     1648,    0, 1648, 1648, 1648, 1648, 1648, 1648, 1649, 1649,
        0, 1649,    0,    0, 1649,    0,    0,    0, 1649, 1649,
     1649, 1649, 1649, 1650, 1650,    0, 1650,    0,    0, 1650,
        0,    0,    0, 1650, 1650, 1650, 1650, 1650, 1651, 1651,
        0, 1651, 1651,    0, 1651, 1651,    0, 1651, 1651, 1651,
     1651, 1651, 1651, 1652, 1652,    0, 1652, 1652,    0, 1652,
     1652,    0, 1652, 1652, 1652, 1652, 1652, 1652, 1653, 1653,

        0, 1653,    0, 1653, 1653, 1653,    0, 1653, 1653,    0,
     1653, 1653, 1653, 1654, 1654,    0, 1654, 1654, 1654, 1654,
     1654,    0, 1654, 1654, 1654, 1654, 1654, 1654, 1655, 1655,
        0, 1655, 1655, 1655, 1655, 1655,    0, 1655, 1655, 1655,
     1655, 1655, 1655, 1656, 1656,    0, 1656, 1656, 1656, 1656,
     1656,    0, 1656, 1656, 1656, 1656, 1656, 1656, 1657, 1657,
        0, 1657, 1657, 1657, 1657, 1657,    0, 1657, 1657, 1657,
     1657, 1657, 1657, 1658, 1658,    0, 1658,    0, 1658, 1658,
     1658,    0,    0, 1658, 1658, 1658, 1658, 1658, 1659, 1659,
        0, 1659,    0, 1659, 1659,    0,    0,    0, 1659, 1659,

     1659, 1659, 1659, 1660, 1660,    0, 1660, 1660, 1660, 1660,
     1660,    0, 1660, 1660, 1660, 1660, 1660, 1660, 1661, 1661,
        0, 1661, 1661, 1661, 1661, 1661,    0, 1661, 1661, 1661,
     1661, 1661, 1661, 1662, 1662,    0, 1662,    0, 1662, 1662,
     1662,    0,    0, 1662, 1662, 1662, 1662, 1662, 1663, 1663,
        0, 1663, 1663, 1663, 1663, 1663,    0, 1663, 1663, 1663,
     1663, 1663, 1663, 1664, 1664,    0, 1664,    0, 1664, 1664,
        0,    0,    0, 1664, 1664, 1664, 1664, 1664, 1665, 1665,
        0, 1665,    0, 1665, 1665, 1665,    0,    0, 1665,    0,
     1665, 1665, 1665, 1666, 1666,    0, 1666, 1666, 1666, 1666,

     1666,    0, 1666, 1666, 1666, 1666, 1666, 1666, 1667, 1667,
        0, 1667, 1667, 1667, 1667, 1667,    0, 1667, 1667, 1667,
     1667, 1667, 1667, 1668, 1668,    0, 1668,    0, 1668, 1668,
        0,    0,    0, 1668, 1668, 1668, 1668, 1668, 1669, 1669,
        0, 1669,    0, 1669, 1669,    0,    0,    0, 1669, 1669,
     1669, 1669, 1669, 1670, 1670,    0, 1670, 1670, 1670, 1670,
     1670,    0, 1670, 1670, 1670, 1670, 1670, 1670, 1671, 1671,
        0, 1671, 1671, 1671, 1671, 1671,    0, 1671, 1671, 1671,
     1671, 1671, 1671, 1675,    0,    0,    0, 1675,    0, 1675,
     1675, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677,

        0, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677,
     1677, 1678,    0,    0, 1678,    0,    0,    0, 1678,    0,
     1678, 1678, 1679, 1679, 1679, 1679, 1679,    0, 1679, 1679,
        0, 1679,    0,    0, 1679, 1679, 1679,    0, 1679,    0,
        0, 1679, 1680,    0,    0, 1680, 1680, 1680,    0, 1680,
        0, 1680, 1680, 1680,    0,    0, 1680, 1680, 1680, 1680,
     1680, 1681,    0, 1681,    0,    0,    0, 1681,    0, 1681,
     1681, 1682, 1682,    0, 1682,    0,    0, 1682, 1682,    0,
        0, 1682, 1682, 1682, 1682, 1682, 1683, 1683,    0, 1683,
     1683,    0, 1683, 1683,    0, 1683, 1683,    0, 1683, 1683,

     1683, 1684, 1684,    0, 1684, 1684,    0, 1684, 1684,    0,
     1684, 1684, 1684, 1684, 1684, 1684, 1685, 1685,    0, 1685,
     1685,    0, 1685, 1685,    0, 1685, 1685, 1685, 1685, 1685,
     1685, 1686, 1686,    0, 1686, 1686,    0, 1686, 1686,    0,
     1686, 1686, 1686, 1686, 1686, 1686, 1687, 1687,    0, 1687,
        0,    0, 1687, 1687,    0,    0, 1687, 1687, 1687, 1687,
     1687, 1688, 1688,    0, 1688,    0,    0, 1688,    0,    0,
        0, 1688, 1688, 1688, 1688, 1688, 1689, 1689,    0, 1689,
        0,    0, 1689,    0,    0,    0, 1689, 1689, 1689, 1689,
     1689, 1690, 1690,    0, 1690, 1690,    0, 1690, 1690,    0,

     1690, 1690, 1690, 1690, 1690, 1690, 1691, 1691,    0, 1691,
     1691,    0, 1691, 1691,    0, 1691, 1691, 1691, 1691, 1691,
     1691, 1692, 1692,    0, 1692,    0,    0, 1692,    0,    0,
        0, 1692, 1692, 1692, 1692, 1692, 1693, 1693,    0, 1693,
        0,    0, 1693,    0,    0,    0, 1693, 1693, 1693, 1693,
     1693, 1694, 1694,    0, 1694,    0,    0, 1694,    0,    0,
        0, 1694, 1694, 1694, 1694, 1694, 1695, 1695,    0, 1695,
        0,    0, 1695,    0,    0,    0, 1695, 1695, 1695, 1695,
     1695, 1696, 1696,    0, 1696,    0,    0, 1696, 1696,    0,
        0, 1696, 1696, 1696, 1696, 1696, 1697, 1697,    0, 1697,

     1697,    0, 1697, 1697,    0, 1697, 1697, 1697, 1697, 1697,
     1697, 1698, 1698,    0, 1698, 1698,    0, 1698, 1698,    0,
     1698, 1698, 1698, 1698, 1698, 1698, 1699, 1699,    0, 1699,
     1699,    0, 1699, 1699,    0, 1699, 1699, 1699, 1699, 1699,
     1699, 1700, 1700,    0, 1700, 1700,    0, 1700, 1700,    0,
     1700, 1700, 1700, 1700, 1700, 1700, 1701, 1701,    0, 1701,
        0,    0, 1701, 1701,    0,    0, 1701,    0, 1701, 1701,
     1701, 1702, 1702,    0, 1702,    0,    0, 1702,    0,    0,
        0, 1702, 1702, 1702, 1702, 1702, 1703, 1703,    0, 1703,
     1703,    0, 1703, 1703,    0, 1703, 1703, 1703, 1703, 1703,

     1703, 1704, 1704,    0, 1704,    0, 1704, 1704, 1704,    0,
        0, 1704, 1704, 1704, 1704, 1704, 1705, 1705,    0, 1705,
     1705, 1705, 1705, 1705,    0, 1705, 1705,    0, 1705, 1705,
     1705, 1706, 1706,    0, 1706, 1706, 1706, 1706, 1706,    0,
     1706, 1706, 1706, 1706, 1706, 1706, 1707, 1707,    0, 1707,
     1707, 1707, 1707, 1707,    0, 1707, 1707, 1707, 1707, 1707,
     1707, 1708, 1708,    0, 1708, 1708, 1708, 1708, 1708,    0,
     1708, 1708, 1708, 1708, 1708, 1708, 1709, 1709,    0, 1709,
        0, 1709, 1709, 1709,    0,    0, 1709, 1709, 1709, 1709,
     1709, 1710, 1710,    0, 1710,    0, 1710, 1710,    0,    0,

        0, 1710, 1710, 1710, 1710, 1710, 1711, 1711,    0, 1711,
        0, 1711, 1711,    0,    0,    0, 1711, 1711, 1711, 1711,
     1711, 1712, 1712,    0, 1712, 1712, 1712, 1712, 1712,    0,
     1712, 1712, 1712, 1712, 1712, 1712, 1713, 1713,    0, 1713,
     1713, 1713, 1713, 1713,    0, 1713, 1713, 1713, 1713, 1713,
     1713, 1714, 1714,    0, 1714,    0, 1714, 1714,    0,    0,
        0, 1714, 1714, 1714, 1714, 1714, 1715, 1715,    0, 1715,
        0, 1715, 1715,    0,    0,    0, 1715, 1715, 1715, 1715,
     1715, 1716, 1716,    0, 1716,    0, 1716, 1716,    0,    0,
        0, 1716, 1716, 1716, 1716, 1716, 1717, 1717,    0, 1717,

        0, 1717, 1717,    0,    0,    0, 1717, 1717, 1717, 1717,
     1717, 1718, 1718,    0, 1718,    0, 1718, 1718, 1718,    0,
        0, 1718, 1718, 1718, 1718, 1718, 1719, 1719,    0, 1719,
     1719, 1719, 1719, 1719,    0, 1719, 1719, 1719, 1719, 1719,
     1719, 1720, 1720,    0, 1720, 1720, 1720, 1720, 1720,    0,
     1720, 1720, 1720, 1720, 1720, 1720, 1721, 1721,    0, 1721,
     1721, 1721, 1721, 1721,    0, 1721, 1721, 1721, 1721, 1721,
     1721, 1722, 1722,    0, 1722, 1722, 1722, 1722, 1722,    0,
     1722, 1722, 1722, 1722, 1722, 1722, 1723, 1723,    0, 1723,
        0, 1723, 1723, 1723,    0,    0, 1723,    0, 1723, 1723,

     1723, 1724, 1724,    0, 1724,    0, 1724, 1724,    0,    0,
        0, 1724, 1724, 1724, 1724, 1724, 1725, 1725,    0, 1725,
     1725, 1725, 1725, 1725,    0, 1725, 1725, 1725, 1725, 1725,
     1725, 1727,    0,    0,    0, 1727,    0, 1727, 1727, 1728,
     1728, 1728, 1728, 1728,    0, 1728, 1728,    0, 1728,    0,
        0, 1728, 1728, 1728,    0, 1728,    0, 1728, 1728, 1729,
     1729, 1729, 1729, 1729,    0, 1729, 1729,    0, 1729,    0,
        0, 1729, 1729, 1729,    0, 1729, 1729,    0, 1729, 1730,
     1730,    0, 1730,    0, 1730, 1730, 1730,    0,    0, 1730,
     1730, 1730, 1730, 1730, 1731,    0, 1731,    0,    0,    0,

     1731,    0, 1731, 1731, 1732, 1732,    0, 1732, 1732,    0,
     1732, 1732,    0, 1732, 1732, 1732, 1732, 1732, 1732, 1733,
     1733,    0, 1733, 1733,    0, 1733, 1733,    0, 1733, 1733,
     1733, 1733, 1733, 1733, 1734, 1734,    0, 1734,    0,    0,
     1734,    0,    0,    0, 1734, 1734, 1734, 1734, 1734, 1735,
     1735,    0, 1735,    0,    0, 1735,    0,    0,    0, 1735,
     1735, 1735, 1735, 1735, 1736, 1736,    0, 1736,    0,    0,
     1736,    0,    0,    0, 1736, 1736, 1736, 1736, 1736, 1737,
     1737,    0, 1737,    0,    0, 1737,    0,    0,    0, 1737,
     1737, 1737, 1737, 1737, 1738, 1738,    0, 1738,    0,    0,

     1738, 1738,    0,    0, 1738, 1738, 1738, 1738, 1738, 1739,
     1739,    0, 1739, 1739,    0, 1739, 1739,    0, 1739, 1739,
     1739, 1739, 1739, 1739, 1740, 1740,    0, 1740, 1740,    0,
     1740, 1740,    0, 1740, 1740, 1740, 1740, 1740, 1740, 1741,
     1741,    0, 1741, 1741,    0, 1741, 1741,    0, 1741, 1741,
     1741, 1741, 1741, 1741, 1742, 1742,    0, 1742,    0,    0,
     1742, 1742,    0,    0, 1742, 1742, 1742, 1742, 1742, 1743,
     1743,    0, 1743, 1743,    0, 1743, 1743,    0, 1743, 1743,
     1743, 1743, 1743, 1743, 1744, 1744,    0, 1744, 1744,    0,
     1744, 1744,    0, 1744, 1744, 1744, 1744, 1744, 1744, 1745,

     1745,    0, 1745, 1745,    0, 1745, 1745,    0, 1745, 1745,
     1745, 1745, 1745, 1745, 1746, 1746,    0, 1746, 1746,    0,
     1746, 1746,    0, 1746, 1746, 1746, 1746, 1746, 1746, 1747,
     1747,    0, 1747,    0,    0, 1747, 1747,    0,    0, 1747,
     1747, 1747, 1747, 1747, 1748, 1748,    0, 1748,    0,    0,
     1748,    0,    0,    0, 1748, 1748, 1748, 1748, 1748, 1749,
     1749,    0, 1749, 1749, 1749, 1749, 1749,    0, 1749, 1749,
     1749, 1749, 1749, 1749, 1750, 1750,    0, 1750, 1750, 1750,
     1750, 1750,    0, 1750, 1750, 1750, 1750, 1750, 1750, 1751,
     1751,    0, 1751,    0, 1751, 1751,    0,    0,    0, 1751,

     1751, 1751, 1751, 1751, 1752, 1752,    0, 1752,    0, 1752,
     1752,    0,    0,    0, 1752, 1752, 1752, 1752, 1752, 1753,
     1753,    0, 1753,    0, 1753, 1753,    0,    0,    0, 1753,
     1753, 1753, 1753, 1753, 1754, 1754,    0, 1754,    0, 1754,
     1754,    0,    0,    0, 1754, 1754, 1754, 1754, 1754, 1755,
     1755,    0, 1755,    0, 1755, 1755, 1755,    0,    0, 1755,
     1755, 1755, 1755, 1755, 1756, 1756,    0, 1756, 1756, 1756,
     1756, 1756,    0, 1756, 1756, 1756, 1756, 1756, 1756, 1757,
     1757,    0, 1757, 1757, 1757, 1757, 1757,    0, 1757, 1757,
     1757, 1757, 1757, 1757, 1758, 1758,    0, 1758, 1758, 1758,

     1758, 1758,    0, 1758, 1758, 1758, 1758, 1758, 1758, 1759,
     1759,    0, 1759,    0, 1759, 1759, 1759,    0,    0, 1759,
     1759, 1759, 1759, 1759, 1760, 1760,    0, 1760, 1760, 1760,
     1760, 1760,    0, 1760, 1760, 1760, 1760, 1760, 1760, 1761,
     1761,    0, 1761, 1761, 1761, 1761, 1761,    0, 1761, 1761,
     1761, 1761, 1761, 1761, 1762, 1762,    0, 1762, 1762, 1762,
     1762, 1762,    0, 1762, 1762, 1762, 1762, 1762, 1762, 1763,
     1763,    0, 1763, 1763, 1763, 1763, 1763,    0, 1763, 1763,
     1763, 1763, 1763, 1763, 1764, 1764,    0, 1764,    0, 1764,
     1764, 1764,    0,    0, 1764, 1764, 1764, 1764, 1764, 1765,

     1765,    0, 1765,    0, 1765, 1765,    0,    0,    0, 1765,
     1765, 1765, 1765, 1765, 1766, 1766, 1766, 1766, 1766,    0,
     1766, 1766,    0, 1766,    0,    0, 1766, 1766, 1766,    0,
     1766, 1766,    0, 1766, 1767, 1767, 1767, 1767, 1767,    0,
     1767, 1767,    0, 1767,    0,    0, 1767, 1767, 1767,    0,
     1767,    0,    0, 1767, 1768, 1768, 1768, 1768, 1768,    0,
     1768, 1768,    0, 1768,    0,    0, 1768, 1768, 1768,    0,
     1768,    0,    0, 1768, 1769, 1769, 1769, 1769, 1769,    0,
     1769, 1769,    0, 1769,    0,    0, 1769, 1769, 1769,    0,
     1769,    0,    0, 1769, 1770, 1770, 1770, 1770, 1770, 1770,

     1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770,
     1770, 1770, 1770, 1770, 1771, 1771,    0, 1771, 1771,    0,
     1771, 1771,    0, 1771, 1771, 1771, 1771, 1771, 1771, 1772,
     1772,    0, 1772, 1772,    0, 1772, 1772,    0, 1772, 1772,
     1772, 1772, 1772, 1772, 1773, 1773,    0, 1773, 1773,    0,
     1773, 1773,    0, 1773, 1773, 1773, 1773, 1773, 1773, 1774,
     1774,    0, 1774, 1774,    0, 1774, 1774,    0, 1774, 1774,
     1774, 1774, 1774, 1774, 1775, 1775,    0, 1775,    0,    0,
     1775, 1775,    0,    0, 1775, 1775, 1775, 1775, 1775, 1776,
     1776,    0, 1776, 1776,    0, 1776, 1776,    0, 1776, 1776,

     1776, 1776, 1776, 1776, 1777, 1777,    0, 1777, 1777,    0,
     1777, 1777,    0, 1777, 1777, 1777, 1777, 1777, 1777, 1778,
     1778,    0, 1778, 1778,    0, 1778, 1778,    0, 1778, 1778,
     1778, 1778, 1778, 1778, 1779, 1779,    0, 1779,    0,    0,
     1779, 1779,    0,    0, 1779, 1779, 1779, 1779, 1779, 1780,
     1780,    0, 1780,    0,    0, 1780,    0,    0,    0, 1780,
     1780, 1780, 1780, 1780, 1781, 1781,    0, 1781,    0,    0,
     1781,    0,    0,    0, 1781, 1781, 1781, 1781, 1781, 1782,
     1782,    0, 1782, 1782, 1782, 1782, 1782,    0, 1782, 1782,
     1782, 1782, 1782, 1782, 1783, 1783,    0, 1783, 1783, 1783,

     1783, 1783,    0, 1783, 1783, 1783, 1783, 1783, 1783, 1784,
     1784,    0, 1784, 1784, 1784, 1784, 1784,    0, 1784, 1784,
     1784, 1784, 1784, 1784, 1785, 1785,    0, 1785, 1785, 1785,
     1785, 1785,    0, 1785, 1785, 1785, 1785, 1785, 1785, 1786,
     1786,    0, 1786,    0, 1786, 1786, 1786,    0,    0, 1786,
     1786, 1786, 1786, 1786, 1787, 1787,    0, 1787, 1787, 1787,
     1787, 1787,    0, 1787, 1787, 1787, 1787, 1787, 1787, 1788,
     1788,    0, 1788, 1788, 1788, 1788, 1788,    0, 1788, 1788,
     1788, 1788, 1788, 1788, 1789, 1789,    0, 1789, 1789, 1789,
     1789, 1789,    0, 1789, 1789, 1789, 1789, 1789, 1789, 1790,

     1790,    0, 1790,    0, 1790, 1790, 1790,    0,    0, 1790,
     1790, 1790, 1790, 1790, 1791, 1791,    0, 1791,    0, 1791,
     1791,    0,    0,    0, 1791, 1791, 1791, 1791, 1791, 1792,
     1792,    0, 1792,    0, 1792, 1792,    0,    0,    0, 1792,
     1792, 1792, 1792, 1792, 1793, 1793, 1793, 1793, 1793,    0,
     1793, 1793,    0, 1793,    0,    0, 1793, 1793, 1793,    0,
     1793,    0,    0, 1793, 1794, 1794, 1794, 1794, 1794,    0,
     1794, 1794,    0, 1794,    0,    0, 1794, 1794, 1794,    0,
     1794,    0,    0, 1794, 1795, 1795, 1795, 1795, 1795,    0,
     1795, 1795,    0, 1795,    0,    0, 1795, 1795, 1795,    0,

     1795,    0,    0, 1795, 1796, 1796,    0, 1796, 1796,    0,
     1796, 1796,    0, 1796, 1796, 1796, 1796, 1796, 1796, 1797,
     1797,    0, 1797, 1797,    0, 1797, 1797,    0, 1797, 1797,
     1797, 1797, 1797, 1797, 1798, 1798,    0, 1798, 1798,    0,
     1798, 1798,    0, 1798, 1798, 1798, 1798, 1798, 1798, 1799,
     1799, 1799, 1799, 1799,    0, 1799, 1799,    0, 1799,    0,
        0, 1799, 1799, 1799,    0, 1799,    0,    0, 1799, 1800,
     1800, 1800, 1800, 1800,    0, 1800, 1800,    0, 1800,    0,
        0, 1800, 1800, 1800,    0, 1800,    0,    0, 1800, 1801,
     1801, 1801, 1801, 1801,    0, 1801, 1801,    0, 1801,    0,

        0, 1801, 1801, 1801,    0, 1801,    0,    0, 1801, 1802,
     1802, 1802, 1802, 1802,    0, 1802, 1802,    0, 1802,    0,
        0, 1802, 1802, 1802,    0, 1802,    0,    0, 1802, 1803,
     1803, 1803, 1803, 1803,    0, 1803, 1803,    0, 1803,    0,
        0, 1803, 1803, 1803,    0, 1803,    0,    0, 1803, 1804,
     1804, 1804, 1804, 1804,    0, 1804, 1804,    0, 1804,    0,
        0, 1804, 1804, 1804,    0, 1804,    0,    0, 1804, 1805,
     1805, 1805, 1805, 1805,    0, 1805, 1805,    0, 1805,    0,
        0, 1805, 1805, 1805,    0, 1805,    0,    0, 1805, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parser.l"
/* Copyright 2009-2021
 * Kaz Kylheku <kaz@kylheku.com>
 * Vancouver, Canada
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#line 29 "parser.l"

#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <stdlib.h>
#include <limits.h>
#include <wchar.h>
#include <signal.h>
#include "config.h"
#include "lib.h"
#include "gc.h"
#include "stream.h"
#include "utf8.h"
#include "signal.h"
#include "unwind.h"
#include "hash.h"
#include "y.tab.h"
#include "parser.h"
#include "txr.h"

#define YY_INPUT(buf, result, max_size)                                 \
  do {                                                                  \
    val self = lit("parser");                                           \
    val n = get_bytes(self, yyextra->stream,                            \
                      coerce(mem_t *, buf), max_size);                  \
    result = c_num(n, self);                                            \
  } while (0)

#define YY_DECL \
  static int yylex_impl(YYSTYPE *yylval_param, yyscan_t yyscanner)

int opt_loglevel = 1;   /* 0 - quiet; 1 - normal; 2 - verbose */

val form_to_ln_hash;

static int directive_tok(scanner_t *yyg, int tok, int state);

#define FLEX_NUM_VERSION 10000*YY_FLEX_MAJOR_VERSION + \
                         100*YY_FLEX_MINOR_VERSION + \
                         YY_FLEX_SUBMINOR_VERSION

#if FLEX_NUM_VERSION < 20509
int yylex_destroy(void)
{
  return 0;
}
#endif

/* Missing prototypes not generated by flex. */
int yyget_column(yyscan_t);
void yyset_column (int column_no, yyscan_t yyscanner);

/* The following function is all that libflex provides.
   By providing it here, we eliminate the need to link libflex. */
#define YY_SKIP_YYWRAP
INLINE int yywrap(yyscan_t scanner)
{
  (void) scanner;
  return 1;
}

void yyerror(scanner_t *scanner, parser_t *parser, const char *s)
{
  yyerrorf(scanner, lit("~a"), string_utf8(s), nao);
  if (parser->prepared_msg) {
    yyerrorf(scanner, lit("~a"), parser->prepared_msg, nao);
    parser->prepared_msg = nil;
  }
}

void yyerrorf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    if (opt_compat && opt_compat <= 114)
      format(std_error, lit("~a: (~a:~d): "), prog_string,
             parser->name, num(parser->lineno), nao);
    else
      format(std_error, lit("~a:~d: "),
             parser->name, num(parser->lineno), nao);

    vformat(std_error, fmt, vl);
    put_char(chr('\n'), std_error);
    va_end (vl);
  }
  parser->errors++;
}

static void yyerrprepf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    set(mkloc(parser->prepared_msg, parser->parser),
        vformat_to_string(fmt, vl));
    va_end (vl);
  }
}

static void out_of_range_float(scanner_t *scanner, val tok)
{
    yyerrorf(scanner, lit("out-of-range floating-point literal: ~a"),
             tok, nao);
}

static wchar_t char_esc(int letter)
{
  switch (letter) {
  case ' ': return L' ';
  case 'a': return L'\a';
  case 'b': return L'\b';
  case 't': return L'\t';
  case 'n': return L'\n';
  case 'v': return L'\v';
  case 'f': return L'\f';
  case 'r': return L'\r';
  case 'e': return 27;
  case '"': return L'"';
  case '\'': return L'\'';
  case '`': return L'`';
  case '/': return L'/';
  case '@': return L'@';
  case '\\': return L'\\';
  }

  internal_error("unhandled escape character");
}

static wchar_t num_esc(scanner_t *scn, char *num)
{
  long val = 0;

  if (num[0] == 'x') {
    if (strlen(num) > 7)
      yyerror(scn, yyget_extra(scn), "too many digits in hex character escape");
    else
      val = strtol(num + 1, 0, 16);
  } else {
    if (num[0] == 'o')
      num++;
    if (strlen(num) > 8)
      yyerror(scn, yyget_extra(scn), "too many digits in octal character escape");
    else
      val = strtol(num, 0, 8);
  }

  if (val < 0 || val > 0x10FFFF || convert(wchar_t, val) != val) {
    yyerror(scn, yyget_extra(scn), "numeric character escape out of range");
    val = 0;
  }

  return val;
}

static wchar_t *unicode_ident(scanner_t *scn, const char *lex)
{
  wchar_t *wlex = utf8_dup_from(lex), *ptr = wlex, wch;

  while ((wch = *ptr++)) {
    if (wch < 0x1680 || (wch >= 0x3000 && wch < 0xdc00))
      continue;

    if ((wch >= 0xdc00 && wch <= 0xdcff) ||
        (wch >= 0xd800 && wch <= 0xdbff) ||
#if FULL_UNICODE
        (wch >= 0xf0000 && wch <= 0xffffd) ||
        (wch >= 0x100000 && wch <= 0x10fffd) ||
#endif
        (wch >= 0xe000 && wch <= 0xf8ff) ||
        (wch == 0xfffe) ||
        (wch == 0xffff))
    {
      yyerror(scn, yyget_extra(scn),
              "disallowed Unicode character in identifier");
      break;
    }

    switch (wch) {
    case 0x1680: case 0x180e: case 0x2000: case 0x2001: case 0x2002:
    case 0x2003: case 0x2004: case 0x2005: case 0x2006: case 0x2007:
    case 0x2008: case 0x2009: case 0x200a: case 0x2028: case 0x2029:
    case 0x205f: case 0x3000:
      yyerror(scn, yyget_extra(scn),
              "Unicode space occurs in identifier");
      break;
    default:
      continue;
    }

    break;
  }

  return wlex;
}

#line 3663 "lex.yy.c"
#define YY_NO_INPUT 1

#line 3666 "lex.yy.c"

#define INITIAL 0
#define SPECIAL 1
#define BRACED 2
#define NESTED 3
#define REGEX 4
#define SREGEX 5
#define STRLIT 6
#define CHRLIT 7
#define QSILIT 8
#define QSPECIAL 9
#define WLIT 10
#define QWLIT 11
#define BUFLIT 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE parser_t *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		/* Create the reject buffer large enough to save one state per allowed character. */
		if ( ! yyg->yy_state_buf )
			yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
		if ( ! yyg->yy_state_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 284 "parser.l"


#line 3979 "lex.yy.c"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1576 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1575 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 286 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num(10));
  return NUMBER;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 298 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 2));
  int base;

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 317 "parser.l"
{
  int base = 0;
  val str = string_own(utf8_dup_from(yytext + 2));

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  yyerrorf(yyg, lit("trailing junk in numeric literal: ~a~a~a"),
           chr(yytext[0]), chr(yytext[1]), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 339 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);

  return NUMBER;
}
	YY_BREAK
case 5:
#line 354 "parser.l"
case 6:
#line 355 "parser.l"
case 7:
YY_RULE_SETUP
#line 355 "parser.l"
{
  val str = string_utf8(yytext);

  yyerrorf(yyg, lit("trailing junk in floating-point literal: ~a"), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);

  return NUMBER;
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 371 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);

  return NUMBER;
}
	YY_BREAK
case 9:
#line 386 "parser.l"
case 10:
YY_RULE_SETUP
#line 386 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(10));
  return METANUM;
}
	YY_BREAK
case 11:
#line 398 "parser.l"
case 12:
YY_RULE_SETUP
#line 398 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(16));
  return METANUM;
}
	YY_BREAK
case 13:
#line 410 "parser.l"
case 14:
YY_RULE_SETUP
#line 410 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(8));
  return METANUM;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 421 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(2));
  return METANUM;
}
	YY_BREAK
case 16:
#line 433 "parser.l"
case 17:
#line 434 "parser.l"
case 18:
YY_RULE_SETUP
#line 434 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 19:
#line 451 "parser.l"
case 20:
#line 452 "parser.l"
case 21:
YY_RULE_SETUP
#line 452 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 22:
#line 463 "parser.l"
case 23:
YY_RULE_SETUP
#line 463 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yyerrorf(yyg, lit("bad token: ~a"),
                    string_own(utf8_dup_from(yytext)),
                    nao);
  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 476 "parser.l"
{
  return directive_tok(yyg, ALL, 0);
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 480 "parser.l"
{
  return directive_tok(yyg, SOME, NESTED);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 484 "parser.l"
{
  return directive_tok(yyg, NONE, 0);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 488 "parser.l"
{
  return directive_tok(yyg, MAYBE, 0);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 492 "parser.l"
{
  return directive_tok(yyg, CASES, 0);
}
	YY_BREAK
case 29:
/* rule 29 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 496 "parser.l"
{
  return directive_tok(yyg, BLOCK, NESTED);
}
	YY_BREAK
case 30:
/* rule 30 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 500 "parser.l"
{
  return directive_tok(yyg, CHOOSE, NESTED);
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 504 "parser.l"
{
  return directive_tok(yyg, GATHER, NESTED);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 508 "parser.l"
{
  return directive_tok(yyg, AND, 0);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 512 "parser.l"
{
  return directive_tok(yyg, OR, 0);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 516 "parser.l"
{
  return directive_tok(yyg, END, 0);
}
	YY_BREAK
case 35:
/* rule 35 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 520 "parser.l"
{
  return directive_tok(yyg, COLLECT, NESTED);
}
	YY_BREAK
case 36:
/* rule 36 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 524 "parser.l"
{
  return directive_tok(yyg, COLL, NESTED);
}
	YY_BREAK
case 37:
/* rule 37 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 528 "parser.l"
{
  return directive_tok(yyg, UNTIL, NESTED);
}
	YY_BREAK
case 38:
/* rule 38 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 532 "parser.l"
{
  return directive_tok(yyg, OUTPUT, NESTED);
}
	YY_BREAK
case 39:
/* rule 39 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 536 "parser.l"
{
  return directive_tok(yyg, REPEAT, NESTED);
}
	YY_BREAK
case 40:
/* rule 40 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 540 "parser.l"
{
  return directive_tok(yyg, REP, NESTED);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 544 "parser.l"
{
  return directive_tok(yyg, SINGLE, 0);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 548 "parser.l"
{
  return directive_tok(yyg, FIRST, 0);
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 552 "parser.l"
{
  return directive_tok(yyg, LAST, NESTED);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 556 "parser.l"
{
  return directive_tok(yyg, EMPTY, 0);
}
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 560 "parser.l"
{
  return directive_tok(yyg, MOD, NESTED);
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 564 "parser.l"
{
  return directive_tok(yyg, MODLAST, NESTED);
}
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 568 "parser.l"
{
  return directive_tok(yyg, DEFINE, NESTED);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 572 "parser.l"
{
  return directive_tok(yyg, TRY, 0);
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 576 "parser.l"
{
  return directive_tok(yyg, CATCH, NESTED);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 580 "parser.l"
{
  return directive_tok(yyg, FINALLY, 0);
}
	YY_BREAK
case 51:
/* rule 51 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 584 "parser.l"
{
  return directive_tok(yyg, IF, NESTED);
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 588 "parser.l"
{
  return directive_tok(yyg, ELIF, NESTED);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 592 "parser.l"
{
  return directive_tok(yyg, ELSE, 0);
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 596 "parser.l"
{
  yy_push_state(BRACED, yyscanner);
  yylval->lineno = yyextra->lineno;
  return yytext[0];
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 602 "parser.l"
{
 yy_push_state(NESTED, yyscanner);
 yylval->lineno = yyextra->lineno;
 return yytext[0];
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 608 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 248) ? OLD_AT : '@';
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 613 "parser.l"
{
  yylval->chr = '*';
  return SPLICE;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 618 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 623 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 60:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 632 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space or 0 needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 647 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 656 "parser.l"
{
  /* Eat whitespace in directive */
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 660 "parser.l"
{
  yy_push_state(STRLIT, yyscanner);
  return '"';
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 665 "parser.l"
{
  yy_push_state(CHRLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_BACKSLASH;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 671 "parser.l"
{
  yy_push_state(BUFLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_B_QUOTE;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 677 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_SLASH;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 683 "parser.l"
{
  yy_push_state(QSILIT, yyscanner);
  return '`';
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 688 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WORDS;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 694 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WSPLICE;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 700 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWORDS;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 706 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWSPLICE;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 712 "parser.l"
{
  return '#';
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 716 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_H;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 721 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_S;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 726 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_R;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 731 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_N;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 736 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_T;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 741 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_SEMI;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 746 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));
  yylval->val = int_str(str, num(10));
  return HASH_N_EQUALS;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 752 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));
  yylval->val = int_str(str, num(10));
  return HASH_N_HASH;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 758 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 185) ? OLD_DOTDOT : DOTDOT;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 763 "parser.l"
{
  yy_pop_state(yyscanner);
  yylval->lexeme = chk_strdup(L"@");
  return TEXT;
}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 769 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 773 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  return '/';
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 778 "parser.l"
{
  yylval->chr = '.';
  return CONSDOT;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 783 "parser.l"
{
  yylval->chr = '.';
  return LAMBDOT;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 788 "parser.l"
{
  yylval->chr = '.';
  return UREFDOT;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 793 "parser.l"
{
  yylval->chr = '.';
  return '.';
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 798 "parser.l"
{
  yylval->chr = '.';
  return OREFDOT;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 803 "parser.l"
{
  yylval->chr = '.';
  return UOREFDOT;
}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 808 "parser.l"
{
  if (YYSTATE == SPECIAL)
    yy_pop_state(yyscanner);  /* @\ continuation */
  yyextra->lineno++;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 814 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = char_esc(yytext[1]);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);
  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 823 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = num_esc(yyg, yytext + 1);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);

  {
    char lastchar = yytext[yyleng-1];
    if (lastchar == ';' && opt_compat && opt_compat <= 109)
      unput(lastchar);
  }

  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 839 "parser.l"
{
  yyerrorf(yyg, lit("\\x escape without digits"), nao);
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 843 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 847 "parser.l"
{
  /* comment */
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 851 "parser.l"
{
  val ch = chr_str(string_utf8(yytext), zero);
  if (chr_isspace(ch))
    yyerrprepf(yyg, lit("unexpected whitespace character #\\x~,02x"),
               ch, nao);
  else if (chr_isunisp(ch))
    yyerrprepf(yyg, lit("unexpected Unicode space character #\\x~,02x"),
               ch, nao);
  else if (chr_iscntrl(ch))
    yyerrprepf(yyg, lit("unexpected control character #\\x~,02x"),
               ch, nao);
  else
    yyerrprepf(yyg, lit("unexpected character #\\~a"),
               ch, nao);
  return ERRTOK;
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 868 "parser.l"
{
  yyerrprepf(yyg, lit("non-UTF-8 byte #x~02x in directive"),
             num(convert(unsigned char, yytext[0])), nao);
  return ERRTOK;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 874 "parser.l"
{
  yylval->chr = '/';
  return (YYSTATE == SREGEX) ? REGCHAR : '/';
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 879 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return REGCHAR;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 884 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext + 1);
  return REGCHAR;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 889 "parser.l"
{
  yylval->chr = yytext[1];
  return REGTOKEN;
}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 894 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 898 "parser.l"
{
  yyextra->lineno++;
  yyerrprepf(yyg, lit("newline in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 904 "parser.l"
{
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return REGCHAR;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 910 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 915 "parser.l"
{
  yylval->chr = yytext[1];
  return REGCHAR;
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 920 "parser.l"
{
  if (opt_compat && opt_compat <= 105) {
    yylval->chr = yytext[1];
    return REGCHAR;
  }

  if (yytext[1] == 'x')
    yyerrprepf(yyg, lit("\\x escape without digits in regex"), nao);
  else
    yyerrprepf(yyg, lit("unrecognized escape in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 933 "parser.l"
{
  yyerrprepf(yyg, lit("dangling backslash in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 938 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yylval->lexeme = chk_strdup(wchr);
    return TEXT;
  }
  yylval->chr = wchr[0];
  return REGCHAR;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 948 "parser.l"
{
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return REGCHAR;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 953 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SPACE;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 958 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return TEXT;
}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 963 "parser.l"
{
  yyextra->lineno++;
  return '\n';
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 968 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
  return '*';
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 973 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 977 "parser.l"
{
  /* eat whole line comment */
  yyextra->lineno++;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 982 "parser.l"
{
  /* comment to end of line */
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 986 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 991 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 996 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1001 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 1006 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 1010 "parser.l"
{
  yyextra->lineno++;

  if (!opt_compat || opt_compat > 109)
    return ' ';
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1018 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext+1);
  return LITCHAR;
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1023 "parser.l"
{
  yyerrorf(yyg, lit("\\x escape without digits"), nao);
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1027 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape: \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1031 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext);
  return LITCHAR;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1036 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1041 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK; /* hack */
}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 1046 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1053 "parser.l"
{
  yyerrprepf(yyg, lit("newline in character literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1060 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string quasiliteral"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 1067 "parser.l"
{
  yyextra->lineno++;

  if (opt_compat && opt_compat <= 109)
    return ' ';

  yyerrprepf(yyg, lit("newline in word list literal"), nao);
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 135:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1078 "parser.l"
{
  yy_push_state(QSPECIAL, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1083 "parser.l"
{
  yyerrprepf(yyg, lit("malformed @ expression in quasiliteral"), nao);
  return ERRTOK;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1088 "parser.l"
{
  return ' ';
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1092 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yylval->lexeme = chk_strdup(wchr);
    return TEXT;
  }
  yylval->chr = wchr[0];
  return LITCHAR;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1102 "parser.l"
{
  yylval->chr = strtol(yytext, 0, 16);
  return LITCHAR;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1107 "parser.l"
{
  return '\'';
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1111 "parser.l"
{
}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 1114 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1118 "parser.l"
{
  yyerrorf(yyg, lit("bad character in buffer literal: \\~a"),
           chr(yytext[0]), nao);
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1123 "parser.l"
{
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return LITCHAR;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1128 "parser.l"
ECHO;
	YY_BREAK
#line 5426 "lex.yy.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(SPECIAL):
			case YY_STATE_EOF(BRACED):
			case YY_STATE_EOF(NESTED):
			case YY_STATE_EOF(REGEX):
			case YY_STATE_EOF(SREGEX):
			case YY_STATE_EOF(STRLIT):
			case YY_STATE_EOF(CHRLIT):
			case YY_STATE_EOF(QSILIT):
			case YY_STATE_EOF(QSPECIAL):
			case YY_STATE_EOF(WLIT):
			case YY_STATE_EOF(QWLIT):
			case YY_STATE_EOF(BUFLIT):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1576 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1576 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1575);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1128 "parser.l"


static int directive_tok(scanner_t *yyscanner, int tok, int state)
{
  struct yyguts_t *yyg = convert(struct yyguts_t *, yyscanner);
  char *pstart = yytext + 1 + strspn(yytext + 1, " \t");
  char *pcolon = strchr(pstart, ':');
  char *pend = pstart + strspn(pstart, ":-abcdefghijklmnopqrstuvwxyz");

  *pend = 0;

  if (pcolon != 0) {
    val pkgname = string_utf8((*pcolon = 0, pstart));
    val package = if3(pstart[0], find_package(pkgname), keyword_package);
    if (!package) {
      yyerrprepf(yyg, lit("package ~a not found"), pkgname, nao);
      tok = ERRTOK;
    }
    if (package != user_package && package != keyword_package) {
      val sym = string_utf8(pcolon + 1);
      yyerrprepf(yyg, lit("~a:~a: original usr package expected, not ~a"),
                 pkgname, sym, pkgname, nao);
      tok = ERRTOK;
    }
  } else {
    val symname = string_utf8(pstart);
    val sym = intern_fallback(symname, cur_package);
    val package = symbol_package(sym);

    if (package != user_package && package != keyword_package) {
      yyerrprepf(yyg, lit("~a: this is ~a:~a, not usr:~a"),
                 symname, package_name(package), symname, symname, nao);
      tok = ERRTOK;
    }
  }

  if (state != 0)
    yy_push_state(state, yyscanner);
  else
    yy_pop_state(yyscanner);
  yylval->lineno = yyextra->lineno;
  return tok;
}

void end_of_regex(scanner_t *yyg)
{
  if (YYSTATE != REGEX && YYSTATE != SREGEX)
    internal_error("end_of_regex called in wrong scanner state");

  yy_pop_state(yyg);

  if (YYSTATE != INITIAL) {
    if (yy_top_state(yyg) == INITIAL
      || yy_top_state(yyg) == QSILIT
      || yy_top_state(yyg) == QWLIT)
      yy_pop_state(yyg);
  }
}

void end_of_char(scanner_t *yyg)
{
  if (YYSTATE != CHRLIT)
    internal_error("end_of_char called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_buflit(scanner_t *yyg)
{
  if (YYSTATE != BUFLIT)
    internal_error("end_of_buflit called in wrong scanner state");

  yy_pop_state(yyg);
}

val source_loc(val form)
{
  return gethash(form_to_ln_hash, form);
}

val source_loc_str(val form, val alt)
{
  cons_bind (line, file, gethash(form_to_ln_hash, form));
  if (missingp(alt))
    alt = lit("source location n/a");
  return if3(line, format(nil, lit("~a:~d"), file, line, nao), alt);
}

int yylex(YYSTYPE *yylval_param, yyscan_t yyscanner)
{
  struct yyguts_t * yyg = convert(struct yyguts_t *, yyscanner);
  int yy_char;

  if (yyextra->tok_idx > 0) {
    struct yy_token *tok = &yyextra->tok_pushback[--yyextra->tok_idx];
    yyextra->recent_tok = *tok;
    *yylval_param = tok->yy_lval;
    return tok->yy_char;
  }

  yy_char = yyextra->recent_tok.yy_char = yylex_impl(yylval_param, yyscanner);
  yyextra->recent_tok.yy_lval = *yylval_param;

  return yy_char;
}

void prime_scanner(scanner_t *yyg, enum prime_parser prim)
{
  while (YYSTATE != INITIAL)
    yy_pop_state(yyg);

  switch (prim) {
  case prime_lisp:
  case prime_interactive:
    yy_push_state(SPECIAL, yyg);
    yy_push_state(NESTED, yyg);
    yy_push_state(NESTED, yyg);
    break;
  case prime_regex:
    yy_push_state(SREGEX, yyg);
    break;
  }
}

void scrub_scanner(scanner_t *yyg, int yy_char, wchar_t *lexeme)
{
  struct yy_token *rtok = &yyextra->recent_tok;

  if (rtok->yy_char == yy_char && rtok->yy_lval.lexeme == lexeme) {
    rtok->yy_char = 0;
    rtok->yy_lval.lexeme = 0;
  }
}

void parser_l_init(void)
{
  prot1(&form_to_ln_hash);
  form_to_ln_hash = make_eq_hash(t, nil);
}

