
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 165
#define YY_END_OF_BUFFER 166
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1603] =
    {   0,
       62,   62,   62,   62,   62,   62,   62,   62,  138,  138,
      138,  138,  149,  149,  162,  162,  166,  114,  165,  115,
      165,  115,  165,  113,  165,  117,  165,  114,  165,  114,
      165,  114,  165,  117,  165,   98,   99,  165,   62,   98,
       99,  165,   84,  165,   84,   98,   99,  165,   63,   98,
       99,  165,   98,   99,  165,   55,   98,   99,  165,   61,
       98,   99,  165,   98,   99,  165,   89,   98,   99,  165,
       85,   98,   99,  165,    1,   19,   98,   99,  165,16400,
       97,   98,   99,  165,   83,   98,   99,  165,   19,   98,
       99,  165,16400,   55,   98,   99,  165,   98,   99,  165,

       67,   98,   99,  165,   54,   98,   99,  165,   61,   98,
       99,  165,   99,  165,   99,  165,   99,  165,   99,  165,
       62,   98,   99,  165,   20,   98,   99,  165,16401,   72,
       98,   99,  165,   58,   98,   99,  165,   20,   98,   99,
      165,16401,   58,   98,   99,  165,   89,   98,   99,  165,
        1,   20,   98,   99,  165,16401,   20,   98,   99,  165,
    16401,   56,   98,   99,  165,   20,   98,   99,  165,16401,
       59,   98,   99,  165,   99,  165,   99,  165,   99,  165,
       62,   98,   99,  165,   21,   98,   99,  165,16402,   72,
       98,   99,  165,   21,   98,   99,  165,16402,   89,   98,

       99,  165,    1,   21,   98,   99,  165,16402,   21,   98,
       99,  165,16402,   56,   98,   99,  165,   21,   98,   99,
      165,16402,   99,  165,   99,  165,   99,  165,  111,  112,
      165,  111,  112,  165,  105,  165,  105,  111,  112,  165,
      107,  111,  112,  165,  100,  107,  111,  112,  165,  110,
      111,  112,  165,  112,  165,  112,  165,  112,  165,  112,
      165,  106,  165,  106,  111,  112,  165,  146,  152,  165,
      146,  152,  165,  132,  165,  132,  146,  152,  165,  120,
      146,  152,  165,  146,  152,  165,  152,  165,  152,  165,
      152,  165,  152,  165,  131,  146,  152,  165,  133,  165,

      133,  146,  152,  165,  130,  131,  146,  152,  165,  130,
      131,  146,  152,  165,  130,  131,  146,  152,  165,  131,
      152,  165,  131,  152,  165,  131,  152,  165,  131,  152,
      165,  134,  165,  134,  146,  152,  165,  137,  146,  152,
      165,  146,  152,  165,  121,  146,  152,  165,   62,   98,
       99,  165,   98,   99,  165,   98,   99,  165,   89,   98,
       99,  165,    1,   10,   19,   98,   99,  165,16400,   56,
       98,   99,  165,   98,   99,  165,  138,  146,  152,  165,
      135,  165,  135,  146,  152,  165,  146,  152,  165,  146,
      152,  165,  151,  165,  149,  151,  165,  150,  165,  150,

      151,  165,  148,  151,  165,  147,  151,  165,  156,  163,
      165,  162,  163,  165,  161,  165,  156,  161,  163,  165,
      157,  160,  163,  164,  165,  156,  163,  165,  160,  163,
      165,  156,  163,  165,  153,  156,  163,  165,  153,  156,
      163,  165,  156,  163,  165,  156,  163,  165,  159,  160,
      163,  165,  145,  165,  145,  146,  152,  165,  139,  146,
      152,  165,  146,  152,  165,  114,  114,  114,  114,  115,
      113,  119,  116,  114,  114,  114,  119,   62,   88,   84,
       68,   66,   64,   70,    1,   87,    4,   90,    1,   19,
    16400,   19,16400,   19,16400,   97,   96,   92,   92,   96,

       93,   96,   94,   96,   95,   96,   98,   62,   88,   20,
       22,16401,   20,16401,   20,   22,16401,   20,16401,   20,
    16401,   79,   73,   78,   76,   75,   74,   77,    1,   20,
       22,16401,   57,    4,   20,   22,16401,   20,   22,16401,
       20,16401,   22,   20,16401,   20,16401,   20,16401,    9,
       20,16401,   92,   20,   98,16401,   62,   88,   21,   23,
    16402,   21,16402,   21,   23,16402,   21,16402,   21,16402,
        1,   21,   23,16402,   82,    4,   21,   23,16402,   21,
       23,16402,   21,16402,   23,   21,16402,   21,16402,   21,
    16402,    9,   21,16402,   21,   98,16402,  105,  109,  104,

      104,  109,  101,  109,  108,  109,  102,  109,  103,  109,
      109,  111,  106,  132,  128,  124,  125,  124,  125,  128,
      122,  128,  126,  128,  127,  128,  146,  133,  130,  129,
      130,  129,  130,  134,  136,    9,  136,  136,  123,  128,
       62,   88,    1,   10,    1,   10,   19,16400,  138,  135,
      125,  125,  128,  149,  150,  156,  162,  161,  156,  153,
      156,  153,  156,  156,  156,  153,  156,  156,  156,  158,
      145,  144,  140,  144,  143,  144,  119,  114,  119,  118,
      118,  119,   86,   91,   69,   71,   65,    2,    2,    2,
       60,    4,    5,    5,    5,    8,    4,    5,    8, 8208,

        5,    8,    5,    8,    4,   19,16400, 8208,   92,   94,
       94,   94,   20,   22,16401,   20,   22,16401,   20,   22,
    16401,   20,   22,16401, 8209,   20,   22,16401,   20,   22,
    16401,   20,   22,16401,   22,   22,   81,   80,   20,   22,
    16401,   20,16401,   20,16401,    4, 8209,    1,   20,   22,
    16401,   20,   22,16401,    6,    4,    6,    6,    6,    6,
        8,    8,    4,    6,    8, 8209,    6,    8,    8,    6,
        8,    8,    8,    8,   20,   22,16401,    4,   20,   22,
    16401,   20,   22,16401,   20,   22,16401,   22,   20,   22,
    16401,   22,   20,   22,16401,   20,16401,   20,16401,    9,

       20,   22,16401,   21,   23,16402,   21,   23,16402,   21,
       23,16402,   21,   23,16402, 8210,   21,   23,16402,   21,
       23,16402,   21,   23,16402,   23,   23,   21,   23,16402,
       21,16402,   21,16402,    4, 8210,    1,   21,   23,16402,
       21,   23,16402,    7,    4,    7,    7,    7,    7,    8,
        8,    4,    7,    8, 8210,    7,    8,    8,    7,    8,
        8,    8,    8,   21,   23,16402,    4,   21,   23,16402,
       21,   23,16402,   21,   23,16402,   23,   21,   23,16402,
       23,   21,   23,16402,   21,16402,   21,16402,    9,   21,
       23,16402,  104,  104,  102,  102,  102,  124,  125,  124,

      125,  126,  126,  126,    9,    2,   14,    2,   12,    8,
     8208,  125,  125,   81,  156,   80,  156,  153,  156,  156,
      153,  156,  156,  156,  118,    5,    4,    2,    3,    3,
        2,    3,    2,    3,   51,   51,   51,   51,   51,   51,
       33,    4,    5,    8,    4,    5,    4,    5, 8208,    4,
        5,    4,    5,   19,16400,    5,   19,16400,    6,    4,
       20,   22,16401,   20,   22,16401,   20,   22,16401,   20,
       22,16401,   20,   22,16401,   20,   22,16401,   22,   22,
       22,   22,   20,   22,16401,   20,   22,16401,   20,   22,
    16401,    4,    6, 8209,    6,    6,    6,    6,    6,    4,

        6,    6,    6,    6,    6,    6,    4,    6,    4,    6,
     8209,    6,    4,    6,    6,   20,   22,16401,   20,   22,
    16401,    4,    6,   20,   22,16401,    6,   20,   22,16401,
       22,   20,   22,16401,   20,   22,16401,   20,   22,16401,
        9,   20,   22,16401,    7,    4,   21,   23,16402,   21,
       23,16402,   21,   23,16402,   21,   23,16402,   21,   23,
    16402,   21,   23,16402,   23,   23,   23,   23,   21,   23,
    16402,   21,   23,16402,   21,   23,16402,    4,    7, 8210,
        7,    7,    7,    7,    7,    4,    7,    7,    7,    7,
        7,    7,    4,    7,    4,    7, 8210,    7,    4,    7,

        7,   21,   23,16402,   21,   23,16402,    4,    7,   21,
       23,16402,    7,   21,   23,16402,   23,   21,   23,16402,
       21,   23,16402,   21,   23,16402,   15,   13,   11,    9,
       21,   23,16402,    2,    3,   14,    2,    3,   12,  156,
      156,   24,   32,   34,   45,   45,   45,   45,   45,   45,
       40,   40,   40,   40,   40,   40,   48,    4,    5, 8208,
        4,    6,   20,   22,16401,   20,   22,16401,   20,   22,
    16401,   22,    6,    6,    6,    6,    6,    4,    6,    4,
        6,    6,   20,   22,16401,    6,   20,   22,16401,    6,
       20,   22,16401,    6,   20,   22,16401,    6,   20,   22,

    16401,    6, 8209,    6,   20,   22,16401,    6,   20,   22,
    16401,    4,    6,   20,   22,16401,    6,   20,   22,16401,
        6,   20,   22,16401,    6,   20,   22,16401,    6,   20,
       22,16401,    6,   22,    6,   22,    4,    7,   21,   23,
    16402,   21,   23,16402,   21,   23,16402,   23,    7,    7,
        7,    7,    7,    4,    7,    4,    7,    7,   21,   23,
    16402,    7,   21,   23,16402,    7,   21,   23,16402,    7,
       21,   23,16402,    7,   21,   23,16402,    7, 8210,    7,
       21,   23,16402,    7,   21,   23,16402,    4,    7,   21,
       23,16402,    7,   21,   23,16402,    7,   21,   23,16402,

        7,   21,   23,16402,    7,   21,   23,16402,    7,   23,
        7,   23,  156,  154,   36,   36,   36,   36,   36,   36,
       52,   52,   52,   52,   52,   52,   53,   43,   43,   43,
       43,   43,   43,   26,   25,   25,   25,   25,   25,   25,
        6,   20,   22,16401,    6,   20,   22,16401,    6,   20,
       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,
        6,   20,   22,16401,    6, 8209,    6,   20,   22,16401,
        6,   20,   22,16401,    6,   20,   22,16401,    6,   20,
       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,
        6,   22,    6,   22,    6,   22,    6,   22,    7,   21,

       23,16402,    7,   21,   23,16402,    7,   21,   23,16402,
        7,   21,   23,16402,    7,   21,   23,16402,    7,   21,
       23,16402,    7, 8210,    7,   21,   23,16402,    7,   21,
       23,16402,    7,   21,   23,16402,    7,   21,   23,16402,
        7,   21,   23,16402,    7,   21,   23,16402,    7,   23,
        7,   23,    7,   23,    7,   23,  155,  142,  142,   29,
       29,   29,   29,   29,   29,   28,   49,   49,   49,   49,
       49,   49,   44,   42,   27,   37,   37,   37,   37,   37,
       37,    6,   20,   22,16401,    6,   20,   22,16401,    6,
       20,   22,16401,    6,   20,   22,16401,    6,   20,   22,

    16401,    6,   20,   22,16401,    6,   20,   22,16401,    6,
       20,   22,16401,    6,   20,   22,16401,    6,   22,    7,
       21,   23,16402,    7,   21,   23,16402,    7,   21,   23,
    16402,    7,   21,   23,16402,    7,   21,   23,16402,    7,
       21,   23,16402,    7,   21,   23,16402,    7,   21,   23,
    16402,    7,   21,   23,16402,    7,   23,   30,   30,   30,
       30,   30,   30,   47,   47,   47,   47,   47,   47,   31,
       31,   31,   31,   31,   31,   38,   38,   38,   38,   38,
       38,   39,   39,   39,   39,   39,   39,   41,   35,   35,
       35,   35,   35,   35,   50,   46,   46,   46,   46,   46,

       46,  141
    } ;

static const flex_int16_t yy_accept[1642] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   18,   20,   22,   24,   26,   28,   30,   32,   34,
       36,   39,   43,   45,   49,   53,   56,   60,   64,   67,
       71,   75,   81,   85,   89,   94,   98,  101,  105,  109,
      113,  115,  117,  119,  121,  125,  130,  134,  138,  143,
      147,  151,  157,  162,  166,  171,  175,  177,  179,  181,
      185,  190,  194,  199,  203,  209,  214,  218,  223,  225,
      227,  229,  232,  235,  237,  241,  245,  250,  254,  256,

      258,  260,  262,  264,  268,  271,  274,  276,  280,  284,
      287,  289,  291,  293,  295,  299,  301,  305,  310,  315,
      320,  323,  326,  329,  332,  334,  338,  342,  345,  349,
      353,  356,  359,  363,  370,  374,  377,  381,  383,  387,
      390,  393,  395,  398,  400,  403,  406,  409,  412,  415,
      417,  421,  426,  429,  432,  435,  439,  443,  446,  449,
      453,  455,  459,  463,  466,  467,  468,  469,  470,  471,
      472,  472,  473,  474,  475,  476,  477,  477,  478,  479,
      479,  480,  480,  481,  482,  482,  483,  484,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,

      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  486,  487,  488,  489,
      489,  492,  494,  496,  497,  497,  498,  499,  501,  503,
      505,  507,  508,  508,  508,  509,  509,  510,  510,  513,
      515,  515,  518,  518,  520,  520,  520,  520,  520,  522,
      523,  524,  525,  526,  527,  528,  529,  529,  533,  534,
      535,  535,  538,  541,  543,  544,  546,  546,  546,  546,
      548,  548,  550,  553,  553,  553,  553,  554,  557,  557,
      557,  558,  558,  559,  559,  562,  564,  564,  567,  567,
      569,  569,  569,  569,  571,  571,  575,  576,  577,  577,

      580,  583,  585,  586,  588,  588,  588,  588,  590,  590,
      592,  595,  595,  595,  595,  598,  598,  598,  598,  598,
      599,  600,  601,  603,  605,  607,  609,  611,  612,  613,
      613,  613,  614,  614,  614,  615,  616,  618,  621,  623,
      625,  627,  628,  628,  628,  629,  630,  632,  634,  635,
      635,  636,  636,  638,  639,  641,  642,  643,  643,  643,
      645,  645,  649,  649,  650,  650,  651,  652,  654,  655,
      656,  657,  658,  659,  660,  662,  664,  665,  666,  668,
      669,  670,  671,  672,  673,  675,  677,  678,  679,  680,
      681,  683,  684,  685,  685,  685,  686,  687,  688,  688,

      689,  689,  690,  690,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  692,  692,  692,  694,  695,  696,  697,  701,  703,
      705,  705,  708,  709,  710,  711,  712,  713,  713,  713,
      713,  713,  716,  719,  722,  725,  725,  725,  725,  726,
      729,  732,  735,  735,  735,  735,  736,  736,  737,  737,
      737,  737,  737,  737,  738,  739,  742,  744,  746,  746,

      746,  746,  748,  752,  755,  756,  756,  756,  758,  759,
      759,  760,  760,  760,  760,  762,  763,  767,  769,  770,
      772,  773,  774,  775,  778,  782,  785,  788,  789,  792,
      792,  792,  792,  793,  793,  793,  793,  793,  793,  796,
      798,  800,  800,  800,  800,  804,  804,  804,  804,  804,
      804,  804,  807,  810,  813,  816,  816,  816,  816,  817,
      820,  823,  826,  826,  826,  826,  827,  827,  828,  828,
      828,  828,  828,  828,  831,  833,  835,  835,  835,  835,
      837,  841,  844,  845,  845,  845,  847,  848,  848,  849,
      849,  849,  849,  851,  852,  856,  858,  859,  861,  862,

      863,  864,  867,  871,  874,  877,  878,  881,  881,  881,
      881,  882,  882,  882,  882,  882,  882,  885,  887,  889,
      889,  889,  889,  889,  889,  889,  893,  893,  893,  893,
      894,  895,  896,  897,  898,  898,  900,  902,  903,  904,
      905,  905,  906,  906,  908,  908,  910,  910,  912,  913,
      914,  916,  918,  920,  921,  923,  924,  925,  925,  925,
      926,  927,  928,  930,  931,  933,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,

      935,  935,  935,  935,  935,  935,  935,  935,  936,  937,
      938,  939,  940,  941,  941,  941,  941,  941,  941,  942,
      942,  942,  942,  942,  942,  942,  942,  945,  945,  947,
      950,  952,  952,  956,  959,  960,  960,  961,  964,  967,
      970,  970,  970,  970,  970,  970,  973,  976,  979,  979,
      979,  979,  979,  979,  980,  981,  982,  982,  982,  982,
      983,  983,  983,  983,  983,  983,  983,  986,  989,  992,
      992,  992,  992,  992,  992,  995,  996,  997,  997,  997,
      997,  998,  999, 1000, 1002, 1003, 1004, 1004, 1004, 1004,
     1005, 1005, 1005, 1005, 1006, 1006, 1006, 1006, 1007, 1009,

     1009, 1009, 1012, 1013, 1015, 1019, 1022, 1022, 1027, 1031,
     1031, 1031, 1031, 1031, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1035, 1038, 1041, 1041, 1041, 1041, 1041,
     1041, 1045, 1045, 1046, 1046, 1047, 1050, 1053, 1056, 1056,
     1056, 1056, 1056, 1056, 1059, 1062, 1065, 1065, 1065, 1065,
     1065, 1065, 1066, 1067, 1068, 1068, 1068, 1068, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1072, 1075, 1078, 1078, 1078,
     1078, 1078, 1078, 1081, 1082, 1083, 1083, 1083, 1083, 1084,
     1085, 1086, 1088, 1089, 1090, 1090, 1090, 1090, 1091, 1091,
     1091, 1091, 1092, 1092, 1092, 1092, 1093, 1095, 1095, 1095,

     1098, 1099, 1101, 1105, 1108, 1108, 1113, 1117, 1117, 1117,
     1117, 1117, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1121, 1124, 1127, 1127, 1127, 1127, 1127, 1127, 1127,
     1128, 1128, 1129, 1129, 1130, 1134, 1134, 1137, 1140, 1141,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1143, 1143, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1145, 1145, 1145, 1145, 1145, 1145, 1146,
     1147, 1148, 1148, 1149, 1150, 1151, 1151, 1151, 1152, 1153,

     1154, 1154, 1155, 1156, 1157, 1157, 1157, 1157, 1158, 1158,
     1159, 1161, 1163, 1166, 1169, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1174, 1174, 1174,
     1174, 1174, 1174, 1175, 1175, 1175, 1175, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1177, 1178, 1178, 1178, 1178,
     1178, 1178, 1180, 1180, 1182, 1186, 1190, 1194, 1198, 1198,
     1198, 1198, 1202, 1204, 1208, 1212, 1217, 1221, 1221, 1221,
     1221, 1225, 1229, 1233, 1233, 1233, 1233, 1235, 1235, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,

     1237, 1237, 1239, 1242, 1245, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1250, 1250, 1250,
     1250, 1250, 1250, 1251, 1251, 1251, 1251, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1253, 1254, 1254, 1254, 1254,
     1254, 1254, 1256, 1256, 1258, 1262, 1266, 1270, 1274, 1274,
     1274, 1274, 1278, 1280, 1284, 1288, 1293, 1297, 1297, 1297,
     1297, 1301, 1305, 1309, 1309, 1309, 1309, 1311, 1311, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1314, 1315, 1315, 1315, 1315, 1315, 1315, 1315,

     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1316, 1317, 1318, 1318, 1319, 1320, 1321, 1321, 1322,
     1323, 1324, 1325, 1326, 1327, 1327, 1328, 1328, 1328, 1328,
     1328, 1329, 1330, 1331, 1332, 1333, 1334, 1334, 1334, 1334,
     1335, 1335, 1335, 1335, 1336, 1337, 1338, 1339, 1340, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1345, 1349, 1353, 1353, 1353, 1353, 1353, 1353,
     1357, 1361, 1365, 1365, 1365, 1365, 1367, 1371, 1375, 1379,

     1379, 1379, 1379, 1379, 1379, 1383, 1387, 1391, 1391, 1391,
     1391, 1391, 1391, 1393, 1395, 1397, 1397, 1397, 1397, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1403,
     1407, 1411, 1411, 1411, 1411, 1411, 1411, 1415, 1419, 1423,
     1423, 1423, 1423, 1425, 1429, 1433, 1437, 1437, 1437, 1437,
     1437, 1437, 1441, 1445, 1449, 1449, 1449, 1449, 1449, 1449,
     1451, 1453, 1455, 1455, 1455, 1455, 1457, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1458, 1459, 1460, 1460, 1460,

     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1461, 1462, 1463, 1464, 1465, 1466,
     1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1473, 1473,
     1473, 1473, 1474, 1474, 1474, 1475, 1475, 1475, 1476, 1476,
     1476, 1476, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1482,
     1482, 1482, 1482, 1482, 1482, 1486, 1490, 1494, 1494, 1494,
     1494, 1494, 1494, 1494, 1498, 1502, 1506, 1506, 1506, 1506,
     1506, 1506, 1510, 1514, 1518, 1518, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1524,

     1528, 1532, 1532, 1532, 1532, 1532, 1532, 1532, 1536, 1540,
     1544, 1544, 1544, 1544, 1544, 1544, 1548, 1552, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1559, 1560, 1561,
     1562, 1563, 1564, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
     1570, 1571, 1572, 1573, 1574, 1575, 1576, 1576, 1577, 1578,
     1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588,
     1588, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,

     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,
     1589, 1589, 1589, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
     1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1602, 1602,
     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1603,
     1603
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    6,    9,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,    6,
       25,    6,   26,   27,   28,   28,   29,   30,   31,   29,
       32,   33,   32,   34,   32,   32,   32,   35,   32,   32,
       32,   36,   37,   38,   32,   32,   39,   32,   32,   32,
       40,   41,   42,   43,   32,   44,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   32,   54,   55,   56,   57,
       58,   59,   32,   60,   61,   62,   63,   64,   39,   65,
       66,   32,   67,   68,   69,   70,    1,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   72,   72,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   75,
       75,   75,   75,   75,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,    6,    9,
       10,    2,   11,   12,   10,   12,   13,   14,   15,   15,
       15,   15,   16,   17,    6,    6,   18,   15,   15,   15,
       15,   19,   19,   19,   19,   19,   19,   19,   19,   10,
        6,    7,   20,    1,   15,   15,   15,   15,   21,   15,
       19,   19,   19,   19,   22,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   10,    1,    7,   11,
        1,    1,   23,   23,   23
    } ;

static const flex_int16_t yy_base[1889] =
    {   0,
        0,    3,   78,    0,  153,    0,  228,    0,  302,  376,
        6,    8,  350,  356,  451,    0,  525,  599,  673,    0,
      362,  534,  715,  789,  863,  912,  961, 1030,  539,  544,
     5303,  235,11586, 5298, 5294,   11,  250,  256,  261,   12,
    11586,   24,11586, 5294,11586,  621, 1099, 5279,   30,   37,
    11586,  389,    0,11586, 5274,11586, 1172,11586,11586,11586,
    11586, 5218, 5207, 5205,  551,  633, 1231,11586, 1289, 5255,
       12,    6,  688,  724,   50,11586, 5192, 5187, 5182,  572,
      731, 5228, 1357,  625,  351,  752,  762,  541, 5175, 5162,
     5160,11586,  343,11586, 5227,11586,11586, 1432,11586, 5155,

     5153, 5142,11586, 5209,11586,  345,11586, 5203,11586, 1505,
    11586, 5128, 5127, 5124,11586,11586, 5191,    0,   41, 1552,
    11586, 5117, 5116, 5105,11586, 5172, 1595, 1660,11586,  396,
      811,  318,  529,  562, 5165,   18,  402,11586, 5157,  392,
       61,11586,   13,11586, 5156,11586,11586,    0,  344,11586,
     5155,11586,  420,11586,  601,  649,  704, 5109, 5085, 5119,
    11586, 5127,11586,  840,  558,  584,  628,  693,11586, 5123,
      728,    0,11586,  562,  736,  746,  826,  411,  933,  821,
      899,  858,11586,11586,  355,11586,11586,11586,  975,  986,
       52,    0,  654, 1681, 1001,  923, 1036,  728, 1184,  987,

      947,  994,  991, 1188,  913,  952, 1093, 1220, 1225, 1247,
     5056, 5052, 5046,  793,  907, 1065,  530, 1163,11586, 1744,
     1178, 5099, 1309,    0, 1167,11586,  552,  707,11586,  825,
        0,11586, 5040, 5039, 1322, 1184, 1194, 1336, 1343, 1513,
     1204, 1520, 1329, 1610, 5032, 5031, 5027, 1373, 1617,11586,
    11586,11586,11586,11586,11586,11586, 1260, 1812,11586, 1880,
     1955, 1828, 1846, 1849,  579, 1867, 5026, 5024, 5022, 2023,
     5066, 2091,    0, 5016, 5008, 4999,  851, 2028, 4994, 4993,
     1405, 1328, 1512, 1626, 2031, 2052, 1368, 2064, 1338, 2113,
     4987, 4986, 4977, 2124, 1538, 2192,11586, 2260, 2335, 2141,

     2151, 2219,  698, 2226, 4976, 4975, 4972, 2231, 1025, 2403,
        0, 4971, 4969, 4968, 2410, 4960, 4959,  846,  546,11586,
    11586,  585,  869,11586,11586, 1267,11586,    0,11586, 4958,
     4952,11586,  988,  621,11586,11586,  659,  893,11586, 1294,
        0,11586, 4951, 4946,11586,    0, 1058, 2467,11586,  639,
    11586, 1556, 1570,    0,11586,  732, 1176, 1610,  562, 1652,
     1630, 1676, 4965, 1014,  645,11586,  943, 1300, 1052,11586,
        0, 1093,11586, 1694, 1179, 1895, 1802, 1911, 2419, 4952,
     4941,11586,11586,11586,11586,  303,    0, 1298,  665,11586,
      819, 1101,11586, 1860, 1929,11586,11586,11586,  886,  904,

     1314, 1499,    0, 2499, 1581, 4929, 4923, 4921,  700, 4936,
     1356, 4941, 1564, 4932, 4938, 4918, 4920,  387, 4906, 1063,
     4914,  259, 4901, 4899, 2009, 2015, 2019, 2108, 2042, 2129,
     2156, 2198, 2237, 2215, 2391, 2182, 2549, 2241, 2247, 2255,
     2398, 2458, 2429, 2433, 2436, 2252, 2511, 2532, 4878, 4876,
     1806, 2624,    0, 2548,    0, 2521,11586, 2683,    0, 2582,
     1915, 2561, 2123, 1240, 1817,11586, 4919, 4871, 2423, 2725,
     2696, 2711, 2714, 2732, 2750, 4867, 4866, 4859, 2503, 2753,
     2774, 2786, 4857, 4855, 4850, 2426, 4891, 1603, 4837, 4829,
     4824, 4814, 4808,11586,11586, 2813, 2827, 2835, 4805, 4804,

     4803, 2903, 2971, 2863, 2535, 4849, 2745, 3039, 1778, 2758,
     2876, 4800, 4797, 4793, 2539, 4834, 3107, 1831, 2830, 2922,
     4785, 4778, 4777, 2897, 3175, 2931, 2958, 1960, 2999, 4763,
     4758, 4757, 2049, 4754, 4748, 4747, 4742, 4732, 3011, 3073,
     3094, 4724, 4722, 4721, 3243, 4711, 4710, 4708, 2687, 3311,
     2852, 3132, 3135, 3203, 3214, 4702, 4699, 4698, 2704, 3277,
     3282, 3318, 4695, 4671, 4669, 3032, 4715, 2075, 4665, 4663,
     4660, 4658, 4650, 3331, 3336, 3354, 4646, 4639, 4637, 3422,
     3490, 2951, 2690, 4681, 2976, 3558, 2102, 3004, 3292, 4632,
     4628, 4627, 2737, 4673, 3626, 2118, 3045, 3399, 4623, 4615,

     4612, 3168, 3694, 3408, 3461, 2143, 3497, 4611, 4600, 4598,
     2211, 4596, 4594, 4585, 4582, 4580, 3524, 3565, 3586, 4570,
     4569, 4563, 1525, 2941,  923, 3762, 4561, 4557, 4555, 1394,
     1269, 2989,11586, 4601, 4544, 1656, 1404, 3073,11586, 4586,
     4538, 3144, 2298, 2396,    0, 3819,    0, 3151, 1862, 1418,
        0,    0, 3193, 3213, 3233, 4542, 4553,    0, 2795,11586,
     3253, 3438,  989,    0, 2844, 3851, 4527, 4526, 4540, 4543,
     4531, 1109, 4527, 4529, 4530,  747, 4515, 4524, 1456, 4509,
        0, 4504, 4495, 4510, 4500, 1706, 4488, 4489, 4484, 4472,
     4459, 4461, 3581, 3612, 3618, 3661, 3665, 3718, 3740, 3748,

     3752, 3785, 3840, 3872, 3881, 3904, 3916,11586, 3920, 3951,
     4451, 4447, 4441, 3948, 3957, 4032, 4015, 1866,11586, 4055,
     4130, 4046, 4090, 4113, 4154, 4435, 3538, 3260, 3368, 3276,
     3444, 3509, 3381, 4479, 4162, 3302, 4192, 4215, 4226, 4233,
     4423, 4421, 4417, 4409, 4404, 4251, 4254, 4275, 4403, 4395,
     4394, 4388, 4383, 3553, 3743, 2858, 4381, 4377, 4369, 2950,
     4366, 4362, 4357, 4343, 4341, 4339, 4287, 4314, 4328, 4337,
     4336, 4329, 4327, 4322, 4396, 3154, 2962, 4320, 4315, 4314,
     2990, 3170, 3359, 4464, 3035, 4356, 4303, 4302, 4298, 3058,
     4288, 4287, 4281, 3757, 4264, 4249, 4246, 4171, 3470, 4244,

     4240, 3523, 4361, 3659, 4382, 4424, 4441, 4532, 4503, 3674,
     4234, 4220, 4208, 3165, 4201, 4193, 4192, 4186, 4184, 4181,
     4177, 4176, 4539, 4556, 4573, 4168, 4160, 4139, 4137, 4135,
     4641, 4125, 4513, 3684, 4600, 4616, 4627, 4649, 4124, 4118,
     4109, 4104, 4100, 4670, 4703, 4710, 4087, 4084, 4075, 4073,
     4072, 3867, 4403, 3218, 4056, 4055, 4045, 3228, 4041, 4040,
     4037, 4027, 4025, 4023, 4724, 4731, 4748, 4022, 4006, 4002,
     4000, 3999, 4816, 3373, 3254, 3997, 3995, 3994, 3295, 3577,
     3621, 4884, 3363, 4741, 3979, 3975, 3974, 3412, 3970, 3958,
     3957, 4430, 3948, 3947, 3945, 4767, 4060, 3944, 3934, 3705,

     4788, 4375, 4843, 4850, 4861, 4952, 4923, 3699, 3921, 3911,
     3910, 3475, 3901, 3899, 3896, 3890, 3886, 3881, 3880, 3878,
     4959, 4976, 4993, 3877, 3873, 3867, 3863, 3849, 1211, 1264,
     3591, 3712,    0,    0, 5061, 3848, 3790, 5118, 3868, 5167,
        0,    0, 3841, 2047, 2068, 3864, 3859, 3860, 3847, 3848,
     3841, 3842, 3842, 3816, 2235, 3831, 3801, 3809, 3795, 3807,
     3796, 3797, 3785, 3780, 3777, 3775, 2790, 3767, 2935,11586,
     2951,11586, 3910, 3862, 3781, 4087, 5237, 3901, 5312, 4519,
     4290, 3139,11586, 4094, 4259, 4293, 5387, 4470,11586, 4369,
     5418, 4632, 3748, 3741, 3736, 4939, 4427,11586, 4494,    0,

     4727, 3732, 3727, 3723, 4757, 5481, 3174,11586, 4771, 4833,
     4877, 5549, 5001, 5069, 5082, 3717, 3707, 3706, 3691, 3690,
     3688, 3687, 3685, 3684, 3814, 3675, 3673, 3672, 3658, 3657,
     3648, 3647, 3638, 3627, 3618, 3612, 3856, 3605, 3603, 3601,
     3600, 3597, 3913, 3593, 3587, 3571, 3951, 3566, 3565, 3551,
     3550, 3548, 3545, 3535, 4879, 4998, 3534, 3531, 3524, 3520,
     3519, 5617, 3513, 4064, 5154, 5275, 5334, 5486, 3503, 3497,
     3491, 5489, 5033, 5557, 5574, 5685, 5642, 3485, 3482, 3475,
     5645, 5656, 5718, 3467, 3466, 3456, 5077, 3503, 3979, 3451,
     3447, 3445, 3444, 3437, 3432, 3428, 3423, 3409, 3408, 3405,

     3397, 5786, 5725, 5746, 5758, 3391, 3390, 3369, 3355, 3353,
     3352, 3341, 3336, 3324, 3988, 3323, 3309, 3304, 3293, 3275,
     3265, 3239, 3236, 3213, 3212, 3200, 4049, 3188, 3185, 3176,
     3165, 3152, 4077, 3145, 3133, 3132, 4143, 3130, 3129, 3120,
     3113, 3103, 3090, 3086, 5110, 5118, 3082, 3064, 3054, 3052,
     3051, 5854, 3032, 4265, 5820, 5827, 5841, 5881, 3028, 3020,
     3016, 5895, 5040, 5903, 5917, 5985, 5924, 3005, 3000, 2998,
     5957, 5993, 6006, 2996, 2986, 2981, 5192, 3025, 4147, 2972,
     2970, 2968, 2959, 2958, 2947, 2940, 2916, 2915, 2898, 2893,
     2888, 6080,11586,    0,    0, 2873, 2845, 2841, 2830, 2840,

     2824,    0, 3256, 2810, 2812, 2793, 2797,    0, 2793, 2796,
     3335, 2774, 2789, 2767,    0, 2753, 6150, 6225, 6300, 3613,
    11586, 3371, 6331, 4228, 2733, 2719, 2712, 3794,11586, 3465,
        0, 2708, 2707, 2700, 3961,11586, 4249, 4268, 4291, 4558,
    11586, 4307,    0, 2698, 2691, 2680, 4341, 4707, 4342,11586,
     4908, 4927, 4747,11586, 4477,    0, 2679, 2672, 2671, 6394,
     2668, 2664, 2650, 2649, 2630, 2570, 2548,  251,  255,  270,
      285,  300,  312,  334,  341,  355,  462,  469,  488,  493,
      524, 6027, 6034, 6061,  558,  567,  592,  611,  642, 6172,
     6245, 6263,  651,  679,  694, 5182, 6399, 6402, 6416,  709,

      725,  761,  788,  799, 6427, 6470, 6487,  817,  828,  859,
      873,  880, 5200, 5350, 4151,  885,  896,  908, 4265,  928,
      942,  947,  968,  976,  992, 1018, 1020, 1022, 1031, 1036,
     1068, 1070, 1072, 1108, 1119, 1137, 1148, 1164, 1176, 1185,
     1189, 1205, 1219, 1221, 1230, 1236, 1246, 1248, 6495, 6498,
     6509, 1269, 1283, 1288, 1297, 1304, 6512, 6523, 6572, 1311,
     1312, 1320, 5197, 6583, 6586, 6594, 1334, 1344, 1357, 1358,
     1440, 6597, 6608, 6611, 1451, 1452, 1456, 1464, 1471, 5427,
     5464, 4347, 1477, 1481, 1482, 4435, 1490, 1493, 1495, 1497,
     1508, 1513, 1514, 1525,11586,11586, 1566,    0, 4599,    0,

     1559, 1565, 1564, 4640, 1568, 4683, 1568, 4723, 1571, 1574,
     1577, 1592,    0,11586, 4815, 6642, 1571, 1595, 1597, 4907,
    11586,11586, 4943,    0, 1611, 1615, 1617, 6705, 4975, 6780,
     4976,11586, 5184, 5003,11586, 6855, 5033,11586, 5220, 6930,
     7005, 5089,11586, 5117,    0, 1618, 1623, 1628, 1629, 1632,
     1636, 1641, 1650, 1652, 6727, 6802, 6877, 1662, 1664, 1669,
     1690, 1759, 1769, 6952, 7013, 7016, 1775, 1785, 1787, 1789,
     1791, 7027, 7038, 7076, 1799, 1803, 1812, 1822, 1824, 1825,
     1827, 1837, 1842, 4563, 1847, 1857, 1867, 1868, 1875, 1876,
     1881, 1901, 1966, 1970, 1972, 1973, 1976, 1982, 7087, 7098,

     7101, 1985, 1986, 1990, 1991, 1996, 1997, 7109, 7112, 7171,
     2005, 2007, 2014, 2015, 2038, 7182, 7185, 7193, 2048, 2049,
     2057, 2058, 2062, 2064, 2075, 2082, 2083, 4606, 2100, 2102,
     2109, 2114, 2118, 2124, 2125, 2130, 2144,    0, 2146,    0,
     2144,    0, 2158,    0,    0, 5119,11586, 5209,    0, 2151,
     2157, 2161, 7268,11586, 5257,    0, 2162, 2174, 2179, 5282,
    11586, 5283,    0, 2181, 2190, 2205, 7343,11586, 5288,    0,
     2224, 2226, 2227,11586, 5326,    0, 2236, 2252, 2253, 5328,
    11586, 2260, 2261, 2281, 2341, 2342, 2348, 2357, 2358, 2360,
     2361, 2364, 2376, 2383, 2386, 2387, 2390, 2391, 2396, 2403,

     2404, 2408, 2409, 2411, 2419, 2423, 2434, 2455, 2465, 2681,
        0, 5332,    0,11586, 5341,    0, 2467, 2468, 2492, 5357,
    11586,11586, 5358,    0, 2500, 2503, 2504, 2516, 2517, 2519,
     2524, 2528, 2529, 2540, 2544, 5389,    0,    0,11586,11586,
     7418, 7441, 7464, 7487, 7510, 7533, 7544, 7566, 7589, 7607,
     7625, 7643, 7661, 7679, 7697, 7720, 7729, 7744, 7766, 7789,
     7812, 7835, 2715, 7853, 7864, 7886, 2824, 7904, 7922, 7940,
     7958, 7976, 7994, 8012, 8030, 8048, 8066, 8084, 8102, 8120,
     8138, 8156, 8174, 8192, 8210, 8228, 8246, 2836, 2854, 8255,
     8263, 2968, 8285, 8296, 8318, 2892, 8341, 8364, 8387, 8396,

     8404, 2900, 8421, 8432, 3000, 8449, 8467, 8485, 8503, 8521,
     8539, 8557, 8575, 8593, 8611, 8629, 8647, 8665, 8683, 8701,
     8719, 8737, 8755, 8773, 8791, 8809, 8827, 8845, 8863, 8881,
     8899, 8917, 8935, 8953, 8971, 8989, 9007, 9025, 9043, 9061,
     9079, 9097, 9115, 3068, 3204, 3485, 9124, 2914, 9146, 9169,
     3080, 3083, 9181, 9203, 9225, 9236, 9253, 9271, 9289, 9307,
     9325, 9343, 9361, 9379, 9397, 9415, 9433, 9451, 9469, 9487,
     9505, 9523, 9541, 9559, 9577, 9595, 9613, 9631, 9649, 9667,
     9685, 9703, 9721, 9739, 9757, 9775, 9793, 9811, 9829, 9847,
     9865, 9883, 9901, 9919, 9937, 9955, 9973, 9991,10009,10027,

     3121,10036,10058, 3124, 3139,10081,10104,10122,10133,10150,
    10168,10186,10204,10222,10240,10258,10276,10294,10312,10330,
    10348,10366,10384,10402,10420,10438,10456,10474,10492,10510,
    10528,10546,10564,10582,10600,10618,10636,10654,10672,10690,
    10708,10726,10744,10767, 3328, 3357,10790,10813,10836,10859,
    10882,10900,10918,10936,10954,10972,10990,11008,11026,11044,
    11062,11080,11098,11116,11134,11152,11170,11188,11206,11224,
    11242,11260,11278,11301,11324,11347,11365,11383,11401,11424,
    11447,11470,11493,11516,11539,11562, 3393, 3435
    } ;

static const flex_int16_t yy_def[1889] =
    {   0,
     1641, 1641, 1640,    3, 1640,    5, 1640,    7, 1642, 1642,
       10,   10, 1643, 1643, 1640,   15, 1643, 1643,    3,   19,
     1643, 1643, 1643, 1643, 1644, 1644, 1645, 1645, 1643, 1643,
     1640, 1646, 1640, 1640, 1640, 1640, 1646, 1646, 1646, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1647, 1648, 1640, 1647, 1640, 1649, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1650, 1640, 1640, 1650, 1640,
     1640,   69, 1651, 1652,   69, 1640, 1640, 1640, 1640, 1640,
     1653,   67, 1653, 1640,   83, 1654, 1655,   83, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,

     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1656,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1657, 1657, 1657,
     1640, 1640, 1640, 1640, 1640, 1640, 1658, 1656, 1640, 1640,
     1640, 1640, 1640, 1647, 1640, 1640, 1640, 1640, 1640,  128,
      128, 1640, 1640, 1640, 1640, 1640, 1640, 1659, 1640, 1640,
     1659, 1640, 1659, 1640, 1659, 1659, 1659, 1659, 1659, 1640,
     1640, 1640, 1640, 1660, 1646, 1646, 1646, 1646, 1640, 1640,
     1640, 1661, 1640, 1646, 1646, 1646, 1640, 1662, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1663,   47, 1664, 1640, 1664, 1664, 1664, 1664, 1664, 1664,

     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1665, 1640, 1640,
     1647, 1647, 1647, 1666, 1640, 1640, 1640, 1640, 1640, 1640,
     1667, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1668, 1669,
     1640, 1670, 1671, 1669, 1640, 1640, 1640, 1640, 1672, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1668, 1640, 1673,
     1640,  258, 1674, 1675, 1676, 1675, 1640, 1640, 1640, 1677,
     1640, 1677,  272, 1640, 1640, 1640, 1640, 1669, 1640, 1640,
     1640, 1640, 1640, 1640, 1678, 1679, 1640, 1680, 1681, 1679,
     1640, 1640, 1640, 1682, 1640, 1678, 1640, 1683, 1640,  296,

     1684, 1685, 1686, 1685, 1640, 1640, 1640, 1687, 1640, 1687,
      310, 1640, 1640, 1640, 1679, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1688, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1689, 1640, 1640, 1640, 1640, 1690, 1690, 1690, 1640, 1640,
     1640, 1640, 1691, 1691, 1640, 1640, 1640, 1640, 1692, 1640,
     1693, 1694, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1695, 1640, 1640, 1695, 1695, 1695, 1695, 1695, 1695, 1695,
     1695, 1640, 1640, 1640, 1640, 1696, 1697, 1698, 1699, 1640,
     1699, 1640, 1640, 1700, 1640, 1640, 1640, 1640, 1640, 1701,

     1640, 1701, 1702, 1701, 1703, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1703, 1703, 1703, 1703, 1703, 1703,
     1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703,
     1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1640, 1640,
     1640, 1640, 1700, 1700, 1700, 1700, 1640, 1700, 1700, 1700,
     1640, 1704, 1640, 1640, 1640, 1640, 1705, 1640, 1640, 1706,
     1640, 1707, 1707, 1708, 1707, 1640, 1640, 1640, 1640, 1709,
     1710, 1710, 1640, 1640, 1640, 1711, 1640, 1712, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1713, 1714, 1714, 1640, 1640,

     1640, 1706, 1707,  503, 1715, 1640, 1706, 1716, 1717, 1718,
     1715, 1640, 1640, 1640, 1715, 1640, 1716, 1717, 1718, 1715,
     1640, 1640, 1640,  503, 1719, 1720, 1720, 1721, 1720, 1640,
     1640, 1640, 1722, 1640, 1640, 1640, 1640, 1640, 1723, 1724,
     1724, 1640, 1640, 1640, 1723, 1640, 1640, 1640, 1640, 1725,
     1640, 1726, 1726, 1727, 1726, 1640, 1640, 1640, 1640, 1728,
     1729, 1729, 1640, 1640, 1640, 1730, 1640, 1731, 1640, 1640,
     1640, 1640, 1640, 1732, 1733, 1733, 1640, 1640, 1640, 1725,
     1726,  581, 1734, 1640, 1725, 1735, 1736, 1737, 1734, 1640,
     1640, 1640, 1734, 1640, 1735, 1736, 1737, 1734, 1640, 1640,

     1640,  581, 1738, 1739, 1739, 1740, 1739, 1640, 1640, 1640,
     1741, 1640, 1640, 1640, 1640, 1640, 1742, 1743, 1743, 1640,
     1640, 1640, 1640, 1640, 1744, 1742, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1745, 1640, 1640, 1640, 1640, 1640, 1746,
     1640, 1640, 1640, 1747, 1748, 1747, 1749, 1640, 1640, 1640,
     1750, 1750, 1750, 1750, 1750, 1750, 1750, 1751, 1752, 1640,
     1753, 1753, 1747, 1747, 1747, 1747, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1754, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755,

     1755, 1755, 1755, 1755, 1755, 1755, 1755, 1640, 1755, 1640,
     1640, 1640, 1640, 1755, 1755, 1755, 1755, 1640, 1640, 1755,
     1755, 1755, 1755, 1755, 1755, 1640, 1753, 1640,  727,  727,
      727, 1753, 1756, 1756, 1757, 1640, 1758, 1759, 1760, 1760,
     1640, 1640, 1640, 1640, 1640, 1761, 1761, 1761, 1640, 1640,
     1640, 1640, 1640, 1762, 1762, 1763, 1640, 1640, 1640, 1764,
     1640, 1640, 1640, 1640, 1640, 1640, 1765, 1765, 1765, 1640,
     1640, 1640, 1640, 1640, 1766, 1757, 1767, 1640, 1640, 1640,
     1768, 1757, 1757, 1766, 1769, 1757, 1640, 1640, 1640, 1770,
     1640, 1640, 1640, 1771, 1640, 1640, 1640, 1757,  784, 1640,

     1640,  784, 1757,  784, 1772, 1773, 1758, 1774, 1775, 1776,
     1640, 1640, 1640, 1777, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1778, 1778, 1778, 1640, 1640, 1640, 1640, 1640,
     1778, 1640, 1779, 1640, 1780, 1781, 1782, 1782, 1640, 1640,
     1640, 1640, 1640, 1783, 1783, 1783, 1640, 1640, 1640, 1640,
     1640, 1784, 1784, 1785, 1640, 1640, 1640, 1786, 1640, 1640,
     1640, 1640, 1640, 1640, 1787, 1787, 1787, 1640, 1640, 1640,
     1640, 1640, 1788, 1779, 1789, 1640, 1640, 1640, 1790, 1779,
     1779, 1788, 1791, 1779, 1640, 1640, 1640, 1792, 1640, 1640,
     1640, 1793, 1640, 1640, 1640, 1779,  882, 1640, 1640,  882,

     1779,  882, 1794, 1795, 1780, 1796, 1797, 1798, 1640, 1640,
     1640, 1799, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1800, 1800, 1800, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1801, 1801, 1800, 1640, 1802, 1802, 1803, 1803,
     1804, 1805, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1806, 1640, 1640, 1807, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808,
     1808, 1640, 1640, 1808, 1808, 1808, 1808, 1808, 1640, 1808,
     1640, 1808, 1640, 1640, 1640, 1808, 1808, 1640, 1808,  991,

     1808, 1640, 1640, 1640, 1808, 1808, 1640, 1640, 1808, 1809,
     1809, 1810, 1811, 1811, 1811, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1812, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1813, 1640, 1640, 1640,
     1640, 1640, 1814, 1640, 1640, 1640, 1815, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1816, 1816, 1640, 1640, 1640, 1640,
     1640, 1810, 1640, 1062, 1817, 1817, 1818, 1817, 1640, 1640,
     1640, 1819, 1820, 1817, 1817, 1821, 1822, 1640, 1640, 1640,
     1823, 1824, 1824, 1640, 1640, 1640, 1825, 1640, 1826, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,

     1640, 1827, 1828, 1828, 1828, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1829, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1830, 1640, 1640, 1640,
     1640, 1640, 1831, 1640, 1640, 1640, 1832, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1833, 1833, 1640, 1640, 1640, 1640,
     1640, 1827, 1640, 1152, 1834, 1834, 1835, 1834, 1640, 1640,
     1640, 1836, 1837, 1834, 1834, 1838, 1839, 1640, 1640, 1640,
     1840, 1841, 1841, 1640, 1640, 1640, 1842, 1640, 1843, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1844, 1640, 1845, 1846, 1640, 1640, 1640, 1640, 1847,

     1640, 1848, 1640, 1640, 1640, 1640, 1640, 1849, 1640, 1640,
     1640, 1640, 1640, 1640, 1850, 1640, 1851, 1851, 1851, 1218,
     1640, 1218, 1640, 1218, 1640, 1640, 1640, 1218, 1640, 1218,
     1223, 1640, 1640, 1640, 1640, 1640, 1218, 1218, 1218, 1218,
     1640, 1218, 1223, 1640, 1640, 1640, 1218, 1218, 1640, 1640,
     1218, 1218, 1218, 1640, 1218, 1223, 1640, 1640, 1640, 1218,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1852, 1853, 1853, 1640, 1640, 1640, 1640, 1640, 1854,
     1855, 1855, 1640, 1640, 1640, 1856, 1857, 1858, 1858, 1640,

     1640, 1640, 1640, 1640, 1859, 1859, 1859, 1640, 1640, 1640,
     1640, 1640, 1860, 1860, 1861, 1640, 1640, 1640, 1862, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1863, 1864,
     1864, 1640, 1640, 1640, 1640, 1640, 1865, 1866, 1866, 1640,
     1640, 1640, 1867, 1868, 1869, 1869, 1640, 1640, 1640, 1640,
     1640, 1870, 1870, 1870, 1640, 1640, 1640, 1640, 1640, 1871,
     1871, 1872, 1640, 1640, 1640, 1873, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1874, 1640, 1875,

     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1876, 1640, 1218, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1218, 1416, 1640, 1640, 1640, 1218, 1218, 1218,
     1640, 1640, 1218, 1640, 1640, 1218, 1640, 1640, 1218, 1218,
     1218, 1218, 1640, 1218, 1416, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1877, 1877, 1877, 1640, 1640, 1640,
     1640, 1640, 1640, 1878, 1878, 1878, 1640, 1640, 1640, 1640,
     1640, 1879, 1879, 1879, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1861, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1863, 1863,

     1863, 1640, 1640, 1640, 1640, 1640, 1640, 1865, 1865, 1865,
     1640, 1640, 1640, 1640, 1640, 1868, 1868, 1868, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1872, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1880, 1640, 1881,
     1640, 1882, 1640, 1883, 1884, 1640, 1640, 1218, 1416, 1640,
     1640, 1640, 1218, 1640, 1218, 1416, 1640, 1640, 1640, 1218,
     1640, 1218, 1416, 1640, 1640, 1640, 1218, 1640, 1218, 1416,
     1640, 1640, 1640, 1640, 1218, 1416, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,

     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1885, 1640, 1886, 1640, 1218, 1416, 1640, 1640, 1640, 1640,
     1640, 1640, 1218, 1416, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1887, 1888, 1640,    0,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,

     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,

     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640
    } ;

static const flex_int16_t yy_nxt[11662] =
    {   0,
     1640, 1640,   33,   34,   35,   33,   34,   35,  103,  104,
      103,  104,  171,  177,  369,  171,  177,  369,  172,  178,
      227,  277,  261,  173,  173,  179,   36, 1640,  179,   40,
      260,  260,  260,  260,  172,  178,  262,  180,  217,  180,
      181,  217,  182,  182,  182,  182,  215, 1640,  216,  216,
      216,  216,  227,  277,  262,  218,  218,  218,  218,  347,
      347,  347,  219,  367,  368,  403,  241,  403,  239,  239,
      239,  239,   37,   38,   39,   37,   38,   39,   41,   42,
       43,   44,   42,   41,   45,   46,   41,   41,   47,   48,
       41,   49,   41,   49,   50,   51,   52,   52,   52,   52,

       41,   53,   41,   41,   54,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   56,   57,   48,
       41,   58,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   59,   41,   60,   41,   61,   61,
       62,   63,   64,   41,   65,   43,   44,   65,   66,   45,
       67,   66,   68,   56,   41,   66,   69,   70,   69,   71,
       51,   72,   72,   72,   72,   73,   53,   66,   66,   74,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   56,   75,   41,   68,   58,   66,   66,   66,

       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   41,
       41,   76,   66,   61,   61,   77,   78,   79,   41,   80,
       43,   44,   80,   81,   45,   82,   81,   68,   56,   48,
       81,   83,   70,   83,   84,   81,   85,   85,   85,   85,
       86,   53,   81,   81,   87,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   56,   88,   48,
       68,   58,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   41,   41,   60,   81,   61,   61,

       89,   90,   91,   93,   94,   95,   93,  166,  167,  168,
       96,  689,   96,   96,   96,   96,  690,   96,   96,   97,
      174,  760,  166,  167,  168,  767,  175,   96,  166,  167,
      168,  176,  659,  166,  167,  168,  360,  360,  360,  360,
     1037,   96,   98,   96,  318,  372,  333,  318,  372,  333,
      659,  106,  107,  108,  106, 1451,  109,  106,  107,  108,
      106,  396,  109,  137,  138,  139,  137,  299,  109,   96,
      776,   96,   99,   99,  100,  101,  102,   93,   94,   95,
       93,  300, 1043,  319,   96,  334,   96,   96,   96,   96,
      110,   96,   96,   97,  367,  368,  110,  356,  397,  300,

      356,   96,  140,  364, 1452,  220,  364,  221,  221,  221,
      221, 1047,  357,  390,  391,   96,   98,   96,  336,  223,
      111,  111,  112,  113,  114, 1453,  111,  111,  112,  113,
      114,  683,  111,  111,  112,  113,  114,  223,  374,  374,
      374,  374,  365,   96,  684,   96,   99,   99,  100,  101,
      102,  115,  105,  116,  117,  105,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  118,
      118,  118,  118,  115,  115,  115,  115,  115,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      115,  115,  115,  115,  115,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,  119,  118,
      118,  118,  118,  118,  118,  120,  118,  115,  115,  115,
      115,  121,  121,  122,  123,  124,  106,  125,  126,  106,
      217,  217,  782,  217,  217,  137,  138,  139,  137,  790,
      109,  161,  162,  227,  277,  163,  161,  162,  322,  630,
      163,  127,  235,  464,  219,  235,  464,  287, 1055,  285,
      285,  285,  285, 1454,  236,  128,  236,  237,  129,  238,
      238,  238,  238,  281,  140,  645,  281,  645,  361,  164,
      362,  362,  362,  362,  164,  282,  631,  282,  283,  631,
      284,  284,  284,  284,  794,  111,  111,  112,  113,  114,

      106,  125,  126,  106,  111,  111,  112,  113,  114,  111,
      111,  112,  113,  114,  111,  111,  112,  113,  114,  375,
      376,  376,  376,  337,  636,  127,  217,  184, 1282,  217,
      166,  167,  168,  185,  166,  167,  168, 1461,  186,  128,
      240,  297,  129,  298,  298,  298,  298,  367,  649,  241,
      219,  534,  535,  536,  174,  242,  166,  167,  168,  243,
      637,  187, 1462,  637,  188,  377,  189,  390,  391,  111,
      111,  112,  113,  114,  130,  244,  194,  130,  190,  378,
      131, 1065,   68,   56,  623,  191,  132,   70,  132,  133,
       41,  134,  134,  134,  134,  264,  624,  378,  175,  135,

      166,  167,  168,  625,  241,  245,  246,  247,  464,  227,
      265,  464, 1463,  136,  243,   68,  137,  138,  139,  137,
      377, 1290,  379,  379,  379,  379,  406,  407,  408,  171,
      266,  271,  171,  356,  378,  172,  356,  272,  286,  272,
      173,  127,  273,  273,  273,  273,  249,  287,  357, 1470,
      194,  172,  378,  288,  669,  141,  670,  289,  129,  302,
      267,  268,  269,  176, 1471,  166,  167,  168,  287,  309,
      612,  613,  614,  290,  303,  310,  431,  310,  289, 1297,
      311,  311,  311,  311,  294,  111,  111,  112,  113,  114,
      137,  138,  139,  137,  304, 1478,  274,  275,  276,  952,

      406,  407,  408,  291,  292,  293,  174,  953,  166,  167,
      168,  451,  451,  451,  451,  127,  388,  184,  166,  167,
      168,  660,  391,  185,  305,  306,  307,  177,  186,  141,
      177, 1479,  129,  178,  312,  313,  314,  215,  173,  182,
      182,  182,  182,  465,  465,  465,  385,  318,  466,  178,
      318,  187,  464,  227,  188,  464,  189,  385, 1074,  111,
      111,  112,  113,  114,  143,  144,  145,  143,  358, 1480,
      631,  322,  146,  631,  394,  359,  182,  182,  182,  182,
      385,  147,  147,  147,  147,  385,  319, 1305,  395,  385,
      147,  147,  147,  147,  637,  337,  385,  637, 1481,  385,

      392,  385,  386,  392,  400,  400,  395,  147,  147,  147,
      147,  147,  147,  143,  144,  145,  143,  218,  218,  218,
      218,  146,  663,  663,  393,  218,  218,  218,  218, 1482,
      147,  147,  147,  147,  179,  194,  933,  179,  933,  147,
      147,  147,  147, 1081,  650,  194,  180,  650,  180,  181,
     1483,  182,  182,  182,  182, 1313,  147,  147,  147,  147,
      147,  147,  149,  150,  151,  149, 1488,  152,  153,  194,
      441,  154,  154,  154,  194,  154,  155,  427, 1489,  156,
      157,  157,  157,  154,  398,  406,  407,  408,  399,  333,
      399,  436,  333,  400,  400,  406,  407,  408, 1319,  401,

      154,  401,  154,  154,  402,  402,  402,  663,  663,  194,
      158,  442, 1490,  194,  443,  364,  194, 1491,  364,  406,
      407,  408,  159,  194,  406,  407,  408,  154,  334,  154,
      160,  149,  150,  151,  149,  438,  152,  153, 1087,  435,
      154,  154,  154,  437,  154,  155, 1492,  294,  156,  157,
      157,  157,  154,  369,  365,  425,  369,  426,  194,  406,
      407,  408,  805,  406,  407,  408,  406,  407,  408,  154,
      623,  154,  154,  406,  407,  408,  347,  347,  347,  158,
      428,  452,  624,  216,  216,  216,  216,  429,  814,  625,
      823,  159, 1103,  430,  372,  395,  154,  372,  154,  160,

      192, 1493,  392,  192,  193,  392,  836,  193,  406,  407,
      408,  193,  193,  395,  193,  194,  193,  193,  193,  193,
      193,  194,  686,  193,  193,  687,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  844,  193,
     1115,  444, 1494,  195,  196,  197,  198,  199,  200,  201,
      193,  202,  193,  203,  204,  205,  206,  193,  207,  208,
      209,  210,  193,  193,  193,  406,  407,  408,  193,  947,
      948,  211,  212,  213,  227,  228,  229,  392,  852,  453,
      392,  454,  454,  454,  454,  463,  463,  463,  463,  858,
      230,  230,  230,  456,  220,  377,  221,  221,  221,  221,

      469,  393,  238,  238,  238,  238,  194,  865,  223,  378,
      194,  456,  260,  260,  260,  260,  229,  229, 1127,  393,
      229,  229,  479,  479,  479,  479,  223,  378,  229,  930,
      930,  229,  439,  229, 1495,  229,  231,  184,  432,  433,
      434,  464,  194,  185,  464,  440,  874,  194,  186,  248,
      248,  248,  248,  249,  250, 1133,  406,  407,  408, 1496,
      406,  407,  408,  251,  252,  253,  254,  255,  256,  194,
      631,  187,  445,  631,  188, 1137,  189,  446,  502,  502,
      502,  502,  930,  930,  447,  632,  632,  632,  190, 1497,
      633,  880,  406,  407,  408,  191,  240,  406,  407,  408,

      888,  650,  367,  448,  650,  257, 1145,  258,  258,  258,
      258,  242,  638,  638,  638,  243, 1498,  639,  892,  406,
      407,  408,  461,  235,  461,  225,  235,  462,  462,  462,
      462,  244,  402,  402,  402,  236,  487,  236,  237, 1349,
      238,  238,  238,  238,  549,  567,  284,  284,  284,  284,
      473,  488,  470, 1505,  238,  238,  238,  238, 1506,  241,
      568,  245,  246,  247,  286,  474,  471, 1155,  174,  243,
      166,  167,  168,  295, 1507,  296,  296,  296,  296,  288,
      494, 1357, 1514,  289,  471,  475,  559,  559,  559,  559,
     1515,  248,  248,  248,  248,  631,  322,  495,  631,  290,

      672,  489,  490,  491, 1364,  637,  281,  673,  637,  281,
      569,  570,  571,  674, 1522,  476,  477,  478,  282,  650,
      282,  283,  650,  284,  284,  284,  284, 1523, 1164,  291,
      292,  293,  321,  321,  322,  323,  324,  321,  321,  321,
      325,  321,  325,  325,  325,  325,  321,  325,  325,  325,
      326,  326,  326,  321,  321,  321,  321,  325,  321,  321,
      321,  327,  321,  321,  321,  321,  321,  321,  327,  321,
      327,  325,  324,  325,  321,  321,  324,  324,  321,  327,
      324,  324,  321,  321,  321,  321,  321,  321,  324,  321,
      321,  324,  327,  324,  321,  324,  328,  321,  321,  325,

      321,  325,  321,  321,  321,  321,  321,  337,  338,  339,
     1524,  339,  956,  392,  339,  957,  392,  665,  665,  665,
      240, 1372, 1525,  340,  340,  340, 1526,  481,  297,  241,
      298,  298,  298,  298, 1171,  242,  241,  393,  929,  243,
      929, 1527,  265,  930,  930,  339,  243, 1380,  339,  339,
      339, 1532, 1533,  339,  339,  244,  580,  580,  580,  580,
     1386,  339,  482, 1534,  339, 1535,  339, 1177,  339,  341,
      348,  348,  348,  348,  642,  642,  642,  642, 1536,  348,
      348,  348,  348,  903,  912,  245,  246,  247,  353,  353,
      353,  353,  483,  484,  485,  921,  348,  348,  348,  348,

      348,  348,  350,  194,  351,  351, 1537, 1538,  352,  351,
      352, 1539, 1540,  353,  353,  353,  353,  240,  676,  677,
      678,  351, 1541,  643,  497,  643,  241, 1542,  644,  644,
      644, 1543,  242,  241,  351, 1544,  243,  351, 1545,  265,
     1546,  405,  550,  243,  284,  284,  284,  284,  648,  648,
      648,  648,  244,  406,  407,  408,  551,  637,  337,  498,
      637,  351,  337,  338,  339,  667,  339,  668,  647,  339,
      360,  360,  360,  360,  551,  761,  762,  763,  340,  340,
      340,  405,  245,  246,  247,  667,  355,  668,  405,  499,
      500,  501,  361,  667,  362,  362,  362,  362,  668, 1013,

      339,  651, 1025,  339,  339,  339, 1037,  718,  339,  339,
      718, 1043,  374,  374,  374,  374,  339,  719,  652,  339,
     1047,  339, 1055,  339,  341,  409,  410,  411,  412,  413,
      414,  415, 1455,  416, 1582,  417,  418,  419,  420, 1583,
      421,  422,  423,  424,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
     1282,  457,  458,  458,  458,  458,  457,  457,  457,  457,
      457,  459,  459,  459,  460,  459,  459,  459,  459,  459,
      459,  459,  459,  457,  457,  457,  457,  457,  459,  459,
      459,  459,  460,  459,  459,  459,  459,  459,  459,  459,

      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  473,
      653,  653,  653,  653,  451,  451,  451,  451,  261, 1584,
      503,  503,  503,  503,  474,  465,  465,  465,  243, 1065,
      466,  524,  504,  524,  241, 1464,  525,  525,  525,  525,
      791,  792,  793,  527,  475, 1585,  264, 1586,  472, 1290,
      504, 1587,  241,  650,  367,  241,  650,  718,  528, 1472,
      718,  265,  243, 1588,  264,  243,  472,  719,  454,  454,
      454,  454, 1589,  241,  476,  477,  478,  506,  529,  265,
      661,  266, 1297,  243, 1590, 1074,  507, 1305,  508,  508,

      508,  508,  509,  791,  792,  793,  510, 1591,  661,  266,
      511,  377, 1081,  379,  379,  379,  379, 1484,  530,  531,
      532,  267,  268,  269,  654,  378,  654, 1592,  511,  655,
      655,  655,  655,  662,  662,  662,  662, 1593, 1313,  267,
      268,  269,  461,  378,  461, 1594, 1319,  662,  662,  662,
      662, 1595,  512,  513,  514,  457,  457,  457,  457,  457,
      515,  457,  516,  515,  457,  457,  457,  515,  515,  457,
      515, 1087,  457,  517,  517,  517,  517,  518,  457,  515,
      515,  519,  515,  515,  515,  520,  515,  515,  515,  515,
      515,  515,  515,  515,  457,  515,  457,  457,  457,  515,

      515,  515,  515,  520,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  457,  457,  457,  515,  457,  457,  521,  522,  523,
      540,  194,  815,  816,  817,  240, 1103,  194,  553,  241,
     1115,  194, 1127, 1133,  241,  242, 1137,  287,  969,  243,
      242,  969, 1145,  554,  243, 1499, 1596,  289,  970,  286,
     1597, 1349,  694,  693,  194,  541, 1598, 1155,  287,  971,
      244,  561,  971,  555,  288, 1508,  695, 1599,  289,  972,
      287,  406,  407,  408, 1600, 1357,  303,  406,  407,  408,
      289,  406,  407,  408,  290,  542,  543,  544,  540,  698,

      245,  246,  247,  556,  557,  558,  562,  241, 1601,  545,
      545,  545,  545,  242,  406,  407,  408,  243, 1516, 1602,
      286,  534,  535,  536,  291,  292,  293, 1603, 1364,  287,
      194,  575, 1604,  541, 1164,  288,  563,  564,  565,  289,
      287,  463,  463,  463,  463, 1372,  303,  859,  860,  861,
      289,  194, 1605, 1171,  602,  290,  602,  287,  605,  603,
      603,  603,  603,  542,  543,  544,  576,  287,  696,  697,
     1528,  552, 1606,  606,  889,  890,  891,  289,  194, 1607,
      406,  407,  408,  699, 1380,  291,  292,  293, 1608,  552,
      889,  890,  891,  607, 1386, 1609,  577,  578,  579,  553,

     1177,  406,  407,  408,  194,  700, 1610, 1611,  299, 1612,
      581,  581,  581,  581,  554,  913,  914,  915,  289, 1613,
      194,  405,  582,  608,  609,  610,  302,  667,  406,  407,
      408,  668,  405,  302,  555,  287,  982,  194,  618,  982,
      582,  303,  287,  707,  667,  289,  983,  287,  303,  668,
      701,  405,  289,  288,  406,  407,  408,  289,  702,  194,
      667,  304,  704,  194,  556,  557,  558,  584,  304,  194,
      406,  407,  408,  619,  194,  668,  585,  194,  586,  586,
      586,  586,  587,  612,  613,  614,  588,  406,  407,  408,
      589,  305,  306,  307,  405,  703,  667,  668,  305,  306,

      307,  714,  716,  620,  621,  622,  405,  723,  589,  406,
      407,  408,  715,  406,  407,  408,  644,  644,  644,  406,
      407,  408,  667,  668,  406,  407,  408,  406,  407,  408,
     1455, 1628,  590,  591,  592,  457,  457,  457,  457,  457,
      593,  457,  594,  593,  457,  457,  457,  593,  593,  457,
      593, 1282,  593,  595,  595,  595,  595,  596,  457,  593,
      593,  597,  593,  593,  593,  598,  593,  593,  593,  593,
      593,  593,  593,  593,  457,  593,  457,  457,  457,  593,
      593,  593,  593,  598,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,

      593,  457,  457,  457,  593,  457,  457,  599,  600,  601,
      618, 1464, 1629,  194,  937,  937,  937,  286, 1290,  287,
      194,  626,  626,  626,  626,  288,  287, 1472, 1630,  289,
     1297, 1305,  288,  755, 1484,  377,  289,  379,  379,  379,
      379,  260,  260,  260,  260,  619, 1631,  705,  756,  378,
      706,  194,  290, 1313,  717,  194, 1319, 1499,  194,  718,
     1632, 1349,  718,  406,  407,  408, 1508,  378,  755,  719,
      406,  407,  408, 1633, 1357,  620,  621,  622, 1516, 1634,
      194, 1364,  291,  292,  293,  348,  348,  348,  348, 1372,
      720,  721,  722, 1528,  348,  348,  348,  348,  757,  758,

      759,  406,  407,  408, 1635,  406,  407,  408,  406,  407,
      408,  348,  348,  348,  348,  348,  348,  666,  666,  666,
      666,  479,  479,  479,  479, 1380,  666,  666,  666,  666,
      406,  407,  408,  194,  728, 1386,  728,  405,  667,  729,
      729,  729,  729,  666,  666,  666,  666,  666,  666,  708,
      708,  708,  708,  708,  194,  708,  709,  777,  708,  708,
      708,  777,  668,  708,  453,  708,  454,  454,  454,  454,
      405,  710,  708,  667,  668,  708,  724,  732,  456,  733,
      733,  733,  733,  406,  407,  408, 1455, 1464,  708, 1472,
      708,  709,  708,  725, 1484,  461,  456,  461, 1499, 1508,

      731,  731,  731,  731,  406,  407,  408,  778,  779,  780,
     1516,  778,  779,  780, 1528,  708,  708,  708,  754,  708,
      708,  711,  712,  713,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
     1450,  457,  727,  727,  727,  727,  457,  457,  457,  457,
      457,  459,  459,  459,  460,  459,  459,  459,  459,  459,
      459,  459,  459,  457,  457,  457,  457,  457,  459,  459,
      459,  459,  460,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  453,

     1025,  730,  730,  730,  730,  298,  298,  298,  298,  736,
     1636,  736,  875,  456,  737,  737,  737,  737,  473,  746,
      738,  473,  559,  559,  559,  559,  404,  241, 1636,  404,
      241,  456,  506,  474, 1449,  404,  474,  243, 1013,  739,
      243,  668,  667,  508,  508,  508,  508,  509,  241,  405,
      668,  510,  506,  475,  265,  735,  475,  473,  243,  875,
      747,  667,  876,  877,  878,  506,  241,  509,  405,  241,
      668,  510,  474,  735,  740,  528,  243,  667,  405,  243,
      781,  481,  668,  476,  477,  478,  476,  477,  478,  667,
      241, 1007,  475,  481, 1007,  748,  265,  512,  513,  514,

      243, 1008,  241,  405,  741,  742,  743, 1413,  265,  876,
      877,  878,  243,  941,  941,  941,  482,  512,  513,  514,
      768, 1412,  476,  477,  478,  749,  750,  751,  482,  241,
      795,  796,  797, 1411,  497,  528, 1410,  506,  467,  243,
     1409, 1408,  497,  241,  467, 1407,  483,  484,  485,  265,
      634,  241,  781,  243, 1406,  769,  634,  265,  483,  484,
      485,  243,  665,  665,  665,  834, 1405,  834,  640,  498,
      835,  835,  835,  835,  640, 1404,  524,  498,  524,  241,
     1403,  525,  525,  525,  525,  770,  771,  772, 1402,  798,
     1401,  798, 1400,  472,  799,  799,  799,  799,  777,  499,

      500,  501,  795,  796,  797, 1399,  658,  499,  500,  501,
      506,  472,  658,  241,  404,  525,  525,  525,  525,  507,
      404,  775,  775,  775,  775,  509, 1398,  472,  646,  510,
     1026, 1027, 1028,  511,  646,  803,  969,  803,  527,  969,
      804,  804,  804,  804,  777,  472,  970,  241,  778,  779,
      780,  511,  971,  528,  931,  971,  931,  243,  617,  932,
      932,  932,  972, 1394,  602,  527,  602,  287,  921,  603,
      603,  603,  603,  529,  241,  512,  513,  514,  473,  646,
      528,  552,  646,  584,  243,  611,  604,  261,  646,  503,
      503,  503,  503,  474,  778,  779,  780,  243,  587,  552,

      529,  504,  588,  530,  531,  532,  527,  632,  632,  632,
     1393,  584,  633,  475,  467,  241,  467,  912,  824,  504,
      467,  528,  761,  762,  763,  243,  879,  241, 1392,  903,
      530,  531,  532,  474, 1038, 1039, 1040,  243, 1391,  853,
     1390,  529, 1177,  476,  477,  478,  783, 1179,  590,  591,
      592, 1379,  584,  825,  854,  507, 1378,  784,  784,  784,
      784,  785, 1044, 1045, 1046,  510, 1171,  879, 1371,  786,
     1370,  530,  531,  532,  853, 1164,  893,  894,  895,  934,
      540,  776,  934,  826,  827,  828, 1356,  786,  934,  241,
     1355,  638,  638,  638,  941,  242,  639,  942, 1155,  243,

      941,  540,  583,  942,  855,  856,  857, 1048, 1049, 1050,
      241,  787,  788,  789,  783,  541,  242,  893,  894,  895,
      243, 1348,  892,  507, 1347,  802,  802,  802,  802,  785,
      791,  792,  793,  510, 1346,  934,  541,  786, 1194,  553,
      982,  934,  553,  982, 1194,  542,  543,  544,  287,  776,
      983,  287, 1145, 1195,  554,  786, 1345,  554,  289, 1195,
      888,  289,  642,  642,  642,  642,  542,  543,  544,  463,
      463,  463,  463, 1344,  555, 1007,  777,  555, 1007,  787,
      788,  789,  806,  880,  287, 1008,  603,  603,  603,  603,
     1343,  807,  777,  808,  808,  808,  808,  809,  552, 1342,

     1137,  810, 1341, 1340,  556,  557,  558,  556,  557,  558,
      837,  653,  653,  653,  653, 1133,  552,  475,  634,  287,
      634,  553, 1339,  378,  634,  303,  778,  779,  780,  289,
      287,  655,  655,  655,  655,  874,  554,  815,  816,  817,
      289,  378,  778,  779,  780,  838, 1338,  811,  812,  813,
      824,  655,  655,  655,  655, 1337,  555, 1235, 1127,  241,
     1235,  831,  831,  831,  831,  474,  461, 1236,  461,  243,
      574,  731,  731,  731,  731,  839,  840,  841, 1010, 1010,
     1010, 1010, 1336,  865,  845,  825,  556,  557,  558,  561,
     1116, 1117, 1118,  287,  730,  730,  730,  730,  287,  606,

      859,  860,  861,  289,  303,  896,  566,  896,  289, 1335,
      897,  897,  897,  897,  875,  826,  827,  828,  584,  846,
      737,  737,  737,  737,  562,  561, 1128, 1129, 1130,  586,
      586,  586,  586,  587,  287,  858, 1249,  588,  866, 1249,
      303,  833, 1396,  575,  289, 1334, 1250,  287, 1396,  847,
      848,  849,  287,  606,  563,  564,  565,  289,  303,  833,
      562,  575,  289,  852,  876,  877,  878, 1134, 1135, 1136,
      287, 1397, 1640,  867, 1333, 1640,  303, 1397,  576, 1332,
      289,  785, 1640,  590,  591,  592,  729,  729,  729,  729,
      563,  564,  565, 1115,  560,  875,  576,  732,  455,  733,

      733,  733,  733,  868,  869,  870, 1331, 1638,  577,  578,
      579,  844,  901, 1638,  901,  605,  455,  902,  902,  902,
      902,  875,  552, 1330,  287,  836,  577,  578,  579,  584,
      606,  778,  779,  780,  289, 1138, 1139, 1140,  585, 1329,
      873,  873,  873,  873,  587,  876,  877,  878,  588, 1639,
      607, 1640,  589, 1640,  453, 1639,  731,  731,  731,  731,
     1328, 1103,  731,  731,  731,  731, 1640,  539,  605, 1640,
      589,  876,  877,  878,  455, 1327, 1640,  287,  823,  533,
      608,  609,  610,  606,  889,  890,  891,  289, 1062, 1062,
     1062, 1062,  455,  526,  590,  591,  592,  553, 1326,  640,

      782,  640,  814,  607,  605,  640,  299, 1325,  581,  581,
      581,  581,  554,  287,  805, 1324,  289, 1323,  782,  606,
      582, 1087, 1640,  289, 1640, 1089, 1312, 1011, 1011, 1011,
     1011,  922,  555,  608,  609,  610, 1311, 1081,  582,  607,
      287,  802,  802,  802,  802, 1304,  554,  913,  914,  915,
      289, 1640, 1303, 1640,  453, 1074,  454,  454,  454,  454,
      755, 1289,  556,  557,  558,  881,  923, 1288,  456,  608,
      609,  610,  618, 1065,  585,  756,  882,  882,  882,  882,
      883,  287,  969,  505,  588,  969,  456,  288,  884, 1281,
      794,  289,  970,  618, 1280,  755,  924,  925,  926,  875,

      874, 1279,  287,  194, 1055, 1278,  884,  619,  288,  932,
      932,  932,  289,  971, 1640,  790,  971, 1640, 1277, 1640,
      782, 1276, 1640,  972, 1640,  757,  758,  759,  619, 1640,
      885,  886,  887,  881,  194, 1275, 1047,  620,  621,  622,
      194, 1274,  585,  883,  900,  900,  900,  900,  883,  876,
      877,  878,  588,  406,  407,  408,  884, 1273,  620,  621,
      622, 1428, 1640, 1043,  973, 1640, 1640, 1272,  874, 1640,
      776, 1271, 1640, 1270,  884, 1037, 1640, 1064, 1064, 1064,
     1064, 1088,  496,  194,  406,  407,  408,  194, 1269,  782,
      406,  407,  408,  876,  877,  878, 1089,  767,  885,  886,

      887,  904,  835,  835,  835,  835, 1178,  782,  486,  974,
      905,  975,  906,  906,  906,  906,  907, 1268,  760, 1640,
      908, 1179, 1640,  900,  900,  900,  900, 1267,  754, 1640,
      932,  932,  932,  406,  407,  408,  555,  406,  407,  408,
      194, 1640, 1266, 1265, 1640, 1025, 1090, 1091, 1092, 1640,
      755, 1640, 1640, 1640,  480, 1264, 1640,  746,  472, 1640,
     1263,  738,  194, 1640, 1056,  756,  909,  910,  911,  922,
      194, 1180, 1181, 1182,  194,  976, 1262, 1261,  287,  777,
      935,  935,  935,  935,  554,  755, 1640, 1013,  289, 1640,
      406,  407,  408,  668,  977, 1640, 1640,  667, 1640, 1056,

      978,  979,  405,  194,  923, 1640,  668,  194,  937,  937,
      937,  667,  406,  407,  408,  757,  758,  759,  405, 1216,
      406,  407,  408, 1215,  406,  407,  408, 1214, 1213, 1057,
     1058, 1059, 1219,  980,  924,  925,  926,  938,  938,  938,
      938, 1640, 1430, 1212, 1640, 1211,  938,  938,  938,  938,
     1210, 1640, 1209,  406,  407,  408, 1208,  406,  407,  408,
     1207, 1206,  194,  938,  938,  938,  938,  938,  938,  666,
      666,  666,  666,  982,  853, 1205,  982, 1204,  666,  666,
      666,  666, 1640,  983,  194, 1640, 1026, 1027, 1028,  854,
     1203, 1202, 1640, 1201,  194,  666,  666,  666,  666,  666,

      666,  981, 1200,  194, 1199, 1640, 1198, 1197, 1640,  853,
     1196,  405,  406,  407,  408, 1640, 1192, 1640,  308, 1191,
     1640, 1640, 1218,  194, 1640,  984,  194, 1640, 1038, 1039,
     1040, 1640,  194,  617,  406,  407,  408, 1190,  194,  855,
      856,  857,  194, 1189,  406,  407,  408,  921,  301, 1640,
     1188,  611, 1640,  406,  407,  408, 1187, 1228, 1640, 1640,
      604, 1640, 1235, 1217,  985, 1235, 1186,  986, 1640, 1185,
      194,  912, 1236,  406,  407,  408,  406,  407,  408,  194,
     1184, 1183,  406,  407,  408, 1044, 1045, 1046,  406,  407,
      408,  903,  406,  407,  408,  409,  410,  411,  412,  413,

      414,  415,  988,  416, 1153,  417,  418,  419,  420,  987,
      421,  422,  423,  424,  583, 1151, 1640, 1150,  892, 1640,
      406,  407,  408, 1048, 1049, 1050, 1640, 1144, 1143,  406,
      407,  408,  989,  989,  989,  989,  989,  194,  989,  990,
      888,  989,  989,  989, 1142, 1141,  989, 1640,  989,  880,
     1640, 1320, 1321, 1322,  991,  989, 1640, 1640,  989, 1640,
     1116, 1117, 1118,  996, 1132, 1131, 1640,  874,  194, 1126,
      574,  989, 1125,  989,  990,  989, 1124,  194, 1152, 1152,
     1152, 1152, 1064, 1064, 1064, 1064,  992,  406,  407,  408,
      880, 1640,  865,  285, 1640, 1123, 1005,  566,  989,  989,

      989, 1640,  989,  989,  993,  994,  995, 1122,  880,  194,
     1121,  858,  194,  997, 1007, 1120,  194, 1007,  406,  407,
      408, 1128, 1129, 1130, 1008, 1119,  852,  406,  407,  408,
      998,  998,  998,  998,  998,  194,  998,  999, 1006,  998,
      998,  998, 1114,  560,  998, 1113,  998, 1220, 1238, 1134,
     1135, 1136, 1000,  998, 1112, 1640,  998,  844, 1640,  406,
      407,  408,  406,  407,  408, 1640,  406,  407,  408,  998,
     1111,  998,  999,  998,  552,  803,  194,  803, 1001, 1110,
      804,  804,  804,  804,  777,  406,  407,  408, 1109,  799,
      799,  799,  799,  777,  836,  270,  998,  998,  998,  506,

      998,  998, 1002, 1003, 1004, 1101, 1009,  539,  507, 1100,
     1012, 1012, 1012, 1012,  509, 1138, 1139, 1140,  510, 1387,
     1388, 1389, 1014, 1485, 1486, 1487,  406,  407,  408, 1640,
     1099,  241, 1640,  739,  778,  779,  780,  528,  823, 1640,
      739,  243,  241,  778,  779,  780,  263, 1098,  265,  241,
     1431,  533,  243, 1431, 1097,  265,  526, 1015,  747,  243,
     1432,  747, 1096, 1095,  512,  513,  514,  241,  740, 1640,
      241,  814, 1640,  528, 1429,  740,  528,  243, 1094, 1640,
      243,  194,  747, 1154, 1154, 1154, 1154, 1016, 1017, 1018,
     1093,  241, 1434,  748,  768, 1434,  748,  528,  741,  742,

      743,  243, 1435,  241,  805,  741,  742,  743, 1640,  528,
     1063, 1640,  194,  243,  505,  194, 1061,  748, 1640, 1060,
     1239,  768, 1433,  749,  750,  751,  749,  750,  751,  769,
      241,  406,  407,  408,  794,  768,  528, 1320, 1321, 1322,
      243, 1240, 1437, 1249,  241, 1437, 1249,  749,  750,  751,
      528, 1054, 1438, 1250,  243, 1237,  769, 1053,  790,  770,
      771,  772,  406,  407,  408,  406,  407,  408, 1052,  798,
      769,  798, 1051,  782,  799,  799,  799,  799,  777,  804,
      804,  804,  804,  777, 1042, 1041,  770,  771,  772, 1066,
      776,  194, 1036, 1154, 1154, 1154, 1154,  496,  241, 1035,

      770,  771,  772,  783, 1067,  880, 1034,  767,  243,  239,
      853, 1033,  507,  486,  802,  802,  802,  802,  785, 1529,
     1530, 1531,  510,  880, 1068,  854,  786, 1032,  778,  779,
      780,  473, 1031,  778,  779,  780,  760, 1146,  776, 1030,
      241,  406,  407,  408,  786,  853, 1072, 1029,  506,  194,
      243,  754,  875, 1024, 1069, 1070, 1071, 1640,  480, 1073,
     1073, 1073, 1073,  509, 1023, 1022,  475,  510,  787,  788,
      789,  783, 1146,  746, 1021,  855,  856,  857, 1640,  472,
      507, 1640,  784,  784,  784,  784,  785, 1020, 1640, 1251,
      510, 1019,  194,  738,  786,  225,  476,  477,  478,  406,

      407,  408, 1147, 1148, 1149,  193,  776, 1387, 1388, 1389,
     1082,  668,  786,  512,  513,  514,  194,  667, 1247,  241,
     1235,  405,  968, 1235,  967,  265,  901,  966,  901,  243,
     1236,  902,  902,  902,  902,  875,  787,  788,  789, 1075,
      965,  194,  406,  407,  408, 1083,  824,  964,  807,  963,
     1076, 1076, 1076, 1076, 1077,  241,  962,  961,  810, 1640,
      960,  474, 1640,  824,  959,  243,  406,  407,  408, 1640,
      958,  955,  241,  954, 1068, 1084, 1085, 1086,  474,  951,
      824,  825,  243,  950,  949,  876,  877,  878,  946,  241,
      945,  406,  407,  408,  944,  474,  943,  405,  825,  243,

     1420,  940,  939, 1420, 1078, 1079, 1080,  584,  342,  639,
     1421,  826,  827,  828,  329,  825,  585, 1436, 1102, 1102,
     1102, 1102,  587, 1104,  633,  315,  588,  936,  826,  827,
      828,  308,  287,  928,  837, 1485, 1486, 1487,  606,  927,
      617, 1431,  289,  287, 1431,  826,  827,  828,  824,  303,
      920, 1432,  301,  289,  194,  919,  837,  241, 1105,  831,
      831,  831,  831,  474,  918,  287,  611,  243,  917,  838,
      916,  303,  590,  591,  592,  289, 1248,  845, 1529, 1530,
     1531,  604,  899,  825, 1434,  898,  287, 1434, 1106, 1107,
     1108,  838,  606,  583, 1435,  879,  289,  899,  898,  839,

      840,  841,  583,  879,  406,  407,  408,  872, 1640,  871,
      845, 1640,  846,  826,  827,  828,  574,  845, 1640,  287,
      864,  839,  840,  841, 1437,  606,  287, 1437,  285,  289,
      863,  866,  606,  862, 1438,  566,  289,  568,  866,  851,
      287,  850,  847,  848,  849,  846,  606,  287, 1640,  194,
      289, 1640,  846,  606,  896,  866,  896,  289, 1640,  897,
      897,  897,  897,  875,  287,  560,  867, 1439,  843,  842,
      606, 1252,  552,  867,  289,  847,  848,  849,  278,  194,
      832,  270,  847,  848,  849,  897,  897,  897,  897,  875,
      867,  830,  829,  194,  539, 1442,  868,  869,  870,  406,

      407,  408,  822,  868,  869,  870,  902,  902,  902,  902,
      875, 1253,  263,  876,  877,  878, 1640,  821,  820, 1640,
      868,  869,  870,  881,  533, 1260, 1640,  819,  818,  406,
      407,  408,  585,  526,  900,  900,  900,  900,  883,  876,
      877,  878,  588,  406,  407,  408,  884,  801,  800,  453,
     1156,  729,  729,  729,  729,  505,  781,  553,  874,  287,
      876,  877,  878,  801,  884, 1157,  287,  800,  584,  289,
      505,  781, 1162,  774,  773,  496,  289, 1640,  766, 1163,
     1163, 1163, 1163,  587,  239, 1158, 1056,  588,  885,  886,
      887,  881,  555, 1640,  765, 1011, 1011, 1011, 1011,  764,

      585,  777,  882,  882,  882,  882,  883,  486, 1420, 1640,
      588, 1420, 1640,  488,  884, 1159, 1160, 1161, 1421, 1640,
      753, 1056,  556,  557,  558,  752,  874,  480, 1640,  745,
     1172, 1640,  884,  590,  591,  592,  744,  472, 1640,  287,
     1249,  232,  466, 1249, 1640,  303,  726, 1640,  193,  289,
     1250, 1057, 1058, 1059, 1640,  692,  885,  886,  887, 1165,
      691,  194,  688,  685,  682, 1173,  922,  681,  905, 1440,
     1166, 1166, 1166, 1166, 1167,  287, 1640, 1431,  908, 1640,
     1431,  554,  680,  922,  679,  289, 1640, 1432, 1441,  675,
      671,  668,  287,  667, 1158, 1174, 1175, 1176,  554,  405,

      922,  923,  289,  657, 1434, 1056,  656, 1434, 1014,  287,
      623,  406,  407,  408, 1435,  554,  641,  241,  923,  289,
      777,  342,  635,  528, 1168, 1169, 1170,  243,  329,  629,
      315,  924,  925,  926, 1437,  923, 1553, 1437,  628,  627,
     1056,  308,  616, 1015, 1438,  615,  301,  573,  924,  925,
      926, 1296, 1296, 1296, 1296,  777,  572,  285, 1363, 1363,
     1363, 1363,  875,  548,  278,  924,  925,  926,  922,  547,
     1057, 1058, 1059, 1016, 1017, 1018, 1014,  287,  546,  935,
      935,  935,  935,  554, 1314,  241,  270,  289,  249, 1014,
     1580,  528,  538, 1580,  537,  243,  263,  493,  241, 1315,

     1581,  492,  239,  923,  528,  778,  779,  780,  243,  468,
      232, 1015,  876,  877,  878,  225,  450, 1146, 1640, 1314,
     1580, 1640,  449, 1580, 1015, 1146,  193,  170, 1640,  383,
     1581,  382,  875,  924,  925,  926,  938,  938,  938,  938,
      875, 1016, 1017, 1018,  381,  938,  938,  938,  938, 1316,
     1317, 1318, 1146,  380, 1016, 1017, 1018,  373,  370,  366,
     1146, 1066,  938,  938,  938,  938,  938,  938, 1193, 1193,
      241, 1193,  363, 1193,  349,  344, 1067, 1193, 1193, 1193,
      243, 1193, 1147, 1148, 1149, 1640,  343,  342, 1640, 1193,
     1147, 1148, 1149,  345,  344, 1640, 1068,  343,  342, 1381,

     1296, 1296, 1296, 1296,  777,  335, 1193, 1314, 1193, 1193,
     1640,  332,  331, 1640, 1382, 1363, 1363, 1363, 1363,  875,
     1640, 1640, 1315,  330, 1640,  329, 1069, 1070, 1071,  320,
      317, 1640,  316, 1193, 1381, 1193, 1193, 1221, 1221, 1221,
     1221, 1221, 1314, 1221, 1222,  315, 1221, 1221, 1221, 1560,
      294, 1221,  280, 1221,  778,  779,  780,  279, 1640, 1223,
     1221, 1640,  278, 1221, 1383, 1384, 1385,  259, 1640,  876,
      877,  878, 1316, 1317, 1318,  234, 1221,  233, 1221, 1222,
     1221, 1567, 1066, 1620, 1640, 1224, 1620, 1640,  232, 1640,
      225,  241, 1640, 1621, 1640,  214,  183, 1067,  170, 1640,

      169,  243, 1640, 1221, 1221, 1221, 1640, 1221, 1221, 1225,
     1226, 1227, 1229, 1229, 1229, 1229, 1229, 1068, 1229, 1230,
     1640, 1229, 1229, 1229, 1640, 1640, 1229, 1640, 1229, 1580,
     1640, 1640, 1580, 1620, 1231, 1229, 1620, 1640, 1229, 1581,
     1640, 1283, 1640, 1621, 1640, 1640, 1640, 1069, 1070, 1071,
      241, 1229, 1640, 1229, 1230, 1229,  265, 1314, 1620, 1640,
      243, 1620, 1640, 1640, 1640, 1640, 1640, 1640, 1621, 1640,
     1640, 1640, 1315, 1640, 1640, 1640, 1284, 1640, 1229, 1229,
     1229, 1640, 1229, 1229, 1232, 1233, 1234, 1241, 1241, 1241,
     1241, 1241, 1314, 1241, 1242, 1640, 1241, 1241, 1241, 1640,

     1640, 1241, 1640, 1241, 1640, 1640, 1285, 1286, 1287, 1243,
     1241, 1640, 1640, 1241, 1640, 1640, 1640, 1637, 1637, 1637,
     1640, 1640, 1316, 1317, 1318, 1640, 1241, 1640, 1241, 1242,
     1241, 1640, 1640, 1640, 1381, 1637, 1637, 1637, 1637, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1382,
     1640, 1640, 1640, 1241, 1241, 1241, 1640, 1241, 1241, 1244,
     1245, 1246,  409,  410,  411,  412,  413,  414,  415, 1381,
      416, 1381,  417,  418,  419,  420, 1640,  421,  422,  423,
      424, 1254, 1254, 1254, 1254, 1254, 1382, 1254, 1255, 1640,
     1254, 1254, 1254, 1066, 1640, 1254, 1291, 1254, 1640, 1383,

     1384, 1385,  241, 1256, 1254,  241, 1381, 1254, 1067, 1640,
     1640,  265,  243, 1640, 1640,  243, 1640, 1640, 1640, 1640,
     1254, 1640, 1254, 1255, 1254, 1640, 1640, 1640, 1068, 1640,
     1640, 1292, 1640, 1640, 1640, 1640, 1383, 1384, 1385, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1254, 1254, 1254,
     1640, 1254, 1254, 1257, 1258, 1259,  783, 1640, 1069, 1070,
     1071, 1293, 1294, 1295, 1066,  507, 1640, 1064, 1064, 1064,
     1064,  785, 1640,  241, 1640,  510, 1640, 1640, 1640, 1067,
     1640, 1066, 1640,  243, 1640, 1640, 1640, 1640, 1640, 1640,
      241,  776, 1640, 1640, 1640, 1640, 1077, 1640, 1640, 1068,

      243, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1068, 1640, 1640, 1640,
     1640,  787,  788,  789,  783, 1640, 1640, 1640, 1640, 1069,
     1070, 1071, 1640,  507, 1640, 1062, 1062, 1062, 1062,  785,
     1640, 1640, 1640,  510, 1640, 1640, 1069, 1070, 1071, 1298,
     1640, 1640, 1306, 1640, 1640, 1640, 1640, 1640,  241,  776,
     1640,  241, 1640, 1082,  265, 1640, 1640,  528,  243, 1640,
     1640,  243,  241, 1640, 1640, 1640, 1640, 1640,  265, 1640,
     1640, 1640,  243, 1640, 1299, 1640, 1640, 1307, 1640,  787,
      788,  789, 1075, 1640, 1640, 1640, 1640, 1640, 1083, 1640,

     1640,  807, 1640, 1076, 1076, 1076, 1076, 1077, 1640, 1640,
     1640,  810, 1640, 1640, 1300, 1301, 1302, 1308, 1309, 1310,
     1640, 1640, 1640, 1640, 1640, 1082, 1640, 1068, 1084, 1085,
     1086, 1640, 1104, 1640,  241, 1640, 1640, 1640, 1640, 1640,
      265,  287, 1640, 1640,  243, 1640, 1640,  606, 1640, 1640,
     1640,  289, 1640, 1104, 1640, 1640, 1640, 1078, 1079, 1080,
     1083, 1640,  287, 1640, 1640, 1104, 1640, 1105,  606, 1640,
     1640, 1640,  289, 1640,  287, 1640, 1640, 1640, 1640, 1640,
      606, 1640, 1640, 1640,  289, 1640, 1640, 1640, 1105, 1640,
     1084, 1085, 1086,  881, 1640, 1640, 1640, 1106, 1107, 1108,

     1105, 1640,  585, 1640, 1154, 1154, 1154, 1154,  883, 1640,
     1640, 1640,  588, 1640, 1640, 1640, 1640, 1640, 1106, 1107,
     1108, 1640, 1640, 1640, 1640, 1640, 1640, 1156,  874, 1640,
     1106, 1107, 1108, 1640, 1156, 1640,  287, 1640, 1640, 1640,
     1640, 1640, 1157,  287, 1640, 1640,  289, 1640, 1350, 1157,
     1640, 1640, 1640,  289, 1640, 1640, 1640,  287,  885,  886,
      887,  881, 1158,  303, 1640, 1640, 1640,  289, 1640, 1158,
      585, 1640, 1152, 1152, 1152, 1152,  883, 1640, 1640, 1640,
      588, 1640, 1640, 1351, 1640, 1640, 1640, 1640, 1156, 1640,
     1640, 1640, 1159, 1160, 1161, 1640,  874,  287, 1640, 1159,

     1160, 1161, 1358, 1157, 1640, 1640, 1640,  289, 1640, 1640,
     1156,  287, 1640, 1352, 1353, 1354, 1640,  303, 1640,  287,
     1640,  289, 1640, 1158, 1156, 1157,  885,  886,  887,  289,
     1640, 1365, 1640,  287, 1640, 1640, 1640, 1359, 1640, 1167,
      287, 1640, 1640,  289, 1640, 1158,  303, 1640, 1640, 1640,
      289, 1640, 1640, 1159, 1160, 1161, 1640, 1640, 1640, 1158,
     1640, 1640, 1640, 1640, 1373, 1640, 1366, 1360, 1361, 1362,
     1640, 1640, 1640,  287, 1640, 1159, 1160, 1161, 1640,  606,
     1640, 1640, 1640,  289, 1640, 1640, 1640, 1640, 1640, 1159,
     1160, 1161, 1165, 1640, 1640, 1640, 1367, 1368, 1369, 1374,

     1172,  905, 1640, 1166, 1166, 1166, 1166, 1167, 1640,  287,
     1640,  908, 1640, 1172, 1640,  303, 1640, 1640, 1640,  289,
     1640, 1640,  287, 1640, 1640, 1640, 1640, 1158,  303, 1375,
     1376, 1377,  289, 1640, 1456, 1173, 1640, 1640, 1640, 1640,
     1640, 1283, 1640,  241, 1640, 1640, 1640, 1640, 1173,  528,
      241, 1640, 1640,  243, 1640, 1640,  265, 1168, 1169, 1170,
      243, 1640, 1640, 1640, 1640, 1174, 1175, 1176, 1283, 1457,
     1640, 1640, 1640, 1640, 1640, 1640, 1284,  241, 1174, 1175,
     1176, 1395, 1395,  265, 1395, 1640, 1395,  243, 1640, 1640,
     1395, 1395, 1395, 1640, 1395, 1640, 1640, 1640, 1640, 1458,

     1459, 1460, 1395, 1284, 1640, 1640, 1285, 1286, 1287, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1395,
     1640, 1395, 1395, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1285, 1286, 1287, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1395, 1640, 1395, 1395,
     1414, 1414, 1414, 1414, 1414, 1640, 1414, 1415, 1640, 1414,
     1414, 1414, 1640, 1640, 1414, 1640, 1414, 1640, 1640, 1640,
     1640, 1640, 1416, 1414, 1640, 1640, 1414, 1640, 1640, 1465,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,  241, 1414,
     1640, 1414, 1415, 1414,  528, 1640, 1640, 1640,  243, 1640,

     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1466, 1640, 1414, 1414, 1414, 1640,
     1414, 1414, 1417, 1418, 1419, 1640, 1420, 1640, 1640, 1420,
     1640, 1640, 1640, 1640, 1640, 1640, 1421, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1467, 1468, 1469,  194, 1640, 1640,
     1640, 1640, 1291, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640,  241, 1640, 1640, 1640, 1640, 1640,  265, 1640, 1640,
     1291,  243, 1640, 1640, 1640, 1640, 1640, 1640, 1640,  241,
     1640, 1640, 1640, 1640, 1640,  265, 1640, 1292, 1640,  243,
     1640, 1640, 1640, 1640, 1640, 1640, 1640,  406,  407,  408,

     1422, 1422, 1422, 1422, 1422, 1292, 1422, 1423, 1640, 1422,
     1422, 1422, 1640, 1640, 1422, 1640, 1422, 1293, 1294, 1295,
     1640, 1640, 1424, 1422, 1640, 1640, 1422, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1293, 1294, 1295, 1640, 1422,
     1640, 1422, 1423, 1422, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1422, 1422, 1422, 1640,
     1422, 1422, 1425, 1426, 1427,  409,  410,  411,  412,  413,
      414,  415, 1640,  416, 1640,  417,  418,  419,  420, 1640,
      421,  422,  423,  424, 1443, 1443, 1443, 1443, 1443, 1640,

     1443, 1444, 1640, 1443, 1443, 1443, 1473, 1640, 1443, 1298,
     1443, 1640, 1640, 1640, 1640,  241, 1445, 1443,  241, 1640,
     1443,  528, 1640, 1298,  265,  243, 1640, 1640,  243, 1640,
     1640, 1640,  241, 1443, 1306, 1443, 1444, 1443,  265, 1640,
     1640, 1474,  243,  241, 1299, 1640, 1640, 1640, 1640,  528,
     1640, 1640, 1640,  243, 1640, 1640, 1640, 1640, 1299, 1640,
     1443, 1443, 1443, 1640, 1443, 1443, 1446, 1447, 1448, 1307,
     1640, 1475, 1476, 1477, 1300, 1301, 1302, 1306, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640,  241, 1640, 1300, 1301,
     1302, 1640,  528, 1640, 1306, 1640,  243, 1640, 1640, 1308,

     1309, 1310, 1500,  241, 1640, 1350, 1640, 1640, 1640,  528,
     1640,  287, 1307,  243,  287, 1640, 1350,  606, 1640, 1509,
      303,  289, 1640, 1640,  289,  287, 1640, 1640,  287, 1307,
     1358,  303, 1640, 1640,  606,  289, 1640, 1501,  289,  287,
     1351, 1640, 1308, 1309, 1310,  303, 1640, 1640, 1640,  289,
     1640, 1351, 1640, 1640, 1510, 1640, 1640, 1640, 1640, 1308,
     1309, 1310, 1640, 1640, 1640, 1359, 1640, 1502, 1503, 1504,
     1352, 1353, 1354, 1640, 1640, 1640, 1640, 1640, 1640, 1358,
     1640, 1352, 1353, 1354, 1511, 1512, 1513, 1640,  287, 1640,
     1517, 1640, 1640, 1365,  303, 1360, 1361, 1362,  289,  287,

     1640, 1365,  287, 1640, 1373,  606, 1640, 1640,  303,  289,
      287, 1640,  289,  287, 1359, 1373,  303, 1640, 1373,  606,
      289, 1640, 1640,  289,  287, 1518, 1640,  287, 1366, 1640,
      606, 1640, 1640,  606,  289, 1640, 1366,  289, 1640, 1374,
     1640, 1640, 1640, 1640, 1360, 1361, 1362, 1640, 1640, 1640,
     1374, 1640, 1640, 1374, 1640, 1519, 1520, 1521, 1367, 1368,
     1369, 1640, 1640, 1640, 1640, 1640, 1367, 1368, 1369, 1375,
     1376, 1377, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1375, 1376, 1377, 1375, 1376, 1377,  409,  410,  411,  412,
      413,  414,  415, 1640,  416, 1640,  417,  418,  419,  420,

     1640,  421,  422,  423,  424, 1547, 1547, 1547, 1547, 1547,
     1640, 1547, 1548, 1640, 1547, 1547, 1547, 1640, 1640, 1547,
     1640, 1547, 1640, 1640, 1640, 1640, 1640, 1549, 1547, 1640,
     1640, 1547, 1640, 1640, 1456, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640,  241, 1547, 1640, 1547, 1548, 1547,  528,
     1640, 1640, 1640,  243, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1457,
     1640, 1547, 1547, 1547, 1640, 1547, 1547, 1550, 1551, 1552,
     1554, 1554, 1554, 1554, 1554, 1640, 1554, 1555, 1640, 1554,
     1554, 1554, 1640, 1640, 1554, 1640, 1554, 1640, 1640, 1458,

     1459, 1460, 1556, 1554, 1640, 1640, 1554, 1640, 1640, 1456,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,  241, 1554,
     1640, 1554, 1555, 1554,  528, 1640, 1640, 1640,  243, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1457, 1640, 1554, 1554, 1554, 1640,
     1554, 1554, 1557, 1558, 1559, 1561, 1561, 1561, 1561, 1561,
     1640, 1561, 1562, 1640, 1561, 1561, 1561, 1640, 1640, 1561,
     1640, 1561, 1640, 1640, 1458, 1459, 1460, 1563, 1561, 1640,
     1640, 1561, 1640, 1640, 1456, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640,  241, 1561, 1640, 1561, 1562, 1561,  528,

     1640, 1640, 1640,  243, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1457,
     1640, 1561, 1561, 1561, 1640, 1561, 1561, 1564, 1565, 1566,
     1568, 1568, 1568, 1568, 1568, 1640, 1568, 1569, 1640, 1568,
     1568, 1568, 1640, 1640, 1568, 1640, 1568, 1640, 1640, 1458,
     1459, 1460, 1570, 1568, 1640, 1640, 1568, 1640, 1640, 1465,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,  241, 1568,
     1640, 1568, 1569, 1568,  528, 1640, 1640, 1640,  243, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1466, 1640, 1568, 1568, 1568, 1640,

     1568, 1568, 1571, 1572, 1573, 1574, 1574, 1574, 1574, 1574,
     1640, 1574, 1575, 1640, 1574, 1574, 1574, 1640, 1640, 1574,
     1465, 1574, 1640, 1465, 1467, 1468, 1469, 1576, 1574,  241,
     1640, 1574,  241, 1640, 1473,  528, 1640, 1640,  528,  243,
     1640, 1640,  243,  241, 1574, 1473, 1574, 1575, 1574,  528,
     1640, 1640, 1640,  243,  241, 1466, 1640, 1640, 1466, 1640,
      528, 1640, 1640, 1640,  243, 1640, 1640, 1640, 1640, 1474,
     1640, 1574, 1574, 1574, 1640, 1574, 1574, 1577, 1578, 1579,
     1474, 1640, 1640, 1473, 1640, 1467, 1468, 1469, 1467, 1468,
     1469, 1640,  241, 1640, 1500, 1640, 1640, 1640,  528, 1475,

     1476, 1477,  243,  287, 1640, 1500, 1640, 1640, 1500,  606,
     1475, 1476, 1477,  289,  287, 1640, 1509,  287, 1474, 1509,
      606, 1640, 1640,  606,  289,  287, 1640,  289,  287, 1501,
     1640,  606, 1640, 1640,  606,  289, 1640, 1640,  289, 1640,
     1501, 1640, 1640, 1501, 1640, 1640, 1640, 1640, 1475, 1476,
     1477, 1510, 1640, 1640, 1510, 1640, 1640, 1640, 1640, 1502,
     1503, 1504, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1502, 1503, 1504, 1502, 1503, 1504, 1640, 1640, 1509, 1640,
     1640, 1511, 1512, 1513, 1511, 1512, 1513,  287, 1640, 1517,
     1640, 1640, 1517,  606, 1640, 1640, 1640,  289,  287, 1640,

     1517,  287, 1640, 1640,  606, 1640, 1640,  606,  289,  287,
     1640,  289, 1640, 1510, 1640,  606, 1640, 1640, 1640,  289,
     1640, 1640, 1640, 1640, 1518, 1640, 1640, 1518, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1518, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1511, 1512, 1513, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1519, 1520, 1521, 1519, 1520, 1521,
     1640, 1640, 1640, 1640, 1640, 1519, 1520, 1521, 1614, 1614,
     1614, 1614, 1614, 1640, 1614, 1615, 1640, 1614, 1614, 1614,
     1640, 1640, 1614, 1640, 1614, 1640, 1640, 1640, 1640, 1640,
     1616, 1614, 1640, 1640, 1614, 1640, 1640, 1640, 1640, 1640,

     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1614, 1640, 1614,
     1615, 1614, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1614, 1614, 1614, 1640, 1614, 1614,
     1617, 1618, 1619, 1622, 1622, 1622, 1622, 1622, 1640, 1622,
     1623, 1640, 1622, 1622, 1622, 1640, 1640, 1622, 1640, 1622,
     1640, 1640, 1640, 1640, 1640, 1624, 1622, 1640, 1640, 1622,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1622, 1640, 1622, 1623, 1622, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,

     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1622,
     1622, 1622, 1640, 1622, 1622, 1625, 1626, 1627,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  165,  165, 1640, 1640, 1640,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
     1640,  165,  165,  165,  165,  165,  222, 1640,  222, 1640,
     1640, 1640,  222, 1640,  222,  222,  224,  224, 1640, 1640,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  239, 1640,  239, 1640, 1640,  239,  239,  239,
     1640,  239,  239, 1640,  239,  239,  239,  239,  239,  239,
      263, 1640,  263, 1640, 1640,  263,  263,  263, 1640,  263,
      263, 1640,  263,  263,  263,  263,  263,  263,  270, 1640,
      270, 1640, 1640,  270,  270, 1640, 1640,  270,  270, 1640,
     1640,  270, 1640,  270,  270,  270,  285, 1640,  285, 1640,
     1640,  285,  285,  285,  285,  285,  285, 1640,  285,  285,
      285,  285,  285,  285,  301, 1640,  301, 1640, 1640,  301,
      301,  301,  301,  301,  301, 1640,  301,  301,  301,  301,

      301,  301,  308, 1640,  308, 1640, 1640,  308,  308, 1640,
      308,  308,  308, 1640, 1640,  308, 1640,  308,  308,  308,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  346, 1640, 1640, 1640,  346, 1640,  346,
      346,  354,  354,  354, 1640,  354, 1640, 1640,  354, 1640,
     1640,  354,  354,  354,  354,  354,  371, 1640, 1640,  371,
     1640,  371, 1640,  371,  371, 1640, 1640,  371,  371,  371,
      371, 1640,  371,  371,  371, 1640,  371,  371,  371,  384,
      384, 1640,  384,  384,  384,  384,  384,  384,  384,  384,

      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  387,  387, 1640,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  405, 1640,
      405, 1640, 1640,  405,  405, 1640,  405,  405,  405, 1640,
     1640,  405,  405,  405,  405,  405,  455, 1640,  455, 1640,
     1640, 1640,  455, 1640,  455,  455,  224,  224, 1640, 1640,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,

      224,  224,  224,  224,  224,  224,  224,  224,  224,  472,
     1640,  472, 1640, 1640,  472,  472,  472, 1640,  472,  472,
     1640,  472,  472,  472,  472,  472,  472,  239, 1640,  239,
     1640, 1640,  239,  239,  239, 1640,  239,  239, 1640,  239,
      239,  239,  239,  239,  239,  480, 1640,  480, 1640, 1640,
      480,  480,  480, 1640,  480,  480, 1640,  480,  480,  480,
      480,  480,  480,  486, 1640,  486, 1640, 1640,  486,  486,
     1640, 1640,  486,  486, 1640, 1640,  486, 1640,  486,  486,
      486,  496, 1640,  496, 1640, 1640,  496,  496,  496, 1640,
      496,  496, 1640,  496,  496,  496,  496,  496,  496,  505,

     1640,  505, 1640, 1640,  505,  505,  505, 1640,  505,  505,
     1640,  505,  505, 1640,  505,  505,  505,  526, 1640,  526,
     1640, 1640,  526,  526,  526, 1640,  526,  526, 1640,  526,
      526,  526,  526,  526,  526,  263, 1640,  263, 1640, 1640,
      263,  263,  263, 1640,  263,  263, 1640,  263,  263,  263,
      263,  263,  263,  533, 1640,  533, 1640, 1640,  533,  533,
     1640, 1640,  533, 1640, 1640, 1640,  533,  533,  533,  533,
      533,  539, 1640,  539, 1640, 1640,  539,  539,  539, 1640,
      539,  539, 1640,  539,  539,  539,  539,  539,  539,  552,
     1640,  552, 1640, 1640,  552,  552,  552,  552,  552,  552,

     1640,  552,  552,  552,  552,  552,  552,  285, 1640,  285,
     1640, 1640,  285,  285,  285,  285,  285,  285, 1640,  285,
      285,  285,  285,  285,  285,  560, 1640,  560, 1640, 1640,
      560,  560,  560,  560,  560,  560, 1640,  560,  560,  560,
      560,  560,  560,  566, 1640,  566, 1640, 1640,  566,  566,
     1640,  566,  566,  566, 1640, 1640,  566, 1640,  566,  566,
      566,  574, 1640,  574, 1640, 1640,  574,  574,  574,  574,
      574,  574, 1640,  574,  574,  574,  574,  574,  574,  583,
     1640,  583, 1640, 1640,  583,  583,  583,  583,  583,  583,
     1640,  583,  583, 1640,  583,  583,  583,  604, 1640,  604,

     1640, 1640,  604,  604,  604,  604,  604,  604, 1640,  604,
      604,  604,  604,  604,  604,  301, 1640,  301, 1640, 1640,
      301,  301,  301,  301,  301,  301, 1640,  301,  301,  301,
      301,  301,  301,  611, 1640,  611, 1640, 1640,  611,  611,
     1640,  611,  611, 1640, 1640, 1640,  611,  611,  611,  611,
      611,  617, 1640,  617, 1640, 1640,  617,  617,  617,  617,
      617,  617, 1640,  617,  617,  617,  617,  617,  617,  346,
     1640, 1640, 1640,  346, 1640,  346,  346,  354, 1640, 1640,
     1640,  354, 1640,  354,  354,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457, 1640,  457,  457,

      457,  457,  457,  457,  457,  457,  457,  457,  222, 1640,
      222, 1640, 1640, 1640,  222, 1640,  222,  222,  371, 1640,
     1640,  371, 1640,  371, 1640,  371,  371, 1640, 1640,  371,
      371,  371,  371, 1640,  371,  371,  371, 1640,  371,  371,
      371,  387,  387, 1640,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  165,  165, 1640, 1640, 1640,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165, 1640,  165,  165,  165,  165,  165,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,

      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      455, 1640, 1640, 1640,  455, 1640,  455,  455,  664, 1640,
     1640, 1640,  664, 1640,  664,  664,  405, 1640,  405, 1640,
     1640,  405,  405, 1640,  405,  405,  405, 1640, 1640,  405,
      405,  405,  405,  405,  734, 1640,  734, 1640, 1640, 1640,
      734, 1640,  734,  734,  505, 1640,  505, 1640, 1640,  505,
      505, 1640, 1640,  505,  505, 1640,  505,  505, 1640,  505,
      505,  505,  472, 1640,  472, 1640, 1640,  472,  472,  472,
     1640,  472,  472, 1640,  472,  472,  472,  472,  472,  472,
      738, 1640,  738, 1640, 1640,  738,  738,  738, 1640,  738,

      738, 1640,  738,  738,  738,  738,  738,  738,  746, 1640,
      746, 1640, 1640,  746,  746,  746, 1640,  746,  746, 1640,
      746,  746,  746,  746,  746,  746,  480, 1640,  480, 1640,
     1640,  480,  480,  480, 1640,  480,  480, 1640,  480,  480,
      480,  480,  480,  480,  754, 1640,  754, 1640, 1640,  754,
      754, 1640, 1640,  754,  754, 1640, 1640,  754,  754,  754,
      754,  754,  760, 1640,  760, 1640, 1640,  760,  760, 1640,
     1640,  760, 1640, 1640, 1640,  760,  760,  760,  760,  760,
      767, 1640,  767, 1640, 1640,  767,  767,  767, 1640,  767,
      767, 1640,  767,  767,  767,  767,  767,  767,  496, 1640,

      496, 1640, 1640,  496,  496,  496, 1640,  496,  496, 1640,
      496,  496,  496,  496,  496,  496,  776, 1640,  776, 1640,
     1640,  776,  776, 1640, 1640,  776,  776, 1640, 1640,  776,
      776,  776,  776,  776,  782, 1640,  782, 1640, 1640,  782,
      782,  782, 1640,  782,  782, 1640,  782,  782,  782,  782,
      782,  782,  790, 1640,  790, 1640, 1640,  790,  790, 1640,
     1640,  790, 1640, 1640, 1640,  790,  790,  790,  790,  790,
      794, 1640,  794, 1640, 1640,  794,  794, 1640, 1640,  794,
      794, 1640, 1640,  794, 1640,  794,  794,  794,  805, 1640,
      805, 1640, 1640,  805,  805,  805, 1640,  805,  805, 1640,

      805,  805,  805,  805,  805,  805,  526, 1640,  526, 1640,
     1640,  526,  526,  526, 1640,  526,  526, 1640,  526,  526,
      526,  526,  526,  526,  814, 1640,  814, 1640, 1640,  814,
      814, 1640, 1640,  814, 1640, 1640, 1640,  814,  814,  814,
      814,  814,  533, 1640,  533, 1640, 1640,  533,  533, 1640,
     1640,  533, 1640, 1640, 1640,  533,  533,  533,  533,  533,
      823, 1640,  823, 1640, 1640,  823,  823,  823, 1640,  823,
      823, 1640,  823,  823,  823,  823,  823,  823,  539, 1640,
      539, 1640, 1640,  539,  539,  539, 1640,  539,  539, 1640,
      539,  539,  539,  539,  539,  539,  583, 1640,  583, 1640,

     1640,  583,  583, 1640,  583,  583,  583, 1640,  583,  583,
     1640,  583,  583,  583,  552, 1640,  552, 1640, 1640,  552,
      552,  552,  552,  552,  552, 1640,  552,  552,  552,  552,
      552,  552,  836, 1640,  836, 1640, 1640,  836,  836,  836,
      836,  836,  836, 1640,  836,  836,  836,  836,  836,  836,
      844, 1640,  844, 1640, 1640,  844,  844,  844,  844,  844,
      844, 1640,  844,  844,  844,  844,  844,  844,  560, 1640,
      560, 1640, 1640,  560,  560,  560,  560,  560,  560, 1640,
      560,  560,  560,  560,  560,  560,  852, 1640,  852, 1640,
     1640,  852,  852, 1640,  852,  852,  852, 1640, 1640,  852,

      852,  852,  852,  852,  858, 1640,  858, 1640, 1640,  858,
      858, 1640,  858,  858, 1640, 1640, 1640,  858,  858,  858,
      858,  858,  865, 1640,  865, 1640, 1640,  865,  865,  865,
      865,  865,  865, 1640,  865,  865,  865,  865,  865,  865,
      574, 1640,  574, 1640, 1640,  574,  574,  574,  574,  574,
      574, 1640,  574,  574,  574,  574,  574,  574,  874, 1640,
      874, 1640, 1640,  874,  874, 1640,  874,  874,  874, 1640,
     1640,  874,  874,  874,  874,  874,  880, 1640,  880, 1640,
     1640,  880,  880,  880,  880,  880,  880, 1640,  880,  880,
      880,  880,  880,  880,  888, 1640,  888, 1640, 1640,  888,

      888, 1640,  888,  888, 1640, 1640, 1640,  888,  888,  888,
      888,  888,  892, 1640,  892, 1640, 1640,  892,  892, 1640,
      892,  892,  892, 1640, 1640,  892, 1640,  892,  892,  892,
      903, 1640,  903, 1640, 1640,  903,  903,  903,  903,  903,
      903, 1640,  903,  903,  903,  903,  903,  903,  604, 1640,
      604, 1640, 1640,  604,  604,  604,  604,  604,  604, 1640,
      604,  604,  604,  604,  604,  604,  912, 1640,  912, 1640,
     1640,  912,  912, 1640,  912,  912, 1640, 1640, 1640,  912,
      912,  912,  912,  912,  611, 1640,  611, 1640, 1640,  611,
      611, 1640,  611,  611, 1640, 1640, 1640,  611,  611,  611,

      611,  611,  921, 1640,  921, 1640, 1640,  921,  921,  921,
      921,  921,  921, 1640,  921,  921,  921,  921,  921,  921,
      617, 1640,  617, 1640, 1640,  617,  617,  617,  617,  617,
      617, 1640,  617,  617,  617,  617,  617,  617,  664, 1640,
     1640, 1640,  664, 1640,  664,  664,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457, 1640,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  371,
     1640, 1640,  371, 1640,  371, 1640,  371,  371, 1640, 1640,
      371,  371,  371,  371, 1640,  371,  371,  371, 1640,  371,
      371,  371,  455, 1640, 1640,  455, 1640, 1640, 1640,  455,

     1640,  455,  455,  708,  708,  708,  708,  708, 1640,  708,
      708,  708,  708, 1640, 1640,  708, 1640, 1640,  708,  708,
      708, 1640,  708, 1640, 1640,  708,  405, 1640, 1640,  405,
      405, 1640,  405, 1640, 1640,  405,  405, 1640,  405,  405,
      405, 1640, 1640,  405,  405,  405,  405,  405,  734, 1640,
      734, 1640, 1640, 1640,  734, 1640,  734,  734,  776, 1640,
      776, 1640, 1640,  776,  776, 1640, 1640,  776,  776, 1640,
     1640,  776,  776,  776,  776,  776,  505, 1640,  505, 1640,
     1640,  505,  505,  505, 1640,  505,  505, 1640,  505,  505,
     1640,  505,  505,  505, 1013, 1640, 1013, 1640, 1640, 1013,

     1013, 1013, 1640, 1013, 1013, 1640, 1013, 1013, 1013, 1013,
     1013, 1013,  738, 1640,  738, 1640, 1640,  738,  738,  738,
     1640,  738,  738, 1640,  738,  738,  738,  738,  738,  738,
      746, 1640,  746, 1640, 1640,  746,  746,  746, 1640,  746,
      746, 1640,  746,  746,  746,  746,  746,  746,  754, 1640,
      754, 1640, 1640,  754,  754, 1640, 1640,  754,  754, 1640,
     1640,  754,  754,  754,  754,  754, 1025, 1640, 1025, 1640,
     1640, 1025, 1025, 1640, 1640, 1025, 1640, 1640, 1640, 1025,
     1025, 1025, 1025, 1025,  760, 1640,  760, 1640, 1640,  760,
      760, 1640, 1640,  760, 1640, 1640, 1640,  760,  760,  760,

      760,  760,  767, 1640,  767, 1640, 1640,  767,  767,  767,
     1640,  767,  767, 1640,  767,  767,  767,  767,  767,  767,
      782, 1640,  782, 1640, 1640,  782,  782,  782, 1640,  782,
      782, 1640,  782,  782,  782,  782,  782,  782, 1037, 1640,
     1037, 1640, 1640, 1037, 1037, 1640, 1640, 1037, 1640, 1640,
     1640, 1037, 1037, 1037, 1037, 1037, 1043, 1640, 1043, 1640,
     1640, 1043, 1043, 1640, 1640, 1043, 1640, 1640, 1640, 1043,
     1043, 1043, 1043, 1043, 1047, 1640, 1047, 1640, 1640, 1047,
     1047, 1640, 1640, 1047, 1640, 1640, 1640, 1047, 1047, 1047,
     1047, 1047,  790, 1640,  790, 1640, 1640,  790,  790, 1640,

     1640,  790, 1640, 1640, 1640,  790,  790,  790,  790,  790,
     1055, 1640, 1055, 1640, 1640, 1055, 1055, 1640, 1640, 1055,
     1055, 1640, 1640, 1055, 1055, 1055, 1055, 1055, 1065, 1640,
     1065, 1640, 1640, 1065, 1065, 1065, 1640, 1065, 1065, 1640,
     1065, 1065, 1065, 1065, 1065, 1065,  472, 1640,  472, 1640,
     1640,  472,  472,  472, 1640,  472,  472, 1640,  472,  472,
      472,  472,  472,  472, 1074, 1640, 1074, 1640, 1640, 1074,
     1074, 1074, 1640, 1074, 1074, 1640, 1074, 1074, 1074, 1074,
     1074, 1074, 1081, 1640, 1081, 1640, 1640, 1081, 1081, 1081,
     1640, 1081, 1081, 1640, 1081, 1081, 1081, 1081, 1081, 1081,

     1087, 1640, 1087, 1640, 1640, 1087, 1087, 1640, 1640, 1087,
     1087, 1640, 1640, 1087, 1640, 1087, 1087, 1087,  814, 1640,
      814, 1640, 1640,  814,  814, 1640, 1640,  814, 1640, 1640,
     1640,  814,  814,  814,  814,  814,  823, 1640,  823, 1640,
     1640,  823,  823,  823, 1640,  823,  823, 1640,  823,  823,
      823,  823,  823,  823,  874, 1640,  874, 1640, 1640,  874,
      874, 1640,  874,  874,  874, 1640, 1640,  874,  874,  874,
      874,  874,  583, 1640,  583, 1640, 1640,  583,  583,  583,
      583,  583,  583, 1640,  583,  583, 1640,  583,  583,  583,
     1103, 1640, 1103, 1640, 1640, 1103, 1103, 1103, 1103, 1103,

     1103, 1640, 1103, 1103, 1103, 1103, 1103, 1103,  836, 1640,
      836, 1640, 1640,  836,  836,  836,  836,  836,  836, 1640,
      836,  836,  836,  836,  836,  836,  844, 1640,  844, 1640,
     1640,  844,  844,  844,  844,  844,  844, 1640,  844,  844,
      844,  844,  844,  844,  852, 1640,  852, 1640, 1640,  852,
      852, 1640,  852,  852,  852, 1640, 1640,  852,  852,  852,
      852,  852, 1115, 1640, 1115, 1640, 1640, 1115, 1115, 1640,
     1115, 1115, 1640, 1640, 1640, 1115, 1115, 1115, 1115, 1115,
      858, 1640,  858, 1640, 1640,  858,  858, 1640,  858,  858,
     1640, 1640, 1640,  858,  858,  858,  858,  858,  865, 1640,

      865, 1640, 1640,  865,  865,  865,  865,  865,  865, 1640,
      865,  865,  865,  865,  865,  865,  880, 1640,  880, 1640,
     1640,  880,  880,  880,  880,  880,  880, 1640,  880,  880,
      880,  880,  880,  880, 1127, 1640, 1127, 1640, 1640, 1127,
     1127, 1640, 1127, 1127, 1640, 1640, 1640, 1127, 1127, 1127,
     1127, 1127, 1133, 1640, 1133, 1640, 1640, 1133, 1133, 1640,
     1133, 1133, 1640, 1640, 1640, 1133, 1133, 1133, 1133, 1133,
     1137, 1640, 1137, 1640, 1640, 1137, 1137, 1640, 1137, 1137,
     1640, 1640, 1640, 1137, 1137, 1137, 1137, 1137,  888, 1640,
      888, 1640, 1640,  888,  888, 1640,  888,  888, 1640, 1640,

     1640,  888,  888,  888,  888,  888, 1145, 1640, 1145, 1640,
     1640, 1145, 1145, 1640, 1145, 1145, 1145, 1640, 1640, 1145,
     1145, 1145, 1145, 1145, 1155, 1640, 1155, 1640, 1640, 1155,
     1155, 1155, 1155, 1155, 1155, 1640, 1155, 1155, 1155, 1155,
     1155, 1155,  552, 1640,  552, 1640, 1640,  552,  552,  552,
      552,  552,  552, 1640,  552,  552,  552,  552,  552,  552,
     1164, 1640, 1164, 1640, 1640, 1164, 1164, 1164, 1164, 1164,
     1164, 1640, 1164, 1164, 1164, 1164, 1164, 1164, 1171, 1640,
     1171, 1640, 1640, 1171, 1171, 1171, 1171, 1171, 1171, 1640,
     1171, 1171, 1171, 1171, 1171, 1171, 1177, 1640, 1177, 1640,

     1640, 1177, 1177, 1640, 1177, 1177, 1177, 1640, 1640, 1177,
     1640, 1177, 1177, 1177,  912, 1640,  912, 1640, 1640,  912,
      912, 1640,  912,  912, 1640, 1640, 1640,  912,  912,  912,
      912,  912,  921, 1640,  921, 1640, 1640,  921,  921,  921,
      921,  921,  921, 1640,  921,  921,  921,  921,  921,  921,
      664, 1640, 1640, 1640,  664, 1640,  664,  664,  371, 1640,
     1640,  371, 1640,  371, 1640,  371,  371, 1640, 1640,  371,
      371,  371,  371, 1640,  371,  371,  371, 1640,  371,  371,
      371,  989,  989,  989,  989,  989, 1640,  989,  989,  989,
      989, 1640, 1640,  989, 1640, 1640,  989,  989,  989, 1640,

      989, 1640,  989,  989,  998,  998,  998,  998,  998, 1640,
      998,  998,  998,  998, 1640, 1640,  998, 1640, 1640,  998,
      998,  998, 1640,  998,  998, 1640,  998,  405, 1640,  405,
     1640, 1640,  405,  405, 1640,  405,  405,  405, 1640, 1640,
      405,  405,  405,  405,  405,  455, 1640,  455, 1640, 1640,
     1640,  455, 1640,  455,  455,  782, 1640,  782, 1640, 1640,
      782,  782,  782, 1640,  782,  782, 1640,  782,  782,  782,
      782,  782,  782, 1013, 1640, 1013, 1640, 1640, 1013, 1013,
     1013, 1640, 1013, 1013, 1640, 1013, 1013, 1013, 1013, 1013,
     1013, 1025, 1640, 1025, 1640, 1640, 1025, 1025, 1640, 1640,

     1025, 1640, 1640, 1640, 1025, 1025, 1025, 1025, 1025, 1037,
     1640, 1037, 1640, 1640, 1037, 1037, 1640, 1640, 1037, 1640,
     1640, 1640, 1037, 1037, 1037, 1037, 1037, 1043, 1640, 1043,
     1640, 1640, 1043, 1043, 1640, 1640, 1043, 1640, 1640, 1640,
     1043, 1043, 1043, 1043, 1043, 1047, 1640, 1047, 1640, 1640,
     1047, 1047, 1640, 1640, 1047, 1640, 1640, 1640, 1047, 1047,
     1047, 1047, 1047, 1055, 1640, 1055, 1640, 1640, 1055, 1055,
     1640, 1640, 1055, 1055, 1640, 1640, 1055, 1055, 1055, 1055,
     1055, 1065, 1640, 1065, 1640, 1640, 1065, 1065, 1065, 1640,
     1065, 1065, 1640, 1065, 1065, 1065, 1065, 1065, 1065, 1282,

     1640, 1282, 1640, 1640, 1282, 1282, 1282, 1640, 1282, 1282,
     1640, 1282, 1282, 1282, 1282, 1282, 1282, 1290, 1640, 1290,
     1640, 1640, 1290, 1290, 1290, 1640, 1290, 1290, 1640, 1290,
     1290, 1290, 1290, 1290, 1290,  776, 1640,  776, 1640, 1640,
      776,  776, 1640, 1640,  776,  776, 1640, 1640,  776,  776,
      776,  776,  776, 1074, 1640, 1074, 1640, 1640, 1074, 1074,
     1074, 1640, 1074, 1074, 1640, 1074, 1074, 1074, 1074, 1074,
     1074, 1297, 1640, 1297, 1640, 1640, 1297, 1297, 1297, 1640,
     1297, 1297, 1640, 1297, 1297, 1297, 1297, 1297, 1297, 1305,
     1640, 1305, 1640, 1640, 1305, 1305, 1305, 1640, 1305, 1305,

     1640, 1305, 1305, 1305, 1305, 1305, 1305, 1081, 1640, 1081,
     1640, 1640, 1081, 1081, 1081, 1640, 1081, 1081, 1640, 1081,
     1081, 1081, 1081, 1081, 1081, 1313, 1640, 1313, 1640, 1640,
     1313, 1313, 1640, 1640, 1313, 1313, 1640, 1640, 1313, 1313,
     1313, 1313, 1313, 1319, 1640, 1319, 1640, 1640, 1319, 1319,
     1640, 1640, 1319, 1640, 1640, 1640, 1319, 1319, 1319, 1319,
     1319,  880, 1640,  880, 1640, 1640,  880,  880,  880,  880,
      880,  880, 1640,  880,  880,  880,  880,  880,  880, 1103,
     1640, 1103, 1640, 1640, 1103, 1103, 1103, 1103, 1103, 1103,
     1640, 1103, 1103, 1103, 1103, 1103, 1103, 1115, 1640, 1115,

     1640, 1640, 1115, 1115, 1640, 1115, 1115, 1640, 1640, 1640,
     1115, 1115, 1115, 1115, 1115, 1127, 1640, 1127, 1640, 1640,
     1127, 1127, 1640, 1127, 1127, 1640, 1640, 1640, 1127, 1127,
     1127, 1127, 1127, 1133, 1640, 1133, 1640, 1640, 1133, 1133,
     1640, 1133, 1133, 1640, 1640, 1640, 1133, 1133, 1133, 1133,
     1133, 1137, 1640, 1137, 1640, 1640, 1137, 1137, 1640, 1137,
     1137, 1640, 1640, 1640, 1137, 1137, 1137, 1137, 1137, 1145,
     1640, 1145, 1640, 1640, 1145, 1145, 1640, 1145, 1145, 1145,
     1640, 1640, 1145, 1145, 1145, 1145, 1145, 1155, 1640, 1155,
     1640, 1640, 1155, 1155, 1155, 1155, 1155, 1155, 1640, 1155,

     1155, 1155, 1155, 1155, 1155, 1349, 1640, 1349, 1640, 1640,
     1349, 1349, 1349, 1349, 1349, 1349, 1640, 1349, 1349, 1349,
     1349, 1349, 1349, 1357, 1640, 1357, 1640, 1640, 1357, 1357,
     1357, 1357, 1357, 1357, 1640, 1357, 1357, 1357, 1357, 1357,
     1357,  874, 1640,  874, 1640, 1640,  874,  874, 1640,  874,
      874,  874, 1640, 1640,  874,  874,  874,  874,  874, 1164,
     1640, 1164, 1640, 1640, 1164, 1164, 1164, 1164, 1164, 1164,
     1640, 1164, 1164, 1164, 1164, 1164, 1164, 1364, 1640, 1364,
     1640, 1640, 1364, 1364, 1364, 1364, 1364, 1364, 1640, 1364,
     1364, 1364, 1364, 1364, 1364, 1372, 1640, 1372, 1640, 1640,

     1372, 1372, 1372, 1372, 1372, 1372, 1640, 1372, 1372, 1372,
     1372, 1372, 1372, 1171, 1640, 1171, 1640, 1640, 1171, 1171,
     1171, 1171, 1171, 1171, 1640, 1171, 1171, 1171, 1171, 1171,
     1171, 1380, 1640, 1380, 1640, 1640, 1380, 1380, 1640, 1380,
     1380, 1380, 1640, 1640, 1380, 1380, 1380, 1380, 1380, 1386,
     1640, 1386, 1640, 1640, 1386, 1386, 1640, 1386, 1386, 1640,
     1640, 1640, 1386, 1386, 1386, 1386, 1386,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
     1221, 1221, 1221, 1221, 1221, 1640, 1221, 1221, 1221, 1221,

     1640, 1640, 1221, 1640, 1640, 1221, 1221, 1221, 1640, 1221,
     1221, 1640, 1221, 1229, 1229, 1229, 1229, 1229, 1640, 1229,
     1229, 1229, 1229, 1640, 1640, 1229, 1640, 1640, 1229, 1229,
     1229, 1640, 1229, 1640, 1640, 1229, 1241, 1241, 1241, 1241,
     1241, 1640, 1241, 1241, 1241, 1241, 1640, 1640, 1241, 1640,
     1640, 1241, 1241, 1241, 1640, 1241, 1640, 1640, 1241, 1254,
     1254, 1254, 1254, 1254, 1640, 1254, 1254, 1254, 1254, 1640,
     1640, 1254, 1640, 1640, 1254, 1254, 1254, 1640, 1254, 1640,
     1640, 1254,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,

      405,  405,  405,  405,  405, 1455, 1640, 1455, 1640, 1640,
     1455, 1455, 1455, 1640, 1455, 1455, 1640, 1455, 1455, 1455,
     1455, 1455, 1455, 1282, 1640, 1282, 1640, 1640, 1282, 1282,
     1282, 1640, 1282, 1282, 1640, 1282, 1282, 1282, 1282, 1282,
     1282, 1464, 1640, 1464, 1640, 1640, 1464, 1464, 1464, 1640,
     1464, 1464, 1640, 1464, 1464, 1464, 1464, 1464, 1464, 1290,
     1640, 1290, 1640, 1640, 1290, 1290, 1290, 1640, 1290, 1290,
     1640, 1290, 1290, 1290, 1290, 1290, 1290,  776, 1640,  776,
     1640, 1640,  776,  776, 1640, 1640,  776,  776, 1640, 1640,
      776,  776,  776,  776,  776, 1472, 1640, 1472, 1640, 1640,

     1472, 1472, 1472, 1640, 1472, 1472, 1640, 1472, 1472, 1472,
     1472, 1472, 1472, 1297, 1640, 1297, 1640, 1640, 1297, 1297,
     1297, 1640, 1297, 1297, 1640, 1297, 1297, 1297, 1297, 1297,
     1297, 1305, 1640, 1305, 1640, 1640, 1305, 1305, 1305, 1640,
     1305, 1305, 1640, 1305, 1305, 1305, 1305, 1305, 1305, 1313,
     1640, 1313, 1640, 1640, 1313, 1313, 1640, 1640, 1313, 1313,
     1640, 1640, 1313, 1313, 1313, 1313, 1313, 1484, 1640, 1484,
     1640, 1640, 1484, 1484, 1640, 1640, 1484, 1640, 1640, 1640,
     1484, 1484, 1484, 1484, 1484, 1319, 1640, 1319, 1640, 1640,
     1319, 1319, 1640, 1640, 1319, 1640, 1640, 1640, 1319, 1319,

     1319, 1319, 1319, 1499, 1640, 1499, 1640, 1640, 1499, 1499,
     1499, 1499, 1499, 1499, 1640, 1499, 1499, 1499, 1499, 1499,
     1499, 1349, 1640, 1349, 1640, 1640, 1349, 1349, 1349, 1349,
     1349, 1349, 1640, 1349, 1349, 1349, 1349, 1349, 1349, 1508,
     1640, 1508, 1640, 1640, 1508, 1508, 1508, 1508, 1508, 1508,
     1640, 1508, 1508, 1508, 1508, 1508, 1508, 1357, 1640, 1357,
     1640, 1640, 1357, 1357, 1357, 1357, 1357, 1357, 1640, 1357,
     1357, 1357, 1357, 1357, 1357,  874, 1640,  874, 1640, 1640,
      874,  874, 1640,  874,  874,  874, 1640, 1640,  874,  874,
      874,  874,  874, 1516, 1640, 1516, 1640, 1640, 1516, 1516,

     1516, 1516, 1516, 1516, 1640, 1516, 1516, 1516, 1516, 1516,
     1516, 1364, 1640, 1364, 1640, 1640, 1364, 1364, 1364, 1364,
     1364, 1364, 1640, 1364, 1364, 1364, 1364, 1364, 1364, 1372,
     1640, 1372, 1640, 1640, 1372, 1372, 1372, 1372, 1372, 1372,
     1640, 1372, 1372, 1372, 1372, 1372, 1372, 1380, 1640, 1380,
     1640, 1640, 1380, 1380, 1640, 1380, 1380, 1380, 1640, 1640,
     1380, 1380, 1380, 1380, 1380, 1528, 1640, 1528, 1640, 1640,
     1528, 1528, 1640, 1528, 1528, 1640, 1640, 1640, 1528, 1528,
     1528, 1528, 1528, 1386, 1640, 1386, 1640, 1640, 1386, 1386,
     1640, 1386, 1386, 1640, 1640, 1640, 1386, 1386, 1386, 1386,

     1386, 1414, 1414, 1414, 1414, 1414, 1640, 1414, 1414, 1414,
     1414, 1640, 1640, 1414, 1640, 1640, 1414, 1414, 1414, 1640,
     1414, 1640, 1640, 1414, 1422, 1422, 1422, 1422, 1422, 1640,
     1422, 1422, 1422, 1422, 1640, 1640, 1422, 1640, 1640, 1422,
     1422, 1422, 1640, 1422, 1640, 1640, 1422, 1443, 1443, 1443,
     1443, 1443, 1640, 1443, 1443, 1443, 1443, 1640, 1640, 1443,
     1640, 1640, 1443, 1443, 1443, 1640, 1443, 1640, 1640, 1443,
     1455, 1640, 1455, 1640, 1640, 1455, 1455, 1455, 1640, 1455,
     1455, 1640, 1455, 1455, 1455, 1455, 1455, 1455, 1464, 1640,
     1464, 1640, 1640, 1464, 1464, 1464, 1640, 1464, 1464, 1640,

     1464, 1464, 1464, 1464, 1464, 1464, 1472, 1640, 1472, 1640,
     1640, 1472, 1472, 1472, 1640, 1472, 1472, 1640, 1472, 1472,
     1472, 1472, 1472, 1472, 1547, 1547, 1547, 1547, 1547, 1640,
     1547, 1547, 1547, 1547, 1640, 1640, 1547, 1640, 1640, 1547,
     1547, 1547, 1640, 1547, 1640, 1640, 1547, 1554, 1554, 1554,
     1554, 1554, 1640, 1554, 1554, 1554, 1554, 1640, 1640, 1554,
     1640, 1640, 1554, 1554, 1554, 1640, 1554, 1640, 1640, 1554,
     1561, 1561, 1561, 1561, 1561, 1640, 1561, 1561, 1561, 1561,
     1640, 1640, 1561, 1640, 1640, 1561, 1561, 1561, 1640, 1561,
     1640, 1640, 1561, 1568, 1568, 1568, 1568, 1568, 1640, 1568,

     1568, 1568, 1568, 1640, 1640, 1568, 1640, 1640, 1568, 1568,
     1568, 1640, 1568, 1640, 1640, 1568, 1574, 1574, 1574, 1574,
     1574, 1640, 1574, 1574, 1574, 1574, 1640, 1640, 1574, 1640,
     1640, 1574, 1574, 1574, 1640, 1574, 1640, 1640, 1574, 1614,
     1614, 1614, 1614, 1614, 1640, 1614, 1614, 1614, 1614, 1640,
     1640, 1614, 1640, 1640, 1614, 1614, 1614, 1640, 1614, 1640,
     1640, 1614, 1622, 1622, 1622, 1622, 1622, 1640, 1622, 1622,
     1622, 1622, 1640, 1640, 1622, 1640, 1640, 1622, 1622, 1622,
     1640, 1622, 1640, 1640, 1622,   31, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,

     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640
    } ;

static const flex_int16_t yy_chk[11662] =
    {   0,
        0,    0,    1,    1,    1,    2,    2,    2,   11,   11,
       12,   12,   36,   40,  143,   36,   40,  143,   36,   40,
      136,  136,   72,   36,   40,   42,    1,    0,   42,    2,
       71,   71,   71,   71,   36,   40,   72,   42,   50,   42,
       42,   50,   42,   42,   42,   42,   49,    0,   49,   49,
       49,   49,   75,   75,   72,   50,   50,   50,   50,  119,
      119,  119,   50,  141,  141,  191,   75,  191,   75,   75,
       75,   75,    1,    1,    1,    2,    2,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    9,    9,    9,    9,   32,   32,   32,
        9,  422,    9,    9,    9,    9,  422,    9,    9,    9,
       37, 1268,   37,   37,   37, 1269,   38,    9,   38,   38,
       38,   39,  386,   39,   39,   39,  132,  132,  132,  132,
     1270,    9,    9,    9,   93,  149,  106,   93,  149,  106,
      386,   13,   13,   13,   13, 1271,   13,   14,   14,   14,
       14,  185,   14,   21,   21,   21,   21,   85,   21,    9,
     1272,    9,    9,    9,    9,    9,    9,   10,   10,   10,
       10,   85, 1273,   93,   10,  106,   10,   10,   10,   10,
       13,   10,   10,   10,  140,  140,   14,  130,  185,   85,

      130,   10,   21,  137, 1274,   52,  137,   52,   52,   52,
       52, 1275,  130,  178,  178,   10,   10,   10,  140,   52,
       13,   13,   13,   13,   13, 1276,   14,   14,   14,   14,
       14,  418,   21,   21,   21,   21,   21,   52,  153,  153,
      153,  153,  137,   10,  418,   10,   10,   10,   10,   10,
       10,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   17,   17,   17,   17,
      133,  217, 1277,  133,  217,   22,   22,   22,   22, 1278,
       22,   29,   29,   88,   88,   29,   30,   30,  319,  319,
       30,   17,   65,  227,  133,   65,  227,   88, 1279,   88,
       88,   88,   88, 1280,   65,   17,   65,   65,   17,   65,
       65,   65,   65,   80,   22,  359,   80,  359,  134,   29,
      134,  134,  134,  134,   30,   80,  322,   80,   80,  322,
       80,   80,   80,   80, 1281,   17,   17,   17,   17,   17,

       18,   18,   18,   18,   22,   22,   22,   22,   22,   29,
       29,   29,   29,   29,   30,   30,   30,   30,   30,  155,
      155,  155,  155,  334,  334,   18,   84,   46, 1285,   84,
      165,  165,  165,   46,  174,  174,  174, 1286,   46,   18,
       66,   84,   18,   84,   84,   84,   84,  365,  365,   66,
       84,  265,  265,  265,  166,   66,  166,  166,  166,   66,
      337,   46, 1287,  337,   46,  156,   46,  389,  389,   18,
       18,   18,   18,   18,   19,   66,  193,   19,   46,  156,
       19, 1288,   19,   19,  350,   46,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   73,  350,  156,  167,   19,

      167,  167,  167,  350,   73,   66,   66,   66,  228,  228,
       73,  228, 1289,   19,   73,   19,   23,   23,   23,   23,
      157, 1293,  157,  157,  157,  157,  193,  193,  193,  171,
       73,   74,  171,  356,  157,  171,  356,   74,   81,   74,
      171,   23,   74,   74,   74,   74,   74,   81,  356, 1294,
      198,  171,  157,   81,  409,   23,  409,   81,   23,   86,
       73,   73,   73,  168, 1295,  168,  168,  168,   86,   87,
      303,  303,  303,   81,   86,   87,  198,   87,   86, 1300,
       87,   87,   87,   87,   87,   23,   23,   23,   23,   23,
       24,   24,   24,   24,   86, 1301,   74,   74,   74,  676,

      198,  198,  198,   81,   81,   81,  175,  676,  175,  175,
      175,  214,  214,  214,  214,   24,  176,  131,  176,  176,
      176,  391,  391,  131,   86,   86,   86,  177,  131,   24,
      177, 1302,   24,  177,   87,   87,   87,  180,  177,  180,
      180,  180,  180,  230,  230,  230,  164,  318,  230,  177,
      318,  131,  277,  277,  131,  277,  131,  164, 1303,   24,
       24,   24,   24,   24,   25,   25,   25,   25,  131, 1304,
      323,  323,   25,  323,  182,  131,  182,  182,  182,  182,
      164,   25,   25,   25,   25,  164,  318, 1308,  182,  164,
       25,   25,   25,   25,  338,  338,  164,  338, 1309,  164,

      181,  164,  164,  181,  399,  399,  182,   25,   25,   25,
       25,   25,   25,   26,   26,   26,   26,  181,  181,  181,
      181,   26,  400,  400,  181,  215,  215,  215,  215, 1310,
       26,   26,   26,   26,  179,  205,  625,  179,  625,   26,
       26,   26,   26, 1311,  367,  196,  179,  367,  179,  179,
     1312,  179,  179,  179,  179, 1316,   26,   26,   26,   26,
       26,   26,   27,   27,   27,   27, 1317,   27,   27,  201,
      205,   27,   27,   27,  206,   27,   27,  196, 1318,   27,
       27,   27,   27,   27,  189,  205,  205,  205,  189,  333,
      189,  201,  333,  189,  189,  196,  196,  196, 1320,  190,

       27,  190,   27,   27,  190,  190,  190,  663,  663,  200,
       27,  206, 1321,  203,  206,  364,  202, 1322,  364,  201,
      201,  201,   27,  195,  206,  206,  206,   27,  333,   27,
       27,   28,   28,   28,   28,  203,   28,   28, 1323,  200,
       28,   28,   28,  202,   28,   28, 1324,  309,   28,   28,
       28,   28,   28,  369,  364,  195,  369,  195,  197,  200,
      200,  200, 1325,  203,  203,  203,  202,  202,  202,   28,
      309,   28,   28,  195,  195,  195,  347,  347,  347,   28,
      197,  216,  309,  216,  216,  216,  216,  197, 1326,  309,
     1327,   28, 1328,  197,  372,  216,   28,  372,   28,   28,

       47, 1329,  392,   47,   47,  392, 1330,   47,  197,  197,
      197,   47,   47,  216,   47,  207,   47,   47,   47,   47,
       47,   47,  420,   47,   47,  420,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47, 1331,   47,
     1332,  207, 1333,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,  207,  207,  207,   47,  672,
      672,   47,   47,   47,   57,   57,   57,  357, 1334,  218,
      357,  218,  218,  218,  218,  225,  225,  225,  225, 1335,
       57,   57,   57,  218,  221,  375,  221,  221,  221,  221,

      236,  357,  236,  236,  236,  236,  199, 1336,  221,  375,
      204,  218,  237,  237,  237,  237,   57,   57, 1337,  237,
       57,   57,  241,  241,  241,  241,  221,  375,   57,  929,
      929,   57,  204,   57, 1338,   57,   57,   67,  199,  199,
      199,  464,  208,   67,  464,  204, 1339,  209,   67,   67,
       67,   67,   67,   67,   67, 1340,  199,  199,  199, 1341,
      204,  204,  204,   67,   67,   67,   67,   67,   67,  210,
      631,   67,  208,  631,   67, 1342,   67,  208,  257,  257,
      257,  257,  930,  930,  209,  326,  326,  326,   67, 1343,
      326, 1344,  208,  208,  208,   67,   69,  209,  209,  209,

     1345,  368,  368,  210,  368,   69, 1346,   69,   69,   69,
       69,   69,  340,  340,  340,   69, 1347,  340, 1348,  210,
      210,  210,  223,  235,  223,  223,  235,  223,  223,  223,
      223,   69,  401,  401,  401,  235,  243,  235,  235, 1352,
      235,  235,  235,  235,  282,  289,  282,  282,  282,  282,
      239,  243,  238, 1353,  238,  238,  238,  238, 1354,  239,
      289,   69,   69,   69,   83,  239,  238, 1355,  388,  239,
      388,  388,  388,   83, 1356,   83,   83,   83,   83,   83,
      248, 1360, 1361,   83,  238,  239,  287,  287,  287,  287,
     1362,  248,  248,  248,  248,  630,  630,  248,  630,   83,

      411,  243,  243,  243, 1367,  637,  281,  411,  637,  281,
      289,  289,  289,  411, 1368,  239,  239,  239,  281,  650,
      281,  281,  650,  281,  281,  281,  281, 1369, 1370,   83,
       83,   83,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   98,  110,  110,  110,
     1371,  110,  679,  283,  110,  679,  283,  402,  402,  402,
      240, 1375, 1376,  110,  110,  110, 1377,  242,  283,  240,
      283,  283,  283,  283, 1378,  240,  242,  283,  623,  240,
      623, 1379,  242,  623,  623,  110,  242, 1383,  110,  110,
      110, 1384, 1385,  110,  110,  240,  295,  295,  295,  295,
     1387,  110,  242, 1388,  110, 1389,  110, 1390,  110,  110,
      120,  120,  120,  120,  352,  352,  352,  352, 1391,  120,
      120,  120,  120, 1392, 1393,  240,  240,  240,  353,  353,
      353,  353,  242,  242,  242, 1394,  120,  120,  120,  120,

      120,  120,  127,  405,  127,  127, 1397, 1401,  127,  127,
      127, 1402, 1403,  127,  127,  127,  127,  244,  413,  413,
      413,  127, 1405,  358,  249,  358,  244, 1407,  358,  358,
      358, 1409,  244,  249,  127, 1410,  244,  127, 1411,  249,
     1412, 1417,  284,  249,  284,  284,  284,  284,  361,  361,
      361,  361,  244,  405,  405,  405,  284,  636,  636,  249,
      636,  127,  128,  128,  128, 1418,  128, 1419,  360,  128,
      360,  360,  360,  360,  284,  488,  488,  488,  128,  128,
      128, 1425,  244,  244,  244, 1426,  128, 1427, 1446,  249,
      249,  249,  362, 1447,  362,  362,  362,  362, 1448, 1449,

      128,  374, 1450,  128,  128,  128, 1451,  686,  128,  128,
      686, 1452,  374,  374,  374,  374,  128,  686,  374,  128,
     1453,  128, 1454,  128,  128,  194,  194,  194,  194,  194,
      194,  194, 1458,  194, 1459,  194,  194,  194,  194, 1460,
      194,  194,  194,  194,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
     1461,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,

      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  258,
      377,  377,  377,  377,  451,  451,  451,  451,  258, 1462,
      258,  258,  258,  258,  258,  465,  465,  465,  258, 1463,
      465,  262,  258,  262,  262, 1467,  262,  262,  262,  262,
      509,  509,  509,  263,  258, 1468,  264, 1469,  262, 1470,
      258, 1471,  263,  649,  649,  264,  649,  718,  263, 1475,
      718,  264,  263, 1476,  266,  264,  262,  718,  394,  394,
      394,  394, 1477,  266,  258,  258,  258,  260,  263,  266,
      394,  264, 1478,  266, 1479, 1480,  260, 1481,  260,  260,

      260,  260,  260,  518,  518,  518,  260, 1482,  394,  266,
      260,  376, 1483,  376,  376,  376,  376, 1485,  263,  263,
      263,  264,  264,  264,  378,  376,  378, 1486,  260,  378,
      378,  378,  378,  461,  461,  461,  461, 1487, 1488,  266,
      266,  266,  395,  376,  395, 1489, 1490,  395,  395,  395,
      395, 1491,  260,  260,  260,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261, 1492,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      270,  425,  528,  528,  528,  278, 1493,  426,  285,  270,
     1494,  427, 1495, 1496,  278,  270, 1497,  285,  944,  270,
      278,  944, 1498,  285,  278, 1502, 1503,  285,  944,  286,
     1504, 1505,  426,  425,  429,  270, 1506, 1507,  286,  945,
      278,  288,  945,  285,  286, 1511,  427, 1512,  286,  945,
      288,  425,  425,  425, 1513, 1514,  288,  426,  426,  426,
      288,  427,  427,  427,  286,  270,  270,  270,  272,  429,

      278,  278,  278,  285,  285,  285,  288,  272, 1515,  272,
      272,  272,  272,  272,  429,  429,  429,  272, 1519, 1520,
      290,  533,  533,  533,  286,  286,  286, 1521, 1522,  290,
      428,  294, 1523,  272, 1524,  290,  288,  288,  288,  290,
      294,  463,  463,  463,  463, 1525,  294,  568,  568,  568,
      294,  430, 1526, 1527,  300,  290,  300,  300,  301,  300,
      300,  300,  300,  272,  272,  272,  294,  301,  428,  428,
     1529,  300, 1530,  301,  587,  587,  587,  301,  431, 1531,
      428,  428,  428,  430, 1532,  290,  290,  290, 1533,  300,
      596,  596,  596,  301, 1534, 1535,  294,  294,  294,  296,

     1536,  430,  430,  430,  436,  431, 1537, 1539,  296, 1541,
      296,  296,  296,  296,  296,  606,  606,  606,  296, 1543,
      432, 1550,  296,  301,  301,  301,  302, 1551,  431,  431,
      431, 1552, 1557,  304,  296,  302,  955,  434,  308,  955,
      296,  302,  304,  436, 1558,  302,  955,  308,  304, 1559,
      432, 1564,  304,  308,  436,  436,  436,  308,  432,  433,
     1565,  302,  434,  438,  296,  296,  296,  298,  304,  439,
      432,  432,  432,  308,  446, 1566,  298,  440,  298,  298,
      298,  298,  298,  611,  611,  611,  298,  434,  434,  434,
      298,  302,  302,  302, 1571,  433, 1572, 1573,  304,  304,

      304,  438,  440,  308,  308,  308, 1577,  446,  298,  433,
      433,  433,  439,  438,  438,  438,  643,  643,  643,  439,
      439,  439, 1578, 1579,  446,  446,  446,  440,  440,  440,
     1582, 1583,  298,  298,  298,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299, 1584,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,

      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      310, 1585, 1586,  435,  644,  644,  644,  315, 1587,  310,
      441,  310,  310,  310,  310,  310,  315, 1588, 1589,  310,
     1590, 1591,  315,  486, 1592,  379,  315,  379,  379,  379,
      379,  469,  469,  469,  469,  310, 1593,  435,  486,  379,
      435,  443,  315, 1594,  441,  444, 1595, 1596,  445,  442,
     1597, 1598,  442,  435,  435,  435, 1599,  379,  486,  442,
      441,  441,  441, 1600, 1601,  310,  310,  310, 1602, 1603,
      442, 1604,  315,  315,  315,  348,  348,  348,  348, 1605,
      443,  444,  445, 1606,  348,  348,  348,  348,  486,  486,

      486,  443,  443,  443, 1607,  444,  444,  444,  445,  445,
      445,  348,  348,  348,  348,  348,  348,  404,  404,  404,
      404,  479,  479,  479,  479, 1608,  404,  404,  404,  404,
      442,  442,  442,  447,  456, 1609,  456, 1617, 1618,  456,
      456,  456,  456,  404,  404,  404,  404,  404,  404,  437,
      437,  437,  437,  437,  448,  437,  437,  505,  437,  437,
      437,  515, 1619,  437,  454,  437,  454,  454,  454,  454,
     1625,  437,  437, 1626, 1627,  437,  447,  462,  454,  462,
      462,  462,  462,  447,  447,  447, 1628, 1629,  437, 1630,
      437,  437,  437,  448, 1631,  460,  454,  460, 1632, 1633,

      460,  460,  460,  460,  448,  448,  448,  505,  505,  505,
     1634,  515,  515,  515, 1635,  437,  437,  437, 1267,  437,
      437,  437,  437,  437,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
     1266,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  458,

     1265,  458,  458,  458,  458,  549,  549,  549,  549,  471,
     1610,  471,  583,  458,  471,  471,  471,  471,  472, 1264,
     1263,  473,  559,  559,  559,  559, 1663,  472, 1610, 1663,
      473,  458,  470,  472, 1262, 1663,  473,  472, 1261,  474,
      473, 1259, 1258,  470,  470,  470,  470,  470,  474, 1257,
     1246,  470,  507,  472,  474,  470,  473,  475,  474,  593,
      480, 1245,  583,  583,  583,  510,  475,  507, 1244,  480,
     1234,  507,  475,  470,  474,  480,  475, 1233, 1232,  480,
      510,  481, 1227,  472,  472,  472,  473,  473,  473, 1226,
      481,  967,  475,  482,  967,  480,  481,  470,  470,  470,

      481,  967,  482, 1225,  474,  474,  474, 1216,  482,  593,
      593,  593,  482,  659,  659,  659,  481,  507,  507,  507,
      496, 1214,  475,  475,  475,  480,  480,  480,  482,  496,
      510,  510,  510, 1213,  497,  496, 1212,  519, 1667,  496,
     1210, 1209,  498,  497, 1667, 1207,  481,  481,  481,  497,
     1688,  498,  519,  497, 1206,  496, 1688,  498,  482,  482,
      482,  498,  665,  665,  665,  551, 1205,  551, 1689,  497,
      551,  551,  551,  551, 1689, 1204,  504,  498,  504,  504,
     1201,  504,  504,  504,  504,  496,  496,  496, 1200,  511,
     1199,  511, 1198,  504,  511,  511,  511,  511,  511,  497,

      497,  497,  519,  519,  519, 1197, 1696,  498,  498,  498,
      502,  504, 1696,  524, 1702,  524,  524,  524,  524,  502,
     1702,  502,  502,  502,  502,  502, 1196,  524, 1748,  502,
      756,  756,  756,  502, 1748,  520,  969,  520,  526,  969,
      520,  520,  520,  520,  520,  524,  969,  526,  511,  511,
      511,  502,  971,  526,  624,  971,  624,  526, 1191,  624,
      624,  624,  971, 1190,  582,  527,  582,  582, 1189,  582,
      582,  582,  582,  526,  527,  502,  502,  502,  503, 1692,
      527,  582, 1692,  585,  527, 1188, 1187,  503, 1692,  503,
      503,  503,  503,  503,  520,  520,  520,  503,  585,  582,

      527,  503,  585,  526,  526,  526,  529,  632,  632,  632,
     1186,  588,  632,  503, 1705,  529, 1705, 1185,  539,  503,
     1705,  529,  760,  760,  760,  529,  588,  539, 1184, 1183,
      527,  527,  527,  539,  777,  777,  777,  539, 1182,  566,
     1181,  529, 1180,  503,  503,  503,  508, 1178,  585,  585,
      585, 1176,  597,  539,  566,  508, 1175,  508,  508,  508,
      508,  508,  781,  781,  781,  508, 1174,  597, 1170,  508,
     1169,  529,  529,  529,  566, 1168,  588,  588,  588, 1744,
      540,  508, 1744,  539,  539,  539, 1161,  508, 1744,  540,
     1160,  638,  638,  638, 1751,  540,  638, 1752, 1159,  540,

     1751,  541, 1153, 1752,  566,  566,  566,  785,  785,  785,
      541,  508,  508,  508,  517,  540,  541,  597,  597,  597,
      541, 1151, 1150,  517, 1149,  517,  517,  517,  517,  517,
      790,  790,  790,  517, 1148, 1801,  541,  517, 1804,  552,
      982, 1801,  553,  982, 1804,  540,  540,  540,  552,  517,
      982,  553, 1147, 1805,  552,  517, 1144,  553,  552, 1805,
     1143,  553,  642,  642,  642,  642,  541,  541,  541,  648,
      648,  648,  648, 1142,  552, 1007,  776,  553, 1007,  517,
      517,  517,  525, 1141,  602, 1007,  602,  602,  602,  602,
     1140,  525,  782,  525,  525,  525,  525,  525,  602, 1139,

     1138,  525, 1136, 1135,  552,  552,  552,  553,  553,  553,
      554,  653,  653,  653,  653, 1134,  602,  525, 1745,  554,
     1745,  555, 1132,  653, 1745,  554,  776,  776,  776,  554,
      555,  654,  654,  654,  654, 1131,  555,  814,  814,  814,
      555,  653,  782,  782,  782,  554, 1130,  525,  525,  525,
      545,  655,  655,  655,  655, 1129,  555, 1203, 1128,  545,
     1203,  545,  545,  545,  545,  545,  661, 1203,  661,  545,
     1126,  661,  661,  661,  661,  554,  554,  554,  728,  728,
      728,  728, 1125, 1124,  560,  545,  555,  555,  555,  561,
      854,  854,  854,  560,  730,  730,  730,  730,  561,  560,

      858,  858,  858,  560,  561,  589, 1123,  589,  561, 1122,
      589,  589,  589,  589,  589,  545,  545,  545,  550,  560,
      736,  736,  736,  736,  561,  562,  875,  875,  875,  550,
      550,  550,  550,  550,  562, 1121, 1211,  550,  574, 1211,
      562,  550, 1845,  575,  562, 1120, 1211,  574, 1845,  560,
      560,  560,  575,  574,  561,  561,  561,  574,  575,  550,
      562,  576,  575, 1119,  589,  589,  589,  879,  879,  879,
      576, 1846, 1222,  574, 1118, 1222,  576, 1846,  575, 1117,
      576,  783, 1222,  550,  550,  550,  729,  729,  729,  729,
      562,  562,  562, 1116, 1114,  874,  576,  733,  729,  733,

      733,  733,  733,  574,  574,  574, 1113, 1887,  575,  575,
      575, 1112,  598, 1887,  598,  604,  729,  598,  598,  598,
      598,  598, 1111, 1110,  604, 1109,  576,  576,  576,  580,
      604,  783,  783,  783,  604,  883,  883,  883,  580, 1108,
      580,  580,  580,  580,  580,  874,  874,  874,  580, 1888,
      604,  662,  580,  662,  662, 1888,  662,  662,  662,  662,
     1107, 1106,  731,  731,  731,  731, 1230, 1101,  605, 1230,
      580,  598,  598,  598,  731, 1100, 1230,  605, 1099, 1098,
      604,  604,  604,  605,  888,  888,  888,  605,  799,  799,
      799,  799,  731, 1097,  580,  580,  580,  581, 1096, 1746,

      799, 1746, 1095,  605,  607, 1746,  581, 1094,  581,  581,
      581,  581,  581,  607, 1093, 1092,  581, 1091,  799,  607,
      581, 1090,  732,  607,  732, 1088, 1086,  732,  732,  732,
      732,  617,  581,  605,  605,  605, 1085, 1084,  581,  607,
      617,  802,  802,  802,  802, 1080,  617,  912,  912,  912,
      617,  727, 1079,  727,  727, 1078,  727,  727,  727,  727,
      754, 1071,  581,  581,  581,  586,  617, 1070,  727,  607,
      607,  607,  618, 1069,  586,  754,  586,  586,  586,  586,
      586,  618,  693, 1063,  586,  693,  727,  618,  586, 1061,
     1060,  618,  693,  619, 1059,  754,  617,  617,  617,  880,

      586, 1058,  619,  693, 1057, 1054,  586,  618,  619,  931,
      931,  931,  619,  694, 1220, 1053,  694, 1220, 1052,  695,
     1051, 1050,  695,  694, 1220,  754,  754,  754,  619,  695,
      586,  586,  586,  595,  694, 1049, 1048,  618,  618,  618,
      695, 1046,  595,  881,  595,  595,  595,  595,  595,  880,
      880,  880,  595,  693,  693,  693,  595, 1045,  619,  619,
      619, 1220,  696, 1044,  695,  696,  697, 1042,  595,  697,
     1041, 1040,  696, 1039,  595, 1038,  697,  804,  804,  804,
      804,  810, 1036,  696,  694,  694,  694,  697, 1035,  804,
      695,  695,  695,  881,  881,  881,  810, 1034,  595,  595,

      595,  603,  834,  834,  834,  834,  908,  804, 1033,  696,
      603,  697,  603,  603,  603,  603,  603, 1032, 1031,  698,
      603,  908,  698,  900,  900,  900,  900, 1030, 1029,  698,
      932,  932,  932,  696,  696,  696,  603,  697,  697,  697,
      698,  699, 1028, 1027,  699, 1026,  810,  810,  810,  700,
      755,  699,  700,  701, 1024, 1023,  701, 1022, 1021,  700,
     1020, 1019,  699,  701,  794,  755,  603,  603,  603,  626,
      700,  908,  908,  908,  701,  698, 1018, 1017,  626,  794,
      626,  626,  626,  626,  626,  755,  702, 1016,  626,  702,
      698,  698,  698, 1004,  699, 1228,  702, 1003, 1228,  794,

      700,  701, 1002,  975,  626, 1228,  995,  702,  937,  937,
      937,  994,  699,  699,  699,  755,  755,  755,  993,  968,
      700,  700,  700,  966,  701,  701,  701,  965,  964,  794,
      794,  794,  975,  702,  626,  626,  626,  646,  646,  646,
      646,  703, 1228,  963,  703,  962,  646,  646,  646,  646,
      961,  703,  960,  975,  975,  975,  959,  702,  702,  702,
      958,  957,  703,  646,  646,  646,  646,  646,  646,  666,
      666,  666,  666,  704,  852,  956,  704,  954,  666,  666,
      666,  666,  705,  704,  974,  705, 1025, 1025, 1025,  852,
      953,  952,  705,  951,  704,  666,  666,  666,  666,  666,

      666,  703,  950,  705,  949,  706,  948,  947,  706,  852,
      946,  943,  703,  703,  703,  706,  939,  707,  936,  928,
      707,  709,  974,  978,  709,  705,  706,  707, 1037, 1037,
     1037,  709,  973,  927,  974,  974,  974,  926,  707,  852,
      852,  852,  709,  925,  704,  704,  704,  924,  920,  714,
      919,  918,  714,  705,  705,  705,  917,  978,  715,  714,
      916,  715, 1235,  973,  706, 1235,  915,  707,  715,  914,
      714,  913, 1235,  978,  978,  978,  706,  706,  706,  715,
      911,  910,  973,  973,  973, 1043, 1043, 1043,  707,  707,
      707,  909,  709,  709,  709,  710,  710,  710,  710,  710,

      710,  710,  715,  710,  899,  710,  710,  710,  710,  714,
      710,  710,  710,  710,  898,  895,  717,  894,  893,  717,
      714,  714,  714, 1047, 1047, 1047,  717,  891,  890,  715,
      715,  715,  716,  716,  716,  716,  716,  717,  716,  716,
      889,  716,  716,  716,  887,  886,  716,  722,  716,  885,
      722, 1089, 1089, 1089,  716,  716,  720,  722,  716,  720,
     1115, 1115, 1115,  717,  878,  877,  720,  876,  722,  872,
      871,  716,  870,  716,  716,  716,  869,  720,  897,  897,
      897,  897, 1064, 1064, 1064, 1064,  716,  717,  717,  717,
      897,  723,  868,  864,  723,  863,  722,  862,  716,  716,

      716,  723,  716,  716,  716,  716,  716,  861,  897,  976,
      860,  859,  723,  720,  724,  857,  984,  724,  722,  722,
      722, 1127, 1127, 1127,  724,  856,  855,  720,  720,  720,
      721,  721,  721,  721,  721,  724,  721,  721,  723,  721,
      721,  721,  851,  850,  721,  849,  721,  976,  984, 1133,
     1133, 1133,  721,  721,  848,  725,  721,  847,  725,  976,
      976,  976,  723,  723,  723,  725,  984,  984,  984,  721,
      843,  721,  721,  721,  842,  735,  725,  735,  721,  841,
      735,  735,  735,  735,  735,  724,  724,  724,  840,  798,
      798,  798,  798,  798,  839,  832,  721,  721,  721,  737,

      721,  721,  721,  721,  721,  830,  725,  829,  737,  828,
      737,  737,  737,  737,  737, 1137, 1137, 1137,  737, 1179,
     1179, 1179,  738, 1315, 1315, 1315,  725,  725,  725, 1224,
      827,  738, 1224,  739,  735,  735,  735,  738,  826, 1224,
      740,  738,  739,  798,  798,  798,  822,  821,  739,  740,
     1237,  820,  739, 1237,  819,  740,  818,  738,  746,  740,
     1237,  747,  817,  816,  737,  737,  737,  746,  739, 1238,
      747,  815, 1238,  746, 1224,  740,  747,  746,  813, 1238,
      747,  985,  748, 1154, 1154, 1154, 1154,  738,  738,  738,
      812,  748, 1239,  746,  767, 1239,  747,  748,  739,  739,

      739,  748, 1239,  767,  811,  740,  740,  740, 1242,  767,
      801, 1242,  981,  767,  800,  986,  797,  748, 1242,  796,
      985,  768, 1238,  746,  746,  746,  747,  747,  747,  767,
      768,  985,  985,  985,  795,  769,  768, 1319, 1319, 1319,
      768,  986, 1247, 1249,  769, 1247, 1249,  748,  748,  748,
      769,  793, 1247, 1249,  769,  981,  768,  792,  791,  767,
      767,  767,  981,  981,  981,  986,  986,  986,  789,  786,
      769,  786,  788,  787,  786,  786,  786,  786,  786,  803,
      803,  803,  803,  803,  780,  779,  768,  768,  768,  805,
      778,  990,  774,  902,  902,  902,  902,  773,  805,  772,

      769,  769,  769,  775,  805,  902,  771,  770,  805,  766,
      853,  765,  775,  764,  775,  775,  775,  775,  775, 1382,
     1382, 1382,  775,  902,  805,  853,  775,  763,  786,  786,
      786,  806,  762,  803,  803,  803,  761,  892,  775,  759,
      806,  990,  990,  990,  775,  853,  806,  758,  807,  997,
      806,  757,  892,  753,  805,  805,  805,  807,  752,  807,
      807,  807,  807,  807,  751,  750,  806,  807,  775,  775,
      775,  784,  892,  749,  745,  853,  853,  853, 1255,  744,
      784, 1255,  784,  784,  784,  784,  784,  743, 1255,  997,
      784,  742,  988,  741,  784,  734,  806,  806,  806,  997,

      997,  997,  892,  892,  892,  726,  784, 1386, 1386, 1386,
      809,  713,  784,  807,  807,  807,  999,  712,  988,  809,
      980,  711,  692,  980,  691,  809,  833,  690,  833,  809,
      980,  833,  833,  833,  833,  833,  784,  784,  784,  808,
      689,  980,  988,  988,  988,  809,  823,  688,  808,  687,
      808,  808,  808,  808,  808,  823,  685,  684,  808, 1240,
      683,  823, 1240,  824,  682,  823,  999,  999,  999, 1240,
      680,  678,  824,  677,  808,  809,  809,  809,  824,  675,
      825,  823,  824,  674,  673,  833,  833,  833,  671,  825,
      670,  980,  980,  980,  669,  825,  668,  667,  824,  825,

     1399,  657,  656, 1399,  808,  808,  808,  835,  641,  640,
     1399,  823,  823,  823,  635,  825,  835, 1240,  835,  835,
      835,  835,  835,  836,  634,  629,  835,  628,  824,  824,
      824,  627,  836,  622,  837, 1484, 1484, 1484,  836,  621,
      620, 1404,  836,  837, 1404,  825,  825,  825,  831,  837,
      616, 1404,  615,  837,  992,  614,  838,  831,  836,  831,
      831,  831,  831,  831,  613,  838,  612,  831,  610,  837,
      609,  838,  835,  835,  835,  838,  992,  844, 1528, 1528,
     1528,  608,  601,  831, 1406,  600,  844, 1406,  836,  836,
      836,  838,  844,  599, 1406,  594,  844,  592,  591,  837,

      837,  837,  590,  584,  992,  992,  992,  579, 1248,  578,
      845, 1248,  844,  831,  831,  831,  577,  846, 1248,  845,
      573,  838,  838,  838, 1408,  845,  846, 1408,  572,  845,
      571,  865,  846,  570, 1408,  569,  846,  567,  866,  565,
      865,  564,  844,  844,  844,  845,  865,  866, 1253, 1001,
      865, 1253,  846,  866,  884,  867,  884,  866, 1253,  884,
      884,  884,  884,  884,  867,  563,  865, 1248,  558,  557,
      867, 1001,  556,  866,  867,  845,  845,  845,  548, 1005,
      547,  546,  846,  846,  846,  896,  896,  896,  896,  896,
      867,  544,  543, 1009,  542, 1253,  865,  865,  865, 1001,

     1001, 1001,  538,  866,  866,  866,  901,  901,  901,  901,
      901, 1005,  537,  884,  884,  884, 1415,  536,  535, 1415,
      867,  867,  867,  873,  534, 1009, 1415,  532,  531, 1005,
     1005, 1005,  873,  530,  873,  873,  873,  873,  873,  896,
      896,  896,  873, 1009, 1009, 1009,  873,  523,  522, 1010,
      903, 1010, 1010, 1010, 1010,  521,  516,  904,  873,  903,
      901,  901,  901,  514,  873,  903,  904,  513,  905,  903,
      512,  506,  904,  501,  500,  499,  904,  905,  493,  905,
      905,  905,  905,  905,  492,  903, 1055,  905,  873,  873,
      873,  882,  904, 1011,  491, 1011, 1011, 1011, 1011,  490,

      882, 1055,  882,  882,  882,  882,  882,  489, 1420, 1251,
      882, 1420, 1251,  487,  882,  903,  903,  903, 1420, 1251,
      485, 1055,  904,  904,  904,  484,  882,  483, 1252,  478,
      907, 1252,  882,  905,  905,  905,  477,  476, 1252,  907,
      996,  468,  467,  996, 1423,  907,  450, 1423,  449,  907,
      996, 1055, 1055, 1055, 1423,  424,  882,  882,  882,  906,
      423,  996,  421,  419,  417,  907,  921,  416,  906, 1251,
      906,  906,  906,  906,  906,  921, 1429, 1431,  906, 1429,
     1431,  921,  415,  922,  414,  921, 1429, 1431, 1252,  412,
      410,  408,  922,  407,  906,  907,  907,  907,  922,  406,

      923,  921,  922,  381, 1434, 1056,  380, 1434, 1013,  923,
      363,  996,  996,  996, 1434,  923,  344, 1013,  922,  923,
     1056,  343,  331, 1013,  906,  906,  906, 1013,  330,  317,
      316,  921,  921,  921, 1437,  923, 1429, 1437,  314,  313,
     1056,  312,  307, 1013, 1437,  306,  305,  293,  922,  922,
      922, 1073, 1073, 1073, 1073, 1073,  292,  291, 1163, 1163,
     1163, 1163, 1163,  280,  279,  923,  923,  923,  935,  276,
     1056, 1056, 1056, 1013, 1013, 1013, 1014,  935,  275,  935,
      935,  935,  935,  935, 1087, 1014,  274,  935,  271, 1015,
     1442, 1014,  269, 1442,  268, 1014,  267,  247, 1015, 1087,

     1442,  246,  245,  935, 1015, 1073, 1073, 1073, 1015,  234,
      233, 1014, 1163, 1163, 1163,  222,  213, 1145, 1444, 1087,
     1546, 1444,  212, 1546, 1015, 1146,  211,  170, 1444,  162,
     1546,  160, 1145,  935,  935,  935,  938,  938,  938,  938,
     1146, 1014, 1014, 1014,  159,  938,  938,  938,  938, 1087,
     1087, 1087, 1145,  158, 1015, 1015, 1015,  151,  145,  139,
     1146, 1065,  938,  938,  938,  938,  938,  938,  940,  940,
     1065,  940,  135,  940,  126,  124, 1065,  940,  940,  940,
     1065,  940, 1145, 1145, 1145, 1433,  123,  122, 1433,  940,
     1146, 1146, 1146,  117,  114, 1433, 1065,  113,  112, 1177,

     1296, 1296, 1296, 1296, 1296,  108,  940, 1313,  940,  940,
     1548,  104,  102, 1548, 1177, 1363, 1363, 1363, 1363, 1363,
     1548, 1439, 1313,  101, 1439,  100, 1065, 1065, 1065,   95,
       91, 1439,   90,  940, 1177,  940,  940,  977,  977,  977,
      977,  977, 1313,  977,  977,   89,  977,  977,  977, 1433,
       82,  977,   79,  977, 1296, 1296, 1296,   78, 1555,  977,
      977, 1555,   77,  977, 1177, 1177, 1177,   70, 1555, 1363,
     1363, 1363, 1313, 1313, 1313,   64,  977,   63,  977,  977,
      977, 1439, 1066, 1560, 1562,  977, 1560, 1562,   62, 1569,
       55, 1066, 1569, 1560, 1562,   48,   44, 1066,   35, 1569,

       34, 1066,   31,  977,  977,  977,    0,  977,  977,  977,
      977,  977,  979,  979,  979,  979,  979, 1066,  979,  979,
        0,  979,  979,  979,    0,    0,  979, 1575,  979, 1580,
     1575,    0, 1580, 1612,  979,  979, 1612, 1575,  979, 1580,
        0, 1067, 1615, 1612,    0, 1615,    0, 1066, 1066, 1066,
     1067,  979, 1615,  979,  979,  979, 1067, 1314, 1620, 1623,
     1067, 1620, 1623,    0,    0,    0,    0,    0, 1620, 1623,
        0,    0, 1314,    0,    0,    0, 1067,    0,  979,  979,
      979,    0,  979,  979,  979,  979,  979,  987,  987,  987,
      987,  987, 1314,  987,  987,    0,  987,  987,  987,    0,

        0,  987,    0,  987,    0,    0, 1067, 1067, 1067,  987,
      987,    0,    0,  987,    0,    0,    0, 1636, 1636, 1636,
        0,    0, 1314, 1314, 1314,    0,  987,    0,  987,  987,
      987,    0,    0,    0, 1380, 1636, 1636, 1636, 1636,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1380,
        0,    0,    0,  987,  987,  987,    0,  987,  987,  987,
      987,  987,  991,  991,  991,  991,  991,  991,  991, 1380,
      991, 1381,  991,  991,  991,  991,    0,  991,  991,  991,
      991, 1006, 1006, 1006, 1006, 1006, 1381, 1006, 1006,    0,
     1006, 1006, 1006, 1068,    0, 1006, 1072, 1006,    0, 1380,

     1380, 1380, 1068, 1006, 1006, 1072, 1381, 1006, 1068,    0,
        0, 1072, 1068,    0,    0, 1072,    0,    0,    0,    0,
     1006,    0, 1006, 1006, 1006,    0,    0,    0, 1068,    0,
        0, 1072,    0,    0,    0,    0, 1381, 1381, 1381,    0,
        0,    0,    0,    0,    0,    0,    0, 1006, 1006, 1006,
        0, 1006, 1006, 1006, 1006, 1006, 1012,    0, 1068, 1068,
     1068, 1072, 1072, 1072, 1074, 1012,    0, 1012, 1012, 1012,
     1012, 1012,    0, 1074,    0, 1012,    0,    0,    0, 1074,
        0, 1075,    0, 1074,    0,    0,    0,    0,    0,    0,
     1075, 1012,    0,    0,    0,    0, 1075,    0,    0, 1074,

     1075,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1075,    0,    0,    0,
        0, 1012, 1012, 1012, 1062,    0,    0,    0,    0, 1074,
     1074, 1074,    0, 1062,    0, 1062, 1062, 1062, 1062, 1062,
        0,    0,    0, 1062,    0,    0, 1075, 1075, 1075, 1077,
        0,    0, 1081,    0,    0,    0,    0,    0, 1077, 1062,
        0, 1081,    0, 1082, 1077,    0,    0, 1081, 1077,    0,
        0, 1081, 1082,    0,    0,    0,    0,    0, 1082,    0,
        0,    0, 1082,    0, 1077,    0,    0, 1081,    0, 1062,
     1062, 1062, 1076,    0,    0,    0,    0,    0, 1082,    0,

        0, 1076,    0, 1076, 1076, 1076, 1076, 1076,    0,    0,
        0, 1076,    0,    0, 1077, 1077, 1077, 1081, 1081, 1081,
        0,    0,    0,    0,    0, 1083,    0, 1076, 1082, 1082,
     1082,    0, 1103,    0, 1083,    0,    0,    0,    0,    0,
     1083, 1103,    0,    0, 1083,    0,    0, 1103,    0,    0,
        0, 1103,    0, 1104,    0,    0,    0, 1076, 1076, 1076,
     1083,    0, 1104,    0,    0, 1105,    0, 1103, 1104,    0,
        0,    0, 1104,    0, 1105,    0,    0,    0,    0,    0,
     1105,    0,    0,    0, 1105,    0,    0,    0, 1104,    0,
     1083, 1083, 1083, 1102,    0,    0,    0, 1103, 1103, 1103,

     1105,    0, 1102,    0, 1102, 1102, 1102, 1102, 1102,    0,
        0,    0, 1102,    0,    0,    0,    0,    0, 1104, 1104,
     1104,    0,    0,    0,    0,    0,    0, 1155, 1102,    0,
     1105, 1105, 1105,    0, 1156,    0, 1155,    0,    0,    0,
        0,    0, 1155, 1156,    0,    0, 1155,    0, 1157, 1156,
        0,    0,    0, 1156,    0,    0,    0, 1157, 1102, 1102,
     1102, 1152, 1155, 1157,    0,    0,    0, 1157,    0, 1156,
     1152,    0, 1152, 1152, 1152, 1152, 1152,    0,    0,    0,
     1152,    0,    0, 1157,    0,    0,    0,    0, 1158,    0,
        0,    0, 1155, 1155, 1155,    0, 1152, 1158,    0, 1156,

     1156, 1156, 1162, 1158,    0,    0,    0, 1158,    0,    0,
     1164, 1162,    0, 1157, 1157, 1157,    0, 1162,    0, 1164,
        0, 1162,    0, 1158, 1165, 1164, 1152, 1152, 1152, 1164,
        0, 1167,    0, 1165,    0,    0,    0, 1162,    0, 1165,
     1167,    0,    0, 1165,    0, 1164, 1167,    0,    0,    0,
     1167,    0,    0, 1158, 1158, 1158,    0,    0,    0, 1165,
        0,    0,    0,    0, 1171,    0, 1167, 1162, 1162, 1162,
        0,    0,    0, 1171,    0, 1164, 1164, 1164,    0, 1171,
        0,    0,    0, 1171,    0,    0,    0,    0,    0, 1165,
     1165, 1165, 1166,    0,    0,    0, 1167, 1167, 1167, 1171,

     1172, 1166,    0, 1166, 1166, 1166, 1166, 1166,    0, 1172,
        0, 1166,    0, 1173,    0, 1172,    0,    0,    0, 1172,
        0,    0, 1173,    0,    0,    0,    0, 1166, 1173, 1171,
     1171, 1171, 1173,    0, 1282, 1172,    0,    0,    0,    0,
        0, 1283,    0, 1282,    0,    0,    0,    0, 1173, 1282,
     1283,    0,    0, 1282,    0,    0, 1283, 1166, 1166, 1166,
     1283,    0,    0,    0,    0, 1172, 1172, 1172, 1284, 1282,
        0,    0,    0,    0,    0,    0, 1283, 1284, 1173, 1173,
     1173, 1192, 1192, 1284, 1192,    0, 1192, 1284,    0,    0,
     1192, 1192, 1192,    0, 1192,    0,    0,    0,    0, 1282,

     1282, 1282, 1192, 1284,    0,    0, 1283, 1283, 1283,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1192,
        0, 1192, 1192,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1284, 1284, 1284,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1192,    0, 1192, 1192,
     1217, 1217, 1217, 1217, 1217,    0, 1217, 1217,    0, 1217,
     1217, 1217,    0,    0, 1217,    0, 1217,    0,    0,    0,
        0,    0, 1217, 1217,    0,    0, 1217,    0,    0, 1290,
        0,    0,    0,    0,    0,    0,    0,    0, 1290, 1217,
        0, 1217, 1217, 1217, 1290,    0,    0,    0, 1290,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1290,    0, 1217, 1217, 1217,    0,
     1217, 1217, 1217, 1217, 1217, 1218, 1218, 1218, 1218, 1218,
        0, 1218,    0,    0, 1218, 1218, 1218,    0,    0, 1218,
        0, 1218,    0,    0, 1290, 1290, 1290, 1218, 1218,    0,
        0, 1218, 1291,    0,    0,    0,    0,    0,    0,    0,
        0, 1291,    0,    0, 1218,    0, 1218, 1291, 1218,    0,
     1292, 1291,    0,    0,    0,    0,    0,    0,    0, 1292,
        0,    0,    0,    0,    0, 1292,    0, 1291,    0, 1292,
        0, 1218, 1218, 1218,    0, 1218, 1218, 1218, 1218, 1218,

     1219, 1219, 1219, 1219, 1219, 1292, 1219, 1219,    0, 1219,
     1219, 1219,    0,    0, 1219,    0, 1219, 1291, 1291, 1291,
        0,    0, 1219, 1219,    0,    0, 1219,    0,    0,    0,
        0,    0,    0,    0,    0, 1292, 1292, 1292,    0, 1219,
        0, 1219, 1219, 1219,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1219, 1219, 1219,    0,
     1219, 1219, 1219, 1219, 1219, 1223, 1223, 1223, 1223, 1223,
     1223, 1223,    0, 1223,    0, 1223, 1223, 1223, 1223,    0,
     1223, 1223, 1223, 1223, 1260, 1260, 1260, 1260, 1260,    0,

     1260, 1260,    0, 1260, 1260, 1260, 1297,    0, 1260, 1298,
     1260,    0,    0,    0,    0, 1297, 1260, 1260, 1298,    0,
     1260, 1297,    0, 1299, 1298, 1297,    0,    0, 1298,    0,
        0,    0, 1299, 1260, 1305, 1260, 1260, 1260, 1299,    0,
        0, 1297, 1299, 1305, 1298,    0,    0,    0,    0, 1305,
        0,    0,    0, 1305,    0,    0,    0,    0, 1299,    0,
     1260, 1260, 1260,    0, 1260, 1260, 1260, 1260, 1260, 1305,
        0, 1297, 1297, 1297, 1298, 1298, 1298, 1306,    0,    0,
        0,    0,    0,    0,    0,    0, 1306,    0, 1299, 1299,
     1299,    0, 1306,    0, 1307,    0, 1306,    0,    0, 1305,

     1305, 1305, 1349, 1307,    0, 1350,    0,    0,    0, 1307,
        0, 1349, 1306, 1307, 1350,    0, 1351, 1349,    0, 1357,
     1350, 1349,    0,    0, 1350, 1351,    0,    0, 1357, 1307,
     1358, 1351,    0,    0, 1357, 1351,    0, 1349, 1357, 1358,
     1350,    0, 1306, 1306, 1306, 1358,    0,    0,    0, 1358,
        0, 1351,    0,    0, 1357,    0,    0,    0,    0, 1307,
     1307, 1307,    0,    0,    0, 1358,    0, 1349, 1349, 1349,
     1350, 1350, 1350,    0,    0,    0,    0,    0,    0, 1359,
        0, 1351, 1351, 1351, 1357, 1357, 1357,    0, 1359,    0,
     1364,    0,    0, 1365, 1359, 1358, 1358, 1358, 1359, 1364,

        0, 1366, 1365,    0, 1372, 1364,    0,    0, 1365, 1364,
     1366,    0, 1365, 1372, 1359, 1373, 1366,    0, 1374, 1372,
     1366,    0,    0, 1372, 1373, 1364,    0, 1374, 1365,    0,
     1373,    0,    0, 1374, 1373,    0, 1366, 1374,    0, 1372,
        0,    0,    0,    0, 1359, 1359, 1359,    0,    0,    0,
     1373,    0,    0, 1374,    0, 1364, 1364, 1364, 1365, 1365,
     1365,    0,    0,    0,    0,    0, 1366, 1366, 1366, 1372,
     1372, 1372,    0,    0,    0,    0,    0,    0,    0,    0,
     1373, 1373, 1373, 1374, 1374, 1374, 1416, 1416, 1416, 1416,
     1416, 1416, 1416,    0, 1416,    0, 1416, 1416, 1416, 1416,

        0, 1416, 1416, 1416, 1416, 1428, 1428, 1428, 1428, 1428,
        0, 1428, 1428,    0, 1428, 1428, 1428,    0,    0, 1428,
        0, 1428,    0,    0,    0,    0,    0, 1428, 1428,    0,
        0, 1428,    0,    0, 1455,    0,    0,    0,    0,    0,
        0,    0,    0, 1455, 1428,    0, 1428, 1428, 1428, 1455,
        0,    0,    0, 1455,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1455,
        0, 1428, 1428, 1428,    0, 1428, 1428, 1428, 1428, 1428,
     1430, 1430, 1430, 1430, 1430,    0, 1430, 1430,    0, 1430,
     1430, 1430,    0,    0, 1430,    0, 1430,    0,    0, 1455,

     1455, 1455, 1430, 1430,    0,    0, 1430,    0,    0, 1456,
        0,    0,    0,    0,    0,    0,    0,    0, 1456, 1430,
        0, 1430, 1430, 1430, 1456,    0,    0,    0, 1456,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1456,    0, 1430, 1430, 1430,    0,
     1430, 1430, 1430, 1430, 1430, 1436, 1436, 1436, 1436, 1436,
        0, 1436, 1436,    0, 1436, 1436, 1436,    0,    0, 1436,
        0, 1436,    0,    0, 1456, 1456, 1456, 1436, 1436,    0,
        0, 1436,    0,    0, 1457,    0,    0,    0,    0,    0,
        0,    0,    0, 1457, 1436,    0, 1436, 1436, 1436, 1457,

        0,    0,    0, 1457,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1457,
        0, 1436, 1436, 1436,    0, 1436, 1436, 1436, 1436, 1436,
     1440, 1440, 1440, 1440, 1440,    0, 1440, 1440,    0, 1440,
     1440, 1440,    0,    0, 1440,    0, 1440,    0,    0, 1457,
     1457, 1457, 1440, 1440,    0,    0, 1440,    0,    0, 1464,
        0,    0,    0,    0,    0,    0,    0,    0, 1464, 1440,
        0, 1440, 1440, 1440, 1464,    0,    0,    0, 1464,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1464,    0, 1440, 1440, 1440,    0,

     1440, 1440, 1440, 1440, 1440, 1441, 1441, 1441, 1441, 1441,
        0, 1441, 1441,    0, 1441, 1441, 1441,    0,    0, 1441,
     1465, 1441,    0, 1466, 1464, 1464, 1464, 1441, 1441, 1465,
        0, 1441, 1466,    0, 1472, 1465,    0,    0, 1466, 1465,
        0,    0, 1466, 1472, 1441, 1473, 1441, 1441, 1441, 1472,
        0,    0,    0, 1472, 1473, 1465,    0,    0, 1466,    0,
     1473,    0,    0,    0, 1473,    0,    0,    0,    0, 1472,
        0, 1441, 1441, 1441,    0, 1441, 1441, 1441, 1441, 1441,
     1473,    0,    0, 1474,    0, 1465, 1465, 1465, 1466, 1466,
     1466,    0, 1474,    0, 1499,    0,    0,    0, 1474, 1472,

     1472, 1472, 1474, 1499,    0, 1500,    0,    0, 1501, 1499,
     1473, 1473, 1473, 1499, 1500,    0, 1508, 1501, 1474, 1509,
     1500,    0,    0, 1501, 1500, 1508,    0, 1501, 1509, 1499,
        0, 1508,    0,    0, 1509, 1508,    0,    0, 1509,    0,
     1500,    0,    0, 1501,    0,    0,    0,    0, 1474, 1474,
     1474, 1508,    0,    0, 1509,    0,    0,    0,    0, 1499,
     1499, 1499,    0,    0,    0,    0,    0,    0,    0,    0,
     1500, 1500, 1500, 1501, 1501, 1501,    0,    0, 1510,    0,
        0, 1508, 1508, 1508, 1509, 1509, 1509, 1510,    0, 1516,
        0,    0, 1517, 1510,    0,    0,    0, 1510, 1516,    0,

     1518, 1517,    0,    0, 1516,    0,    0, 1517, 1516, 1518,
        0, 1517,    0, 1510,    0, 1518,    0,    0,    0, 1518,
        0,    0,    0,    0, 1516,    0,    0, 1517,    0,    0,
        0,    0,    0,    0,    0, 1518,    0,    0,    0,    0,
        0,    0,    0, 1510, 1510, 1510,    0,    0,    0,    0,
        0,    0,    0,    0, 1516, 1516, 1516, 1517, 1517, 1517,
        0,    0,    0,    0,    0, 1518, 1518, 1518, 1553, 1553,
     1553, 1553, 1553,    0, 1553, 1553,    0, 1553, 1553, 1553,
        0,    0, 1553,    0, 1553,    0,    0,    0,    0,    0,
     1553, 1553,    0,    0, 1553,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 1553,    0, 1553,
     1553, 1553,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1553, 1553, 1553,    0, 1553, 1553,
     1553, 1553, 1553, 1567, 1567, 1567, 1567, 1567,    0, 1567,
     1567,    0, 1567, 1567, 1567,    0,    0, 1567,    0, 1567,
        0,    0,    0,    0,    0, 1567, 1567,    0,    0, 1567,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1567,    0, 1567, 1567, 1567,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 1567,
     1567, 1567,    0, 1567, 1567, 1567, 1567, 1567, 1641, 1641,
     1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641,
     1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641,
     1641, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642,
     1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642,
     1642, 1642, 1642, 1642, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,

     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1646, 1646,    0,    0,    0, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
        0, 1646, 1646, 1646, 1646, 1646, 1647,    0, 1647,    0,
        0,    0, 1647,    0, 1647, 1647, 1648, 1648,    0,    0,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,

     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1650,    0, 1650,    0,    0, 1650, 1650, 1650,
        0, 1650, 1650,    0, 1650, 1650, 1650, 1650, 1650, 1650,
     1651,    0, 1651,    0,    0, 1651, 1651, 1651,    0, 1651,
     1651,    0, 1651, 1651, 1651, 1651, 1651, 1651, 1652,    0,
     1652,    0,    0, 1652, 1652,    0,    0, 1652, 1652,    0,
        0, 1652,    0, 1652, 1652, 1652, 1653,    0, 1653,    0,
        0, 1653, 1653, 1653, 1653, 1653, 1653,    0, 1653, 1653,
     1653, 1653, 1653, 1653, 1654,    0, 1654,    0,    0, 1654,
     1654, 1654, 1654, 1654, 1654,    0, 1654, 1654, 1654, 1654,

     1654, 1654, 1655,    0, 1655,    0,    0, 1655, 1655,    0,
     1655, 1655, 1655,    0,    0, 1655,    0, 1655, 1655, 1655,
     1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656,
     1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656,
     1656, 1656, 1656, 1657,    0,    0,    0, 1657,    0, 1657,
     1657, 1658, 1658, 1658,    0, 1658,    0,    0, 1658,    0,
        0, 1658, 1658, 1658, 1658, 1658, 1659,    0,    0, 1659,
        0, 1659,    0, 1659, 1659,    0,    0, 1659, 1659, 1659,
     1659,    0, 1659, 1659, 1659,    0, 1659, 1659, 1659, 1660,
     1660,    0, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660,

     1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660,
     1660, 1660, 1661, 1661,    0, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1664,    0,
     1664,    0,    0, 1664, 1664,    0, 1664, 1664, 1664,    0,
        0, 1664, 1664, 1664, 1664, 1664, 1665,    0, 1665,    0,
        0,    0, 1665,    0, 1665, 1665, 1666, 1666,    0,    0,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,

     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1668,
        0, 1668,    0,    0, 1668, 1668, 1668,    0, 1668, 1668,
        0, 1668, 1668, 1668, 1668, 1668, 1668, 1669,    0, 1669,
        0,    0, 1669, 1669, 1669,    0, 1669, 1669,    0, 1669,
     1669, 1669, 1669, 1669, 1669, 1670,    0, 1670,    0,    0,
     1670, 1670, 1670,    0, 1670, 1670,    0, 1670, 1670, 1670,
     1670, 1670, 1670, 1671,    0, 1671,    0,    0, 1671, 1671,
        0,    0, 1671, 1671,    0,    0, 1671,    0, 1671, 1671,
     1671, 1672,    0, 1672,    0,    0, 1672, 1672, 1672,    0,
     1672, 1672,    0, 1672, 1672, 1672, 1672, 1672, 1672, 1673,

        0, 1673,    0,    0, 1673, 1673, 1673,    0, 1673, 1673,
        0, 1673, 1673,    0, 1673, 1673, 1673, 1674,    0, 1674,
        0,    0, 1674, 1674, 1674,    0, 1674, 1674,    0, 1674,
     1674, 1674, 1674, 1674, 1674, 1675,    0, 1675,    0,    0,
     1675, 1675, 1675,    0, 1675, 1675,    0, 1675, 1675, 1675,
     1675, 1675, 1675, 1676,    0, 1676,    0,    0, 1676, 1676,
        0,    0, 1676,    0,    0,    0, 1676, 1676, 1676, 1676,
     1676, 1677,    0, 1677,    0,    0, 1677, 1677, 1677,    0,
     1677, 1677,    0, 1677, 1677, 1677, 1677, 1677, 1677, 1678,
        0, 1678,    0,    0, 1678, 1678, 1678, 1678, 1678, 1678,

        0, 1678, 1678, 1678, 1678, 1678, 1678, 1679,    0, 1679,
        0,    0, 1679, 1679, 1679, 1679, 1679, 1679,    0, 1679,
     1679, 1679, 1679, 1679, 1679, 1680,    0, 1680,    0,    0,
     1680, 1680, 1680, 1680, 1680, 1680,    0, 1680, 1680, 1680,
     1680, 1680, 1680, 1681,    0, 1681,    0,    0, 1681, 1681,
        0, 1681, 1681, 1681,    0,    0, 1681,    0, 1681, 1681,
     1681, 1682,    0, 1682,    0,    0, 1682, 1682, 1682, 1682,
     1682, 1682,    0, 1682, 1682, 1682, 1682, 1682, 1682, 1683,
        0, 1683,    0,    0, 1683, 1683, 1683, 1683, 1683, 1683,
        0, 1683, 1683,    0, 1683, 1683, 1683, 1684,    0, 1684,

        0,    0, 1684, 1684, 1684, 1684, 1684, 1684,    0, 1684,
     1684, 1684, 1684, 1684, 1684, 1685,    0, 1685,    0,    0,
     1685, 1685, 1685, 1685, 1685, 1685,    0, 1685, 1685, 1685,
     1685, 1685, 1685, 1686,    0, 1686,    0,    0, 1686, 1686,
        0, 1686, 1686,    0,    0,    0, 1686, 1686, 1686, 1686,
     1686, 1687,    0, 1687,    0,    0, 1687, 1687, 1687, 1687,
     1687, 1687,    0, 1687, 1687, 1687, 1687, 1687, 1687, 1690,
        0,    0,    0, 1690,    0, 1690, 1690, 1691,    0,    0,
        0, 1691,    0, 1691, 1691, 1693, 1693, 1693, 1693, 1693,
     1693, 1693, 1693, 1693, 1693, 1693, 1693,    0, 1693, 1693,

     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1694,    0,
     1694,    0,    0,    0, 1694,    0, 1694, 1694, 1695,    0,
        0, 1695,    0, 1695,    0, 1695, 1695,    0,    0, 1695,
     1695, 1695, 1695,    0, 1695, 1695, 1695,    0, 1695, 1695,
     1695, 1697, 1697,    0, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1698, 1698,    0,    0,    0, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1698,    0, 1698, 1698, 1698, 1698, 1698, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699,

     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699,
     1700,    0,    0,    0, 1700,    0, 1700, 1700, 1701,    0,
        0,    0, 1701,    0, 1701, 1701, 1703,    0, 1703,    0,
        0, 1703, 1703,    0, 1703, 1703, 1703,    0,    0, 1703,
     1703, 1703, 1703, 1703, 1704,    0, 1704,    0,    0,    0,
     1704,    0, 1704, 1704, 1706,    0, 1706,    0,    0, 1706,
     1706,    0,    0, 1706, 1706,    0, 1706, 1706,    0, 1706,
     1706, 1706, 1707,    0, 1707,    0,    0, 1707, 1707, 1707,
        0, 1707, 1707,    0, 1707, 1707, 1707, 1707, 1707, 1707,
     1708,    0, 1708,    0,    0, 1708, 1708, 1708,    0, 1708,

     1708,    0, 1708, 1708, 1708, 1708, 1708, 1708, 1709,    0,
     1709,    0,    0, 1709, 1709, 1709,    0, 1709, 1709,    0,
     1709, 1709, 1709, 1709, 1709, 1709, 1710,    0, 1710,    0,
        0, 1710, 1710, 1710,    0, 1710, 1710,    0, 1710, 1710,
     1710, 1710, 1710, 1710, 1711,    0, 1711,    0,    0, 1711,
     1711,    0,    0, 1711, 1711,    0,    0, 1711, 1711, 1711,
     1711, 1711, 1712,    0, 1712,    0,    0, 1712, 1712,    0,
        0, 1712,    0,    0,    0, 1712, 1712, 1712, 1712, 1712,
     1713,    0, 1713,    0,    0, 1713, 1713, 1713,    0, 1713,
     1713,    0, 1713, 1713, 1713, 1713, 1713, 1713, 1714,    0,

     1714,    0,    0, 1714, 1714, 1714,    0, 1714, 1714,    0,
     1714, 1714, 1714, 1714, 1714, 1714, 1715,    0, 1715,    0,
        0, 1715, 1715,    0,    0, 1715, 1715,    0,    0, 1715,
     1715, 1715, 1715, 1715, 1716,    0, 1716,    0,    0, 1716,
     1716, 1716,    0, 1716, 1716,    0, 1716, 1716, 1716, 1716,
     1716, 1716, 1717,    0, 1717,    0,    0, 1717, 1717,    0,
        0, 1717,    0,    0,    0, 1717, 1717, 1717, 1717, 1717,
     1718,    0, 1718,    0,    0, 1718, 1718,    0,    0, 1718,
     1718,    0,    0, 1718,    0, 1718, 1718, 1718, 1719,    0,
     1719,    0,    0, 1719, 1719, 1719,    0, 1719, 1719,    0,

     1719, 1719, 1719, 1719, 1719, 1719, 1720,    0, 1720,    0,
        0, 1720, 1720, 1720,    0, 1720, 1720,    0, 1720, 1720,
     1720, 1720, 1720, 1720, 1721,    0, 1721,    0,    0, 1721,
     1721,    0,    0, 1721,    0,    0,    0, 1721, 1721, 1721,
     1721, 1721, 1722,    0, 1722,    0,    0, 1722, 1722,    0,
        0, 1722,    0,    0,    0, 1722, 1722, 1722, 1722, 1722,
     1723,    0, 1723,    0,    0, 1723, 1723, 1723,    0, 1723,
     1723,    0, 1723, 1723, 1723, 1723, 1723, 1723, 1724,    0,
     1724,    0,    0, 1724, 1724, 1724,    0, 1724, 1724,    0,
     1724, 1724, 1724, 1724, 1724, 1724, 1725,    0, 1725,    0,

        0, 1725, 1725,    0, 1725, 1725, 1725,    0, 1725, 1725,
        0, 1725, 1725, 1725, 1726,    0, 1726,    0,    0, 1726,
     1726, 1726, 1726, 1726, 1726,    0, 1726, 1726, 1726, 1726,
     1726, 1726, 1727,    0, 1727,    0,    0, 1727, 1727, 1727,
     1727, 1727, 1727,    0, 1727, 1727, 1727, 1727, 1727, 1727,
     1728,    0, 1728,    0,    0, 1728, 1728, 1728, 1728, 1728,
     1728,    0, 1728, 1728, 1728, 1728, 1728, 1728, 1729,    0,
     1729,    0,    0, 1729, 1729, 1729, 1729, 1729, 1729,    0,
     1729, 1729, 1729, 1729, 1729, 1729, 1730,    0, 1730,    0,
        0, 1730, 1730,    0, 1730, 1730, 1730,    0,    0, 1730,

     1730, 1730, 1730, 1730, 1731,    0, 1731,    0,    0, 1731,
     1731,    0, 1731, 1731,    0,    0,    0, 1731, 1731, 1731,
     1731, 1731, 1732,    0, 1732,    0,    0, 1732, 1732, 1732,
     1732, 1732, 1732,    0, 1732, 1732, 1732, 1732, 1732, 1732,
     1733,    0, 1733,    0,    0, 1733, 1733, 1733, 1733, 1733,
     1733,    0, 1733, 1733, 1733, 1733, 1733, 1733, 1734,    0,
     1734,    0,    0, 1734, 1734,    0, 1734, 1734, 1734,    0,
        0, 1734, 1734, 1734, 1734, 1734, 1735,    0, 1735,    0,
        0, 1735, 1735, 1735, 1735, 1735, 1735,    0, 1735, 1735,
     1735, 1735, 1735, 1735, 1736,    0, 1736,    0,    0, 1736,

     1736,    0, 1736, 1736,    0,    0,    0, 1736, 1736, 1736,
     1736, 1736, 1737,    0, 1737,    0,    0, 1737, 1737,    0,
     1737, 1737, 1737,    0,    0, 1737,    0, 1737, 1737, 1737,
     1738,    0, 1738,    0,    0, 1738, 1738, 1738, 1738, 1738,
     1738,    0, 1738, 1738, 1738, 1738, 1738, 1738, 1739,    0,
     1739,    0,    0, 1739, 1739, 1739, 1739, 1739, 1739,    0,
     1739, 1739, 1739, 1739, 1739, 1739, 1740,    0, 1740,    0,
        0, 1740, 1740,    0, 1740, 1740,    0,    0,    0, 1740,
     1740, 1740, 1740, 1740, 1741,    0, 1741,    0,    0, 1741,
     1741,    0, 1741, 1741,    0,    0,    0, 1741, 1741, 1741,

     1741, 1741, 1742,    0, 1742,    0,    0, 1742, 1742, 1742,
     1742, 1742, 1742,    0, 1742, 1742, 1742, 1742, 1742, 1742,
     1743,    0, 1743,    0,    0, 1743, 1743, 1743, 1743, 1743,
     1743,    0, 1743, 1743, 1743, 1743, 1743, 1743, 1747,    0,
        0,    0, 1747,    0, 1747, 1747, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,    0, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1750,
        0,    0, 1750,    0, 1750,    0, 1750, 1750,    0,    0,
     1750, 1750, 1750, 1750,    0, 1750, 1750, 1750,    0, 1750,
     1750, 1750, 1753,    0,    0, 1753,    0,    0,    0, 1753,

        0, 1753, 1753, 1754, 1754, 1754, 1754, 1754,    0, 1754,
     1754, 1754, 1754,    0,    0, 1754,    0,    0, 1754, 1754,
     1754,    0, 1754,    0,    0, 1754, 1755,    0,    0, 1755,
     1755,    0, 1755,    0,    0, 1755, 1755,    0, 1755, 1755,
     1755,    0,    0, 1755, 1755, 1755, 1755, 1755, 1756,    0,
     1756,    0,    0,    0, 1756,    0, 1756, 1756, 1757,    0,
     1757,    0,    0, 1757, 1757,    0,    0, 1757, 1757,    0,
        0, 1757, 1757, 1757, 1757, 1757, 1758,    0, 1758,    0,
        0, 1758, 1758, 1758,    0, 1758, 1758,    0, 1758, 1758,
        0, 1758, 1758, 1758, 1759,    0, 1759,    0,    0, 1759,

     1759, 1759,    0, 1759, 1759,    0, 1759, 1759, 1759, 1759,
     1759, 1759, 1760,    0, 1760,    0,    0, 1760, 1760, 1760,
        0, 1760, 1760,    0, 1760, 1760, 1760, 1760, 1760, 1760,
     1761,    0, 1761,    0,    0, 1761, 1761, 1761,    0, 1761,
     1761,    0, 1761, 1761, 1761, 1761, 1761, 1761, 1762,    0,
     1762,    0,    0, 1762, 1762,    0,    0, 1762, 1762,    0,
        0, 1762, 1762, 1762, 1762, 1762, 1763,    0, 1763,    0,
        0, 1763, 1763,    0,    0, 1763,    0,    0,    0, 1763,
     1763, 1763, 1763, 1763, 1764,    0, 1764,    0,    0, 1764,
     1764,    0,    0, 1764,    0,    0,    0, 1764, 1764, 1764,

     1764, 1764, 1765,    0, 1765,    0,    0, 1765, 1765, 1765,
        0, 1765, 1765,    0, 1765, 1765, 1765, 1765, 1765, 1765,
     1766,    0, 1766,    0,    0, 1766, 1766, 1766,    0, 1766,
     1766,    0, 1766, 1766, 1766, 1766, 1766, 1766, 1767,    0,
     1767,    0,    0, 1767, 1767,    0,    0, 1767,    0,    0,
        0, 1767, 1767, 1767, 1767, 1767, 1768,    0, 1768,    0,
        0, 1768, 1768,    0,    0, 1768,    0,    0,    0, 1768,
     1768, 1768, 1768, 1768, 1769,    0, 1769,    0,    0, 1769,
     1769,    0,    0, 1769,    0,    0,    0, 1769, 1769, 1769,
     1769, 1769, 1770,    0, 1770,    0,    0, 1770, 1770,    0,

        0, 1770,    0,    0,    0, 1770, 1770, 1770, 1770, 1770,
     1771,    0, 1771,    0,    0, 1771, 1771,    0,    0, 1771,
     1771,    0,    0, 1771, 1771, 1771, 1771, 1771, 1772,    0,
     1772,    0,    0, 1772, 1772, 1772,    0, 1772, 1772,    0,
     1772, 1772, 1772, 1772, 1772, 1772, 1773,    0, 1773,    0,
        0, 1773, 1773, 1773,    0, 1773, 1773,    0, 1773, 1773,
     1773, 1773, 1773, 1773, 1774,    0, 1774,    0,    0, 1774,
     1774, 1774,    0, 1774, 1774,    0, 1774, 1774, 1774, 1774,
     1774, 1774, 1775,    0, 1775,    0,    0, 1775, 1775, 1775,
        0, 1775, 1775,    0, 1775, 1775, 1775, 1775, 1775, 1775,

     1776,    0, 1776,    0,    0, 1776, 1776,    0,    0, 1776,
     1776,    0,    0, 1776,    0, 1776, 1776, 1776, 1777,    0,
     1777,    0,    0, 1777, 1777,    0,    0, 1777,    0,    0,
        0, 1777, 1777, 1777, 1777, 1777, 1778,    0, 1778,    0,
        0, 1778, 1778, 1778,    0, 1778, 1778,    0, 1778, 1778,
     1778, 1778, 1778, 1778, 1779,    0, 1779,    0,    0, 1779,
     1779,    0, 1779, 1779, 1779,    0,    0, 1779, 1779, 1779,
     1779, 1779, 1780,    0, 1780,    0,    0, 1780, 1780, 1780,
     1780, 1780, 1780,    0, 1780, 1780,    0, 1780, 1780, 1780,
     1781,    0, 1781,    0,    0, 1781, 1781, 1781, 1781, 1781,

     1781,    0, 1781, 1781, 1781, 1781, 1781, 1781, 1782,    0,
     1782,    0,    0, 1782, 1782, 1782, 1782, 1782, 1782,    0,
     1782, 1782, 1782, 1782, 1782, 1782, 1783,    0, 1783,    0,
        0, 1783, 1783, 1783, 1783, 1783, 1783,    0, 1783, 1783,
     1783, 1783, 1783, 1783, 1784,    0, 1784,    0,    0, 1784,
     1784,    0, 1784, 1784, 1784,    0,    0, 1784, 1784, 1784,
     1784, 1784, 1785,    0, 1785,    0,    0, 1785, 1785,    0,
     1785, 1785,    0,    0,    0, 1785, 1785, 1785, 1785, 1785,
     1786,    0, 1786,    0,    0, 1786, 1786,    0, 1786, 1786,
        0,    0,    0, 1786, 1786, 1786, 1786, 1786, 1787,    0,

     1787,    0,    0, 1787, 1787, 1787, 1787, 1787, 1787,    0,
     1787, 1787, 1787, 1787, 1787, 1787, 1788,    0, 1788,    0,
        0, 1788, 1788, 1788, 1788, 1788, 1788,    0, 1788, 1788,
     1788, 1788, 1788, 1788, 1789,    0, 1789,    0,    0, 1789,
     1789,    0, 1789, 1789,    0,    0,    0, 1789, 1789, 1789,
     1789, 1789, 1790,    0, 1790,    0,    0, 1790, 1790,    0,
     1790, 1790,    0,    0,    0, 1790, 1790, 1790, 1790, 1790,
     1791,    0, 1791,    0,    0, 1791, 1791,    0, 1791, 1791,
        0,    0,    0, 1791, 1791, 1791, 1791, 1791, 1792,    0,
     1792,    0,    0, 1792, 1792,    0, 1792, 1792,    0,    0,

        0, 1792, 1792, 1792, 1792, 1792, 1793,    0, 1793,    0,
        0, 1793, 1793,    0, 1793, 1793, 1793,    0,    0, 1793,
     1793, 1793, 1793, 1793, 1794,    0, 1794,    0,    0, 1794,
     1794, 1794, 1794, 1794, 1794,    0, 1794, 1794, 1794, 1794,
     1794, 1794, 1795,    0, 1795,    0,    0, 1795, 1795, 1795,
     1795, 1795, 1795,    0, 1795, 1795, 1795, 1795, 1795, 1795,
     1796,    0, 1796,    0,    0, 1796, 1796, 1796, 1796, 1796,
     1796,    0, 1796, 1796, 1796, 1796, 1796, 1796, 1797,    0,
     1797,    0,    0, 1797, 1797, 1797, 1797, 1797, 1797,    0,
     1797, 1797, 1797, 1797, 1797, 1797, 1798,    0, 1798,    0,

        0, 1798, 1798,    0, 1798, 1798, 1798,    0,    0, 1798,
        0, 1798, 1798, 1798, 1799,    0, 1799,    0,    0, 1799,
     1799,    0, 1799, 1799,    0,    0,    0, 1799, 1799, 1799,
     1799, 1799, 1800,    0, 1800,    0,    0, 1800, 1800, 1800,
     1800, 1800, 1800,    0, 1800, 1800, 1800, 1800, 1800, 1800,
     1802,    0,    0,    0, 1802,    0, 1802, 1802, 1803,    0,
        0, 1803,    0, 1803,    0, 1803, 1803,    0,    0, 1803,
     1803, 1803, 1803,    0, 1803, 1803, 1803,    0, 1803, 1803,
     1803, 1806, 1806, 1806, 1806, 1806,    0, 1806, 1806, 1806,
     1806,    0,    0, 1806,    0,    0, 1806, 1806, 1806,    0,

     1806,    0, 1806, 1806, 1807, 1807, 1807, 1807, 1807,    0,
     1807, 1807, 1807, 1807,    0,    0, 1807,    0,    0, 1807,
     1807, 1807,    0, 1807, 1807,    0, 1807, 1808,    0, 1808,
        0,    0, 1808, 1808,    0, 1808, 1808, 1808,    0,    0,
     1808, 1808, 1808, 1808, 1808, 1809,    0, 1809,    0,    0,
        0, 1809,    0, 1809, 1809, 1810,    0, 1810,    0,    0,
     1810, 1810, 1810,    0, 1810, 1810,    0, 1810, 1810, 1810,
     1810, 1810, 1810, 1811,    0, 1811,    0,    0, 1811, 1811,
     1811,    0, 1811, 1811,    0, 1811, 1811, 1811, 1811, 1811,
     1811, 1812,    0, 1812,    0,    0, 1812, 1812,    0,    0,

     1812,    0,    0,    0, 1812, 1812, 1812, 1812, 1812, 1813,
        0, 1813,    0,    0, 1813, 1813,    0,    0, 1813,    0,
        0,    0, 1813, 1813, 1813, 1813, 1813, 1814,    0, 1814,
        0,    0, 1814, 1814,    0,    0, 1814,    0,    0,    0,
     1814, 1814, 1814, 1814, 1814, 1815,    0, 1815,    0,    0,
     1815, 1815,    0,    0, 1815,    0,    0,    0, 1815, 1815,
     1815, 1815, 1815, 1816,    0, 1816,    0,    0, 1816, 1816,
        0,    0, 1816, 1816,    0,    0, 1816, 1816, 1816, 1816,
     1816, 1817,    0, 1817,    0,    0, 1817, 1817, 1817,    0,
     1817, 1817,    0, 1817, 1817, 1817, 1817, 1817, 1817, 1818,

        0, 1818,    0,    0, 1818, 1818, 1818,    0, 1818, 1818,
        0, 1818, 1818, 1818, 1818, 1818, 1818, 1819,    0, 1819,
        0,    0, 1819, 1819, 1819,    0, 1819, 1819,    0, 1819,
     1819, 1819, 1819, 1819, 1819, 1820,    0, 1820,    0,    0,
     1820, 1820,    0,    0, 1820, 1820,    0,    0, 1820, 1820,
     1820, 1820, 1820, 1821,    0, 1821,    0,    0, 1821, 1821,
     1821,    0, 1821, 1821,    0, 1821, 1821, 1821, 1821, 1821,
     1821, 1822,    0, 1822,    0,    0, 1822, 1822, 1822,    0,
     1822, 1822,    0, 1822, 1822, 1822, 1822, 1822, 1822, 1823,
        0, 1823,    0,    0, 1823, 1823, 1823,    0, 1823, 1823,

        0, 1823, 1823, 1823, 1823, 1823, 1823, 1824,    0, 1824,
        0,    0, 1824, 1824, 1824,    0, 1824, 1824,    0, 1824,
     1824, 1824, 1824, 1824, 1824, 1825,    0, 1825,    0,    0,
     1825, 1825,    0,    0, 1825, 1825,    0,    0, 1825, 1825,
     1825, 1825, 1825, 1826,    0, 1826,    0,    0, 1826, 1826,
        0,    0, 1826,    0,    0,    0, 1826, 1826, 1826, 1826,
     1826, 1827,    0, 1827,    0,    0, 1827, 1827, 1827, 1827,
     1827, 1827,    0, 1827, 1827, 1827, 1827, 1827, 1827, 1828,
        0, 1828,    0,    0, 1828, 1828, 1828, 1828, 1828, 1828,
        0, 1828, 1828, 1828, 1828, 1828, 1828, 1829,    0, 1829,

        0,    0, 1829, 1829,    0, 1829, 1829,    0,    0,    0,
     1829, 1829, 1829, 1829, 1829, 1830,    0, 1830,    0,    0,
     1830, 1830,    0, 1830, 1830,    0,    0,    0, 1830, 1830,
     1830, 1830, 1830, 1831,    0, 1831,    0,    0, 1831, 1831,
        0, 1831, 1831,    0,    0,    0, 1831, 1831, 1831, 1831,
     1831, 1832,    0, 1832,    0,    0, 1832, 1832,    0, 1832,
     1832,    0,    0,    0, 1832, 1832, 1832, 1832, 1832, 1833,
        0, 1833,    0,    0, 1833, 1833,    0, 1833, 1833, 1833,
        0,    0, 1833, 1833, 1833, 1833, 1833, 1834,    0, 1834,
        0,    0, 1834, 1834, 1834, 1834, 1834, 1834,    0, 1834,

     1834, 1834, 1834, 1834, 1834, 1835,    0, 1835,    0,    0,
     1835, 1835, 1835, 1835, 1835, 1835,    0, 1835, 1835, 1835,
     1835, 1835, 1835, 1836,    0, 1836,    0,    0, 1836, 1836,
     1836, 1836, 1836, 1836,    0, 1836, 1836, 1836, 1836, 1836,
     1836, 1837,    0, 1837,    0,    0, 1837, 1837,    0, 1837,
     1837, 1837,    0,    0, 1837, 1837, 1837, 1837, 1837, 1838,
        0, 1838,    0,    0, 1838, 1838, 1838, 1838, 1838, 1838,
        0, 1838, 1838, 1838, 1838, 1838, 1838, 1839,    0, 1839,
        0,    0, 1839, 1839, 1839, 1839, 1839, 1839,    0, 1839,
     1839, 1839, 1839, 1839, 1839, 1840,    0, 1840,    0,    0,

     1840, 1840, 1840, 1840, 1840, 1840,    0, 1840, 1840, 1840,
     1840, 1840, 1840, 1841,    0, 1841,    0,    0, 1841, 1841,
     1841, 1841, 1841, 1841,    0, 1841, 1841, 1841, 1841, 1841,
     1841, 1842,    0, 1842,    0,    0, 1842, 1842,    0, 1842,
     1842, 1842,    0,    0, 1842, 1842, 1842, 1842, 1842, 1843,
        0, 1843,    0,    0, 1843, 1843,    0, 1843, 1843,    0,
        0,    0, 1843, 1843, 1843, 1843, 1843, 1844, 1844, 1844,
     1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844,
     1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844,
     1847, 1847, 1847, 1847, 1847,    0, 1847, 1847, 1847, 1847,

        0,    0, 1847,    0,    0, 1847, 1847, 1847,    0, 1847,
     1847,    0, 1847, 1848, 1848, 1848, 1848, 1848,    0, 1848,
     1848, 1848, 1848,    0,    0, 1848,    0,    0, 1848, 1848,
     1848,    0, 1848,    0,    0, 1848, 1849, 1849, 1849, 1849,
     1849,    0, 1849, 1849, 1849, 1849,    0,    0, 1849,    0,
        0, 1849, 1849, 1849,    0, 1849,    0,    0, 1849, 1850,
     1850, 1850, 1850, 1850,    0, 1850, 1850, 1850, 1850,    0,
        0, 1850,    0,    0, 1850, 1850, 1850,    0, 1850,    0,
        0, 1850, 1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851,
     1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851,

     1851, 1851, 1851, 1851, 1851, 1852,    0, 1852,    0,    0,
     1852, 1852, 1852,    0, 1852, 1852,    0, 1852, 1852, 1852,
     1852, 1852, 1852, 1853,    0, 1853,    0,    0, 1853, 1853,
     1853,    0, 1853, 1853,    0, 1853, 1853, 1853, 1853, 1853,
     1853, 1854,    0, 1854,    0,    0, 1854, 1854, 1854,    0,
     1854, 1854,    0, 1854, 1854, 1854, 1854, 1854, 1854, 1855,
        0, 1855,    0,    0, 1855, 1855, 1855,    0, 1855, 1855,
        0, 1855, 1855, 1855, 1855, 1855, 1855, 1856,    0, 1856,
        0,    0, 1856, 1856,    0,    0, 1856, 1856,    0,    0,
     1856, 1856, 1856, 1856, 1856, 1857,    0, 1857,    0,    0,

     1857, 1857, 1857,    0, 1857, 1857,    0, 1857, 1857, 1857,
     1857, 1857, 1857, 1858,    0, 1858,    0,    0, 1858, 1858,
     1858,    0, 1858, 1858,    0, 1858, 1858, 1858, 1858, 1858,
     1858, 1859,    0, 1859,    0,    0, 1859, 1859, 1859,    0,
     1859, 1859,    0, 1859, 1859, 1859, 1859, 1859, 1859, 1860,
        0, 1860,    0,    0, 1860, 1860,    0,    0, 1860, 1860,
        0,    0, 1860, 1860, 1860, 1860, 1860, 1861,    0, 1861,
        0,    0, 1861, 1861,    0,    0, 1861,    0,    0,    0,
     1861, 1861, 1861, 1861, 1861, 1862,    0, 1862,    0,    0,
     1862, 1862,    0,    0, 1862,    0,    0,    0, 1862, 1862,

     1862, 1862, 1862, 1863,    0, 1863,    0,    0, 1863, 1863,
     1863, 1863, 1863, 1863,    0, 1863, 1863, 1863, 1863, 1863,
     1863, 1864,    0, 1864,    0,    0, 1864, 1864, 1864, 1864,
     1864, 1864,    0, 1864, 1864, 1864, 1864, 1864, 1864, 1865,
        0, 1865,    0,    0, 1865, 1865, 1865, 1865, 1865, 1865,
        0, 1865, 1865, 1865, 1865, 1865, 1865, 1866,    0, 1866,
        0,    0, 1866, 1866, 1866, 1866, 1866, 1866,    0, 1866,
     1866, 1866, 1866, 1866, 1866, 1867,    0, 1867,    0,    0,
     1867, 1867,    0, 1867, 1867, 1867,    0,    0, 1867, 1867,
     1867, 1867, 1867, 1868,    0, 1868,    0,    0, 1868, 1868,

     1868, 1868, 1868, 1868,    0, 1868, 1868, 1868, 1868, 1868,
     1868, 1869,    0, 1869,    0,    0, 1869, 1869, 1869, 1869,
     1869, 1869,    0, 1869, 1869, 1869, 1869, 1869, 1869, 1870,
        0, 1870,    0,    0, 1870, 1870, 1870, 1870, 1870, 1870,
        0, 1870, 1870, 1870, 1870, 1870, 1870, 1871,    0, 1871,
        0,    0, 1871, 1871,    0, 1871, 1871, 1871,    0,    0,
     1871, 1871, 1871, 1871, 1871, 1872,    0, 1872,    0,    0,
     1872, 1872,    0, 1872, 1872,    0,    0,    0, 1872, 1872,
     1872, 1872, 1872, 1873,    0, 1873,    0,    0, 1873, 1873,
        0, 1873, 1873,    0,    0,    0, 1873, 1873, 1873, 1873,

     1873, 1874, 1874, 1874, 1874, 1874,    0, 1874, 1874, 1874,
     1874,    0,    0, 1874,    0,    0, 1874, 1874, 1874,    0,
     1874,    0,    0, 1874, 1875, 1875, 1875, 1875, 1875,    0,
     1875, 1875, 1875, 1875,    0,    0, 1875,    0,    0, 1875,
     1875, 1875,    0, 1875,    0,    0, 1875, 1876, 1876, 1876,
     1876, 1876,    0, 1876, 1876, 1876, 1876,    0,    0, 1876,
        0,    0, 1876, 1876, 1876,    0, 1876,    0,    0, 1876,
     1877,    0, 1877,    0,    0, 1877, 1877, 1877,    0, 1877,
     1877,    0, 1877, 1877, 1877, 1877, 1877, 1877, 1878,    0,
     1878,    0,    0, 1878, 1878, 1878,    0, 1878, 1878,    0,

     1878, 1878, 1878, 1878, 1878, 1878, 1879,    0, 1879,    0,
        0, 1879, 1879, 1879,    0, 1879, 1879,    0, 1879, 1879,
     1879, 1879, 1879, 1879, 1880, 1880, 1880, 1880, 1880,    0,
     1880, 1880, 1880, 1880,    0,    0, 1880,    0,    0, 1880,
     1880, 1880,    0, 1880,    0,    0, 1880, 1881, 1881, 1881,
     1881, 1881,    0, 1881, 1881, 1881, 1881,    0,    0, 1881,
        0,    0, 1881, 1881, 1881,    0, 1881,    0,    0, 1881,
     1882, 1882, 1882, 1882, 1882,    0, 1882, 1882, 1882, 1882,
        0,    0, 1882,    0,    0, 1882, 1882, 1882,    0, 1882,
        0,    0, 1882, 1883, 1883, 1883, 1883, 1883,    0, 1883,

     1883, 1883, 1883,    0,    0, 1883,    0,    0, 1883, 1883,
     1883,    0, 1883,    0,    0, 1883, 1884, 1884, 1884, 1884,
     1884,    0, 1884, 1884, 1884, 1884,    0,    0, 1884,    0,
        0, 1884, 1884, 1884,    0, 1884,    0,    0, 1884, 1885,
     1885, 1885, 1885, 1885,    0, 1885, 1885, 1885, 1885,    0,
        0, 1885,    0,    0, 1885, 1885, 1885,    0, 1885,    0,
        0, 1885, 1886, 1886, 1886, 1886, 1886,    0, 1886, 1886,
     1886, 1886,    0,    0, 1886,    0,    0, 1886, 1886, 1886,
        0, 1886,    0,    0, 1886, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,

     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parser.l"
/* Copyright 2009-2021
 * Kaz Kylheku <kaz@kylheku.com>
 * Vancouver, Canada
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#line 29 "parser.l"

#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <stdlib.h>
#include <limits.h>
#include <wchar.h>
#include <signal.h>
#include "config.h"
#include "lib.h"
#include "gc.h"
#include "stream.h"
#include "utf8.h"
#include "signal.h"
#include "unwind.h"
#include "hash.h"
#include "y.tab.h"
#include "parser.h"
#include "txr.h"

#define YY_INPUT(buf, result, max_size)                                 \
  do {                                                                  \
    val self = lit("parser");                                           \
    val n = get_bytes(self, yyextra->stream,                            \
                      coerce(mem_t *, buf), max_size);                  \
    result = c_num(n, self);                                            \
  } while (0)

#define YY_DECL \
  static int yylex_impl(YYSTYPE *yylval_param, yyscan_t yyscanner)

int opt_loglevel = 1;   /* 0 - quiet; 1 - normal; 2 - verbose */

val form_to_ln_hash;

static int directive_tok(scanner_t *yyg, int tok, int state);

#define FLEX_NUM_VERSION 10000*YY_FLEX_MAJOR_VERSION + \
                         100*YY_FLEX_MINOR_VERSION + \
                         YY_FLEX_SUBMINOR_VERSION

#if FLEX_NUM_VERSION < 20509
int yylex_destroy(void)
{
  return 0;
}
#endif

/* Missing prototypes not generated by flex. */
int yyget_column(yyscan_t);
void yyset_column (int column_no, yyscan_t yyscanner);

/* The following function is all that libflex provides.
   By providing it here, we eliminate the need to link libflex. */
#define YY_SKIP_YYWRAP
INLINE int yywrap(yyscan_t scanner)
{
  (void) scanner;
  return 1;
}

void yyerror(scanner_t *scanner, parser_t *parser, const char *s)
{
  yyerrorf(scanner, lit("~a"), string_utf8(s), nao);
  if (parser->prepared_msg) {
    yyerrorf(scanner, lit("~a"), parser->prepared_msg, nao);
    parser->prepared_msg = nil;
  }
}

void yyerrorf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    if (opt_compat && opt_compat <= 114)
      format(std_error, lit("~a: (~a:~d): "), prog_string,
             parser->name, num(parser->lineno), nao);
    else
      format(std_error, lit("~a:~d: "),
             parser->name, num(parser->lineno), nao);

    vformat(std_error, fmt, vl);
    put_char(chr('\n'), std_error);
    va_end (vl);
  }
  parser->errors++;
}

static void yyerrprepf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    set(mkloc(parser->prepared_msg, parser->parser),
        vformat_to_string(fmt, vl));
    va_end (vl);
  }
}

static void out_of_range_float(scanner_t *scanner, val tok)
{
    yyerrorf(scanner, lit("out-of-range floating-point literal: ~a"),
             tok, nao);
}

static wchar_t char_esc(int letter)
{
  switch (letter) {
  case ' ': return L' ';
  case 'a': return L'\a';
  case 'b': return L'\b';
  case 't': return L'\t';
  case 'n': return L'\n';
  case 'v': return L'\v';
  case 'f': return L'\f';
  case 'r': return L'\r';
  case 'e': return 27;
  case '"': return L'"';
  case '\'': return L'\'';
  case '`': return L'`';
  case '/': return L'/';
  case '@': return L'@';
  case '\\': return L'\\';
  }

  internal_error("unhandled escape character");
}

static wchar_t num_esc(scanner_t *scn, char *num)
{
  long val = 0;

  if (num[0] == 'x' || num[0] == 'u') {
    if (strlen(num) > 7)
      yyerror(scn, yyget_extra(scn), "too many digits in hex character escape");
    else
      val = strtol(num + 1, 0, 16);
  } else {
    if (num[0] == 'o')
      num++;
    if (strlen(num) > 8)
      yyerror(scn, yyget_extra(scn), "too many digits in octal character escape");
    else
      val = strtol(num, 0, 8);
  }

  if (val < 0 || val > 0x10FFFF || convert(wchar_t, val) != val) {
    yyerror(scn, yyget_extra(scn), "numeric character escape out of range");
    val = 0;
  }

  return val;
}

static wchar_t *unicode_ident(scanner_t *scn, const char *lex)
{
  wchar_t *wlex = utf8_dup_from(lex), *ptr = wlex, wch;

  while ((wch = *ptr++)) {
    if (wch < 0x1680 || (wch >= 0x3000 && wch < 0xdc00))
      continue;

    if ((wch >= 0xdc00 && wch <= 0xdcff) ||
        (wch >= 0xd800 && wch <= 0xdbff) ||
#if FULL_UNICODE
        (wch >= 0xf0000 && wch <= 0xffffd) ||
        (wch >= 0x100000 && wch <= 0x10fffd) ||
#endif
        (wch >= 0xe000 && wch <= 0xf8ff) ||
        (wch == 0xfffe) ||
        (wch == 0xffff))
    {
      yyerror(scn, yyget_extra(scn),
              "disallowed Unicode character in identifier");
      break;
    }

    switch (wch) {
    case 0x1680: case 0x180e: case 0x2000: case 0x2001: case 0x2002:
    case 0x2003: case 0x2004: case 0x2005: case 0x2006: case 0x2007:
    case 0x2008: case 0x2009: case 0x200a: case 0x2028: case 0x2029:
    case 0x205f: case 0x3000:
      yyerror(scn, yyget_extra(scn),
              "Unicode space occurs in identifier");
      break;
    default:
      continue;
    }

    break;
  }

  return wlex;
}

#line 4010 "lex.yy.c"
#define YY_NO_INPUT 1

#line 4013 "lex.yy.c"

#define INITIAL 0
#define SPECIAL 1
#define BRACED 2
#define NESTED 3
#define REGEX 4
#define SREGEX 5
#define STRLIT 6
#define CHRLIT 7
#define QSILIT 8
#define QSPECIAL 9
#define WLIT 10
#define QWLIT 11
#define BUFLIT 12
#define JSON 13
#define JLIT 14

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE parser_t *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		/* Create the reject buffer large enough to save one state per allowed character. */
		if ( ! yyg->yy_state_buf )
			yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
		if ( ! yyg->yy_state_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 290 "parser.l"


#line 4328 "lex.yy.c"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1641 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1640 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 292 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num(10));
  return NUMBER;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 304 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 2));
  int base;

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 323 "parser.l"
{
  int base = 0;
  val str = string_own(utf8_dup_from(yytext + 2));

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  yyerrorf(yyg, lit("trailing junk in numeric literal: ~a~a~a"),
           chr(yytext[0]), chr(yytext[1]), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 345 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);

  return NUMBER;
}
	YY_BREAK
case 5:
#line 360 "parser.l"
case 6:
#line 361 "parser.l"
case 7:
YY_RULE_SETUP
#line 361 "parser.l"
{
  val str = string_utf8(yytext);

  yyerrorf(yyg, lit("trailing junk in floating-point literal: ~a"), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);

  return NUMBER;
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 377 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);

  return NUMBER;
}
	YY_BREAK
case 9:
#line 392 "parser.l"
case 10:
YY_RULE_SETUP
#line 392 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(10));
  return METANUM;
}
	YY_BREAK
case 11:
#line 404 "parser.l"
case 12:
YY_RULE_SETUP
#line 404 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(16));
  return METANUM;
}
	YY_BREAK
case 13:
#line 416 "parser.l"
case 14:
YY_RULE_SETUP
#line 416 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(8));
  return METANUM;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 427 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(2));
  return METANUM;
}
	YY_BREAK
case 16:
#line 439 "parser.l"
case 17:
#line 440 "parser.l"
case 18:
YY_RULE_SETUP
#line 440 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 19:
#line 457 "parser.l"
case 20:
#line 458 "parser.l"
case 21:
YY_RULE_SETUP
#line 458 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 22:
#line 469 "parser.l"
case 23:
YY_RULE_SETUP
#line 469 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yyerrorf(yyg, lit("bad token: ~a"),
                    string_own(utf8_dup_from(yytext)),
                    nao);
  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 482 "parser.l"
{
  return directive_tok(yyg, ALL, 0);
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 486 "parser.l"
{
  return directive_tok(yyg, SOME, NESTED);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 490 "parser.l"
{
  return directive_tok(yyg, NONE, 0);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 494 "parser.l"
{
  return directive_tok(yyg, MAYBE, 0);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 498 "parser.l"
{
  return directive_tok(yyg, CASES, 0);
}
	YY_BREAK
case 29:
/* rule 29 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 502 "parser.l"
{
  return directive_tok(yyg, BLOCK, NESTED);
}
	YY_BREAK
case 30:
/* rule 30 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 506 "parser.l"
{
  return directive_tok(yyg, CHOOSE, NESTED);
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 510 "parser.l"
{
  return directive_tok(yyg, GATHER, NESTED);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 514 "parser.l"
{
  return directive_tok(yyg, AND, 0);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 518 "parser.l"
{
  return directive_tok(yyg, OR, 0);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 522 "parser.l"
{
  return directive_tok(yyg, END, 0);
}
	YY_BREAK
case 35:
/* rule 35 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 526 "parser.l"
{
  return directive_tok(yyg, COLLECT, NESTED);
}
	YY_BREAK
case 36:
/* rule 36 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 530 "parser.l"
{
  return directive_tok(yyg, COLL, NESTED);
}
	YY_BREAK
case 37:
/* rule 37 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 534 "parser.l"
{
  return directive_tok(yyg, UNTIL, NESTED);
}
	YY_BREAK
case 38:
/* rule 38 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 538 "parser.l"
{
  return directive_tok(yyg, OUTPUT, NESTED);
}
	YY_BREAK
case 39:
/* rule 39 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 542 "parser.l"
{
  return directive_tok(yyg, REPEAT, NESTED);
}
	YY_BREAK
case 40:
/* rule 40 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 546 "parser.l"
{
  return directive_tok(yyg, REP, NESTED);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 550 "parser.l"
{
  return directive_tok(yyg, SINGLE, 0);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 554 "parser.l"
{
  return directive_tok(yyg, FIRST, 0);
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 558 "parser.l"
{
  return directive_tok(yyg, LAST, NESTED);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 562 "parser.l"
{
  return directive_tok(yyg, EMPTY, 0);
}
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 566 "parser.l"
{
  return directive_tok(yyg, MOD, NESTED);
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 570 "parser.l"
{
  return directive_tok(yyg, MODLAST, NESTED);
}
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 574 "parser.l"
{
  return directive_tok(yyg, DEFINE, NESTED);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 578 "parser.l"
{
  return directive_tok(yyg, TRY, 0);
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 582 "parser.l"
{
  return directive_tok(yyg, CATCH, NESTED);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 586 "parser.l"
{
  return directive_tok(yyg, FINALLY, 0);
}
	YY_BREAK
case 51:
/* rule 51 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 590 "parser.l"
{
  return directive_tok(yyg, IF, NESTED);
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 594 "parser.l"
{
  return directive_tok(yyg, ELIF, NESTED);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 598 "parser.l"
{
  return directive_tok(yyg, ELSE, 0);
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 602 "parser.l"
{
  yy_push_state(BRACED, yyscanner);
  yylval->lineno = yyextra->lineno;
  return yytext[0];
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 608 "parser.l"
{
 yy_push_state(NESTED, yyscanner);
 yylval->lineno = yyextra->lineno;
 return yytext[0];
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 614 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 248) ? OLD_AT : '@';
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 619 "parser.l"
{
  yylval->chr = '*';
  return SPLICE;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 624 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 629 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 60:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 638 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space or 0 needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 653 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 662 "parser.l"
{
  /* Eat whitespace in directive */
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 666 "parser.l"
{
  yy_push_state(STRLIT, yyscanner);
  return '"';
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 671 "parser.l"
{
  yy_push_state(CHRLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_BACKSLASH;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 677 "parser.l"
{
  yy_push_state(BUFLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_B_QUOTE;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 683 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_SLASH;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 689 "parser.l"
{
  yy_push_state(QSILIT, yyscanner);
  return '`';
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 694 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WORDS;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 700 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WSPLICE;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 706 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWORDS;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 712 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWSPLICE;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 718 "parser.l"
{
  return '#';
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 722 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_H;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 727 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_S;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 732 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_R;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 737 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_N;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 742 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_T;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 747 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  yy_push_state(JSON, yyscanner);
  return HASH_J;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 753 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_SEMI;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 758 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));
  yylval->val = int_str(str, num(10));
  return HASH_N_EQUALS;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 764 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));
  yylval->val = int_str(str, num(10));
  return HASH_N_HASH;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 770 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 185) ? OLD_DOTDOT : DOTDOT;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 775 "parser.l"
{
  yy_pop_state(yyscanner);
  yylval->lexeme = chk_strdup(L"@");
  return TEXT;
}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 781 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 785 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  return '/';
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 790 "parser.l"
{
  yylval->chr = '.';
  return CONSDOT;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 795 "parser.l"
{
  yylval->chr = '.';
  return LAMBDOT;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 800 "parser.l"
{
  yylval->chr = '.';
  return UREFDOT;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 805 "parser.l"
{
  yylval->chr = '.';
  return '.';
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 810 "parser.l"
{
  yylval->chr = '.';
  return OREFDOT;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 815 "parser.l"
{
  yylval->chr = '.';
  return UOREFDOT;
}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 820 "parser.l"
{
  if (YYSTATE == SPECIAL)
    yy_pop_state(yyscanner);  /* @\ continuation */
  yyextra->lineno++;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 826 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = char_esc(yytext[1]);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);
  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 835 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = num_esc(yyg, yytext + 1);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);

  {
    char lastchar = yytext[yyleng-1];
    if (lastchar == ';' && opt_compat && opt_compat <= 109)
      unput(lastchar);
  }

  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 851 "parser.l"
{
  yyerrorf(yyg, lit("\\x escape without digits"), nao);
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 855 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 859 "parser.l"
{
  /* comment */
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 863 "parser.l"
{
  val ch = chr_str(string_utf8(yytext), zero);
  if (chr_isspace(ch))
    yyerrprepf(yyg, lit("unexpected whitespace character #\\x~,02x"),
               ch, nao);
  else if (chr_isunisp(ch))
    yyerrprepf(yyg, lit("unexpected Unicode space character #\\x~,02x"),
               ch, nao);
  else if (chr_iscntrl(ch))
    yyerrprepf(yyg, lit("unexpected control character #\\x~,02x"),
               ch, nao);
  else
    yyerrprepf(yyg, lit("unexpected character #\\~a"),
               ch, nao);
  return ERRTOK;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 880 "parser.l"
{
  yyerrprepf(yyg, lit("non-UTF-8 byte #x~02x in directive"),
             num(convert(unsigned char, yytext[0])), nao);
  return ERRTOK;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 886 "parser.l"
{
  yylval->chr = '/';
  return (YYSTATE == SREGEX) ? REGCHAR : '/';
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 891 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return REGCHAR;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 896 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext + 1);
  return REGCHAR;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 901 "parser.l"
{
  yylval->chr = yytext[1];
  return REGTOKEN;
}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 906 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 910 "parser.l"
{
  yyextra->lineno++;
  yyerrprepf(yyg, lit("newline in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 916 "parser.l"
{
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return REGCHAR;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 922 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 927 "parser.l"
{
  yylval->chr = yytext[1];
  return REGCHAR;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 932 "parser.l"
{
  if (opt_compat && opt_compat <= 105) {
    yylval->chr = yytext[1];
    return REGCHAR;
  }

  if (yytext[1] == 'x')
    yyerrprepf(yyg, lit("\\x escape without digits in regex"), nao);
  else
    yyerrprepf(yyg, lit("unrecognized escape in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 945 "parser.l"
{
  yyerrprepf(yyg, lit("dangling backslash in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 950 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yylval->lexeme = chk_strdup(wchr);
    return TEXT;
  }
  yylval->chr = wchr[0];
  return REGCHAR;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 960 "parser.l"
{
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return REGCHAR;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 965 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SPACE;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 970 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return TEXT;
}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 975 "parser.l"
{
  yyextra->lineno++;
  return '\n';
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 980 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
  return '*';
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 985 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 989 "parser.l"
{
  /* eat whole line comment */
  yyextra->lineno++;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 994 "parser.l"
{
  /* comment to end of line */
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 998 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1003 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1008 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1013 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 1018 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 1022 "parser.l"
{
  yyextra->lineno++;

  if (!opt_compat || opt_compat > 109)
    return ' ';
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1030 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext+1);
  return LITCHAR;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1035 "parser.l"
{
  yyerrorf(yyg, lit("\\x escape without digits"), nao);
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1039 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape: \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1043 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext);
  return LITCHAR;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1048 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1053 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK; /* hack */
}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1058 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1065 "parser.l"
{
  yyerrprepf(yyg, lit("newline in character literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 1072 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string quasiliteral"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 1079 "parser.l"
{
  yyextra->lineno++;

  if (opt_compat && opt_compat <= 109)
    return ' ';

  yyerrprepf(yyg, lit("newline in word list literal"), nao);
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 136:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1090 "parser.l"
{
  yy_push_state(QSPECIAL, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1095 "parser.l"
{
  yyerrprepf(yyg, lit("malformed @ expression in quasiliteral"), nao);
  return ERRTOK;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1100 "parser.l"
{
  return ' ';
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1104 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1109 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1114 "parser.l"
{
  wchar_t ch0, ch1;
  yytext[6] = 0;
  ch0 = num_esc(yyg, yytext + 1);
  ch1 = num_esc(yyg, yytext + 7);
  yylval->chr = ((ch0 - 0xD800) << 10 | (ch1 - 0xDC00)) + 0x10000;
  return LITCHAR;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1123 "parser.l"
{
  wchar_t ch = num_esc(yyg, yytext + 1);
  yylval->chr = if3(ch, ch, 0xDC00);
  return LITCHAR;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1129 "parser.l"
{
  yyerrorf(yyg, lit("JSON \\u escape needs four digits"), nao);
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1133 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized JSON escape: \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 1137 "parser.l"
{
  yyerrprepf(yyg, lit("newline in JSON string"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1144 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yylval->lexeme = chk_strdup(wchr);
    return TEXT;
  }
  yylval->chr = wchr[0];
  return LITCHAR;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1154 "parser.l"
{
  yylval->chr = strtol(yytext, 0, 16);
  return LITCHAR;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1159 "parser.l"
{
  return '\'';
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1163 "parser.l"
{
}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 1166 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1170 "parser.l"
{
  yyerrorf(yyg, lit("bad character ~s in buffer literal"),
           chr(yytext[0]), nao);
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1175 "parser.l"
{
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return LITCHAR;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1180 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));
  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);
  return NUMBER;
}
	YY_BREAK
case 154:
/* rule 154 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1187 "parser.l"
{
  yylval->val = t;
  return JSKW;
}
	YY_BREAK
case 155:
/* rule 155 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1192 "parser.l"
{
  yylval->val = nil;
  return JSKW;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1197 "parser.l"
{
  if (strcmp("true", yytext) == 0) {
    yylval->val = t;
    return JSKW;
  }

  if (strcmp("false", yytext) == 0) {
    yylval->val = nil;
    return JSKW;
  }

  {
    val str = string_own(utf8_dup_from(yytext));
    yyerrorf(yyg, lit("unrecognized JSON syntax: ~a"), str, nao);
  }
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1214 "parser.l"
{
  yy_push_state(JLIT, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1219 "parser.l"
{
  yy_push_state(NESTED, yyscanner);
  return JSPLICE;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1224 "parser.l"
{
  yy_push_state(NESTED, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1229 "parser.l"
{
  return yytext[0];
}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 1233 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1237 "parser.l"
{
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1240 "parser.l"
{
  yyerrorf(yyg, lit("bad character ~s in JSON literal"),
           chr(yytext[0]), nao);
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1245 "parser.l"
{
  yy_push_state(JLIT, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1250 "parser.l"
ECHO;
	YY_BREAK
#line 5963 "lex.yy.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(SPECIAL):
			case YY_STATE_EOF(BRACED):
			case YY_STATE_EOF(NESTED):
			case YY_STATE_EOF(REGEX):
			case YY_STATE_EOF(SREGEX):
			case YY_STATE_EOF(STRLIT):
			case YY_STATE_EOF(CHRLIT):
			case YY_STATE_EOF(QSILIT):
			case YY_STATE_EOF(QSPECIAL):
			case YY_STATE_EOF(WLIT):
			case YY_STATE_EOF(QWLIT):
			case YY_STATE_EOF(BUFLIT):
			case YY_STATE_EOF(JSON):
			case YY_STATE_EOF(JLIT):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1641 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1641 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1640);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1250 "parser.l"


static int directive_tok(scanner_t *yyscanner, int tok, int state)
{
  struct yyguts_t *yyg = convert(struct yyguts_t *, yyscanner);
  char *pstart = yytext + 1 + strspn(yytext + 1, " \t");
  char *pcolon = strchr(pstart, ':');
  char *pend = pstart + strspn(pstart, ":-abcdefghijklmnopqrstuvwxyz");

  *pend = 0;

  if (pcolon != 0) {
    val pkgname = string_utf8((*pcolon = 0, pstart));
    val package = if3(pstart[0], find_package(pkgname), keyword_package);
    if (!package) {
      yyerrprepf(yyg, lit("package ~a not found"), pkgname, nao);
      tok = ERRTOK;
    }
    if (package != user_package && package != keyword_package) {
      val sym = string_utf8(pcolon + 1);
      yyerrprepf(yyg, lit("~a:~a: original usr package expected, not ~a"),
                 pkgname, sym, pkgname, nao);
      tok = ERRTOK;
    }
  } else {
    val symname = string_utf8(pstart);
    val sym = intern_fallback(symname, cur_package);
    val package = symbol_package(sym);

    if (package != user_package && package != keyword_package) {
      yyerrprepf(yyg, lit("~a: this is ~a:~a, not usr:~a"),
                 symname, package_name(package), symname, symname, nao);
      tok = ERRTOK;
    }
  }

  if (state != 0)
    yy_push_state(state, yyscanner);
  else
    yy_pop_state(yyscanner);
  yylval->lineno = yyextra->lineno;
  return tok;
}

void end_of_regex(scanner_t *yyg)
{
  if (YYSTATE != REGEX && YYSTATE != SREGEX)
    internal_error("end_of_regex called in wrong scanner state");

  yy_pop_state(yyg);

  if (YYSTATE != INITIAL) {
    if (yy_top_state(yyg) == INITIAL
      || yy_top_state(yyg) == QSILIT
      || yy_top_state(yyg) == QWLIT)
      yy_pop_state(yyg);
  }
}

void end_of_char(scanner_t *yyg)
{
  if (YYSTATE != CHRLIT)
    internal_error("end_of_char called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_buflit(scanner_t *yyg)
{
  if (YYSTATE != BUFLIT)
    internal_error("end_of_buflit called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_json(scanner_t *yyg)
{
  if (YYSTATE == JLIT)
    yy_pop_state(yyg);

  if (YYSTATE != JSON)
    internal_error("end_of_json called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_json_unquote(scanner_t *yyg)
{
  if (YYSTATE == NESTED)
    yy_pop_state(yyg);

  if (YYSTATE != JSON)
    internal_error("end_of_json_unquote called in wrong scanner state");
}

val source_loc(val form)
{
  return gethash(form_to_ln_hash, form);
}

val source_loc_str(val form, val alt)
{
  cons_bind (line, file, gethash(form_to_ln_hash, form));
  if (missingp(alt))
    alt = lit("source location n/a");
  return if3(line, format(nil, lit("~a:~d"), file, line, nao), alt);
}

int yylex(YYSTYPE *yylval_param, yyscan_t yyscanner)
{
  struct yyguts_t * yyg = convert(struct yyguts_t *, yyscanner);
  int yy_char;

  if (yyextra->tok_idx > 0) {
    struct yy_token *tok = &yyextra->tok_pushback[--yyextra->tok_idx];
    yyextra->recent_tok = *tok;
    *yylval_param = tok->yy_lval;
    if (tok->yy_lex_state && tok->yy_lex_state != YYSTATE)
      yy_push_state(tok->yy_lex_state, yyg);
    return tok->yy_char;
  }

  yy_char = yyextra->recent_tok.yy_char = yylex_impl(yylval_param, yyscanner);
  yyextra->recent_tok.yy_lval = *yylval_param;
  yyextra->recent_tok.yy_lex_state = YYSTATE;

  return yy_char;
}

void prime_scanner(scanner_t *yyg, enum prime_parser prim)
{
  while (YYSTATE != INITIAL)
    yy_pop_state(yyg);

  switch (prim) {
  case prime_lisp:
  case prime_interactive:
    yy_push_state(SPECIAL, yyg);
    yy_push_state(NESTED, yyg);
    yy_push_state(NESTED, yyg);
    break;
  case prime_regex:
    yy_push_state(SREGEX, yyg);
    break;
  }
}

void scrub_scanner(scanner_t *yyg, int yy_char, wchar_t *lexeme)
{
  struct yy_token *rtok = &yyextra->recent_tok;

  if (rtok->yy_char == yy_char && rtok->yy_lval.lexeme == lexeme) {
    rtok->yy_char = 0;
    rtok->yy_lval.lexeme = 0;
  }
}

void parser_l_init(void)
{
  prot1(&form_to_ln_hash);
  form_to_ln_hash = make_eq_hash(t, nil);
}

