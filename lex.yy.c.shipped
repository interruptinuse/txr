
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 165
#define YY_END_OF_BUFFER 166
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1606] =
    {   0,
       62,   62,   62,   62,   62,   62,   62,   62,  138,  138,
      138,  138,  149,  149,  162,  162,  166,  114,  165,  115,
      165,  115,  165,  113,  165,  117,  165,  114,  165,  114,
      165,  114,  165,  117,  165,   98,   99,  165,   62,   98,
       99,  165,   84,  165,   84,   98,   99,  165,   63,   98,
       99,  165,   98,   99,  165,   55,   98,   99,  165,   61,
       98,   99,  165,   98,   99,  165,   89,   98,   99,  165,
       85,   98,   99,  165,    1,   19,   98,   99,  165,16400,
       97,   98,   99,  165,   83,   98,   99,  165,   19,   98,
       99,  165,16400,   55,   98,   99,  165,   98,   99,  165,

       67,   98,   99,  165,   54,   98,   99,  165,   61,   98,
       99,  165,   99,  165,   99,  165,   99,  165,   99,  165,
       62,   98,   99,  165,   20,   98,   99,  165,16401,   72,
       98,   99,  165,   58,   98,   99,  165,   20,   98,   99,
      165,16401,   58,   98,   99,  165,   89,   98,   99,  165,
        1,   20,   98,   99,  165,16401,   20,   98,   99,  165,
    16401,   56,   98,   99,  165,   20,   98,   99,  165,16401,
       59,   98,   99,  165,   99,  165,   99,  165,   99,  165,
       62,   98,   99,  165,   21,   98,   99,  165,16402,   72,
       98,   99,  165,   21,   98,   99,  165,16402,   89,   98,

       99,  165,    1,   21,   98,   99,  165,16402,   21,   98,
       99,  165,16402,   56,   98,   99,  165,   21,   98,   99,
      165,16402,   99,  165,   99,  165,   99,  165,  111,  112,
      165,  111,  112,  165,  105,  165,  105,  111,  112,  165,
      107,  111,  112,  165,  100,  107,  111,  112,  165,  110,
      111,  112,  165,  112,  165,  112,  165,  112,  165,  112,
      165,  106,  165,  106,  111,  112,  165,  146,  152,  165,
      146,  152,  165,  132,  165,  132,  146,  152,  165,  120,
      146,  152,  165,  146,  152,  165,  152,  165,  152,  165,
      152,  165,  152,  165,  131,  146,  152,  165,  133,  165,

      133,  146,  152,  165,  130,  131,  146,  152,  165,  130,
      131,  146,  152,  165,  130,  131,  146,  152,  165,  131,
      152,  165,  131,  152,  165,  131,  152,  165,  131,  152,
      165,  134,  165,  134,  146,  152,  165,  137,  146,  152,
      165,  146,  152,  165,  121,  146,  152,  165,   62,   98,
       99,  165,   98,   99,  165,   98,   99,  165,   89,   98,
       99,  165,    1,   10,   19,   98,   99,  165,16400,   56,
       98,   99,  165,   98,   99,  165,  138,  146,  152,  165,
      135,  165,  135,  146,  152,  165,  146,  152,  165,  146,
      152,  165,  151,  165,  149,  151,  165,  150,  165,  150,

      151,  165,  148,  151,  165,  147,  151,  165,  156,  163,
      165,  162,  163,  165,  161,  165,  156,  161,  163,  165,
      157,  160,  163,  164,  165,  156,  163,  165,  160,  163,
      165,  156,  163,  165,  153,  156,  163,  165,  153,  156,
      163,  165,  156,  163,  165,  156,  163,  165,  159,  160,
      163,  165,  146,  165,  145,  165,  145,  146,  165,  139,
      146,  165,  146,  165,  165,  165,  165,  165,  114,  114,
      114,  114,  115,  113,  119,  116,  114,  114,  114,  119,
       62,   88,   84,   68,   66,   64,   70,    1,   87,    4,
       90,    1,   19,16400,   19,16400,   19,16400,   97,   96,

       92,   92,   96,   93,   96,   94,   96,   95,   96,   98,
       62,   88,   20,   22,16401,   20,16401,   20,   22,16401,
       20,16401,   20,16401,   79,   73,   78,   76,   75,   74,
       77,    1,   20,   22,16401,   57,    4,   20,   22,16401,
       20,   22,16401,   20,16401,   22,   20,16401,   20,16401,
       20,16401,    9,   20,16401,   92,   20,   98,16401,   62,
       88,   21,   23,16402,   21,16402,   21,   23,16402,   21,
    16402,   21,16402,    1,   21,   23,16402,   82,    4,   21,
       23,16402,   21,   23,16402,   21,16402,   23,   21,16402,
       21,16402,   21,16402,    9,   21,16402,   21,   98,16402,

      105,  109,  104,  104,  109,  101,  109,  108,  109,  102,
      109,  103,  109,  109,  111,  106,  132,  128,  124,  125,
      124,  125,  128,  122,  128,  126,  128,  127,  128,  146,
      133,  130,  129,  130,  129,  130,  134,  136,    9,  136,
      136,  123,  128,   62,   88,    1,   10,    1,   10,   19,
    16400,  138,  135,  125,  125,  128,  149,  150,  156,  162,
      161,  156,  153,  156,  153,  156,  156,  156,  153,  156,
      156,  156,  158,  145,  144,  140,  144,  143,  144,  119,
      114,  119,  118,  118,  119,   86,   91,   69,   71,   65,
        2,    2,    2,   60,    4,    5,    5,    5,    8,    4,

        5,    8, 8208,    5,    8,    5,    8,    4,   19,16400,
     8208,   92,   94,   94,   94,   20,   22,16401,   20,   22,
    16401,   20,   22,16401,   20,   22,16401, 8209,   20,   22,
    16401,   20,   22,16401,   20,   22,16401,   22,   22,   81,
       80,   20,   22,16401,   20,16401,   20,16401,    4, 8209,
        1,   20,   22,16401,   20,   22,16401,    6,    4,    6,
        6,    6,    6,    8,    8,    4,    6,    8, 8209,    6,
        8,    8,    6,    8,    8,    8,    8,   20,   22,16401,
        4,   20,   22,16401,   20,   22,16401,   20,   22,16401,
       22,   20,   22,16401,   22,   20,   22,16401,   20,16401,

       20,16401,    9,   20,   22,16401,   21,   23,16402,   21,
       23,16402,   21,   23,16402,   21,   23,16402, 8210,   21,
       23,16402,   21,   23,16402,   21,   23,16402,   23,   23,
       21,   23,16402,   21,16402,   21,16402,    4, 8210,    1,
       21,   23,16402,   21,   23,16402,    7,    4,    7,    7,
        7,    7,    8,    8,    4,    7,    8, 8210,    7,    8,
        8,    7,    8,    8,    8,    8,   21,   23,16402,    4,
       21,   23,16402,   21,   23,16402,   21,   23,16402,   23,
       21,   23,16402,   23,   21,   23,16402,   21,16402,   21,
    16402,    9,   21,   23,16402,  104,  104,  102,  102,  102,

      124,  125,  124,  125,  126,  126,  126,    9,    2,   14,
        2,   12,    8, 8208,  125,  125,   81,  156,   80,  156,
      153,  156,  156,  153,  156,  156,  156,  118,    5,    4,
        2,    3,    3,    2,    3,    2,    3,   51,   51,   51,
       51,   51,   51,   33,    4,    5,    8,    4,    5,    4,
        5, 8208,    4,    5,    4,    5,   19,16400,    5,   19,
    16400,    6,    4,   20,   22,16401,   20,   22,16401,   20,
       22,16401,   20,   22,16401,   20,   22,16401,   20,   22,
    16401,   22,   22,   22,   22,   20,   22,16401,   20,   22,
    16401,   20,   22,16401,    4,    6, 8209,    6,    6,    6,

        6,    6,    4,    6,    6,    6,    6,    6,    6,    4,
        6,    4,    6, 8209,    6,    4,    6,    6,   20,   22,
    16401,   20,   22,16401,    4,    6,   20,   22,16401,    6,
       20,   22,16401,   22,   20,   22,16401,   20,   22,16401,
       20,   22,16401,    9,   20,   22,16401,    7,    4,   21,
       23,16402,   21,   23,16402,   21,   23,16402,   21,   23,
    16402,   21,   23,16402,   21,   23,16402,   23,   23,   23,
       23,   21,   23,16402,   21,   23,16402,   21,   23,16402,
        4,    7, 8210,    7,    7,    7,    7,    7,    4,    7,
        7,    7,    7,    7,    7,    4,    7,    4,    7, 8210,

        7,    4,    7,    7,   21,   23,16402,   21,   23,16402,
        4,    7,   21,   23,16402,    7,   21,   23,16402,   23,
       21,   23,16402,   21,   23,16402,   21,   23,16402,   15,
       13,   11,    9,   21,   23,16402,    2,    3,   14,    2,
        3,   12,  156,  156,   24,   32,   34,   45,   45,   45,
       45,   45,   45,   40,   40,   40,   40,   40,   40,   48,
        4,    5, 8208,    4,    6,   20,   22,16401,   20,   22,
    16401,   20,   22,16401,   22,    6,    6,    6,    6,    6,
        4,    6,    4,    6,    6,   20,   22,16401,    6,   20,
       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,

        6,   20,   22,16401,    6, 8209,    6,   20,   22,16401,
        6,   20,   22,16401,    4,    6,   20,   22,16401,    6,
       20,   22,16401,    6,   20,   22,16401,    6,   20,   22,
    16401,    6,   20,   22,16401,    6,   22,    6,   22,    4,
        7,   21,   23,16402,   21,   23,16402,   21,   23,16402,
       23,    7,    7,    7,    7,    7,    4,    7,    4,    7,
        7,   21,   23,16402,    7,   21,   23,16402,    7,   21,
       23,16402,    7,   21,   23,16402,    7,   21,   23,16402,
        7, 8210,    7,   21,   23,16402,    7,   21,   23,16402,
        4,    7,   21,   23,16402,    7,   21,   23,16402,    7,

       21,   23,16402,    7,   21,   23,16402,    7,   21,   23,
    16402,    7,   23,    7,   23,  156,  154,   36,   36,   36,
       36,   36,   36,   52,   52,   52,   52,   52,   52,   53,
       43,   43,   43,   43,   43,   43,   26,   25,   25,   25,
       25,   25,   25,    6,   20,   22,16401,    6,   20,   22,
    16401,    6,   20,   22,16401,    6,   20,   22,16401,    6,
       20,   22,16401,    6,   20,   22,16401,    6, 8209,    6,
       20,   22,16401,    6,   20,   22,16401,    6,   20,   22,
    16401,    6,   20,   22,16401,    6,   20,   22,16401,    6,
       20,   22,16401,    6,   22,    6,   22,    6,   22,    6,

       22,    7,   21,   23,16402,    7,   21,   23,16402,    7,
       21,   23,16402,    7,   21,   23,16402,    7,   21,   23,
    16402,    7,   21,   23,16402,    7, 8210,    7,   21,   23,
    16402,    7,   21,   23,16402,    7,   21,   23,16402,    7,
       21,   23,16402,    7,   21,   23,16402,    7,   21,   23,
    16402,    7,   23,    7,   23,    7,   23,    7,   23,  155,
      142,  142,   29,   29,   29,   29,   29,   29,   28,   49,
       49,   49,   49,   49,   49,   44,   42,   27,   37,   37,
       37,   37,   37,   37,    6,   20,   22,16401,    6,   20,
       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,

        6,   20,   22,16401,    6,   20,   22,16401,    6,   20,
       22,16401,    6,   20,   22,16401,    6,   20,   22,16401,
        6,   22,    7,   21,   23,16402,    7,   21,   23,16402,
        7,   21,   23,16402,    7,   21,   23,16402,    7,   21,
       23,16402,    7,   21,   23,16402,    7,   21,   23,16402,
        7,   21,   23,16402,    7,   21,   23,16402,    7,   23,
       30,   30,   30,   30,   30,   30,   47,   47,   47,   47,
       47,   47,   31,   31,   31,   31,   31,   31,   38,   38,
       38,   38,   38,   38,   39,   39,   39,   39,   39,   39,
       41,   35,   35,   35,   35,   35,   35,   50,   46,   46,

       46,   46,   46,   46,  141
    } ;

static const flex_int16_t yy_accept[1647] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   18,   20,   22,   24,   26,   28,   30,   32,   34,
       36,   39,   43,   45,   49,   53,   56,   60,   64,   67,
       71,   75,   81,   85,   89,   94,   98,  101,  105,  109,
      113,  115,  117,  119,  121,  125,  130,  134,  138,  143,
      147,  151,  157,  162,  166,  171,  175,  177,  179,  181,
      185,  190,  194,  199,  203,  209,  214,  218,  223,  225,
      227,  229,  232,  235,  237,  241,  245,  250,  254,  256,

      258,  260,  262,  264,  268,  271,  274,  276,  280,  284,
      287,  289,  291,  293,  295,  299,  301,  305,  310,  315,
      320,  323,  326,  329,  332,  334,  338,  342,  345,  349,
      353,  356,  359,  363,  370,  374,  377,  381,  383,  387,
      390,  393,  395,  398,  400,  403,  406,  409,  412,  415,
      417,  421,  426,  429,  432,  435,  439,  443,  446,  449,
      453,  455,  457,  460,  463,  465,  466,  467,  468,  469,
      470,  471,  472,  473,  474,  475,  475,  476,  477,  478,
      479,  480,  480,  481,  482,  482,  483,  483,  484,  485,
      485,  486,  487,  488,  488,  488,  488,  488,  488,  488,

      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  489,  490,  491,  492,  492,  495,  497,  499,  500,
      500,  501,  502,  504,  506,  508,  510,  511,  511,  511,
      512,  512,  513,  513,  516,  518,  518,  521,  521,  523,
      523,  523,  523,  523,  525,  526,  527,  528,  529,  530,
      531,  532,  532,  536,  537,  538,  538,  541,  544,  546,
      547,  549,  549,  549,  549,  551,  551,  553,  556,  556,
      556,  556,  557,  560,  560,  560,  561,  561,  562,  562,
      565,  567,  567,  570,  570,  572,  572,  572,  572,  574,

      574,  578,  579,  580,  580,  583,  586,  588,  589,  591,
      591,  591,  591,  593,  593,  595,  598,  598,  598,  598,
      601,  601,  601,  601,  601,  602,  603,  604,  606,  608,
      610,  612,  614,  615,  616,  616,  616,  617,  617,  617,
      618,  619,  621,  624,  626,  628,  630,  631,  631,  631,
      632,  633,  635,  637,  638,  638,  639,  639,  641,  642,
      644,  645,  646,  646,  646,  648,  648,  652,  652,  653,
      653,  654,  655,  657,  658,  659,  660,  661,  662,  663,
      665,  667,  668,  669,  671,  672,  673,  674,  675,  676,
      678,  680,  681,  682,  683,  684,  686,  687,  688,  688,

      688,  689,  690,  691,  691,  692,  692,  693,  693,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  695,  695,  695,  697,
      698,  699,  700,  704,  706,  708,  708,  711,  712,  713,
      714,  715,  716,  716,  716,  716,  716,  719,  722,  725,
      728,  728,  728,  728,  729,  732,  735,  738,  738,  738,
      738,  739,  739,  740,  740,  740,  740,  740,  740,  741,

      742,  745,  747,  749,  749,  749,  749,  751,  755,  758,
      759,  759,  759,  761,  762,  762,  763,  763,  763,  763,
      765,  766,  770,  772,  773,  775,  776,  777,  778,  781,
      785,  788,  791,  792,  795,  795,  795,  795,  796,  796,
      796,  796,  796,  796,  799,  801,  803,  803,  803,  803,
      807,  807,  807,  807,  807,  807,  807,  810,  813,  816,
      819,  819,  819,  819,  820,  823,  826,  829,  829,  829,
      829,  830,  830,  831,  831,  831,  831,  831,  831,  834,
      836,  838,  838,  838,  838,  840,  844,  847,  848,  848,
      848,  850,  851,  851,  852,  852,  852,  852,  854,  855,

      859,  861,  862,  864,  865,  866,  867,  870,  874,  877,
      880,  881,  884,  884,  884,  884,  885,  885,  885,  885,
      885,  885,  888,  890,  892,  892,  892,  892,  892,  892,
      892,  896,  896,  896,  896,  897,  898,  899,  900,  901,
      901,  903,  905,  906,  907,  908,  908,  909,  909,  911,
      911,  913,  913,  915,  916,  917,  919,  921,  923,  924,
      926,  927,  928,  928,  928,  929,  930,  931,  933,  934,
      936,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,

      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  939,  940,  941,  942,  943,  944,  944,
      944,  944,  944,  944,  945,  945,  945,  945,  945,  945,
      945,  945,  948,  948,  950,  953,  955,  955,  959,  962,
      963,  963,  964,  967,  970,  973,  973,  973,  973,  973,
      973,  976,  979,  982,  982,  982,  982,  982,  982,  983,
      984,  985,  985,  985,  985,  986,  986,  986,  986,  986,
      986,  986,  989,  992,  995,  995,  995,  995,  995,  995,
      998,  999, 1000, 1000, 1000, 1000, 1001, 1002, 1003, 1005,
     1006, 1007, 1007, 1007, 1007, 1008, 1008, 1008, 1008, 1009,

     1009, 1009, 1009, 1010, 1012, 1012, 1012, 1015, 1016, 1018,
     1022, 1025, 1025, 1030, 1034, 1034, 1034, 1034, 1034, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1038, 1041,
     1044, 1044, 1044, 1044, 1044, 1044, 1048, 1048, 1049, 1049,
     1050, 1053, 1056, 1059, 1059, 1059, 1059, 1059, 1059, 1062,
     1065, 1068, 1068, 1068, 1068, 1068, 1068, 1069, 1070, 1071,
     1071, 1071, 1071, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1075, 1078, 1081, 1081, 1081, 1081, 1081, 1081, 1084, 1085,
     1086, 1086, 1086, 1086, 1087, 1088, 1089, 1091, 1092, 1093,
     1093, 1093, 1093, 1094, 1094, 1094, 1094, 1095, 1095, 1095,

     1095, 1096, 1098, 1098, 1098, 1101, 1102, 1104, 1108, 1111,
     1111, 1116, 1120, 1120, 1120, 1120, 1120, 1121, 1121, 1121,
     1121, 1121, 1121, 1121, 1121, 1121, 1124, 1127, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1131, 1131, 1132, 1132, 1133,
     1137, 1137, 1140, 1143, 1144, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1146, 1146, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1148, 1148,
     1148, 1148, 1148, 1148, 1149, 1150, 1151, 1151, 1152, 1153,

     1154, 1154, 1154, 1155, 1156, 1157, 1157, 1158, 1159, 1160,
     1160, 1160, 1160, 1161, 1161, 1162, 1164, 1166, 1169, 1172,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1177, 1177, 1177, 1177, 1177, 1177, 1178, 1178,
     1178, 1178, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1180, 1181, 1181, 1181, 1181, 1181, 1181, 1183, 1183, 1185,
     1189, 1193, 1197, 1201, 1201, 1201, 1201, 1205, 1207, 1211,
     1215, 1220, 1224, 1224, 1224, 1224, 1228, 1232, 1236, 1236,
     1236, 1236, 1238, 1238, 1240, 1240, 1240, 1240, 1240, 1240,

     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1242, 1245, 1248,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1253, 1253, 1253, 1253, 1253, 1253, 1254, 1254,
     1254, 1254, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1256, 1257, 1257, 1257, 1257, 1257, 1257, 1259, 1259, 1261,
     1265, 1269, 1273, 1277, 1277, 1277, 1277, 1281, 1283, 1287,
     1291, 1296, 1300, 1300, 1300, 1300, 1304, 1308, 1312, 1312,
     1312, 1312, 1314, 1314, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1317, 1318, 1318,

     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1318, 1319, 1320, 1321, 1321,
     1322, 1323, 1324, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
     1330, 1331, 1331, 1331, 1331, 1331, 1332, 1333, 1334, 1335,
     1336, 1337, 1337, 1337, 1337, 1338, 1338, 1338, 1338, 1339,
     1340, 1341, 1342, 1343, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1348, 1352, 1356,
     1356, 1356, 1356, 1356, 1356, 1360, 1364, 1368, 1368, 1368,

     1368, 1370, 1374, 1378, 1382, 1382, 1382, 1382, 1382, 1382,
     1386, 1390, 1394, 1394, 1394, 1394, 1394, 1394, 1396, 1398,
     1400, 1400, 1400, 1400, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1406, 1410, 1414, 1414, 1414, 1414,
     1414, 1414, 1418, 1422, 1426, 1426, 1426, 1426, 1428, 1432,
     1436, 1440, 1440, 1440, 1440, 1440, 1440, 1444, 1448, 1452,
     1452, 1452, 1452, 1452, 1452, 1454, 1456, 1458, 1458, 1458,
     1458, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,

     1461, 1462, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1464,
     1465, 1466, 1467, 1468, 1469, 1469, 1470, 1471, 1472, 1473,
     1474, 1475, 1476, 1476, 1476, 1476, 1476, 1477, 1477, 1477,
     1478, 1478, 1478, 1479, 1479, 1479, 1479, 1479, 1480, 1481,
     1482, 1483, 1484, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1489, 1493, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1501,
     1505, 1509, 1509, 1509, 1509, 1509, 1509, 1513, 1517, 1521,
     1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,

     1523, 1523, 1523, 1523, 1527, 1531, 1535, 1535, 1535, 1535,
     1535, 1535, 1535, 1539, 1543, 1547, 1547, 1547, 1547, 1547,
     1547, 1551, 1555, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
     1559, 1559, 1559, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1567, 1568,
     1569, 1570, 1571, 1572, 1573, 1573, 1574, 1575, 1576, 1577,
     1578, 1579, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586,
     1587, 1588, 1589, 1590, 1591, 1591, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,

     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1593,
     1594, 1595, 1596, 1597, 1598, 1598, 1599, 1600, 1601, 1602,
     1603, 1604, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605,
     1605, 1605, 1605, 1605, 1606, 1606
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    6,    9,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,    6,
       25,    6,   26,   27,   28,   28,   29,   30,   31,   29,
       32,   33,   32,   34,   32,   32,   32,   35,   32,   32,
       32,   36,   37,   38,   32,   32,   39,   32,   32,   32,
       40,   41,   42,   43,   32,   44,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   32,   54,   55,   56,   57,
       58,   59,   32,   60,   61,   62,   63,   64,   39,   65,
       66,   32,   67,   68,   69,   70,    1,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   72,   72,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   75,
       75,   75,   75,   75,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,    6,    9,
       10,    2,   11,   12,   10,   12,   13,   14,   15,   15,
       15,   15,   16,   17,    6,    6,   18,   15,   15,   15,
       15,   19,   19,   19,   19,   19,   19,   19,   19,   10,
        6,    7,   20,    1,   15,   15,   15,   15,   21,   15,
       19,   19,   19,   19,   22,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   10,    1,    7,   11,
        1,    1,   23,   23,   23
    } ;

static const flex_int16_t yy_base[1895] =
    {   0,
        0,    3,   78,    0,  153,    0,  228,    0,  302,  376,
        6,    8,  350,  356,  451,    0,  525,  599,  673,    0,
      362,  534,  715,  789,  863,  912,  961, 1030,  539,  544,
     5341,  235,11571, 5337, 5333,   11,  250,  256,  261,   12,
    11571,   24,11571, 5334,11571,  621, 1099, 5317,   30,   37,
    11571,  389,    0,11571, 5316,11571, 1172,11571,11571,11571,
    11571, 5261, 5260, 5259,  551,  633, 1231,11571, 1289, 5315,
       12,    6,  688,  724,   50,11571, 5255, 5254, 5250,  572,
      731, 5284, 1357,  625,  351,  752,  762,  541, 5232, 5230,
     5228,11571,  343,11571, 5294,11571,11571, 1432,11571, 5225,

     5224, 5220,11571, 5286,11571,  345,11571, 5285,11571, 1505,
    11571, 5211, 5205, 5203,11571,11571, 5270,    0,   41, 1552,
    11571, 5197, 5192, 5184,11571, 5248, 1595, 1660,11571,  396,
      811,  318,  529,  562, 5242,   18,  402,11571, 5232,  392,
       61,11571,   13,11571, 5230,11571,11571,    0,  344,11571,
     5229,11571,  420,11571,  601,  649,  704, 5186, 5170, 5209,
    11571,11571, 5218,11571,  840,11571, 5134, 5133, 5132,  558,
      584,  628,  693,11571, 5194,  728,    0,11571,  562,  736,
      746,  826,  411,  933,  821,  899,  858,11571,11571,  355,
    11571,11571,11571,  975,  986,   52,    0,  654, 1681, 1001,

      923, 1021,  728, 1184,  986,  947,  990, 1188, 1225,  913,
      952,  944, 1172, 1219, 1248, 5123, 5117, 5116,  793,  907,
     1067,  530, 1163,11571, 1744, 1179, 5159, 1314,    0, 1167,
    11571,  552,  707,11571,  825,    0,11571, 5104, 5090, 1324,
     1265, 1183, 1336, 1343, 1513, 1194, 1520, 1316, 1610, 5089,
     5088, 5083, 1282, 1617,11571,11571,11571,11571,11571,11571,
    11571, 1298, 1812,11571, 1880, 1955, 1828, 1846, 1849,  579,
     1867, 5074, 5070, 5061, 2023, 5107, 2091,    0, 5058, 5057,
     5056,  851, 2028, 5052, 5051, 1390, 1377, 1403, 1626, 2031,
     2052, 1328, 2064, 1556, 2113, 5046, 5040, 5039, 2124, 1497,

     2192,11571, 2260, 2335, 2141, 2151, 2219,  698, 2226, 5032,
     5031, 5027, 2231, 1025, 2403,    0, 5026, 5024, 5022, 2410,
     5018, 5016,  846,  546,11571,11571,  585,  869,11571,11571,
     1090,11571,    0,11571, 5008, 4999,11571, 1052,  621,11571,
    11571,  659,  893,11571, 1147,    0,11571, 4994, 4993,11571,
        0, 1048, 2467,11571,  639,11571, 1512, 1538,    0,11571,
      732, 1076, 1635,  562, 1652, 1556, 1676, 5012, 1101,  645,
    11571,  943, 1176, 1080,11571,    0, 1121,11571, 1694, 1264,
     1895, 1570, 1911, 2419, 5002, 4985,11571,11571,11571,11571,
      303,    0, 1298,  665,11571,  819, 1218,11571, 1860, 1929,

    11571,11571,11571,  886,  904, 1362, 1382,    0, 2499, 1603,
     4975, 4972, 4968,  700, 4976, 1369, 4981, 1564, 4976, 4978,
     4972, 4972,  387, 4957, 1164, 4962,  259, 4948, 4950, 2009,
     2015, 2019, 2108, 2042, 2129, 2156, 2198, 2237, 2215, 2391,
     2182, 2549, 2241, 2247, 2255, 2398, 2458, 2429, 2433, 2436,
     2252, 2511, 2532, 4933, 4929, 1802, 2624,    0, 2548,    0,
     2521,11571, 2683,    0, 2582, 1806, 1917, 2123, 1271, 1817,
    11571, 4970, 4921, 2423, 2725, 2696, 2711, 2714, 2732, 2750,
     4920, 4919, 4918, 2503, 2753, 2774, 2786, 4914, 4912, 4897,
     2426, 4942, 1778, 4893, 4892, 4890, 4885, 4878,11571,11571,

     2813, 2827, 2835, 4876, 4872, 4871, 2903, 2971, 2863, 2535,
     4915, 2745, 3039, 1831, 2758, 2876, 4866, 4859, 4857, 2539,
     4903, 3107, 1960, 2830, 2922, 4850, 4843, 4837, 2897, 3175,
     2931, 2958, 2049, 2999, 4829, 4824, 4814, 2075, 4808, 4805,
     4804, 4803, 4801, 3011, 3073, 3094, 4800, 4797, 4793, 3243,
     4786, 4777, 4774, 2561, 3311, 2852, 3132, 3135, 3203, 3214,
     4773, 4763, 4757, 2687, 3277, 3282, 3318, 4755, 4754, 4748,
     3032, 4795, 2102, 4742, 4724, 4723, 4721, 4710, 3331, 3336,
     3354, 4702, 4699, 4695, 3422, 3490, 2951, 2690, 4719, 2976,
     3558, 2118, 3004, 3292, 4669, 4667, 4665, 2737, 4711, 3626,

     2143, 3045, 3399, 4660, 4658, 4650, 3168, 3694, 3408, 3461,
     2211, 3497, 4646, 4639, 4637, 2244, 4633, 4632, 4628, 4627,
     4625, 3524, 3565, 3586, 4623, 4615, 4612, 1525, 2941,  923,
     3762, 4611, 4610, 4609, 1656, 1286, 2705,11571, 4655, 4600,
     1862, 1509, 2989,11571, 4645, 4596, 3072, 2396, 2795,    0,
     3819,    0, 3144, 1893, 1518,    0,    0, 3193, 3151, 3213,
     4604, 4607,    0, 2844,11571, 3253, 3438, 1295,    0, 2912,
     3851, 4582, 4580, 4586, 4592, 4576, 1326, 4574, 4573, 4576,
      747, 4566, 4562, 1478, 4547,    0, 4542, 4536, 4550, 4540,
     1706, 4533, 4532, 4532, 4529, 4518, 4518, 3581, 3612, 3618,

     3661, 3665, 3718, 3740, 3748, 3752, 3785, 3840, 3872, 3881,
     3904, 3916,11571, 3920, 3951, 4503, 4501, 4494, 3948, 3957,
     4032, 4015, 1866,11571, 4055, 4130, 4046, 4090, 4113, 4154,
     4492, 3538, 3233, 3261, 3276, 3368, 3471, 3381, 4533, 4162,
     3302, 4192, 4215, 4226, 4233, 4477, 4457, 4454, 4452, 4451,
     4251, 4254, 4275, 4447, 4446, 4441, 4435, 4425, 3456, 3553,
     2950, 4423, 4421, 4418, 2962, 4417, 4411, 4409, 4395, 4394,
     4388, 4287, 4314, 4328, 4383, 4381, 4377, 4369, 4367, 4396,
     3154, 2990, 4366, 4362, 4357, 3024, 3170, 3359, 4464, 3035,
     4356, 4343, 4341, 4339, 3058, 4337, 4336, 4329, 3743, 4327,

     4322, 4315, 4171, 3659, 4314, 4303, 3446, 4361, 3675, 4382,
     4424, 4441, 4532, 4503, 3453, 4302, 4298, 4288, 3165, 4287,
     4281, 4264, 4252, 4249, 4246, 4244, 4240, 4539, 4556, 4573,
     4234, 4220, 4208, 4201, 4193, 4641, 4192, 4513, 3481, 4600,
     4616, 4627, 4649, 4186, 4184, 4181, 4177, 4176, 4670, 4703,
     4710, 4168, 4160, 4139, 4137, 4135, 3757, 3867, 3228, 4125,
     4124, 4118, 3254, 4109, 4104, 4100, 4087, 4084, 4075, 4724,
     4731, 4748, 4073, 4072, 4056, 4055, 4045, 4816, 3373, 3295,
     4041, 4040, 4037, 3363, 3471, 3577, 4884, 3475, 4741, 4027,
     4025, 4023, 3537, 4022, 4006, 4002, 4403, 4000, 3999, 3997,

     4767, 4060, 3995, 3994, 3706, 4788, 4375, 4843, 4850, 4861,
     4952, 4923, 3699, 3979, 3975, 3974, 3630, 3970, 3958, 3957,
     3948, 3947, 3944, 3934, 3921, 4959, 4976, 4993, 3911, 3910,
     3901, 3899, 3896, 1533, 1565, 3712, 3727,    0,    0, 5061,
     3890, 3790, 5118, 3908, 5167,    0,    0, 3881, 2047, 2068,
     3904, 3900, 3901, 3886, 3883, 3881, 3870, 3870, 3855, 2235,
     3867, 3850, 3856, 3845, 3859, 3848, 3845, 3833, 3842, 3827,
     3827, 2718, 3809, 2790,11571, 2935,11571, 3910, 3862, 3781,
     4087, 5237, 3901, 5312, 4519, 4290, 2951,11571, 4094, 4259,
     4293, 5387, 4430,11571, 4369, 5418, 4496, 3790, 3786, 3780,

     4939, 4427,11571, 4470,    0, 4632, 3773, 3758, 3757, 4727,
     5481, 3139,11571, 4757, 4833, 4877, 5549, 5001, 5069, 5082,
     3753, 3749, 3748, 3741, 3736, 3732, 3727, 3723, 3717, 3814,
     3707, 3706, 3690, 3688, 3684, 3678, 3673, 3672, 3658, 3648,
     3647, 3856, 3638, 3627, 3618, 3612, 3611, 3913, 3605, 3603,
     3601, 3951, 3600, 3597, 3593, 3587, 3573, 3571, 3566, 4879,
     4998, 3565, 3551, 3550, 3548, 3545, 5617, 3535, 4064, 5154,
     5183, 5275, 5334, 3534, 3531, 3524, 5486, 5033, 5489, 5557,
     5685, 5574, 3520, 3519, 3513, 5642, 5645, 5656, 3503, 3497,
     3485, 5077, 3530, 3979, 3472, 3471, 3467, 3466, 3452, 3448,

     3437, 3435, 3418, 3406, 3404, 3399, 5753, 5719, 5724, 5760,
     3392, 3391, 3369, 3355, 3353, 3352, 3341, 3336, 3324, 3988,
     3323, 3309, 3304, 3293, 3275, 3265, 3236, 3222, 3220, 3213,
     3208, 4049, 3200, 3188, 3185, 3176, 3165, 4077, 3152, 3145,
     3133, 4143, 3132, 3130, 3129, 3120, 3113, 3103, 3090, 5110,
     5150, 3086, 3082, 3064, 3054, 3052, 5828, 3051, 4265, 5787,
     5794, 5815, 5836, 3033, 3032, 3016, 5849, 5040, 5857, 5870,
     5938, 5898, 3005, 3000, 2998, 5910, 5959, 5971, 2996, 2986,
     2981, 5350, 3025, 4147, 2972, 2970, 2968, 2959, 2958, 2947,
     2940, 2916, 2915, 2898, 2893, 2888, 6045,11571,    0,    0,

     2873, 2845, 2841, 2830, 2840, 2824,    0, 3174, 2810, 2812,
     2795, 2806,    0, 2797, 2796, 3256, 2776, 2792, 2779,    0,
     2767, 6115, 6190, 6265, 3513,11571, 3335, 6296, 4228, 2737,
     2733, 2719, 3613,11571, 3371,    0, 2712, 2708, 2707, 3794,
    11571, 3841, 3961, 4249, 4555,11571, 4268,    0, 2700, 2698,
     2691, 4291, 4707, 4307,11571, 4556, 4767, 4342,11571, 4341,
        0, 2680, 2679, 2672, 6359, 2664, 2656, 2640, 2630,  251,
      255,  270,  285,  300,  312,  334,  341,  355,  462,  469,
      488,  493,  524,  558,  567,  592, 5992, 5999, 6032,  611,
      642,  651,  679,  694, 6061, 6137, 6210,  709,  725,  761,

     5192, 6228, 6364, 6367,  788,  799,  817,  828,  859, 6381,
     6392, 6435,  873,  880,  885,  908,  919, 5427, 5464, 4151,
      928,  933,  937, 4265,  939,  943,  945,  958,  965,  976,
      984,  991, 1006, 1020, 1036, 1068, 1070, 1072, 1099, 1119,
     1126, 1135, 1137, 1148, 1155, 1160, 1164, 1172, 1185, 1189,
     1203, 1207, 1209, 6452, 6460, 6463, 1254, 1256, 1266, 1271,
     1281, 6474, 6477, 6488, 1283, 1288, 1290, 5197, 6537, 6548,
     6551, 1297, 1304, 1322, 1342, 1344, 6559, 6562, 6573, 1348,
     1355, 1357, 1442, 1451, 5535, 5603, 4347, 1456, 1458, 1471,
     4400, 1477, 1490, 1495, 1497, 1525, 1533, 1536, 1537,11571,

    11571, 1571,    0, 4599,    0, 1564, 1576, 1575, 4640, 1573,
     4683, 1572, 4723, 1575, 1577, 1579, 1593,    0,11571, 4747,
     6604, 1579, 1581, 1595, 4791,11571,11571, 4815,    0, 1597,
     1611, 1615, 6667, 4908, 6742, 4844,11571, 4976, 4907,11571,
     6817, 4927,11571, 4943, 6892, 6967, 4975,11571, 5033,    0,
     1617, 1618, 1623, 1628, 1629, 1632, 1636, 1641, 1650, 6689,
     6764, 6839, 1652, 1662, 1664, 1669, 1690, 1759, 6914, 6975,
     6978, 1769, 1775, 1785, 1787, 1789, 6989, 7000, 7038, 1791,
     1799, 1803, 1812, 1822, 1837, 1842, 1847, 1857, 4435, 1864,
     1875, 1876, 1881, 1901, 1966, 1970, 1972, 1973, 1976, 1982,

     1985, 1986, 1990, 7049, 7060, 7063, 1991, 1996, 1997, 2005,
     2007, 2014, 7071, 7074, 7133, 2015, 2038, 2048, 2049, 2057,
     7144, 7147, 7155, 2058, 2062, 2064, 2075, 2082, 2083, 2100,
     2102, 2109, 4563, 2114, 2118, 2124, 2125, 2130, 2136, 2137,
     2139, 2157,    0, 2160,    0, 2162,    0, 2170,    0,    0,
     5035,11571, 5089,    0, 2162, 2174, 2179, 7230,11571, 5114,
        0, 2181, 2190, 2205, 5119,11571, 5184,    0, 2224, 2226,
     2227, 7305,11571, 5190,    0, 2236, 2252, 2253,11571, 5196,
        0, 2260, 2261, 2281, 5241,11571, 2341, 2342, 2348, 2357,
     2358, 2360, 2361, 2364, 2376, 2383, 2386, 2387, 2390, 2391,

     2396, 2403, 2404, 2408, 2409, 2411, 2419, 2423, 2434, 2455,
     2465, 2467, 2468, 2492, 2691,    0, 5257,    0,11571, 5273,
        0, 2500, 2503, 2504, 5282,11571,11571, 5288,    0, 2507,
     2516, 2517, 2519, 2524, 2528, 2529, 2540, 2544, 2548, 2570,
     5315,    0,    0,11571,11571, 7380, 7403, 7426, 7449, 7472,
     7495, 7518, 7529, 7551, 7574, 7592, 7610, 7628, 7646, 7664,
     7682, 7705, 7714, 7729, 7751, 7774, 7797, 7820, 2830, 7838,
     7849, 7871, 2721, 7889, 7907, 7925, 7943, 7961, 7979, 7997,
     8015, 8033, 8051, 8069, 8087, 8105, 8123, 8141, 8159, 8177,
     8195, 8213, 8231, 2854, 2892, 8240, 8248, 2968, 8270, 8281,

     8303, 2900, 8326, 8349, 8372, 8381, 8389, 2914, 8406, 8417,
     3000, 8434, 8452, 8470, 8488, 8506, 8524, 8542, 8560, 8578,
     8596, 8614, 8632, 8650, 8668, 8686, 8704, 8722, 8740, 8758,
     8776, 8794, 8812, 8830, 8848, 8866, 8884, 8902, 8920, 8938,
     8956, 8974, 8992, 9010, 9028, 9046, 9064, 9082, 9100, 3068,
     3204, 3741, 9109, 3080, 9131, 9154, 3121, 3124, 9166, 9188,
     9210, 9221, 9238, 9256, 9274, 9292, 9310, 9328, 9346, 9364,
     9382, 9400, 9418, 9436, 9454, 9472, 9490, 9508, 9526, 9544,
     9562, 9580, 9598, 9616, 9634, 9652, 9670, 9688, 9706, 9724,
     9742, 9760, 9778, 9796, 9814, 9832, 9850, 9868, 9886, 9904,

     9922, 9940, 9958, 9976, 9994,10012, 3139,10021,10043, 3328,
     3357,10066,10089,10107,10118,10135,10153,10171,10189,10207,
    10225,10243,10261,10279,10297,10315,10333,10351,10369,10387,
    10405,10423,10441,10459,10477,10495,10513,10531,10549,10567,
    10585,10603,10621,10639,10657,10675,10693,10711,10729,10752,
     3393, 3435,10775,10798,10821,10844,10867,10885,10903,10921,
    10939,10957,10975,10993,11011,11029,11047,11065,11083,11101,
    11119,11137,11155,11173,11191,11209,11227,11245,11263,11286,
    11309,11332,11350,11368,11386,11409,11432,11455,11478,11501,
    11524,11547, 3465, 3501

    } ;

static const flex_int16_t yy_def[1895] =
    {   0,
     1646, 1646, 1645,    3, 1645,    5, 1645,    7, 1647, 1647,
       10,   10, 1648, 1648, 1645,   15, 1648, 1648,    3,   19,
     1648, 1648, 1648, 1648, 1649, 1649, 1650, 1650, 1651, 1651,
     1645, 1652, 1645, 1645, 1645, 1645, 1652, 1652, 1652, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1653, 1654, 1645, 1653, 1645, 1655, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1656, 1645, 1645, 1656, 1645,
     1645,   69, 1657, 1658,   69, 1645, 1645, 1645, 1645, 1645,
     1659,   67, 1659, 1645,   83, 1660, 1661,   83, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1662,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1663, 1663, 1663,
     1645, 1645, 1645, 1645, 1645, 1645, 1664, 1662, 1645, 1645,
     1645, 1645, 1645, 1653, 1645, 1645, 1645, 1645, 1645,  128,
      128, 1645, 1645, 1645, 1645, 1645, 1645, 1665, 1645, 1645,
     1665, 1645, 1665, 1645, 1665, 1665, 1665, 1665, 1665, 1645,
     1645, 1645, 1645, 1645, 1666, 1645, 1645, 1645, 1645, 1652,
     1652, 1652, 1652, 1645, 1645, 1645, 1667, 1645, 1652, 1652,
     1652, 1645, 1668, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1669,   47, 1670, 1645, 1670,

     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1671, 1645, 1645, 1653, 1653, 1653, 1672, 1645,
     1645, 1645, 1645, 1645, 1645, 1673, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1674, 1675, 1645, 1676, 1677, 1675, 1645,
     1645, 1645, 1645, 1678, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1674, 1645, 1679, 1645,  263, 1680, 1681, 1682,
     1681, 1645, 1645, 1645, 1683, 1645, 1683,  277, 1645, 1645,
     1645, 1645, 1675, 1645, 1645, 1645, 1645, 1645, 1645, 1684,
     1685, 1645, 1686, 1687, 1685, 1645, 1645, 1645, 1688, 1645,

     1684, 1645, 1689, 1645,  301, 1690, 1691, 1692, 1691, 1645,
     1645, 1645, 1693, 1645, 1693,  315, 1645, 1645, 1645, 1685,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1694, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1695, 1645, 1645, 1645, 1645,
     1696, 1696, 1696, 1645, 1645, 1645, 1645, 1697, 1697, 1645,
     1645, 1645, 1645, 1698, 1645, 1699, 1700, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1701, 1645, 1645, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1645, 1645, 1645, 1645,
     1702, 1703, 1704, 1705, 1645, 1705, 1645, 1645, 1706, 1645,

     1645, 1645, 1645, 1645, 1707, 1645, 1707, 1708, 1707, 1709,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1709,
     1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709,
     1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709,
     1709, 1709, 1709, 1645, 1645, 1645, 1645, 1706, 1706, 1706,
     1706, 1645, 1706, 1706, 1706, 1645, 1710, 1645, 1645, 1645,
     1645, 1711, 1645, 1645, 1712, 1645, 1713, 1713, 1714, 1713,
     1645, 1645, 1645, 1645, 1715, 1716, 1716, 1645, 1645, 1645,
     1717, 1645, 1718, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1719, 1720, 1720, 1645, 1645, 1645, 1712, 1713,  508, 1721,
     1645, 1712, 1722, 1723, 1724, 1721, 1645, 1645, 1645, 1721,
     1645, 1722, 1723, 1724, 1721, 1645, 1645, 1645,  508, 1725,
     1726, 1726, 1727, 1726, 1645, 1645, 1645, 1728, 1645, 1645,
     1645, 1645, 1645, 1729, 1730, 1730, 1645, 1645, 1645, 1729,
     1645, 1645, 1645, 1645, 1731, 1645, 1732, 1732, 1733, 1732,
     1645, 1645, 1645, 1645, 1734, 1735, 1735, 1645, 1645, 1645,
     1736, 1645, 1737, 1645, 1645, 1645, 1645, 1645, 1738, 1739,
     1739, 1645, 1645, 1645, 1731, 1732,  586, 1740, 1645, 1731,
     1741, 1742, 1743, 1740, 1645, 1645, 1645, 1740, 1645, 1741,

     1742, 1743, 1740, 1645, 1645, 1645,  586, 1744, 1745, 1745,
     1746, 1745, 1645, 1645, 1645, 1747, 1645, 1645, 1645, 1645,
     1645, 1748, 1749, 1749, 1645, 1645, 1645, 1645, 1645, 1750,
     1748, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1751, 1645,
     1645, 1645, 1645, 1645, 1752, 1645, 1645, 1645, 1753, 1754,
     1753, 1755, 1645, 1645, 1645, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1757, 1758, 1645, 1759, 1759, 1753, 1753, 1753,
     1753, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1760, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1761, 1761, 1761,

     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1645, 1761, 1645, 1645, 1645, 1645, 1761, 1761,
     1761, 1761, 1645, 1645, 1761, 1761, 1761, 1761, 1761, 1761,
     1645, 1759, 1645,  732,  732,  732, 1759, 1762, 1762, 1763,
     1645, 1764, 1765, 1766, 1766, 1645, 1645, 1645, 1645, 1645,
     1767, 1767, 1767, 1645, 1645, 1645, 1645, 1645, 1768, 1768,
     1769, 1645, 1645, 1645, 1770, 1645, 1645, 1645, 1645, 1645,
     1645, 1771, 1771, 1771, 1645, 1645, 1645, 1645, 1645, 1772,
     1763, 1773, 1645, 1645, 1645, 1774, 1763, 1763, 1772, 1775,
     1763, 1645, 1645, 1645, 1776, 1645, 1645, 1645, 1777, 1645,

     1645, 1645, 1763,  789, 1645, 1645,  789, 1763,  789, 1778,
     1779, 1764, 1780, 1781, 1782, 1645, 1645, 1645, 1783, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1784, 1784, 1784,
     1645, 1645, 1645, 1645, 1645, 1784, 1645, 1785, 1645, 1786,
     1787, 1788, 1788, 1645, 1645, 1645, 1645, 1645, 1789, 1789,
     1789, 1645, 1645, 1645, 1645, 1645, 1790, 1790, 1791, 1645,
     1645, 1645, 1792, 1645, 1645, 1645, 1645, 1645, 1645, 1793,
     1793, 1793, 1645, 1645, 1645, 1645, 1645, 1794, 1785, 1795,
     1645, 1645, 1645, 1796, 1785, 1785, 1794, 1797, 1785, 1645,
     1645, 1645, 1798, 1645, 1645, 1645, 1799, 1645, 1645, 1645,

     1785,  887, 1645, 1645,  887, 1785,  887, 1800, 1801, 1786,
     1802, 1803, 1804, 1645, 1645, 1645, 1805, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1806, 1806, 1806, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1807, 1807, 1806,
     1645, 1808, 1808, 1809, 1809, 1810, 1811, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1812, 1645, 1645, 1813, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1814, 1814, 1814,
     1814, 1814, 1814, 1814, 1814, 1814, 1645, 1645, 1814, 1814,
     1814, 1814, 1814, 1645, 1814, 1645, 1814, 1645, 1645, 1645,

     1814, 1814, 1645, 1814,  996, 1814, 1645, 1645, 1645, 1814,
     1814, 1645, 1645, 1814, 1815, 1815, 1816, 1817, 1817, 1817,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1818,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1819, 1645, 1645, 1645, 1645, 1645, 1820, 1645, 1645,
     1645, 1821, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1822,
     1822, 1645, 1645, 1645, 1645, 1645, 1816, 1645, 1067, 1823,
     1823, 1824, 1823, 1645, 1645, 1645, 1825, 1826, 1823, 1823,
     1827, 1828, 1645, 1645, 1645, 1829, 1830, 1830, 1645, 1645,
     1645, 1831, 1645, 1832, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1645, 1645, 1645, 1833, 1834, 1834, 1834,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1835,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1836, 1645, 1645, 1645, 1645, 1645, 1837, 1645, 1645,
     1645, 1838, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1839,
     1839, 1645, 1645, 1645, 1645, 1645, 1833, 1645, 1157, 1840,
     1840, 1841, 1840, 1645, 1645, 1645, 1842, 1843, 1840, 1840,
     1844, 1845, 1645, 1645, 1645, 1846, 1847, 1847, 1645, 1645,
     1645, 1848, 1645, 1849, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1850, 1645, 1851, 1852,

     1645, 1645, 1645, 1645, 1853, 1645, 1854, 1645, 1645, 1645,
     1645, 1645, 1855, 1645, 1645, 1645, 1645, 1645, 1645, 1856,
     1645, 1857, 1857, 1857, 1223, 1645, 1223, 1645, 1223, 1645,
     1645, 1645, 1223, 1645, 1223, 1228, 1645, 1645, 1645, 1645,
     1645, 1223, 1223, 1223, 1223, 1645, 1223, 1228, 1645, 1645,
     1645, 1223, 1223, 1645, 1645, 1223, 1223, 1223, 1645, 1223,
     1228, 1645, 1645, 1645, 1223, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1858, 1859, 1859, 1645,
     1645, 1645, 1645, 1645, 1860, 1861, 1861, 1645, 1645, 1645,

     1862, 1863, 1864, 1864, 1645, 1645, 1645, 1645, 1645, 1865,
     1865, 1865, 1645, 1645, 1645, 1645, 1645, 1866, 1866, 1867,
     1645, 1645, 1645, 1868, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1869, 1870, 1870, 1645, 1645, 1645, 1645,
     1645, 1871, 1872, 1872, 1645, 1645, 1645, 1873, 1874, 1875,
     1875, 1645, 1645, 1645, 1645, 1645, 1876, 1876, 1876, 1645,
     1645, 1645, 1645, 1645, 1877, 1877, 1878, 1645, 1645, 1645,
     1879, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1880, 1645, 1881, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1882, 1645, 1223,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1223, 1421, 1645,
     1645, 1645, 1223, 1223, 1223, 1645, 1645, 1223, 1645, 1645,
     1223, 1645, 1645, 1223, 1223, 1223, 1223, 1645, 1223, 1421,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1883,
     1883, 1883, 1645, 1645, 1645, 1645, 1645, 1645, 1884, 1884,
     1884, 1645, 1645, 1645, 1645, 1645, 1885, 1885, 1885, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1867, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1869, 1869, 1869, 1645, 1645, 1645, 1645,
     1645, 1645, 1871, 1871, 1871, 1645, 1645, 1645, 1645, 1645,
     1874, 1874, 1874, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1878, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1886, 1645, 1887, 1645, 1888, 1645, 1889, 1890,
     1645, 1645, 1223, 1421, 1645, 1645, 1645, 1223, 1645, 1223,
     1421, 1645, 1645, 1645, 1223, 1645, 1223, 1421, 1645, 1645,
     1645, 1223, 1645, 1223, 1421, 1645, 1645, 1645, 1645, 1223,
     1421, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1891, 1645, 1892, 1645, 1223,
     1421, 1645, 1645, 1645, 1645, 1645, 1645, 1223, 1421, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1893, 1894, 1645,    0, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645

    } ;

static const flex_int16_t yy_nxt[11647] =
    {   0,
     1645, 1645,   33,   34,   35,   33,   34,   35,  103,  104,
      103,  104,  176,  182,  374,  176,  182,  374,  177,  183,
      232,  282,  266,  178,  178,  184,   36, 1645,  184,   40,
      265,  265,  265,  265,  177,  183,  267,  185,  222,  185,
      186,  222,  187,  187,  187,  187,  220, 1645,  221,  221,
      221,  221,  232,  282,  267,  223,  223,  223,  223,  352,
      352,  352,  224,  372,  373,  408,  246,  408,  244,  244,
      244,  244,   37,   38,   39,   37,   38,   39,   41,   42,
       43,   44,   42,   41,   45,   46,   41,   41,   47,   48,
       41,   49,   41,   49,   50,   51,   52,   52,   52,   52,

       41,   53,   41,   41,   54,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   56,   57,   48,
       41,   58,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   59,   41,   60,   41,   61,   61,
       62,   63,   64,   41,   65,   43,   44,   65,   66,   45,
       67,   66,   68,   56,   41,   66,   69,   70,   69,   71,
       51,   72,   72,   72,   72,   73,   53,   66,   66,   74,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   56,   75,   41,   68,   58,   66,   66,   66,

       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   41,
       41,   76,   66,   61,   61,   77,   78,   79,   41,   80,
       43,   44,   80,   81,   45,   82,   81,   68,   56,   48,
       81,   83,   70,   83,   84,   81,   85,   85,   85,   85,
       86,   53,   81,   81,   87,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   56,   88,   48,
       68,   58,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   41,   41,   60,   81,   61,   61,

       89,   90,   91,   93,   94,   95,   93,  171,  172,  173,
       96,  694,   96,   96,   96,   96,  695,   96,   96,   97,
      179, 1030,  171,  172,  173, 1455,  180,   96,  171,  172,
      173,  181,  664,  171,  172,  173,  365,  365,  365,  365,
      759,   96,   98,   96,  323,  377,  338,  323,  377,  338,
      664,  106,  107,  108,  106,  765,  109,  106,  107,  108,
      106,  401,  109,  137,  138,  139,  137,  304,  109,   96,
      772,   96,   99,   99,  100,  101,  102,   93,   94,   95,
       93,  305, 1042,  324,   96,  339,   96,   96,   96,   96,
      110,   96,   96,   97,  372,  373,  110,  361,  402,  305,

      361,   96,  140,  369, 1456,  225,  369,  226,  226,  226,
      226,  781,  362,  395,  396,   96,   98,   96,  341,  228,
      111,  111,  112,  113,  114, 1048,  111,  111,  112,  113,
      114,  688,  111,  111,  112,  113,  114,  228,  379,  379,
      379,  379,  370,   96,  689,   96,   99,   99,  100,  101,
      102,  115,  105,  116,  117,  105,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  118,
      118,  118,  118,  115,  115,  115,  115,  115,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      115,  115,  115,  115,  115,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,  119,  118,
      118,  118,  118,  118,  118,  120,  118,  115,  115,  115,
      115,  121,  121,  122,  123,  124,  106,  125,  126,  106,
      222,  222, 1457,  222,  222,  137,  138,  139,  137, 1052,
      109,  162,  163,  232,  282,  164,  162,  163,  327,  635,
      164,  127,  240,  469,  224,  240,  469,  292, 1458,  290,
      290,  290,  290,  787,  241,  128,  241,  242,  129,  243,
      243,  243,  243,  286,  140,  650,  286,  650,  366,  165,
      367,  367,  367,  367,  165,  287,  636,  287,  288,  636,
      289,  289,  289,  289,  795,  111,  111,  112,  113,  114,

      106,  125,  126,  106,  111,  111,  112,  113,  114,  166,
      166,  167,  168,  169,  166,  166,  167,  168,  169,  380,
      381,  381,  381,  342,  641,  127,  222,  189, 1060,  222,
      171,  172,  173,  190,  171,  172,  173, 1459,  191,  128,
      245,  302,  129,  303,  303,  303,  303,  372,  654,  246,
      224,  539,  540,  541,  179,  247,  171,  172,  173,  248,
      642,  192,  799,  642,  193,  382,  194,  395,  396,  111,
      111,  112,  113,  114,  130,  249,  199,  130,  195,  383,
      131, 1287,   68,   56,  628,  196,  132,   70,  132,  133,
       41,  134,  134,  134,  134,  269,  629,  383,  180,  135,

      171,  172,  173,  630,  246,  250,  251,  252,  469,  232,
      270,  469, 1466,  136,  248,   68,  137,  138,  139,  137,
      382, 1467,  384,  384,  384,  384,  411,  412,  413,  176,
      271,  276,  176,  361,  383,  177,  361,  277,  291,  277,
      178,  127,  278,  278,  278,  278,  254,  292,  362, 1070,
      199,  177,  383,  293,  674,  141,  675,  294,  129,  307,
      272,  273,  274,  181, 1468,  171,  172,  173,  292,  314,
      617,  618,  619,  295,  308,  315,  436,  315,  294, 1295,
      316,  316,  316,  316,  299,  111,  111,  112,  113,  114,
      137,  138,  139,  137,  309, 1475,  279,  280,  281,  957,

      411,  412,  413,  296,  297,  298,  179,  958,  171,  172,
      173,  456,  456,  456,  456,  127,  393,  189,  171,  172,
      173,  665,  396,  190,  310,  311,  312,  182,  191,  141,
      182, 1476,  129,  183,  317,  318,  319,  220,  178,  187,
      187,  187,  187,  470,  470,  470,  390,  323,  471,  183,
      323,  192,  469,  232,  193,  469,  194,  390, 1302,  111,
      111,  112,  113,  114,  143,  144,  145,  143,  363, 1483,
      636,  327,  146,  636,  399,  364,  187,  187,  187,  187,
      390,  147,  147,  147,  147,  390,  324, 1484,  400,  390,
      147,  147,  147,  147,  642,  342,  390,  642, 1079,  390,

      397,  390,  391,  397,  405,  405,  400,  147,  147,  147,
      147,  147,  147,  143,  144,  145,  143,  223,  223,  223,
      223,  146,  668,  668,  398,  223,  223,  223,  223, 1485,
      147,  147,  147,  147,  184,  199,  938,  184,  938,  147,
      147,  147,  147, 1310,  655,  199,  185,  655,  185,  186,
     1486,  187,  187,  187,  187, 1487,  147,  147,  147,  147,
      147,  147,  149,  150,  151,  149,  199,  152,  153,  199,
      446,  154,  154,  154,  199,  154,  155,  432, 1086,  156,
      157,  157,  157,  154,  403,  411,  412,  413,  404, 1488,
      404,  441,  449,  405,  405,  411,  412,  413, 1318,  406,

      154,  406,  154, 1493,  407,  407,  407, 1494,  199, 1324,
      158,  447,  199, 1495,  448, 1496,  411,  412,  413,  411,
      412,  413,  159,  199,  411,  412,  413,  154, 1092,  154,
      160,  149,  150,  151,  149, 1497,  152,  153,  440,  442,
      154,  154,  154,  199,  154,  155,  810,  299,  156,  157,
      157,  157,  154,  338,  819,  430,  338,  431,  411,  412,
      413,  828,  411,  412,  413,  433,  352,  352,  352,  154,
      628,  154,  434,  411,  412,  413, 1108,  397,  435,  158,
      397,  374,  629,  457,  374,  221,  221,  221,  221,  630,
     1498,  159,  339,  411,  412,  413,  154,  400,  154,  160,

      197,  398,  369,  197,  198,  369,  841,  198,  637,  637,
      637,  198,  198,  638,  198,  400,  198,  198,  198,  198,
      198,  199,  377,  198,  198,  377,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  849,  198,
     1120,  370, 1499,  200,  201,  202,  203,  204,  205,  206,
      198,  207,  198,  208,  209,  210,  211,  198,  212,  213,
      214,  215,  198,  198,  198,  643,  643,  643,  198,  857,
      644,  216,  217,  218,  232,  233,  234,  655,  372,  458,
      655,  459,  459,  459,  459,  468,  468,  468,  468,  863,
      235,  235,  235,  461,  199,  225,  870,  226,  226,  226,

      226,  265,  265,  265,  265, 1132,  199, 1500,  398,  228,
      199,  461,  484,  484,  484,  484,  234,  234,  879,  397,
      234,  234,  397,  691,  450, 1138,  692,  228,  234,  451,
     1501,  234,  443,  234, 1142,  234,  236,  189,  437,  438,
      439,  199, 1502,  190,  411,  412,  413,  199,  191,  253,
      253,  253,  253,  254,  255,  885,  411,  412,  413,  893,
      411,  412,  413,  256,  257,  258,  259,  260,  261,  444,
      199,  192,  469, 1150,  193,  469,  194, 1503,  452,  897,
      382,  474,  445,  243,  243,  243,  243,  636,  195,  499,
      636,  411,  412,  413,  383,  196,  245,  411,  412,  413,

      253,  253,  253,  253,  453,  262,  500,  263,  263,  263,
      263,  247,  383,  668,  668,  248,  507,  507,  507,  507,
      411,  412,  413,  492, 1354,  240, 1510,  466,  240,  466,
      230,  249,  467,  467,  467,  467, 1511,  241,  493,  241,
      242, 1160,  243,  243,  243,  243,  564,  564,  564,  564,
      478, 1512,  475, 1362,  243,  243,  243,  243, 1519,  246,
     1520,  250,  251,  252,  291,  479,  476, 1369,  179,  248,
      171,  172,  173,  300, 1527,  301,  301,  301,  301,  293,
      407,  407,  407,  294,  476,  480,  952,  953,  494,  495,
      496,  286, 1528,  554,  286,  289,  289,  289,  289,  295,

      670,  670,  670,  287,  397,  287,  288,  397,  289,  289,
      289,  289, 1169,  677, 1529,  481,  482,  483, 1377,  302,
      678,  303,  303,  303,  303, 1530,  679, 1531,  398,  296,
      297,  298,  326,  326,  327,  328,  329,  326,  326,  326,
      330,  326,  330,  330,  330,  330,  326,  330,  330,  330,
      331,  331,  331,  326,  326,  326,  326,  330,  326,  326,
      326,  332,  326,  326,  326,  326,  326,  326,  332,  326,
      332,  330,  329,  330,  326,  326,  329,  329,  326,  332,
      329,  329,  326,  326,  326,  326,  326,  326,  329,  326,
      326,  329,  332,  329,  326,  329,  333,  326,  326,  330,

      326,  330,  326,  326,  326,  326,  326,  342,  343,  344,
      642,  344, 1176,  642,  344,  585,  585,  585,  585,  655,
      245, 1532,  655,  345,  345,  345, 1385,  486, 1537,  246,
      647,  647,  647,  647,  961,  247,  246,  962,  934,  248,
      934, 1538,  270,  935,  935,  344,  248, 1391,  344,  344,
      344,  935,  935,  344,  344,  249,  358,  358,  358,  358,
     1539,  344,  487,  572,  344, 1540,  344, 1182,  344,  346,
      353,  353,  353,  353,  653,  653,  653,  653,  573,  353,
      353,  353,  353,  935,  935,  250,  251,  252,  658,  658,
      658,  658,  488,  489,  490, 1541,  353,  353,  353,  353,

      353,  353,  355,  908,  356,  356,  917,  926,  357,  356,
      357, 1542, 1543,  358,  358,  358,  358,  245,  681,  682,
      683,  356, 1544, 1545,  502,  199,  246, 1546,  574,  575,
      576, 1547,  247,  246,  356, 1548,  248,  356, 1549,  270,
     1550, 1551,  555,  248,  289,  289,  289,  289,  648,  410,
      648,  672,  249,  649,  649,  649,  556,  636,  327,  503,
      636,  356,  342,  343,  344,  673,  344,  410,  652,  344,
      365,  365,  365,  365,  556,  411,  412,  413,  345,  345,
      345,  672,  250,  251,  252,  673,  360,  410,  672,  504,
      505,  506,  366,  673,  367,  367,  367,  367, 1018, 1030,

      344,  656, 1042,  344,  344,  344, 1048,  723,  344,  344,
      723, 1052,  379,  379,  379,  379,  344,  724,  657,  344,
     1060,  344, 1460,  344,  346,  414,  415,  416,  417,  418,
      419,  420, 1587,  421, 1588,  422,  423,  424,  425, 1287,
      426,  427,  428,  429,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
     1589,  462,  463,  463,  463,  463,  462,  462,  462,  462,
      462,  464,  464,  464,  465,  464,  464,  464,  464,  464,
      464,  464,  464,  462,  462,  462,  462,  462,  464,  464,
      464,  464,  465,  464,  464,  464,  464,  464,  464,  464,

      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  478,
      456,  456,  456,  456,  667,  667,  667,  667,  266, 1070,
      508,  508,  508,  508,  479,  470,  470,  470,  248, 1469,
      471,  529,  509,  529,  246, 1590,  530,  530,  530,  530,
      766,  767,  768,  532,  480, 1591,  269, 1295,  477, 1592,
      509, 1477,  246,  642,  342,  246,  642,  723,  533, 1593,
      723,  270,  248, 1594,  269,  248,  477,  724,  459,  459,
      459,  459, 1302,  246,  481,  482,  483,  511,  534,  270,
      666,  271, 1595,  248,  655,  372,  512,  655,  513,  513,

      513,  513,  514,  796,  797,  798,  515, 1079,  666,  271,
      516,  382, 1310,  384,  384,  384,  384, 1596,  535,  536,
      537,  272,  273,  274,  659,  383,  659, 1086,  516,  660,
      660,  660,  660,  737, 1489,  738,  738,  738,  738,  272,
      273,  274,  466,  383,  466, 1597, 1598,  667,  667,  667,
      667, 1318,  517,  518,  519,  462,  462,  462,  462,  462,
      520,  462,  521,  520,  462,  462,  462,  520,  520,  462,
      520, 1599,  462,  522,  522,  522,  522,  523,  462,  520,
      520,  524,  520,  520,  520,  525,  520,  520,  520,  520,
      520,  520,  520,  520,  462,  520,  462,  462,  462,  520,

      520,  520,  520,  525,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  462,  462,  462,  520,  462,  462,  526,  527,  528,
      545,  199,  796,  797,  798,  245, 1324,  199,  558,  246,
     1600,  199, 1092, 1108,  246,  247, 1120,  292,  974,  248,
      247,  974, 1132,  559,  248, 1138, 1142,  294,  975,  291,
     1150, 1504,  699,  698,  199,  546, 1601, 1602,  292,  976,
      249,  566,  976,  560,  293, 1354,  700, 1603,  294,  977,
      292,  411,  412,  413, 1160, 1513,  308,  411,  412,  413,
      294,  411,  412,  413,  295,  547,  548,  549,  545,  703,

      250,  251,  252,  561,  562,  563,  567,  246, 1604,  550,
      550,  550,  550,  247,  411,  412,  413,  248, 1605, 1362,
      291,  820,  821,  822,  296,  297,  298, 1606, 1521,  292,
      199,  580, 1607,  546, 1608,  293,  568,  569,  570,  294,
      292,  468,  468,  468,  468, 1369,  308,  539,  540,  541,
      294,  199, 1609, 1169,  607,  295,  607,  292,  610,  608,
      608,  608,  608,  547,  548,  549,  581,  292,  701,  702,
     1377,  557, 1610,  611,  864,  865,  866,  294,  199, 1176,
      411,  412,  413,  704, 1533,  296,  297,  298, 1611,  557,
      894,  895,  896,  612, 1612, 1385,  582,  583,  584,  558,

     1613,  411,  412,  413,  199,  705, 1391, 1614,  304, 1182,
      586,  586,  586,  586,  559,  894,  895,  896,  294, 1615,
      199, 1616,  587,  613,  614,  615,  307, 1617,  411,  412,
      413, 1618,  410,  307,  560,  292,  987,  199,  623,  987,
      587,  308,  292,  712,  672,  294,  988,  292,  308,  673,
      706,  410,  294,  293,  411,  412,  413,  294,  707,  199,
      672,  309,  709,  199,  561,  562,  563,  589,  309,  199,
      411,  412,  413,  624,  199,  673,  590,  199,  591,  591,
      591,  591,  592,  918,  919,  920,  593,  411,  412,  413,
      594,  310,  311,  312,  410,  708,  672,  673,  310,  311,

      312,  719,  721,  625,  626,  627,  410,  728,  594,  411,
      412,  413,  720,  411,  412,  413,  617,  618,  619,  411,
      412,  413,  672,  673,  411,  412,  413,  411,  412,  413,
      410,  672,  595,  596,  597,  462,  462,  462,  462,  462,
      598,  462,  599,  598,  462,  462,  462,  598,  598,  462,
      598,  673,  598,  600,  600,  600,  600,  601,  462,  598,
      598,  602,  598,  598,  598,  603,  598,  598,  598,  598,
      598,  598,  598,  598,  462,  598,  462,  462,  462,  598,
      598,  598,  598,  603,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,

      598,  462,  462,  462,  598,  462,  462,  604,  605,  606,
      623, 1460, 1633,  199,  649,  649,  649,  291, 1287,  292,
      199,  631,  631,  631,  631,  293,  292, 1469, 1634,  294,
     1295, 1477,  293,  760, 1635,  382,  294,  384,  384,  384,
      384,  265,  265,  265,  265,  624, 1302,  710,  761,  383,
      711,  199,  295, 1310,  722,  199, 1489, 1636,  199,  723,
     1318, 1324,  723,  411,  412,  413, 1504,  383,  760,  724,
      411,  412,  413, 1637, 1354,  625,  626,  627, 1513, 1638,
      199, 1362,  296,  297,  298,  353,  353,  353,  353, 1521,
      725,  726,  727, 1639,  353,  353,  353,  353,  762,  763,

      764,  411,  412,  413, 1369,  411,  412,  413,  411,  412,
      413,  353,  353,  353,  353,  353,  353,  671,  671,  671,
      671,  484,  484,  484,  484, 1377,  671,  671,  671,  671,
      411,  412,  413,  199,  733, 1533,  733, 1640, 1385,  734,
      734,  734,  734,  671,  671,  671,  671,  671,  671,  713,
      713,  713,  713,  713,  199,  713,  714,  782,  713,  713,
      713,  782, 1391,  713,  458,  713,  459,  459,  459,  459,
      410,  715,  713,  672,  673,  713,  729,  410,  461,  303,
      303,  303,  303,  411,  412,  413,  672,  673,  713, 1460,
      713,  714,  713,  730, 1469,  466,  461,  466, 1477, 1489,

      736,  736,  736,  736,  411,  412,  413,  783,  784,  785,
     1504,  783,  784,  785, 1513,  713,  713,  713, 1521,  713,
      713,  716,  717,  718,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
     1533,  462,  732,  732,  732,  732,  462,  462,  462,  462,
      462,  464,  464,  464,  465,  464,  464,  464,  464,  464,
      464,  464,  464,  462,  462,  462,  462,  462,  464,  464,
      464,  464,  465,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  458,

      751,  735,  735,  735,  735,  564,  564,  564,  564,  741,
      743,  741,  880,  461,  742,  742,  742,  742,  478, 1012,
     1641,  478, 1012,  637,  637,  637, 1454,  246,  638, 1013,
      246,  461,  511,  479, 1018,  472,  479,  248, 1641,  744,
      248,  472,  673,  513,  513,  513,  513,  514,  246,  672,
      410,  515,  511,  480,  270,  740,  480,  478,  248,  880,
      752,  673,  881,  882,  883,  511,  246,  514,  672,  246,
      410,  515,  479,  740,  745,  533,  248,  673,  672,  248,
      786,  486,  410,  481,  482,  483,  481,  482,  483,  673,
      246,  974,  480,  486,  974,  753,  270,  517,  518,  519,

      248,  975,  246,  672,  746,  747,  748,  410,  270,  881,
      882,  883,  248,  942,  942,  942,  487,  517,  518,  519,
      773, 1418,  481,  482,  483,  754,  755,  756,  487,  246,
      800,  801,  802, 1417,  502,  533, 1416,  511, 1415,  248,
     1414,  409,  502,  246,  409, 1413,  488,  489,  490,  270,
      409,  246,  786,  248, 1412,  774, 1411,  270,  488,  489,
      490,  248,  946,  946,  946,  839, 1410,  839,  639,  503,
      840,  840,  840,  840,  639, 1409,  529,  503,  529,  246,
     1408,  530,  530,  530,  530,  775,  776,  777, 1407,  803,
     1406,  803, 1405,  477,  804,  804,  804,  804,  782,  504,

      505,  506,  800,  801,  802, 1404,  645,  504,  505,  506,
      511,  477,  645,  246,  663,  530,  530,  530,  530,  512,
      663,  780,  780,  780,  780,  514, 1403,  477,  409,  515,
      670,  670,  670,  516,  409,  808,  976,  808,  532,  976,
      809,  809,  809,  809,  782,  477,  977,  246,  783,  784,
      785,  516,  987,  533,  936,  987,  936,  248,  622,  937,
      937,  937,  988, 1399,  607,  532,  607,  292,  926,  608,
      608,  608,  608,  534,  246,  517,  518,  519,  478,  651,
      533,  557,  651,  589,  248,  616,  609,  266,  651,  508,
      508,  508,  508,  479,  783,  784,  785,  248,  592,  557,

      534,  509,  593,  535,  536,  537,  532,  643,  643,  643,
     1398,  589,  644,  480,  472,  246,  472,  917,  829,  509,
      472,  533, 1031, 1032, 1033,  248,  884,  246, 1397,  908,
      535,  536,  537,  479,  766,  767,  768,  248, 1396,  858,
     1395,  534, 1182,  481,  482,  483,  788, 1184,  595,  596,
      597, 1384,  589,  830,  859,  512, 1383,  789,  789,  789,
      789,  790, 1043, 1044, 1045,  515, 1176,  884, 1376,  791,
     1375,  535,  536,  537,  858, 1169,  898,  899,  900,  939,
      545,  781,  939,  831,  832,  833, 1361,  791,  939,  246,
      647,  647,  647,  647,  651,  247, 1049, 1050, 1051,  248,

      651,  545, 1360, 1160,  860,  861,  862, 1053, 1054, 1055,
      246,  792,  793,  794,  788,  546,  247,  898,  899,  900,
      248,  588, 1353,  512,  897,  807,  807,  807,  807,  790,
      796,  797,  798,  515, 1352,  946,  546,  791,  947,  558,
     1012,  946,  558, 1012,  947,  547,  548,  549,  292,  781,
     1013,  292, 1351,  939,  559,  791, 1150,  559,  294,  939,
     1350,  294,  468,  468,  468,  468,  547,  548,  549,  660,
      660,  660,  660,  893,  560, 1240,  782,  560, 1240,  792,
      793,  794,  811, 1349,  292, 1241,  608,  608,  608,  608,
      885,  812,  782,  813,  813,  813,  813,  814,  557, 1348,

     1347,  815, 1142, 1346,  561,  562,  563,  561,  562,  563,
      842,  658,  658,  658,  658, 1345,  557,  480,  639,  292,
      639,  558, 1138,  383,  639,  308,  783,  784,  785,  294,
      292,  660,  660,  660,  660, 1344,  559,  820,  821,  822,
      294,  383,  783,  784,  785,  843,  879,  816,  817,  818,
      829, 1015, 1015, 1015, 1015, 1343,  560, 1254, 1342,  246,
     1254,  836,  836,  836,  836,  479,  466, 1255,  466,  248,
     1132,  736,  736,  736,  736,  844,  845,  846,  579,  734,
      734,  734,  734, 1341,  850,  830,  561,  562,  563,  566,
      870,  460,  571,  292,  735,  735,  735,  735,  292,  611,

     1121, 1122, 1123,  294,  308,  901, 1340,  901,  294,  460,
      902,  902,  902,  902,  880,  831,  832,  833,  589,  851,
      742,  742,  742,  742,  567,  566,  864,  865,  866,  591,
      591,  591,  591,  592,  292,  863, 1645,  593,  871, 1645,
      308,  838, 1199,  580,  294, 1339, 1645,  292, 1199,  852,
      853,  854,  292,  611,  568,  569,  570,  294,  308,  838,
      567,  580,  294,  857,  881,  882,  883, 1133, 1134, 1135,
      292, 1200, 1645,  872, 1338, 1645,  308, 1200,  581, 1337,
      294,  790, 1645,  595,  596,  597,  736,  736,  736,  736,
      568,  569,  570, 1120,  565,  880,  581,  737,  460,  738,

      738,  738,  738,  873,  874,  875, 1336, 1401,  582,  583,
      584,  849,  906, 1401,  906,  610,  460,  907,  907,  907,
      907,  880,  557, 1335,  292,  841,  582,  583,  584,  589,
      611,  783,  784,  785,  294, 1139, 1140, 1141,  590, 1334,
      878,  878,  878,  878,  592,  881,  882,  883,  593, 1402,
      612, 1645,  594, 1645,  458, 1402,  736,  736,  736,  736,
     1093, 1333, 1108,  760,  807,  807,  807,  807,  610,  544,
      594,  881,  882,  883, 1332, 1094,  828,  292,  761, 1643,
      613,  614,  615,  611, 1645, 1643, 1645,  294,  538, 1016,
     1016, 1016, 1016,  880,  595,  596,  597,  558,  760,  840,

      840,  840,  840,  612,  610,  531,  304, 1331,  586,  586,
      586,  586,  559,  292, 1645, 1644,  294, 1645,  819,  611,
      587, 1644, 1330,  294, 1645, 1095, 1096, 1097,  762,  763,
      764,  927,  560,  613,  614,  615,  810, 1329,  587,  612,
      292, 1328, 1092,  881,  882,  883,  559, 1143, 1144, 1145,
      294, 1645, 1094, 1645,  458, 1317,  459,  459,  459,  459,
      760, 1433,  561,  562,  563,  886,  928, 1316,  461,  613,
      614,  615,  623, 1086,  590,  761,  887,  887,  887,  887,
      888,  292,  974, 1309,  593,  974,  461,  293,  889, 1308,
     1079,  294,  975,  623, 1294,  760,  929,  930,  931,  888,

      879, 1293,  292,  199, 1070,  510,  889,  624,  293,  894,
      895,  896,  294,  976, 1645, 1286,  976, 1645,  799, 1645,
     1285, 1284, 1645,  977, 1645,  762,  763,  764,  624, 1645,
      890,  891,  892,  886,  199, 1060, 1283,  625,  626,  627,
      199,  795,  590, 1282,  905,  905,  905,  905,  888,  881,
      882,  883,  593,  411,  412,  413,  889,  787,  625,  626,
      627, 1435, 1645, 1281,  978, 1645, 1645, 1280,  879, 1645,
     1052, 1279, 1645, 1278,  889, 1048, 1645, 1067, 1067, 1067,
     1067, 1277,  781,  199,  411,  412,  413,  199, 1276,  787,
      411,  412,  413, 1069, 1069, 1069, 1069, 1275,  890,  891,

      892,  909,  918,  919,  920,  787, 1183,  787, 1042,  979,
      910,  980,  911,  911,  911,  911,  912,  501, 1274, 1645,
      913, 1184, 1645,  787,  905,  905,  905,  905,  772, 1645,
      937,  937,  937,  411,  412,  413,  560,  411,  412,  413,
      199, 1645,  491, 1273, 1645,  937,  937,  937,  765, 1645,
     1061, 1645, 1645, 1645, 1272,  645, 1645,  645,  759, 1645,
     1271,  645,  199, 1645,  858,  782,  914,  915,  916,  927,
      199, 1185, 1186, 1187,  199,  981, 1270, 1030,  292,  859,
      940,  940,  940,  940,  559, 1061, 1645,  485,  294, 1645,
      411,  412,  413, 1269,  982, 1240, 1645,  751, 1240,  858,

      983,  984,  477,  199,  928, 1241, 1268,  199,  942,  942,
      942,  743,  411,  412,  413, 1062, 1063, 1064, 1267, 1266,
      411,  412,  413, 1018,  411,  412,  413,  673,  672,  860,
      861,  862, 1224,  985,  929,  930,  931,  943,  943,  943,
      943, 1645, 1436,  410, 1645, 1436,  943,  943,  943,  943,
      673, 1645, 1437,  411,  412,  413,  672,  411,  412,  413,
      410, 1221,  199,  943,  943,  943,  943,  943,  943,  671,
      671,  671,  671,  987,  858, 1220,  987, 1219,  671,  671,
      671,  671, 1645,  988,  199, 1645, 1031, 1032, 1033,  859,
     1218, 1217, 1645, 1216,  199,  671,  671,  671,  671,  671,

      671,  986, 1215,  199, 1214, 1645, 1213, 1212, 1645,  858,
     1211, 1210,  411,  412,  413, 1645, 1209, 1645, 1208, 1207,
     1645, 1645, 1223,  199, 1645,  989,  199, 1645, 1043, 1044,
     1045, 1645,  199, 1206,  411,  412,  413, 1205,  199,  860,
      861,  862,  199, 1204,  411,  412,  413, 1203, 1202, 1645,
     1201,  410, 1645,  411,  412,  413, 1197, 1233, 1645, 1645,
      313, 1645, 1645, 1222,  990, 1645, 1196,  991, 1645,  622,
      199, 1195, 1645,  411,  412,  413,  411,  412,  413,  199,
     1194,  926,  411,  412,  413, 1049, 1050, 1051,  411,  412,
      413,  306,  411,  412,  413,  414,  415,  416,  417,  418,

      419,  420,  993,  421, 1193,  422,  423,  424,  425,  992,
      426,  427,  428,  429,  616, 1438, 1645, 1192,  609, 1645,
      411,  412,  413, 1053, 1054, 1055, 1645, 1191, 1190,  411,
      412,  413,  994,  994,  994,  994,  994,  199,  994,  995,
      917,  994,  994,  994, 1189, 1188,  994, 1645,  994,  908,
     1645, 1325, 1326, 1327,  996,  994, 1645, 1645,  994, 1645,
     1121, 1122, 1123, 1001, 1158,  588, 1645, 1156,  199, 1155,
      897,  994, 1149,  994,  995,  994, 1148,  199, 1157, 1157,
     1157, 1157, 1069, 1069, 1069, 1069,  997,  411,  412,  413,
      885, 1645,  893, 1147, 1645, 1146, 1010,  885,  994,  994,

      994, 1645,  994,  994,  998,  999, 1000, 1137,  885,  199,
     1136,  879,  199, 1002, 1012, 1131,  199, 1012,  411,  412,
      413, 1133, 1134, 1135, 1013,  579, 1130,  411,  412,  413,
     1003, 1003, 1003, 1003, 1003,  199, 1003, 1004, 1011, 1003,
     1003, 1003, 1129,  870, 1003,  290, 1003, 1225, 1243, 1139,
     1140, 1141, 1005, 1003, 1128, 1645, 1003,  571, 1645,  411,
      412,  413,  411,  412,  413, 1645,  411,  412,  413, 1003,
     1127, 1003, 1004, 1003, 1126,  808,  199,  808, 1006,  863,
      809,  809,  809,  809,  782,  411,  412,  413, 1125,  804,
      804,  804,  804,  782, 1124,  857, 1003, 1003, 1003,  511,

     1003, 1003, 1007, 1008, 1009, 1119, 1014,  565,  512, 1118,
     1017, 1017, 1017, 1017,  514, 1143, 1144, 1145,  515, 1392,
     1393, 1394, 1019, 1490, 1491, 1492,  411,  412,  413, 1645,
     1117,  246, 1645,  744,  783,  784,  785,  533,  849, 1645,
      744,  248,  246,  783,  784,  785, 1116,  557,  270,  246,
     1439, 1115,  248, 1439, 1114,  270,  841, 1020,  752,  248,
     1440,  752,  275, 1106,  517,  518,  519,  246,  745, 1645,
      246,  544, 1645,  533, 1434,  745,  533,  248, 1105, 1645,
      248,  199,  752, 1159, 1159, 1159, 1159, 1021, 1022, 1023,
     1104,  246, 1442,  753,  773, 1442,  753,  533,  746,  747,

      748,  248, 1443,  246,  828,  746,  747,  748, 1254,  533,
      268, 1254,  199,  248, 1103,  199,  538,  753, 1255, 1102,
     1244,  773,  531,  754,  755,  756,  754,  755,  756,  774,
      246,  411,  412,  413, 1101,  773,  533, 1325, 1326, 1327,
      248, 1245, 1645, 1645,  246, 1645, 1645,  754,  755,  756,
      533, 1100, 1645, 1645,  248, 1242,  774,  819, 1099,  775,
      776,  777,  411,  412,  413,  411,  412,  413, 1098,  803,
      774,  803,  810, 1068,  804,  804,  804,  804,  782,  809,
      809,  809,  809,  782,  510, 1066,  775,  776,  777, 1071,
     1447,  199, 1065, 1159, 1159, 1159, 1159,  799,  246, 1059,

      775,  776,  777,  788, 1072,  885, 1058,  795,  248, 1057,
     1151, 1056,  512,  787,  807,  807,  807,  807,  790, 1534,
     1535, 1536,  515,  885, 1073,  880,  791, 1047,  783,  784,
      785,  478, 1046,  783,  784,  785,  781, 1041,  781,  501,
      246,  411,  412,  413,  791, 1151, 1077, 1040,  511,  199,
      248, 1039,  199,  772, 1074, 1075, 1076, 1645,  244, 1078,
     1078, 1078, 1078,  514, 1038,  491,  480,  515,  792,  793,
      794,  788, 1392, 1393, 1394, 1152, 1153, 1154, 1252, 1037,
      512, 1036,  789,  789,  789,  789,  790,  765, 1035, 1256,
      515, 1034,  199,  759,  791, 1029,  481,  482,  483,  411,

      412,  413,  411,  412,  413,  485,  781, 1490, 1491, 1492,
     1087, 1028,  791,  517,  518,  519, 1027,  751,  199,  246,
     1240, 1026,  477, 1240, 1025,  270,  906, 1024,  906,  248,
     1241,  907,  907,  907,  907,  880,  792,  793,  794, 1080,
     1253,  199,  411,  412,  413, 1088,  829,  743,  812,  230,
     1081, 1081, 1081, 1081, 1082,  246, 1645, 1645,  815, 1645,
     1645,  479,  198,  829,  673,  248, 1645, 1645,  411,  412,
      413,  672,  246,  410, 1073, 1089, 1090, 1091,  479,  973,
      829,  830,  248,  972,  971,  881,  882,  883,  970,  246,
      969,  411,  412,  413,  968,  479,  967,  966,  830,  248,

     1425,  965,  964, 1425, 1083, 1084, 1085,  589,  963,  960,
     1426,  831,  832,  833, 1441,  830,  590, 1445, 1107, 1107,
     1107, 1107,  592, 1109,  959,  956,  593,  955,  831,  832,
      833,  954,  292,  951,  842, 1534, 1535, 1536,  611,  950,
      949, 1436,  294,  292, 1436,  831,  832,  833,  829,  308,
      948, 1437,  410,  294,  199,  945,  842,  246, 1110,  836,
      836,  836,  836,  479,  944,  292,  347,  248,  644,  843,
      334,  308,  595,  596,  597,  294, 1257,  850,  638,  320,
      941,  313,  933,  830, 1439,  932,  292, 1439, 1111, 1112,
     1113,  843,  611,  622, 1440,  925,  294,  306,  924,  844,

      845,  846,  923,  616,  411,  412,  413,  922, 1645,  921,
      850, 1645,  851,  831,  832,  833,  609,  850, 1645,  292,
      904,  844,  845,  846, 1442,  611,  292, 1442,  903,  294,
      588,  871,  611,  884, 1443,  904,  294,  903,  871,  588,
      292,  884,  852,  853,  854,  851,  611,  292, 1645,  199,
      294, 1645,  851,  611,  901,  871,  901,  294, 1645,  902,
      902,  902,  902,  880,  292,  877,  872, 1444, 1645,  876,
      611, 1645,  579,  872,  294,  852,  853,  854, 1645,  199,
      869, 1258,  852,  853,  854,  902,  902,  902,  902,  880,
      872,  290, 1425,  868,  867, 1425,  873,  874,  875,  411,

      412,  413, 1426,  873,  874,  875,  907,  907,  907,  907,
      880, 1265,  571,  881,  882,  883, 1645,  573,  856, 1645,
      873,  874,  875,  886,  855,  565, 1645,  848, 1446,  411,
      412,  413,  590,  847,  905,  905,  905,  905,  888,  881,
      882,  883,  593,  557,  283, 1436,  889,  837, 1436,  458,
     1161,  734,  734,  734,  734, 1437,  275,  558,  879,  292,
      881,  882,  883,  835,  889, 1162,  292,  834,  589,  294,
      544,  827, 1167,  268,  826,  825,  294, 1645,  538, 1168,
     1168, 1168, 1168,  592,  824, 1163, 1061,  593,  890,  891,
      892,  886,  560, 1645,  823, 1016, 1016, 1016, 1016,  531,

      590,  782,  887,  887,  887,  887,  888,  806, 1439, 1645,
      593, 1439, 1645,  805,  889, 1164, 1165, 1166, 1440, 1645,
      510, 1061,  561,  562,  563,  786,  879,  806, 1442,  805,
     1177, 1442,  889,  595,  596,  597,  510,  786, 1443,  292,
     1254,  779,  778, 1254, 1645,  308,  501, 1645,  771,  294,
     1255, 1062, 1063, 1064, 1645,  244,  890,  891,  892, 1170,
      770,  199,  769,  491,  493, 1178,  927,  758,  910, 1558,
     1171, 1171, 1171, 1171, 1172,  292, 1585, 1645,  913, 1585,
     1645,  559,  757,  927,  485,  294, 1586, 1645,  750,  749,
      477,  237,  292,  471, 1163, 1179, 1180, 1181,  559,  731,

      927,  928,  294,  198, 1572, 1061,  697,  696, 1019,  292,
      693,  411,  412,  413,  690,  559,  687,  246,  928,  294,
      782,  686,  685,  533, 1173, 1174, 1175,  248,  684,  680,
      676,  929,  930,  931, 1645,  928, 1585, 1645,  673, 1585,
     1061, 1565,  672, 1020, 1645,  410, 1586,  662,  929,  930,
      931, 1301, 1301, 1301, 1301,  782,  661,  628, 1368, 1368,
     1368, 1368,  880,  646,  347,  929,  930,  931,  927,  640,
     1062, 1063, 1064, 1021, 1022, 1023, 1019,  292,  334,  940,
      940,  940,  940,  559, 1319,  246,  634,  294,  320, 1019,
     1645,  533,  633, 1645,  632,  248,  313,  621,  246, 1320,

     1645,  620,  306,  928,  533,  783,  784,  785,  248,  578,
      577, 1020,  881,  882,  883, 1645,  290, 1151, 1645, 1319,
     1625,  553,  283, 1625, 1020, 1645,  552,  551,  275,  254,
     1626,  543,  880,  929,  930,  931,  943,  943,  943,  943,
      542, 1021, 1022, 1023,  268,  943,  943,  943,  943, 1321,
     1322, 1323, 1151,  498, 1021, 1022, 1023, 1151,  497,  244,
      473, 1071,  943,  943,  943,  943,  943,  943, 1198, 1198,
      246, 1198,  880, 1198,  237,  230, 1072, 1198, 1198, 1198,
      248, 1198, 1152, 1153, 1154, 1645,  455,  454, 1645, 1198,
     1071, 1645, 1151,  198, 1645, 1645, 1073, 1645,  175,  246,

     1645, 1645,  349,  348,  347, 1072, 1198, 1645, 1198,  248,
     1301, 1301, 1301, 1301,  782, 1368, 1368, 1368, 1368,  880,
      388,  387, 1152, 1153, 1154, 1073, 1074, 1075, 1076,  386,
      385,  378,  375, 1198,  371, 1198, 1198, 1226, 1226, 1226,
     1226, 1226, 1585, 1226, 1227, 1585, 1226, 1226, 1226,  368,
      354, 1226, 1586, 1226,  349, 1074, 1075, 1076, 1625, 1228,
     1226, 1625,  348, 1226,  783,  784,  785,  347, 1626,  881,
      882,  883,  350,  349, 1645,  348, 1226, 1645, 1226, 1227,
     1226,  347, 1288, 1625, 1645, 1229, 1625,  340,  337, 1645,
      336,  246, 1645, 1626,  335,  334,  325,  270,  322, 1645,

      321,  248,  320, 1226, 1226, 1226,  299, 1226, 1226, 1230,
     1231, 1232, 1234, 1234, 1234, 1234, 1234, 1289, 1234, 1235,
      285, 1234, 1234, 1234,  284,  283, 1234,  264, 1234,  239,
      238,  237,  230,  219, 1236, 1234,  188,  175, 1234,  174,
     1645, 1071, 1645, 1642, 1642, 1642, 1645, 1290, 1291, 1292,
      246, 1234, 1645, 1234, 1235, 1234, 1072, 1386, 1645, 1645,
      248, 1642, 1642, 1642, 1642, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1387, 1645, 1645, 1645, 1073, 1645, 1234, 1234,
     1234, 1645, 1234, 1234, 1237, 1238, 1239, 1246, 1246, 1246,
     1246, 1246, 1386, 1246, 1247, 1645, 1246, 1246, 1246, 1645,

     1645, 1246, 1645, 1246, 1645, 1645, 1074, 1075, 1076, 1248,
     1246, 1645, 1645, 1246, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1388, 1389, 1390, 1645, 1246, 1645, 1246, 1247,
     1246, 1645, 1645, 1645, 1319, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1320,
     1645, 1645, 1645, 1246, 1246, 1246, 1645, 1246, 1246, 1249,
     1250, 1251,  414,  415,  416,  417,  418,  419,  420, 1319,
      421, 1319,  422,  423,  424,  425, 1645,  426,  427,  428,
      429, 1259, 1259, 1259, 1259, 1259, 1320, 1259, 1260, 1645,
     1259, 1259, 1259, 1296, 1645, 1259, 1071, 1259, 1645, 1321,

     1322, 1323,  246, 1261, 1259,  246, 1319, 1259,  270, 1645,
     1645, 1072,  248, 1645, 1645,  248, 1645, 1645, 1645, 1645,
     1259, 1645, 1259, 1260, 1259, 1645, 1645, 1645, 1297, 1645,
     1645, 1073, 1645, 1645, 1645, 1645, 1321, 1322, 1323, 1645,
     1645, 1645, 1386, 1645, 1645, 1645, 1645, 1259, 1259, 1259,
     1645, 1259, 1259, 1262, 1263, 1264,  788, 1387, 1298, 1299,
     1300, 1074, 1075, 1076, 1071,  512, 1645, 1069, 1069, 1069,
     1069,  790, 1645,  246, 1645,  515, 1645, 1386, 1645, 1082,
     1645, 1303, 1645,  248, 1645, 1645, 1645, 1645, 1645, 1645,
      246,  781, 1645, 1645, 1645, 1645,  270, 1645, 1645, 1073,

      248, 1645, 1645, 1645, 1645, 1645, 1645, 1388, 1389, 1390,
     1386, 1645, 1645, 1645, 1645, 1645, 1304, 1645, 1645, 1645,
     1645,  792,  793,  794,  788, 1387, 1645, 1645, 1645, 1074,
     1075, 1076, 1645,  512, 1645, 1067, 1067, 1067, 1067,  790,
     1645, 1645, 1645,  515, 1645, 1386, 1305, 1306, 1307, 1311,
     1645, 1645, 1087, 1645, 1645, 1645, 1645, 1645,  246,  781,
     1645,  246, 1645, 1087,  533, 1645, 1645,  270,  248, 1645,
     1645,  248,  246, 1645, 1645, 1388, 1389, 1390,  270, 1645,
     1645, 1645,  248, 1645, 1312, 1645, 1645, 1088, 1645,  792,
      793,  794, 1080, 1645, 1645, 1645, 1645, 1645, 1088, 1645,

     1645,  812, 1645, 1081, 1081, 1081, 1081, 1082, 1645, 1645,
     1645,  815, 1645, 1645, 1313, 1314, 1315, 1089, 1090, 1091,
     1645, 1645, 1645, 1645, 1645, 1645, 1109, 1073, 1089, 1090,
     1091, 1109, 1645, 1645, 1645,  292, 1645, 1645, 1645, 1645,
      292,  611, 1645, 1645, 1645,  294,  611, 1645, 1645, 1645,
      294, 1645, 1645, 1645, 1645, 1645, 1645, 1083, 1084, 1085,
      886, 1110, 1645, 1645, 1645, 1645, 1110, 1109, 1645,  590,
     1645, 1159, 1159, 1159, 1159,  888,  292, 1645, 1645,  593,
     1645, 1645,  611, 1645, 1645, 1645,  294, 1645, 1645, 1645,
     1645, 1111, 1112, 1113, 1161,  879, 1111, 1112, 1113, 1645,

     1645, 1161, 1110,  292, 1645, 1645, 1645, 1645, 1645, 1162,
      292, 1645, 1645,  294, 1645, 1645, 1162, 1645, 1645, 1645,
      294, 1645, 1355, 1645, 1645,  890,  891,  892, 1645, 1163,
     1645,  292, 1111, 1112, 1113,  886, 1163,  308, 1645, 1645,
     1645,  294, 1645, 1161,  590, 1645, 1157, 1157, 1157, 1157,
      888, 1645,  292, 1645,  593, 1645, 1363, 1356, 1162, 1164,
     1165, 1166,  294, 1645, 1161,  292, 1164, 1165, 1166, 1645,
      879,  308, 1645,  292, 1645,  294, 1645, 1161, 1163, 1162,
     1645, 1645, 1645,  294, 1645, 1645,  292, 1357, 1358, 1359,
     1645, 1364, 1172, 1645, 1645, 1645,  294, 1645, 1645, 1163,

      890,  891,  892, 1645, 1645, 1370, 1645, 1645, 1164, 1165,
     1166, 1645, 1163, 1645,  292, 1645, 1645, 1378, 1645, 1645,
      308, 1365, 1366, 1367,  294, 1645,  292, 1645, 1645, 1164,
     1165, 1166,  611, 1645, 1645, 1645,  294, 1645, 1645, 1645,
     1371, 1645, 1164, 1165, 1166, 1170, 1645, 1645, 1645, 1645,
     1645, 1645, 1379, 1645,  910, 1645, 1171, 1171, 1171, 1171,
     1172, 1645, 1645, 1645,  913, 1645, 1177, 1645, 1645, 1645,
     1372, 1373, 1374, 1645, 1645,  292, 1645, 1645, 1177, 1645,
     1163,  308, 1380, 1381, 1382,  294, 1645,  292, 1645, 1645,
     1645, 1645, 1645,  308, 1645, 1645, 1645,  294, 1645, 1461,

     1645, 1178, 1645, 1645, 1645, 1645, 1288, 1645,  246, 1645,
     1173, 1174, 1175, 1178,  533,  246, 1645, 1645,  248, 1645,
     1645,  270, 1645, 1645, 1645,  248, 1645, 1645, 1645, 1645,
     1645, 1179, 1180, 1181, 1462, 1645, 1645, 1645, 1645, 1288,
     1645, 1289, 1645, 1179, 1180, 1181, 1400, 1400,  246, 1400,
     1645, 1400, 1645, 1645,  270, 1400, 1400, 1400,  248, 1400,
     1645, 1645, 1645, 1645, 1463, 1464, 1465, 1400, 1470, 1645,
     1645, 1290, 1291, 1292, 1289, 1645, 1645,  246, 1645, 1645,
     1645, 1645, 1645,  533, 1400, 1645, 1400,  248, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1471, 1290, 1291, 1292, 1645, 1645, 1645,
     1645, 1400, 1645, 1400, 1400, 1419, 1419, 1419, 1419, 1419,
     1645, 1419, 1420, 1645, 1419, 1419, 1419, 1645, 1645, 1419,
     1645, 1419, 1645, 1472, 1473, 1474, 1645, 1421, 1419, 1645,
     1645, 1419, 1645, 1645, 1296, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645,  246, 1419, 1645, 1419, 1420, 1419,  270,
     1645, 1645, 1645,  248, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1297,
     1645, 1419, 1419, 1419, 1645, 1419, 1419, 1422, 1423, 1424,
     1645, 1425, 1645, 1645, 1425, 1645, 1645, 1645, 1645, 1645,

     1645, 1426, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1298,
     1299, 1300,  199, 1645, 1645, 1645, 1645, 1296, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645,  246, 1645, 1645, 1645,
     1645, 1645,  270, 1645, 1645, 1478,  248, 1645, 1645, 1645,
     1645, 1645, 1645, 1645,  246, 1645, 1645, 1645, 1645, 1645,
      533, 1645, 1297, 1645,  248, 1645, 1645, 1645, 1645, 1645,
     1645, 1645,  411,  412,  413, 1427, 1427, 1427, 1427, 1427,
     1479, 1427, 1428, 1645, 1427, 1427, 1427, 1645, 1645, 1427,
     1645, 1427, 1298, 1299, 1300, 1645, 1645, 1429, 1427, 1645,
     1645, 1427, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1480, 1481, 1482, 1645, 1427, 1645, 1427, 1428, 1427, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1427, 1427, 1427, 1645, 1427, 1427, 1430, 1431, 1432,
      414,  415,  416,  417,  418,  419,  420, 1645,  421, 1645,
      422,  423,  424,  425, 1645,  426,  427,  428,  429, 1448,
     1448, 1448, 1448, 1448, 1645, 1448, 1449, 1645, 1448, 1448,
     1448, 1303, 1645, 1448, 1303, 1448, 1645, 1645, 1645, 1645,
      246, 1450, 1448,  246, 1645, 1448,  270, 1645, 1311,  270,
      248, 1645, 1645,  248, 1645, 1645, 1645,  246, 1448, 1311,

     1448, 1449, 1448,  533, 1645, 1645, 1304,  248,  246, 1304,
     1645, 1645, 1645, 1645,  533, 1645, 1645, 1645,  248, 1645,
     1645, 1645, 1645, 1312, 1645, 1448, 1448, 1448, 1645, 1448,
     1448, 1451, 1452, 1453, 1312, 1645, 1305, 1306, 1307, 1305,
     1306, 1307, 1311, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645,  246, 1645, 1313, 1314, 1315, 1645,  533, 1645, 1505,
     1645,  248, 1645, 1645, 1313, 1314, 1315, 1355,  292, 1645,
     1355, 1645, 1645, 1645,  611, 1645,  292, 1312,  294,  292,
     1645, 1514,  308, 1645, 1363,  308,  294, 1645, 1645,  294,
      292, 1645, 1645,  292, 1506, 1363,  611, 1645, 1645,  308,

      294, 1645, 1356,  294,  292, 1356, 1645, 1313, 1314, 1315,
      308, 1645, 1645, 1645,  294, 1645, 1515, 1645, 1645, 1364,
     1645, 1645, 1645, 1645, 1507, 1508, 1509, 1645, 1645, 1645,
     1364, 1645, 1357, 1358, 1359, 1357, 1358, 1359, 1645, 1645,
     1645, 1645, 1645, 1645, 1522, 1645, 1516, 1517, 1518, 1365,
     1366, 1367, 1645,  292, 1645, 1370, 1645, 1645, 1370,  611,
     1365, 1366, 1367,  294,  292, 1645, 1378,  292, 1645, 1378,
      308, 1645, 1645,  308,  294,  292, 1645,  294,  292, 1523,
     1378,  611, 1645, 1645,  611,  294, 1645, 1645,  294,  292,
     1371, 1645, 1645, 1371, 1645,  611, 1645, 1645, 1645,  294,

     1645, 1379, 1645, 1645, 1379, 1645, 1645, 1645, 1645, 1524,
     1525, 1526, 1645, 1645, 1645, 1379, 1645, 1645, 1645, 1645,
     1372, 1373, 1374, 1372, 1373, 1374, 1645, 1645, 1645, 1645,
     1645, 1380, 1381, 1382, 1380, 1381, 1382, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1380, 1381, 1382,  414,  415,
      416,  417,  418,  419,  420, 1645,  421, 1645,  422,  423,
      424,  425, 1645,  426,  427,  428,  429, 1552, 1552, 1552,
     1552, 1552, 1645, 1552, 1553, 1645, 1552, 1552, 1552, 1645,
     1645, 1552, 1645, 1552, 1645, 1645, 1645, 1645, 1645, 1554,
     1552, 1645, 1645, 1552, 1645, 1645, 1461, 1645, 1645, 1645,

     1645, 1645, 1645, 1645, 1645,  246, 1552, 1645, 1552, 1553,
     1552,  533, 1645, 1645, 1645,  248, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1462, 1645, 1552, 1552, 1552, 1645, 1552, 1552, 1555,
     1556, 1557, 1559, 1559, 1559, 1559, 1559, 1645, 1559, 1560,
     1645, 1559, 1559, 1559, 1645, 1645, 1559, 1645, 1559, 1645,
     1645, 1463, 1464, 1465, 1561, 1559, 1645, 1645, 1559, 1645,
     1645, 1461, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
      246, 1559, 1645, 1559, 1560, 1559,  533, 1645, 1645, 1645,
      248, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1645, 1645, 1645, 1462, 1645, 1559, 1559,
     1559, 1645, 1559, 1559, 1562, 1563, 1564, 1566, 1566, 1566,
     1566, 1566, 1645, 1566, 1567, 1645, 1566, 1566, 1566, 1645,
     1645, 1566, 1645, 1566, 1645, 1645, 1463, 1464, 1465, 1568,
     1566, 1645, 1645, 1566, 1645, 1645, 1461, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645,  246, 1566, 1645, 1566, 1567,
     1566,  533, 1645, 1645, 1645,  248, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1462, 1645, 1566, 1566, 1566, 1645, 1566, 1566, 1569,
     1570, 1571, 1573, 1573, 1573, 1573, 1573, 1645, 1573, 1574,

     1645, 1573, 1573, 1573, 1645, 1645, 1573, 1645, 1573, 1645,
     1645, 1463, 1464, 1465, 1575, 1573, 1645, 1645, 1573, 1645,
     1645, 1470, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
      246, 1573, 1645, 1573, 1574, 1573,  533, 1645, 1645, 1645,
      248, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1471, 1645, 1573, 1573,
     1573, 1645, 1573, 1573, 1576, 1577, 1578, 1579, 1579, 1579,
     1579, 1579, 1645, 1579, 1580, 1645, 1579, 1579, 1579, 1645,
     1645, 1579, 1470, 1579, 1645, 1470, 1472, 1473, 1474, 1581,
     1579,  246, 1645, 1579,  246, 1645, 1478,  533, 1645, 1645,

      533,  248, 1645, 1645,  248,  246, 1579, 1478, 1579, 1580,
     1579,  533, 1645, 1645, 1645,  248,  246, 1471, 1645, 1645,
     1471, 1645,  533, 1645, 1645, 1645,  248, 1645, 1645, 1645,
     1645, 1479, 1645, 1579, 1579, 1579, 1645, 1579, 1579, 1582,
     1583, 1584, 1479, 1645, 1645, 1478, 1645, 1472, 1473, 1474,
     1472, 1473, 1474, 1645,  246, 1645, 1505, 1645, 1645, 1645,
      533, 1480, 1481, 1482,  248,  292, 1645, 1505, 1645, 1645,
     1505,  611, 1480, 1481, 1482,  294,  292, 1645, 1514,  292,
     1479, 1514,  611, 1645, 1645,  611,  294,  292, 1645,  294,
      292, 1506, 1645,  611, 1645, 1645,  611,  294, 1645, 1645,

      294, 1645, 1506, 1645, 1645, 1506, 1645, 1645, 1645, 1645,
     1480, 1481, 1482, 1515, 1645, 1645, 1515, 1645, 1645, 1645,
     1645, 1507, 1508, 1509, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1507, 1508, 1509, 1507, 1508, 1509, 1645, 1645,
     1514, 1645, 1645, 1516, 1517, 1518, 1516, 1517, 1518,  292,
     1645, 1522, 1645, 1645, 1522,  611, 1645, 1645, 1645,  294,
      292, 1645, 1522,  292, 1645, 1645,  611, 1645, 1645,  611,
      294,  292, 1645,  294, 1645, 1515, 1645,  611, 1645, 1645,
     1645,  294, 1645, 1645, 1645, 1645, 1523, 1645, 1645, 1523,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1523, 1645, 1645,

     1645, 1645, 1645, 1645, 1645, 1516, 1517, 1518, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1524, 1525, 1526, 1524,
     1525, 1526, 1645, 1645, 1645, 1645, 1645, 1524, 1525, 1526,
     1619, 1619, 1619, 1619, 1619, 1645, 1619, 1620, 1645, 1619,
     1619, 1619, 1645, 1645, 1619, 1645, 1619, 1645, 1645, 1645,
     1645, 1645, 1621, 1619, 1645, 1645, 1619, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1619,
     1645, 1619, 1620, 1619, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1619, 1619, 1619, 1645,

     1619, 1619, 1622, 1623, 1624, 1627, 1627, 1627, 1627, 1627,
     1645, 1627, 1628, 1645, 1627, 1627, 1627, 1645, 1645, 1627,
     1645, 1627, 1645, 1645, 1645, 1645, 1645, 1629, 1627, 1645,
     1645, 1627, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1627, 1645, 1627, 1628, 1627, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1627, 1627, 1627, 1645, 1627, 1627, 1630, 1631, 1632,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,

       32,   32,   32,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  161,  161,  161,  161,  161,

      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  170,  170,
     1645, 1645, 1645,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170, 1645,  170,  170,  170,  170,
      170,  227, 1645,  227, 1645, 1645, 1645,  227, 1645,  227,
      227,  229,  229, 1645, 1645,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  244, 1645,  244,

     1645, 1645,  244,  244,  244, 1645,  244,  244, 1645,  244,
      244,  244,  244,  244,  244,  268, 1645,  268, 1645, 1645,
      268,  268,  268, 1645,  268,  268, 1645,  268,  268,  268,
      268,  268,  268,  275, 1645,  275, 1645, 1645,  275,  275,
     1645, 1645,  275,  275, 1645, 1645,  275, 1645,  275,  275,
      275,  290, 1645,  290, 1645, 1645,  290,  290,  290,  290,
      290,  290, 1645,  290,  290,  290,  290,  290,  290,  306,
     1645,  306, 1645, 1645,  306,  306,  306,  306,  306,  306,
     1645,  306,  306,  306,  306,  306,  306,  313, 1645,  313,
     1645, 1645,  313,  313, 1645,  313,  313,  313, 1645, 1645,

      313, 1645,  313,  313,  313,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  351, 1645,
     1645, 1645,  351, 1645,  351,  351,  359,  359,  359, 1645,
      359, 1645, 1645,  359, 1645, 1645,  359,  359,  359,  359,
      359,  376, 1645, 1645,  376, 1645,  376, 1645,  376,  376,
     1645, 1645,  376,  376,  376,  376, 1645,  376,  376,  376,
      376,  376,  376,  376,  389,  389, 1645,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  392,  392, 1645,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  410, 1645,  410, 1645, 1645,  410,  410,
     1645,  410,  410,  410, 1645, 1645,  410,  410,  410,  410,
      410,  460, 1645,  460, 1645, 1645, 1645,  460, 1645,  460,
      460,  229,  229, 1645, 1645,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  477, 1645,  477, 1645, 1645,  477,

      477,  477, 1645,  477,  477, 1645,  477,  477,  477,  477,
      477,  477,  244, 1645,  244, 1645, 1645,  244,  244,  244,
     1645,  244,  244, 1645,  244,  244,  244,  244,  244,  244,
      485, 1645,  485, 1645, 1645,  485,  485,  485, 1645,  485,
      485, 1645,  485,  485,  485,  485,  485,  485,  491, 1645,
      491, 1645, 1645,  491,  491, 1645, 1645,  491,  491, 1645,
     1645,  491, 1645,  491,  491,  491,  501, 1645,  501, 1645,
     1645,  501,  501,  501, 1645,  501,  501, 1645,  501,  501,
      501,  501,  501,  501,  510, 1645,  510, 1645, 1645,  510,
      510,  510, 1645,  510,  510, 1645,  510,  510, 1645,  510,

      510,  510,  531, 1645,  531, 1645, 1645,  531,  531,  531,
     1645,  531,  531, 1645,  531,  531,  531,  531,  531,  531,
      268, 1645,  268, 1645, 1645,  268,  268,  268, 1645,  268,
      268, 1645,  268,  268,  268,  268,  268,  268,  538, 1645,
      538, 1645, 1645,  538,  538, 1645, 1645,  538, 1645, 1645,
     1645,  538,  538,  538,  538,  538,  544, 1645,  544, 1645,
     1645,  544,  544,  544, 1645,  544,  544, 1645,  544,  544,
      544,  544,  544,  544,  557, 1645,  557, 1645, 1645,  557,
      557,  557,  557,  557,  557, 1645,  557,  557,  557,  557,
      557,  557,  290, 1645,  290, 1645, 1645,  290,  290,  290,

      290,  290,  290, 1645,  290,  290,  290,  290,  290,  290,
      565, 1645,  565, 1645, 1645,  565,  565,  565,  565,  565,
      565, 1645,  565,  565,  565,  565,  565,  565,  571, 1645,
      571, 1645, 1645,  571,  571, 1645,  571,  571,  571, 1645,
     1645,  571, 1645,  571,  571,  571,  579, 1645,  579, 1645,
     1645,  579,  579,  579,  579,  579,  579, 1645,  579,  579,
      579,  579,  579,  579,  588, 1645,  588, 1645, 1645,  588,
      588,  588,  588,  588,  588, 1645,  588,  588, 1645,  588,
      588,  588,  609, 1645,  609, 1645, 1645,  609,  609,  609,
      609,  609,  609, 1645,  609,  609,  609,  609,  609,  609,

      306, 1645,  306, 1645, 1645,  306,  306,  306,  306,  306,
      306, 1645,  306,  306,  306,  306,  306,  306,  616, 1645,
      616, 1645, 1645,  616,  616, 1645,  616,  616, 1645, 1645,
     1645,  616,  616,  616,  616,  616,  622, 1645,  622, 1645,
     1645,  622,  622,  622,  622,  622,  622, 1645,  622,  622,
      622,  622,  622,  622,  351, 1645, 1645, 1645,  351, 1645,
      351,  351,  359, 1645, 1645, 1645,  359, 1645,  359,  359,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462, 1645,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  227, 1645,  227, 1645, 1645, 1645,  227,

     1645,  227,  227,  376, 1645, 1645,  376, 1645,  376, 1645,
      376,  376, 1645, 1645,  376,  376,  376,  376, 1645,  376,
      376,  376,  376,  376,  376,  376,  392,  392, 1645,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  170,
      170, 1645, 1645, 1645,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170, 1645,  170,  170,  170,
      170,  170,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  460, 1645, 1645, 1645,  460,

     1645,  460,  460,  669, 1645, 1645, 1645,  669, 1645,  669,
      669,  410, 1645,  410, 1645, 1645,  410,  410, 1645,  410,
      410,  410, 1645, 1645,  410,  410,  410,  410,  410,  739,
     1645,  739, 1645, 1645, 1645,  739, 1645,  739,  739,  510,
     1645,  510, 1645, 1645,  510,  510, 1645, 1645,  510,  510,
     1645,  510,  510, 1645,  510,  510,  510,  477, 1645,  477,
     1645, 1645,  477,  477,  477, 1645,  477,  477, 1645,  477,
      477,  477,  477,  477,  477,  743, 1645,  743, 1645, 1645,
      743,  743,  743, 1645,  743,  743, 1645,  743,  743,  743,
      743,  743,  743,  751, 1645,  751, 1645, 1645,  751,  751,

      751, 1645,  751,  751, 1645,  751,  751,  751,  751,  751,
      751,  485, 1645,  485, 1645, 1645,  485,  485,  485, 1645,
      485,  485, 1645,  485,  485,  485,  485,  485,  485,  759,
     1645,  759, 1645, 1645,  759,  759, 1645, 1645,  759,  759,
     1645, 1645,  759,  759,  759,  759,  759,  765, 1645,  765,
     1645, 1645,  765,  765, 1645, 1645,  765, 1645, 1645, 1645,
      765,  765,  765,  765,  765,  772, 1645,  772, 1645, 1645,
      772,  772,  772, 1645,  772,  772, 1645,  772,  772,  772,
      772,  772,  772,  501, 1645,  501, 1645, 1645,  501,  501,
      501, 1645,  501,  501, 1645,  501,  501,  501,  501,  501,

      501,  781, 1645,  781, 1645, 1645,  781,  781, 1645, 1645,
      781,  781, 1645, 1645,  781,  781,  781,  781,  781,  787,
     1645,  787, 1645, 1645,  787,  787,  787, 1645,  787,  787,
     1645,  787,  787,  787,  787,  787,  787,  795, 1645,  795,
     1645, 1645,  795,  795, 1645, 1645,  795, 1645, 1645, 1645,
      795,  795,  795,  795,  795,  799, 1645,  799, 1645, 1645,
      799,  799, 1645, 1645,  799,  799, 1645, 1645,  799, 1645,
      799,  799,  799,  810, 1645,  810, 1645, 1645,  810,  810,
      810, 1645,  810,  810, 1645,  810,  810,  810,  810,  810,
      810,  531, 1645,  531, 1645, 1645,  531,  531,  531, 1645,

      531,  531, 1645,  531,  531,  531,  531,  531,  531,  819,
     1645,  819, 1645, 1645,  819,  819, 1645, 1645,  819, 1645,
     1645, 1645,  819,  819,  819,  819,  819,  538, 1645,  538,
     1645, 1645,  538,  538, 1645, 1645,  538, 1645, 1645, 1645,
      538,  538,  538,  538,  538,  828, 1645,  828, 1645, 1645,
      828,  828,  828, 1645,  828,  828, 1645,  828,  828,  828,
      828,  828,  828,  544, 1645,  544, 1645, 1645,  544,  544,
      544, 1645,  544,  544, 1645,  544,  544,  544,  544,  544,
      544,  588, 1645,  588, 1645, 1645,  588,  588, 1645,  588,
      588,  588, 1645,  588,  588, 1645,  588,  588,  588,  557,

     1645,  557, 1645, 1645,  557,  557,  557,  557,  557,  557,
     1645,  557,  557,  557,  557,  557,  557,  841, 1645,  841,
     1645, 1645,  841,  841,  841,  841,  841,  841, 1645,  841,
      841,  841,  841,  841,  841,  849, 1645,  849, 1645, 1645,
      849,  849,  849,  849,  849,  849, 1645,  849,  849,  849,
      849,  849,  849,  565, 1645,  565, 1645, 1645,  565,  565,
      565,  565,  565,  565, 1645,  565,  565,  565,  565,  565,
      565,  857, 1645,  857, 1645, 1645,  857,  857, 1645,  857,
      857,  857, 1645, 1645,  857,  857,  857,  857,  857,  863,
     1645,  863, 1645, 1645,  863,  863, 1645,  863,  863, 1645,

     1645, 1645,  863,  863,  863,  863,  863,  870, 1645,  870,
     1645, 1645,  870,  870,  870,  870,  870,  870, 1645,  870,
      870,  870,  870,  870,  870,  579, 1645,  579, 1645, 1645,
      579,  579,  579,  579,  579,  579, 1645,  579,  579,  579,
      579,  579,  579,  879, 1645,  879, 1645, 1645,  879,  879,
     1645,  879,  879,  879, 1645, 1645,  879,  879,  879,  879,
      879,  885, 1645,  885, 1645, 1645,  885,  885,  885,  885,
      885,  885, 1645,  885,  885,  885,  885,  885,  885,  893,
     1645,  893, 1645, 1645,  893,  893, 1645,  893,  893, 1645,
     1645, 1645,  893,  893,  893,  893,  893,  897, 1645,  897,

     1645, 1645,  897,  897, 1645,  897,  897,  897, 1645, 1645,
      897, 1645,  897,  897,  897,  908, 1645,  908, 1645, 1645,
      908,  908,  908,  908,  908,  908, 1645,  908,  908,  908,
      908,  908,  908,  609, 1645,  609, 1645, 1645,  609,  609,
      609,  609,  609,  609, 1645,  609,  609,  609,  609,  609,
      609,  917, 1645,  917, 1645, 1645,  917,  917, 1645,  917,
      917, 1645, 1645, 1645,  917,  917,  917,  917,  917,  616,
     1645,  616, 1645, 1645,  616,  616, 1645,  616,  616, 1645,
     1645, 1645,  616,  616,  616,  616,  616,  926, 1645,  926,
     1645, 1645,  926,  926,  926,  926,  926,  926, 1645,  926,

      926,  926,  926,  926,  926,  622, 1645,  622, 1645, 1645,
      622,  622,  622,  622,  622,  622, 1645,  622,  622,  622,
      622,  622,  622,  669, 1645, 1645, 1645,  669, 1645,  669,
      669,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462, 1645,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  376, 1645, 1645,  376, 1645,  376,
     1645,  376,  376, 1645, 1645,  376,  376,  376,  376, 1645,
      376,  376,  376,  376,  376,  376,  376,  460, 1645, 1645,
      460, 1645, 1645, 1645,  460, 1645,  460,  460,  713,  713,
      713,  713,  713, 1645,  713,  713,  713,  713, 1645, 1645,

      713, 1645, 1645,  713,  713,  713, 1645,  713, 1645, 1645,
      713,  410, 1645, 1645,  410,  410, 1645,  410, 1645, 1645,
      410,  410, 1645,  410,  410,  410, 1645, 1645,  410,  410,
      410,  410,  410,  739, 1645,  739, 1645, 1645, 1645,  739,
     1645,  739,  739,  781, 1645,  781, 1645, 1645,  781,  781,
     1645, 1645,  781,  781, 1645, 1645,  781,  781,  781,  781,
      781,  510, 1645,  510, 1645, 1645,  510,  510,  510, 1645,
      510,  510, 1645,  510,  510, 1645,  510,  510,  510, 1018,
     1645, 1018, 1645, 1645, 1018, 1018, 1018, 1645, 1018, 1018,
     1645, 1018, 1018, 1018, 1018, 1018, 1018,  743, 1645,  743,

     1645, 1645,  743,  743,  743, 1645,  743,  743, 1645,  743,
      743,  743,  743,  743,  743,  751, 1645,  751, 1645, 1645,
      751,  751,  751, 1645,  751,  751, 1645,  751,  751,  751,
      751,  751,  751,  759, 1645,  759, 1645, 1645,  759,  759,
     1645, 1645,  759,  759, 1645, 1645,  759,  759,  759,  759,
      759, 1030, 1645, 1030, 1645, 1645, 1030, 1030, 1645, 1645,
     1030, 1645, 1645, 1645, 1030, 1030, 1030, 1030, 1030,  765,
     1645,  765, 1645, 1645,  765,  765, 1645, 1645,  765, 1645,
     1645, 1645,  765,  765,  765,  765,  765,  772, 1645,  772,
     1645, 1645,  772,  772,  772, 1645,  772,  772, 1645,  772,

      772,  772,  772,  772,  772,  787, 1645,  787, 1645, 1645,
      787,  787,  787, 1645,  787,  787, 1645,  787,  787,  787,
      787,  787,  787, 1042, 1645, 1042, 1645, 1645, 1042, 1042,
     1645, 1645, 1042, 1645, 1645, 1645, 1042, 1042, 1042, 1042,
     1042, 1048, 1645, 1048, 1645, 1645, 1048, 1048, 1645, 1645,
     1048, 1645, 1645, 1645, 1048, 1048, 1048, 1048, 1048, 1052,
     1645, 1052, 1645, 1645, 1052, 1052, 1645, 1645, 1052, 1645,
     1645, 1645, 1052, 1052, 1052, 1052, 1052,  795, 1645,  795,
     1645, 1645,  795,  795, 1645, 1645,  795, 1645, 1645, 1645,
      795,  795,  795,  795,  795, 1060, 1645, 1060, 1645, 1645,

     1060, 1060, 1645, 1645, 1060, 1060, 1645, 1645, 1060, 1060,
     1060, 1060, 1060, 1070, 1645, 1070, 1645, 1645, 1070, 1070,
     1070, 1645, 1070, 1070, 1645, 1070, 1070, 1070, 1070, 1070,
     1070,  477, 1645,  477, 1645, 1645,  477,  477,  477, 1645,
      477,  477, 1645,  477,  477,  477,  477,  477,  477, 1079,
     1645, 1079, 1645, 1645, 1079, 1079, 1079, 1645, 1079, 1079,
     1645, 1079, 1079, 1079, 1079, 1079, 1079, 1086, 1645, 1086,
     1645, 1645, 1086, 1086, 1086, 1645, 1086, 1086, 1645, 1086,
     1086, 1086, 1086, 1086, 1086, 1092, 1645, 1092, 1645, 1645,
     1092, 1092, 1645, 1645, 1092, 1092, 1645, 1645, 1092, 1645,

     1092, 1092, 1092,  819, 1645,  819, 1645, 1645,  819,  819,
     1645, 1645,  819, 1645, 1645, 1645,  819,  819,  819,  819,
      819,  828, 1645,  828, 1645, 1645,  828,  828,  828, 1645,
      828,  828, 1645,  828,  828,  828,  828,  828,  828,  879,
     1645,  879, 1645, 1645,  879,  879, 1645,  879,  879,  879,
     1645, 1645,  879,  879,  879,  879,  879,  588, 1645,  588,
     1645, 1645,  588,  588,  588,  588,  588,  588, 1645,  588,
      588, 1645,  588,  588,  588, 1108, 1645, 1108, 1645, 1645,
     1108, 1108, 1108, 1108, 1108, 1108, 1645, 1108, 1108, 1108,
     1108, 1108, 1108,  841, 1645,  841, 1645, 1645,  841,  841,

      841,  841,  841,  841, 1645,  841,  841,  841,  841,  841,
      841,  849, 1645,  849, 1645, 1645,  849,  849,  849,  849,
      849,  849, 1645,  849,  849,  849,  849,  849,  849,  857,
     1645,  857, 1645, 1645,  857,  857, 1645,  857,  857,  857,
     1645, 1645,  857,  857,  857,  857,  857, 1120, 1645, 1120,
     1645, 1645, 1120, 1120, 1645, 1120, 1120, 1645, 1645, 1645,
     1120, 1120, 1120, 1120, 1120,  863, 1645,  863, 1645, 1645,
      863,  863, 1645,  863,  863, 1645, 1645, 1645,  863,  863,
      863,  863,  863,  870, 1645,  870, 1645, 1645,  870,  870,
      870,  870,  870,  870, 1645,  870,  870,  870,  870,  870,

      870,  885, 1645,  885, 1645, 1645,  885,  885,  885,  885,
      885,  885, 1645,  885,  885,  885,  885,  885,  885, 1132,
     1645, 1132, 1645, 1645, 1132, 1132, 1645, 1132, 1132, 1645,
     1645, 1645, 1132, 1132, 1132, 1132, 1132, 1138, 1645, 1138,
     1645, 1645, 1138, 1138, 1645, 1138, 1138, 1645, 1645, 1645,
     1138, 1138, 1138, 1138, 1138, 1142, 1645, 1142, 1645, 1645,
     1142, 1142, 1645, 1142, 1142, 1645, 1645, 1645, 1142, 1142,
     1142, 1142, 1142,  893, 1645,  893, 1645, 1645,  893,  893,
     1645,  893,  893, 1645, 1645, 1645,  893,  893,  893,  893,
      893, 1150, 1645, 1150, 1645, 1645, 1150, 1150, 1645, 1150,

     1150, 1150, 1645, 1645, 1150, 1150, 1150, 1150, 1150, 1160,
     1645, 1160, 1645, 1645, 1160, 1160, 1160, 1160, 1160, 1160,
     1645, 1160, 1160, 1160, 1160, 1160, 1160,  557, 1645,  557,
     1645, 1645,  557,  557,  557,  557,  557,  557, 1645,  557,
      557,  557,  557,  557,  557, 1169, 1645, 1169, 1645, 1645,
     1169, 1169, 1169, 1169, 1169, 1169, 1645, 1169, 1169, 1169,
     1169, 1169, 1169, 1176, 1645, 1176, 1645, 1645, 1176, 1176,
     1176, 1176, 1176, 1176, 1645, 1176, 1176, 1176, 1176, 1176,
     1176, 1182, 1645, 1182, 1645, 1645, 1182, 1182, 1645, 1182,
     1182, 1182, 1645, 1645, 1182, 1645, 1182, 1182, 1182,  917,

     1645,  917, 1645, 1645,  917,  917, 1645,  917,  917, 1645,
     1645, 1645,  917,  917,  917,  917,  917,  926, 1645,  926,
     1645, 1645,  926,  926,  926,  926,  926,  926, 1645,  926,
      926,  926,  926,  926,  926,  669, 1645, 1645, 1645,  669,
     1645,  669,  669,  376, 1645, 1645,  376, 1645,  376, 1645,
      376,  376, 1645, 1645,  376,  376,  376,  376, 1645,  376,
      376,  376,  376,  376,  376,  376,  994,  994,  994,  994,
      994, 1645,  994,  994,  994,  994, 1645, 1645,  994, 1645,
     1645,  994,  994,  994, 1645,  994, 1645,  994,  994, 1003,
     1003, 1003, 1003, 1003, 1645, 1003, 1003, 1003, 1003, 1645,

     1645, 1003, 1645, 1645, 1003, 1003, 1003, 1645, 1003, 1003,
     1645, 1003,  410, 1645,  410, 1645, 1645,  410,  410, 1645,
      410,  410,  410, 1645, 1645,  410,  410,  410,  410,  410,
      460, 1645,  460, 1645, 1645, 1645,  460, 1645,  460,  460,
      787, 1645,  787, 1645, 1645,  787,  787,  787, 1645,  787,
      787, 1645,  787,  787,  787,  787,  787,  787, 1018, 1645,
     1018, 1645, 1645, 1018, 1018, 1018, 1645, 1018, 1018, 1645,
     1018, 1018, 1018, 1018, 1018, 1018, 1030, 1645, 1030, 1645,
     1645, 1030, 1030, 1645, 1645, 1030, 1645, 1645, 1645, 1030,
     1030, 1030, 1030, 1030, 1042, 1645, 1042, 1645, 1645, 1042,

     1042, 1645, 1645, 1042, 1645, 1645, 1645, 1042, 1042, 1042,
     1042, 1042, 1048, 1645, 1048, 1645, 1645, 1048, 1048, 1645,
     1645, 1048, 1645, 1645, 1645, 1048, 1048, 1048, 1048, 1048,
     1052, 1645, 1052, 1645, 1645, 1052, 1052, 1645, 1645, 1052,
     1645, 1645, 1645, 1052, 1052, 1052, 1052, 1052, 1060, 1645,
     1060, 1645, 1645, 1060, 1060, 1645, 1645, 1060, 1060, 1645,
     1645, 1060, 1060, 1060, 1060, 1060, 1070, 1645, 1070, 1645,
     1645, 1070, 1070, 1070, 1645, 1070, 1070, 1645, 1070, 1070,
     1070, 1070, 1070, 1070, 1287, 1645, 1287, 1645, 1645, 1287,
     1287, 1287, 1645, 1287, 1287, 1645, 1287, 1287, 1287, 1287,

     1287, 1287, 1295, 1645, 1295, 1645, 1645, 1295, 1295, 1295,
     1645, 1295, 1295, 1645, 1295, 1295, 1295, 1295, 1295, 1295,
      781, 1645,  781, 1645, 1645,  781,  781, 1645, 1645,  781,
      781, 1645, 1645,  781,  781,  781,  781,  781, 1079, 1645,
     1079, 1645, 1645, 1079, 1079, 1079, 1645, 1079, 1079, 1645,
     1079, 1079, 1079, 1079, 1079, 1079, 1302, 1645, 1302, 1645,
     1645, 1302, 1302, 1302, 1645, 1302, 1302, 1645, 1302, 1302,
     1302, 1302, 1302, 1302, 1310, 1645, 1310, 1645, 1645, 1310,
     1310, 1310, 1645, 1310, 1310, 1645, 1310, 1310, 1310, 1310,
     1310, 1310, 1086, 1645, 1086, 1645, 1645, 1086, 1086, 1086,

     1645, 1086, 1086, 1645, 1086, 1086, 1086, 1086, 1086, 1086,
     1318, 1645, 1318, 1645, 1645, 1318, 1318, 1645, 1645, 1318,
     1318, 1645, 1645, 1318, 1318, 1318, 1318, 1318, 1324, 1645,
     1324, 1645, 1645, 1324, 1324, 1645, 1645, 1324, 1645, 1645,
     1645, 1324, 1324, 1324, 1324, 1324,  885, 1645,  885, 1645,
     1645,  885,  885,  885,  885,  885,  885, 1645,  885,  885,
      885,  885,  885,  885, 1108, 1645, 1108, 1645, 1645, 1108,
     1108, 1108, 1108, 1108, 1108, 1645, 1108, 1108, 1108, 1108,
     1108, 1108, 1120, 1645, 1120, 1645, 1645, 1120, 1120, 1645,
     1120, 1120, 1645, 1645, 1645, 1120, 1120, 1120, 1120, 1120,

     1132, 1645, 1132, 1645, 1645, 1132, 1132, 1645, 1132, 1132,
     1645, 1645, 1645, 1132, 1132, 1132, 1132, 1132, 1138, 1645,
     1138, 1645, 1645, 1138, 1138, 1645, 1138, 1138, 1645, 1645,
     1645, 1138, 1138, 1138, 1138, 1138, 1142, 1645, 1142, 1645,
     1645, 1142, 1142, 1645, 1142, 1142, 1645, 1645, 1645, 1142,
     1142, 1142, 1142, 1142, 1150, 1645, 1150, 1645, 1645, 1150,
     1150, 1645, 1150, 1150, 1150, 1645, 1645, 1150, 1150, 1150,
     1150, 1150, 1160, 1645, 1160, 1645, 1645, 1160, 1160, 1160,
     1160, 1160, 1160, 1645, 1160, 1160, 1160, 1160, 1160, 1160,
     1354, 1645, 1354, 1645, 1645, 1354, 1354, 1354, 1354, 1354,

     1354, 1645, 1354, 1354, 1354, 1354, 1354, 1354, 1362, 1645,
     1362, 1645, 1645, 1362, 1362, 1362, 1362, 1362, 1362, 1645,
     1362, 1362, 1362, 1362, 1362, 1362,  879, 1645,  879, 1645,
     1645,  879,  879, 1645,  879,  879,  879, 1645, 1645,  879,
      879,  879,  879,  879, 1169, 1645, 1169, 1645, 1645, 1169,
     1169, 1169, 1169, 1169, 1169, 1645, 1169, 1169, 1169, 1169,
     1169, 1169, 1369, 1645, 1369, 1645, 1645, 1369, 1369, 1369,
     1369, 1369, 1369, 1645, 1369, 1369, 1369, 1369, 1369, 1369,
     1377, 1645, 1377, 1645, 1645, 1377, 1377, 1377, 1377, 1377,
     1377, 1645, 1377, 1377, 1377, 1377, 1377, 1377, 1176, 1645,

     1176, 1645, 1645, 1176, 1176, 1176, 1176, 1176, 1176, 1645,
     1176, 1176, 1176, 1176, 1176, 1176, 1385, 1645, 1385, 1645,
     1645, 1385, 1385, 1645, 1385, 1385, 1385, 1645, 1645, 1385,
     1385, 1385, 1385, 1385, 1391, 1645, 1391, 1645, 1645, 1391,
     1391, 1645, 1391, 1391, 1645, 1645, 1645, 1391, 1391, 1391,
     1391, 1391,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376, 1226, 1226, 1226, 1226, 1226,
     1645, 1226, 1226, 1226, 1226, 1645, 1645, 1226, 1645, 1645,
     1226, 1226, 1226, 1645, 1226, 1226, 1645, 1226, 1234, 1234,

     1234, 1234, 1234, 1645, 1234, 1234, 1234, 1234, 1645, 1645,
     1234, 1645, 1645, 1234, 1234, 1234, 1645, 1234, 1645, 1645,
     1234, 1246, 1246, 1246, 1246, 1246, 1645, 1246, 1246, 1246,
     1246, 1645, 1645, 1246, 1645, 1645, 1246, 1246, 1246, 1645,
     1246, 1645, 1645, 1246, 1259, 1259, 1259, 1259, 1259, 1645,
     1259, 1259, 1259, 1259, 1645, 1645, 1259, 1645, 1645, 1259,
     1259, 1259, 1645, 1259, 1645, 1645, 1259,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
     1460, 1645, 1460, 1645, 1645, 1460, 1460, 1460, 1645, 1460,

     1460, 1645, 1460, 1460, 1460, 1460, 1460, 1460, 1287, 1645,
     1287, 1645, 1645, 1287, 1287, 1287, 1645, 1287, 1287, 1645,
     1287, 1287, 1287, 1287, 1287, 1287, 1469, 1645, 1469, 1645,
     1645, 1469, 1469, 1469, 1645, 1469, 1469, 1645, 1469, 1469,
     1469, 1469, 1469, 1469, 1295, 1645, 1295, 1645, 1645, 1295,
     1295, 1295, 1645, 1295, 1295, 1645, 1295, 1295, 1295, 1295,
     1295, 1295,  781, 1645,  781, 1645, 1645,  781,  781, 1645,
     1645,  781,  781, 1645, 1645,  781,  781,  781,  781,  781,
     1477, 1645, 1477, 1645, 1645, 1477, 1477, 1477, 1645, 1477,
     1477, 1645, 1477, 1477, 1477, 1477, 1477, 1477, 1302, 1645,

     1302, 1645, 1645, 1302, 1302, 1302, 1645, 1302, 1302, 1645,
     1302, 1302, 1302, 1302, 1302, 1302, 1310, 1645, 1310, 1645,
     1645, 1310, 1310, 1310, 1645, 1310, 1310, 1645, 1310, 1310,
     1310, 1310, 1310, 1310, 1318, 1645, 1318, 1645, 1645, 1318,
     1318, 1645, 1645, 1318, 1318, 1645, 1645, 1318, 1318, 1318,
     1318, 1318, 1489, 1645, 1489, 1645, 1645, 1489, 1489, 1645,
     1645, 1489, 1645, 1645, 1645, 1489, 1489, 1489, 1489, 1489,
     1324, 1645, 1324, 1645, 1645, 1324, 1324, 1645, 1645, 1324,
     1645, 1645, 1645, 1324, 1324, 1324, 1324, 1324, 1504, 1645,
     1504, 1645, 1645, 1504, 1504, 1504, 1504, 1504, 1504, 1645,

     1504, 1504, 1504, 1504, 1504, 1504, 1354, 1645, 1354, 1645,
     1645, 1354, 1354, 1354, 1354, 1354, 1354, 1645, 1354, 1354,
     1354, 1354, 1354, 1354, 1513, 1645, 1513, 1645, 1645, 1513,
     1513, 1513, 1513, 1513, 1513, 1645, 1513, 1513, 1513, 1513,
     1513, 1513, 1362, 1645, 1362, 1645, 1645, 1362, 1362, 1362,
     1362, 1362, 1362, 1645, 1362, 1362, 1362, 1362, 1362, 1362,
      879, 1645,  879, 1645, 1645,  879,  879, 1645,  879,  879,
      879, 1645, 1645,  879,  879,  879,  879,  879, 1521, 1645,
     1521, 1645, 1645, 1521, 1521, 1521, 1521, 1521, 1521, 1645,
     1521, 1521, 1521, 1521, 1521, 1521, 1369, 1645, 1369, 1645,

     1645, 1369, 1369, 1369, 1369, 1369, 1369, 1645, 1369, 1369,
     1369, 1369, 1369, 1369, 1377, 1645, 1377, 1645, 1645, 1377,
     1377, 1377, 1377, 1377, 1377, 1645, 1377, 1377, 1377, 1377,
     1377, 1377, 1385, 1645, 1385, 1645, 1645, 1385, 1385, 1645,
     1385, 1385, 1385, 1645, 1645, 1385, 1385, 1385, 1385, 1385,
     1533, 1645, 1533, 1645, 1645, 1533, 1533, 1645, 1533, 1533,
     1645, 1645, 1645, 1533, 1533, 1533, 1533, 1533, 1391, 1645,
     1391, 1645, 1645, 1391, 1391, 1645, 1391, 1391, 1645, 1645,
     1645, 1391, 1391, 1391, 1391, 1391, 1419, 1419, 1419, 1419,
     1419, 1645, 1419, 1419, 1419, 1419, 1645, 1645, 1419, 1645,

     1645, 1419, 1419, 1419, 1645, 1419, 1645, 1645, 1419, 1427,
     1427, 1427, 1427, 1427, 1645, 1427, 1427, 1427, 1427, 1645,
     1645, 1427, 1645, 1645, 1427, 1427, 1427, 1645, 1427, 1645,
     1645, 1427, 1448, 1448, 1448, 1448, 1448, 1645, 1448, 1448,
     1448, 1448, 1645, 1645, 1448, 1645, 1645, 1448, 1448, 1448,
     1645, 1448, 1645, 1645, 1448, 1460, 1645, 1460, 1645, 1645,
     1460, 1460, 1460, 1645, 1460, 1460, 1645, 1460, 1460, 1460,
     1460, 1460, 1460, 1469, 1645, 1469, 1645, 1645, 1469, 1469,
     1469, 1645, 1469, 1469, 1645, 1469, 1469, 1469, 1469, 1469,
     1469, 1477, 1645, 1477, 1645, 1645, 1477, 1477, 1477, 1645,

     1477, 1477, 1645, 1477, 1477, 1477, 1477, 1477, 1477, 1552,
     1552, 1552, 1552, 1552, 1645, 1552, 1552, 1552, 1552, 1645,
     1645, 1552, 1645, 1645, 1552, 1552, 1552, 1645, 1552, 1645,
     1645, 1552, 1559, 1559, 1559, 1559, 1559, 1645, 1559, 1559,
     1559, 1559, 1645, 1645, 1559, 1645, 1645, 1559, 1559, 1559,
     1645, 1559, 1645, 1645, 1559, 1566, 1566, 1566, 1566, 1566,
     1645, 1566, 1566, 1566, 1566, 1645, 1645, 1566, 1645, 1645,
     1566, 1566, 1566, 1645, 1566, 1645, 1645, 1566, 1573, 1573,
     1573, 1573, 1573, 1645, 1573, 1573, 1573, 1573, 1645, 1645,
     1573, 1645, 1645, 1573, 1573, 1573, 1645, 1573, 1645, 1645,

     1573, 1579, 1579, 1579, 1579, 1579, 1645, 1579, 1579, 1579,
     1579, 1645, 1645, 1579, 1645, 1645, 1579, 1579, 1579, 1645,
     1579, 1645, 1645, 1579, 1619, 1619, 1619, 1619, 1619, 1645,
     1619, 1619, 1619, 1619, 1645, 1645, 1619, 1645, 1645, 1619,
     1619, 1619, 1645, 1619, 1645, 1645, 1619, 1627, 1627, 1627,
     1627, 1627, 1645, 1627, 1627, 1627, 1627, 1645, 1645, 1627,
     1645, 1645, 1627, 1627, 1627, 1645, 1627, 1645, 1645, 1627,
       31, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645
    } ;

static const flex_int16_t yy_chk[11647] =
    {   0,
        0,    0,    1,    1,    1,    2,    2,    2,   11,   11,
       12,   12,   36,   40,  143,   36,   40,  143,   36,   40,
      136,  136,   72,   36,   40,   42,    1,    0,   42,    2,
       71,   71,   71,   71,   36,   40,   72,   42,   50,   42,
       42,   50,   42,   42,   42,   42,   49,    0,   49,   49,
       49,   49,   75,   75,   72,   50,   50,   50,   50,  119,
      119,  119,   50,  141,  141,  196,   75,  196,   75,   75,
       75,   75,    1,    1,    1,    2,    2,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    9,    9,    9,    9,   32,   32,   32,
        9,  427,    9,    9,    9,    9,  427,    9,    9,    9,
       37, 1270,   37,   37,   37, 1271,   38,    9,   38,   38,
       38,   39,  391,   39,   39,   39,  132,  132,  132,  132,
     1272,    9,    9,    9,   93,  149,  106,   93,  149,  106,
      391,   13,   13,   13,   13, 1273,   13,   14,   14,   14,
       14,  190,   14,   21,   21,   21,   21,   85,   21,    9,
     1274,    9,    9,    9,    9,    9,    9,   10,   10,   10,
       10,   85, 1275,   93,   10,  106,   10,   10,   10,   10,
       13,   10,   10,   10,  140,  140,   14,  130,  190,   85,

      130,   10,   21,  137, 1276,   52,  137,   52,   52,   52,
       52, 1277,  130,  183,  183,   10,   10,   10,  140,   52,
       13,   13,   13,   13,   13, 1278,   14,   14,   14,   14,
       14,  423,   21,   21,   21,   21,   21,   52,  153,  153,
      153,  153,  137,   10,  423,   10,   10,   10,   10,   10,
       10,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   17,   17,   17,   17,
      133,  222, 1279,  133,  222,   22,   22,   22,   22, 1280,
       22,   29,   29,   88,   88,   29,   30,   30,  324,  324,
       30,   17,   65,  232,  133,   65,  232,   88, 1281,   88,
       88,   88,   88, 1282,   65,   17,   65,   65,   17,   65,
       65,   65,   65,   80,   22,  364,   80,  364,  134,   29,
      134,  134,  134,  134,   30,   80,  327,   80,   80,  327,
       80,   80,   80,   80, 1283,   17,   17,   17,   17,   17,

       18,   18,   18,   18,   22,   22,   22,   22,   22,   29,
       29,   29,   29,   29,   30,   30,   30,   30,   30,  155,
      155,  155,  155,  339,  339,   18,   84,   46, 1284,   84,
      170,  170,  170,   46,  179,  179,  179, 1285,   46,   18,
       66,   84,   18,   84,   84,   84,   84,  370,  370,   66,
       84,  270,  270,  270,  171,   66,  171,  171,  171,   66,
      342,   46, 1286,  342,   46,  156,   46,  394,  394,   18,
       18,   18,   18,   18,   19,   66,  198,   19,   46,  156,
       19, 1290,   19,   19,  355,   46,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   73,  355,  156,  172,   19,

      172,  172,  172,  355,   73,   66,   66,   66,  233,  233,
       73,  233, 1291,   19,   73,   19,   23,   23,   23,   23,
      157, 1292,  157,  157,  157,  157,  198,  198,  198,  176,
       73,   74,  176,  361,  157,  176,  361,   74,   81,   74,
      176,   23,   74,   74,   74,   74,   74,   81,  361, 1293,
      203,  176,  157,   81,  414,   23,  414,   81,   23,   86,
       73,   73,   73,  173, 1294,  173,  173,  173,   86,   87,
      308,  308,  308,   81,   86,   87,  203,   87,   86, 1298,
       87,   87,   87,   87,   87,   23,   23,   23,   23,   23,
       24,   24,   24,   24,   86, 1299,   74,   74,   74,  681,

      203,  203,  203,   81,   81,   81,  180,  681,  180,  180,
      180,  219,  219,  219,  219,   24,  181,  131,  181,  181,
      181,  396,  396,  131,   86,   86,   86,  182,  131,   24,
      182, 1300,   24,  182,   87,   87,   87,  185,  182,  185,
      185,  185,  185,  235,  235,  235,  165,  323,  235,  182,
      323,  131,  282,  282,  131,  282,  131,  165, 1305,   24,
       24,   24,   24,   24,   25,   25,   25,   25,  131, 1306,
      328,  328,   25,  328,  187,  131,  187,  187,  187,  187,
      165,   25,   25,   25,   25,  165,  323, 1307,  187,  165,
       25,   25,   25,   25,  343,  343,  165,  343, 1308,  165,

      186,  165,  165,  186,  404,  404,  187,   25,   25,   25,
       25,   25,   25,   26,   26,   26,   26,  186,  186,  186,
      186,   26,  405,  405,  186,  220,  220,  220,  220, 1309,
       26,   26,   26,   26,  184,  210,  630,  184,  630,   26,
       26,   26,   26, 1313,  372,  201,  184,  372,  184,  184,
     1314,  184,  184,  184,  184, 1315,   26,   26,   26,   26,
       26,   26,   27,   27,   27,   27,  212,   27,   27,  206,
      210,   27,   27,   27,  211,   27,   27,  201, 1316,   27,
       27,   27,   27,   27,  194,  210,  210,  210,  194, 1317,
      194,  206,  212,  194,  194,  201,  201,  201, 1321,  195,

       27,  195,   27, 1322,  195,  195,  195, 1323,  205, 1325,
       27,  211,  207, 1326,  211, 1327,  212,  212,  212,  206,
      206,  206,   27,  200,  211,  211,  211,   27, 1328,   27,
       27,   28,   28,   28,   28, 1329,   28,   28,  205,  207,
       28,   28,   28,  202,   28,   28, 1330,  314,   28,   28,
       28,   28,   28,  338, 1331,  200,  338,  200,  205,  205,
      205, 1332,  207,  207,  207,  202,  352,  352,  352,   28,
      314,   28,  202,  200,  200,  200, 1333,  362,  202,   28,
      362,  374,  314,  221,  374,  221,  221,  221,  221,  314,
     1334,   28,  338,  202,  202,  202,   28,  221,   28,   28,

       47,  362,  369,   47,   47,  369, 1335,   47,  331,  331,
      331,   47,   47,  331,   47,  221,   47,   47,   47,   47,
       47,   47,  377,   47,   47,  377,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47, 1336,   47,
     1337,  369, 1338,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,  345,  345,  345,   47, 1339,
      345,   47,   47,   47,   57,   57,   57,  373,  373,  223,
      373,  223,  223,  223,  223,  230,  230,  230,  230, 1340,
       57,   57,   57,  223,  213,  226, 1341,  226,  226,  226,

      226,  242,  242,  242,  242, 1342,  204, 1343,  242,  226,
      208,  223,  246,  246,  246,  246,   57,   57, 1344,  397,
       57,   57,  397,  425,  213, 1345,  425,  226,   57,  213,
     1346,   57,  208,   57, 1347,   57,   57,   67,  204,  204,
      204,  214, 1348,   67,  213,  213,  213,  209,   67,   67,
       67,   67,   67,   67,   67, 1349,  204,  204,  204, 1350,
      208,  208,  208,   67,   67,   67,   67,   67,   67,  209,
      215,   67,  469, 1351,   67,  469,   67, 1352,  214, 1353,
      380,  241,  209,  241,  241,  241,  241,  636,   67,  253,
      636,  214,  214,  214,  380,   67,   69,  209,  209,  209,

      253,  253,  253,  253,  215,   69,  253,   69,   69,   69,
       69,   69,  380,  668,  668,   69,  262,  262,  262,  262,
      215,  215,  215,  248, 1357,  240, 1358,  228,  240,  228,
      228,   69,  228,  228,  228,  228, 1359,  240,  248,  240,
      240, 1360,  240,  240,  240,  240,  292,  292,  292,  292,
      244, 1361,  243, 1365,  243,  243,  243,  243, 1366,  244,
     1367,   69,   69,   69,   83,  244,  243, 1372,  393,  244,
      393,  393,  393,   83, 1373,   83,   83,   83,   83,   83,
      406,  406,  406,   83,  243,  244,  677,  677,  248,  248,
      248,  286, 1374,  287,  286,  287,  287,  287,  287,   83,

      407,  407,  407,  286,  288,  286,  286,  288,  286,  286,
      286,  286, 1375,  416, 1376,  244,  244,  244, 1380,  288,
      416,  288,  288,  288,  288, 1381,  416, 1382,  288,   83,
       83,   83,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   98,  110,  110,  110,
      642,  110, 1383,  642,  110,  300,  300,  300,  300,  655,
      245, 1384,  655,  110,  110,  110, 1388,  247, 1389,  245,
      357,  357,  357,  357,  684,  245,  247,  684,  628,  245,
      628, 1390,  247,  628,  628,  110,  247, 1392,  110,  110,
      110,  934,  934,  110,  110,  245,  358,  358,  358,  358,
     1393,  110,  247,  294,  110, 1394,  110, 1395,  110,  110,
      120,  120,  120,  120,  366,  366,  366,  366,  294,  120,
      120,  120,  120,  935,  935,  245,  245,  245,  382,  382,
      382,  382,  247,  247,  247, 1396,  120,  120,  120,  120,

      120,  120,  127, 1397,  127,  127, 1398, 1399,  127,  127,
      127, 1402, 1406,  127,  127,  127,  127,  249,  418,  418,
      418,  127, 1407, 1408,  254,  410,  249, 1410,  294,  294,
      294, 1412,  249,  254,  127, 1414,  249,  127, 1415,  254,
     1416, 1417,  289,  254,  289,  289,  289,  289,  363, 1422,
      363, 1423,  249,  363,  363,  363,  289,  635,  635,  254,
      635,  127,  128,  128,  128, 1424,  128, 1430,  365,  128,
      365,  365,  365,  365,  289,  410,  410,  410,  128,  128,
      128, 1431,  249,  249,  249, 1432,  128, 1451, 1452,  254,
      254,  254,  367, 1453,  367,  367,  367,  367, 1454, 1455,

      128,  379, 1456,  128,  128,  128, 1457,  691,  128,  128,
      691, 1458,  379,  379,  379,  379,  128,  691,  379,  128,
     1459,  128, 1463,  128,  128,  199,  199,  199,  199,  199,
      199,  199, 1464,  199, 1465,  199,  199,  199,  199, 1466,
      199,  199,  199,  199,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
     1467,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,

      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  263,
      456,  456,  456,  456,  466,  466,  466,  466,  263, 1468,
      263,  263,  263,  263,  263,  470,  470,  470,  263, 1472,
      470,  267,  263,  267,  267, 1473,  267,  267,  267,  267,
      493,  493,  493,  268,  263, 1474,  269, 1475,  267, 1476,
      263, 1480,  268,  641,  641,  269,  641,  723,  268, 1481,
      723,  269,  268, 1482,  271,  269,  267,  723,  399,  399,
      399,  399, 1483,  271,  263,  263,  263,  265,  268,  271,
      399,  269, 1484,  271,  654,  654,  265,  654,  265,  265,

      265,  265,  265,  514,  514,  514,  265, 1485,  399,  271,
      265,  381, 1486,  381,  381,  381,  381, 1487,  268,  268,
      268,  269,  269,  269,  383,  381,  383, 1488,  265,  383,
      383,  383,  383,  467, 1490,  467,  467,  467,  467,  271,
      271,  271,  400,  381,  400, 1491, 1492,  400,  400,  400,
      400, 1493,  265,  265,  265,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266, 1494,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      275,  430,  523,  523,  523,  283, 1495,  431,  290,  275,
     1496,  432, 1497, 1498,  283,  275, 1499,  290,  949,  275,
      283,  949, 1500,  290,  283, 1501, 1502,  290,  949,  291,
     1503, 1507,  431,  430,  434,  275, 1508, 1509,  291,  950,
      283,  293,  950,  290,  291, 1510,  432, 1511,  291,  950,
      293,  430,  430,  430, 1512, 1516,  293,  431,  431,  431,
      293,  432,  432,  432,  291,  275,  275,  275,  277,  434,

      283,  283,  283,  290,  290,  290,  293,  277, 1517,  277,
      277,  277,  277,  277,  434,  434,  434,  277, 1518, 1519,
      295,  533,  533,  533,  291,  291,  291, 1520, 1524,  295,
      433,  299, 1525,  277, 1526,  295,  293,  293,  293,  295,
      299,  468,  468,  468,  468, 1527,  299,  538,  538,  538,
      299,  435, 1528, 1529,  305,  295,  305,  305,  306,  305,
      305,  305,  305,  277,  277,  277,  299,  306,  433,  433,
     1530,  305, 1531,  306,  573,  573,  573,  306,  436, 1532,
      433,  433,  433,  435, 1534,  295,  295,  295, 1535,  305,
      592,  592,  592,  306, 1536, 1537,  299,  299,  299,  301,

     1538,  435,  435,  435,  441,  436, 1539, 1540,  301, 1541,
      301,  301,  301,  301,  301,  601,  601,  601,  301, 1542,
      437, 1544,  301,  306,  306,  306,  307, 1546,  436,  436,
      436, 1548, 1555,  309,  301,  307,  960,  439,  313,  960,
      301,  307,  309,  441, 1556,  307,  960,  313,  309, 1557,
      437, 1562,  309,  313,  441,  441,  441,  313,  437,  438,
     1563,  307,  439,  443,  301,  301,  301,  303,  309,  444,
      437,  437,  437,  313,  451, 1564,  303,  445,  303,  303,
      303,  303,  303,  611,  611,  611,  303,  439,  439,  439,
      303,  307,  307,  307, 1569,  438, 1570, 1571,  309,  309,

      309,  443,  445,  313,  313,  313, 1576,  451,  303,  438,
      438,  438,  444,  443,  443,  443,  616,  616,  616,  444,
      444,  444, 1577, 1578,  451,  451,  451,  445,  445,  445,
     1582, 1583,  303,  303,  303,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304, 1584,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,

      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      315, 1587, 1588,  440,  648,  648,  648,  320, 1589,  315,
      446,  315,  315,  315,  315,  315,  320, 1590, 1591,  315,
     1592, 1593,  320,  491, 1594,  384,  320,  384,  384,  384,
      384,  474,  474,  474,  474,  315, 1595,  440,  491,  384,
      440,  448,  320, 1596,  446,  449, 1597, 1598,  450,  447,
     1599, 1600,  447,  440,  440,  440, 1601,  384,  491,  447,
      446,  446,  446, 1602, 1603,  315,  315,  315, 1604, 1605,
      447, 1606,  320,  320,  320,  353,  353,  353,  353, 1607,
      448,  449,  450, 1608,  353,  353,  353,  353,  491,  491,

      491,  448,  448,  448, 1609,  449,  449,  449,  450,  450,
      450,  353,  353,  353,  353,  353,  353,  409,  409,  409,
      409,  484,  484,  484,  484, 1610,  409,  409,  409,  409,
      447,  447,  447,  452,  461, 1611,  461, 1612, 1613,  461,
      461,  461,  461,  409,  409,  409,  409,  409,  409,  442,
      442,  442,  442,  442,  453,  442,  442,  510,  442,  442,
      442,  520, 1614,  442,  459,  442,  459,  459,  459,  459,
     1622,  442,  442, 1623, 1624,  442,  452, 1630,  459,  554,
      554,  554,  554,  452,  452,  452, 1631, 1632,  442, 1633,
      442,  442,  442,  453, 1634,  465,  459,  465, 1635, 1636,

      465,  465,  465,  465,  453,  453,  453,  510,  510,  510,
     1637,  520,  520,  520, 1638,  442,  442,  442, 1639,  442,
      442,  442,  442,  442,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
     1640,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  463,

     1269,  463,  463,  463,  463,  564,  564,  564,  564,  476,
     1268,  476,  588,  463,  476,  476,  476,  476,  477,  972,
     1615,  478,  972,  637,  637,  637, 1267,  477,  637,  972,
      478,  463,  475,  477, 1266, 1673,  478,  477, 1615,  479,
      478, 1673, 1264,  475,  475,  475,  475,  475,  479, 1263,
     1262,  475,  512,  477,  479,  475,  478,  480,  479,  598,
      485, 1251,  588,  588,  588,  515,  480,  512, 1250,  485,
     1249,  512,  480,  475,  479,  485,  480, 1239, 1238,  485,
      515,  486, 1237,  477,  477,  477,  478,  478,  478, 1232,
      486,  974,  480,  487,  974,  485,  486,  475,  475,  475,

      486,  974,  487, 1231,  479,  479,  479, 1230,  487,  598,
      598,  598,  487,  649,  649,  649,  486,  512,  512,  512,
      501, 1221,  480,  480,  480,  485,  485,  485,  487,  501,
      515,  515,  515, 1219,  502,  501, 1218,  524, 1217,  501,
     1215, 1669,  503,  502, 1669, 1214,  486,  486,  486,  502,
     1669,  503,  524,  502, 1212,  501, 1211,  503,  487,  487,
      487,  503,  664,  664,  664,  556, 1210,  556, 1694,  502,
      556,  556,  556,  556, 1694, 1209,  509,  503,  509,  509,
     1206,  509,  509,  509,  509,  501,  501,  501, 1205,  516,
     1204,  516, 1203,  509,  516,  516,  516,  516,  516,  502,

      502,  502,  524,  524,  524, 1202, 1695,  503,  503,  503,
      507,  509, 1695,  529, 1702,  529,  529,  529,  529,  507,
     1702,  507,  507,  507,  507,  507, 1201,  529, 1708,  507,
      670,  670,  670,  507, 1708,  525,  976,  525,  531,  976,
      525,  525,  525,  525,  525,  529,  976,  531,  516,  516,
      516,  507,  987,  531,  629,  987,  629,  531, 1196,  629,
      629,  629,  987, 1195,  587,  532,  587,  587, 1194,  587,
      587,  587,  587,  531,  532,  507,  507,  507,  508, 1698,
      532,  587, 1698,  590,  532, 1193, 1192,  508, 1698,  508,
      508,  508,  508,  508,  525,  525,  525,  508,  590,  587,

      532,  508,  590,  531,  531,  531,  534,  643,  643,  643,
     1191,  593,  643,  508, 1711,  534, 1711, 1190,  544,  508,
     1711,  534,  761,  761,  761,  534,  593,  544, 1189, 1188,
      532,  532,  532,  544,  765,  765,  765,  544, 1187,  571,
     1186,  534, 1185,  508,  508,  508,  513, 1183,  590,  590,
      590, 1181,  602,  544,  571,  513, 1180,  513,  513,  513,
      513,  513,  782,  782,  782,  513, 1179,  602, 1175,  513,
     1174,  534,  534,  534,  571, 1173,  593,  593,  593, 1750,
      545,  513, 1750,  544,  544,  544, 1166,  513, 1750,  545,
      647,  647,  647,  647, 1754,  545,  786,  786,  786,  545,

     1754,  546, 1165, 1164,  571,  571,  571,  790,  790,  790,
      546,  513,  513,  513,  522,  545,  546,  602,  602,  602,
      546, 1158, 1156,  522, 1155,  522,  522,  522,  522,  522,
      795,  795,  795,  522, 1154, 1757,  546,  522, 1758,  557,
     1012, 1757,  558, 1012, 1758,  545,  545,  545,  557,  522,
     1012,  558, 1153, 1807,  557,  522, 1152,  558,  557, 1807,
     1149,  558,  653,  653,  653,  653,  546,  546,  546,  659,
      659,  659,  659, 1148,  557, 1208,  781,  558, 1208,  522,
      522,  522,  530, 1147,  607, 1208,  607,  607,  607,  607,
     1146,  530,  787,  530,  530,  530,  530,  530,  607, 1145,

     1144,  530, 1143, 1141,  557,  557,  557,  558,  558,  558,
      559,  658,  658,  658,  658, 1140,  607,  530, 1751,  559,
     1751,  560, 1139,  658, 1751,  559,  781,  781,  781,  559,
      560,  660,  660,  660,  660, 1137,  560,  819,  819,  819,
      560,  658,  787,  787,  787,  559, 1136,  530,  530,  530,
      550,  733,  733,  733,  733, 1135,  560, 1216, 1134,  550,
     1216,  550,  550,  550,  550,  550,  666, 1216,  666,  550,
     1133,  666,  666,  666,  666,  559,  559,  559, 1131,  734,
      734,  734,  734, 1130,  565,  550,  560,  560,  560,  566,
     1129,  734, 1128,  565,  735,  735,  735,  735,  566,  565,

      859,  859,  859,  565,  566,  594, 1127,  594,  566,  734,
      594,  594,  594,  594,  594,  550,  550,  550,  555,  565,
      741,  741,  741,  741,  566,  567,  863,  863,  863,  555,
      555,  555,  555,  555,  567, 1126, 1227,  555,  579, 1227,
      567,  555, 1810,  580,  567, 1125, 1227,  579, 1810,  565,
      565,  565,  580,  579,  566,  566,  566,  579,  580,  555,
      567,  581,  580, 1124,  594,  594,  594,  880,  880,  880,
      581, 1811, 1235,  579, 1123, 1235,  581, 1811,  580, 1122,
      581,  788, 1235,  555,  555,  555,  736,  736,  736,  736,
      567,  567,  567, 1121, 1119,  879,  581,  738,  736,  738,

      738,  738,  738,  579,  579,  579, 1118, 1851,  580,  580,
      580, 1117,  603, 1851,  603,  609,  736,  603,  603,  603,
      603,  603, 1116, 1115,  609, 1114,  581,  581,  581,  585,
      609,  788,  788,  788,  609,  884,  884,  884,  585, 1113,
      585,  585,  585,  585,  585,  879,  879,  879,  585, 1852,
      609,  667,  585,  667,  667, 1852,  667,  667,  667,  667,
      815, 1112, 1111,  759,  807,  807,  807,  807,  610, 1106,
      585,  603,  603,  603, 1105,  815, 1104,  610,  759, 1893,
      609,  609,  609,  610,  737, 1893,  737,  610, 1103,  737,
      737,  737,  737,  885,  585,  585,  585,  586,  759,  839,

      839,  839,  839,  610,  612, 1102,  586, 1101,  586,  586,
      586,  586,  586,  612, 1225, 1894,  586, 1225, 1100,  612,
      586, 1894, 1099,  612, 1225,  815,  815,  815,  759,  759,
      759,  622,  586,  610,  610,  610, 1098, 1097,  586,  612,
      622, 1096, 1095,  885,  885,  885,  622,  888,  888,  888,
      622,  732, 1093,  732,  732, 1091,  732,  732,  732,  732,
      760, 1225,  586,  586,  586,  591,  622, 1090,  732,  612,
      612,  612,  623, 1089,  591,  760,  591,  591,  591,  591,
      591,  623,  698, 1085,  591,  698,  732,  623,  591, 1084,
     1083,  623,  698,  624, 1076,  760,  622,  622,  622,  886,

      591, 1075,  624,  698, 1074, 1068,  591,  623,  624,  893,
      893,  893,  624,  699, 1233, 1066,  699, 1233, 1065,  700,
     1064, 1063,  700,  699, 1233,  760,  760,  760,  624,  700,
      591,  591,  591,  600,  699, 1062, 1059,  623,  623,  623,
      700, 1058,  600, 1057,  600,  600,  600,  600,  600,  886,
      886,  886,  600,  698,  698,  698,  600, 1056,  624,  624,
      624, 1233,  701, 1055,  700,  701,  702, 1054,  600,  702,
     1053, 1051,  701, 1050,  600, 1049,  702,  804,  804,  804,
      804, 1047, 1046,  701,  699,  699,  699,  702, 1045,  804,
      700,  700,  700,  809,  809,  809,  809, 1044,  600,  600,

      600,  608,  917,  917,  917,  809,  913,  804, 1043,  701,
      608,  702,  608,  608,  608,  608,  608, 1041, 1040,  703,
      608,  913,  703,  809,  905,  905,  905,  905, 1039,  703,
      936,  936,  936,  701,  701,  701,  608,  702,  702,  702,
      703,  704, 1038, 1037,  704,  937,  937,  937, 1036,  705,
      799,  704,  705,  706, 1035, 1752,  706, 1752, 1034,  705,
     1033, 1752,  704,  706,  857,  799,  608,  608,  608,  631,
      705,  913,  913,  913,  706,  703, 1032, 1031,  631,  857,
      631,  631,  631,  631,  631,  799,  707, 1029,  631,  707,
      703,  703,  703, 1028,  704, 1240,  707, 1027, 1240,  857,

      705,  706, 1026,  980,  631, 1240, 1025,  707,  942,  942,
      942, 1024,  704,  704,  704,  799,  799,  799, 1023, 1022,
      705,  705,  705, 1021,  706,  706,  706, 1009, 1008,  857,
      857,  857,  980,  707,  631,  631,  631,  651,  651,  651,
      651,  708, 1242, 1007,  708, 1242,  651,  651,  651,  651,
     1000,  708, 1242,  980,  980,  980,  999,  707,  707,  707,
      998,  973,  708,  651,  651,  651,  651,  651,  651,  671,
      671,  671,  671,  709,  858,  971,  709,  970,  671,  671,
      671,  671,  710,  709,  979,  710, 1030, 1030, 1030,  858,
      969,  968,  710,  967,  709,  671,  671,  671,  671,  671,

      671,  708,  966,  710,  965,  711,  964,  963,  711,  858,
      962,  961,  708,  708,  708,  711,  959,  712,  958,  957,
      712,  714,  979,  983,  714,  710,  711,  712, 1042, 1042,
     1042,  714,  978,  956,  979,  979,  979,  955,  712,  858,
      858,  858,  714,  954,  709,  709,  709,  953,  952,  719,
      951,  948,  719,  710,  710,  710,  944,  983,  720,  719,
      941,  720, 1243,  978,  711, 1243,  933,  712,  720,  932,
      719,  931, 1243,  983,  983,  983,  711,  711,  711,  720,
      930,  929,  978,  978,  978, 1048, 1048, 1048,  712,  712,
      712,  925,  714,  714,  714,  715,  715,  715,  715,  715,

      715,  715,  720,  715,  924,  715,  715,  715,  715,  719,
      715,  715,  715,  715,  923, 1243,  722,  922,  921,  722,
      719,  719,  719, 1052, 1052, 1052,  722,  920,  919,  720,
      720,  720,  721,  721,  721,  721,  721,  722,  721,  721,
      918,  721,  721,  721,  916,  915,  721,  727,  721,  914,
      727, 1094, 1094, 1094,  721,  721,  725,  727,  721,  725,
     1120, 1120, 1120,  722,  904,  903,  725,  900,  727,  899,
      898,  721,  896,  721,  721,  721,  895,  725,  902,  902,
      902,  902, 1069, 1069, 1069, 1069,  721,  722,  722,  722,
      902,  728,  894,  892,  728,  891,  727,  890,  721,  721,

      721,  728,  721,  721,  721,  721,  721,  883,  902,  981,
      882,  881,  728,  725,  729,  877,  989,  729,  727,  727,
      727, 1132, 1132, 1132,  729,  876,  875,  725,  725,  725,
      726,  726,  726,  726,  726,  729,  726,  726,  728,  726,
      726,  726,  874,  873,  726,  869,  726,  981,  989, 1138,
     1138, 1138,  726,  726,  868,  730,  726,  867,  730,  981,
      981,  981,  728,  728,  728,  730,  989,  989,  989,  726,
      866,  726,  726,  726,  865,  740,  730,  740,  726,  864,
      740,  740,  740,  740,  740,  729,  729,  729,  862,  803,
      803,  803,  803,  803,  861,  860,  726,  726,  726,  742,

      726,  726,  726,  726,  726,  856,  730,  855,  742,  854,
      742,  742,  742,  742,  742, 1142, 1142, 1142,  742, 1184,
     1184, 1184,  743, 1320, 1320, 1320,  730,  730,  730, 1229,
      853,  743, 1229,  744,  740,  740,  740,  743,  852, 1229,
      745,  743,  744,  803,  803,  803,  848,  847,  744,  745,
     1244,  846,  744, 1244,  845,  745,  844,  743,  751,  745,
     1244,  752,  837,  835,  742,  742,  742,  751,  744, 1247,
      752,  834, 1247,  751, 1229,  745,  752,  751,  833, 1247,
      752,  990,  753, 1159, 1159, 1159, 1159,  743,  743,  743,
      832,  753, 1252,  751,  772, 1252,  752,  753,  744,  744,

      744,  753, 1252,  772,  831,  745,  745,  745, 1254,  772,
      827, 1254,  986,  772,  826,  991,  825,  753, 1254,  824,
      990,  773,  823,  751,  751,  751,  752,  752,  752,  772,
      773,  990,  990,  990,  822,  774,  773, 1324, 1324, 1324,
      773,  991, 1260, 1258,  774, 1260, 1258,  753,  753,  753,
      774,  821, 1260, 1258,  774,  986,  773,  820,  818,  772,
      772,  772,  986,  986,  986,  991,  991,  991,  817,  791,
      774,  791,  816,  806,  791,  791,  791,  791,  791,  808,
      808,  808,  808,  808,  805,  802,  773,  773,  773,  810,
     1258,  995,  801,  907,  907,  907,  907,  800,  810,  798,

      774,  774,  774,  780,  810,  907,  797,  796,  810,  794,
      897,  793,  780,  792,  780,  780,  780,  780,  780, 1387,
     1387, 1387,  780,  907,  810,  897,  780,  785,  791,  791,
      791,  811,  784,  808,  808,  808,  783,  779,  780,  778,
      811,  995,  995,  995,  780,  897,  811,  777,  812, 1002,
      811,  776,  993,  775,  810,  810,  810,  812,  771,  812,
      812,  812,  812,  812,  770,  769,  811,  812,  780,  780,
      780,  789, 1391, 1391, 1391,  897,  897,  897,  993,  768,
      789,  767,  789,  789,  789,  789,  789,  766,  764, 1002,
      789,  763, 1004,  762,  789,  758,  811,  811,  811, 1002,

     1002, 1002,  993,  993,  993,  757,  789, 1489, 1489, 1489,
      814,  756,  789,  812,  812,  812,  755,  754,  997,  814,
      985,  750,  749,  985,  748,  814,  838,  747,  838,  814,
      985,  838,  838,  838,  838,  838,  789,  789,  789,  813,
      997,  985, 1004, 1004, 1004,  814,  828,  746,  813,  739,
      813,  813,  813,  813,  813,  828, 1245, 1256,  813, 1245,
     1256,  828,  731,  829,  718,  828, 1245, 1256,  997,  997,
      997,  717,  829,  716,  813,  814,  814,  814,  829,  697,
      830,  828,  829,  696,  695,  838,  838,  838,  694,  830,
      693,  985,  985,  985,  692,  830,  690,  689,  829,  830,

     1404,  688,  687, 1404,  813,  813,  813,  840,  685,  683,
     1404,  828,  828,  828, 1245,  830,  840, 1256,  840,  840,
      840,  840,  840,  841,  682,  680,  840,  679,  829,  829,
      829,  678,  841,  676,  842, 1533, 1533, 1533,  841,  675,
      674, 1409,  841,  842, 1409,  830,  830,  830,  836,  842,
      673, 1409,  672,  842, 1006,  662,  843,  836,  841,  836,
      836,  836,  836,  836,  661,  843,  646,  836,  645,  842,
      640,  843,  840,  840,  840,  843, 1006,  849,  639,  634,
      633,  632,  627,  836, 1411,  626,  849, 1411,  841,  841,
      841,  843,  849,  625, 1411,  621,  849,  620,  619,  842,

      842,  842,  618,  617, 1006, 1006, 1006,  615, 1253,  614,
      850, 1253,  849,  836,  836,  836,  613,  851, 1253,  850,
      606,  843,  843,  843, 1413,  850,  851, 1413,  605,  850,
      604,  870,  851,  599, 1413,  597,  851,  596,  871,  595,
      870,  589,  849,  849,  849,  850,  870,  871, 1420, 1010,
      870, 1420,  851,  871,  889,  872,  889,  871, 1420,  889,
      889,  889,  889,  889,  872,  584,  870, 1253, 1257,  583,
      872, 1257,  582,  871,  872,  850,  850,  850, 1257, 1014,
      578, 1010,  851,  851,  851,  901,  901,  901,  901,  901,
      872,  577, 1425,  576,  575, 1425,  870,  870,  870, 1010,

     1010, 1010, 1425,  871,  871,  871,  906,  906,  906,  906,
      906, 1014,  574,  889,  889,  889, 1428,  572,  570, 1428,
      872,  872,  872,  878,  569,  568, 1428,  563, 1257, 1014,
     1014, 1014,  878,  562,  878,  878,  878,  878,  878,  901,
      901,  901,  878,  561,  553, 1436,  878,  552, 1436, 1015,
      908, 1015, 1015, 1015, 1015, 1436,  551,  909,  878,  908,
      906,  906,  906,  549,  878,  908,  909,  548,  910,  908,
      547,  543,  909,  542,  541,  540,  909,  910,  539,  910,
      910,  910,  910,  910,  537,  908, 1060,  910,  878,  878,
      878,  887,  909, 1016,  536, 1016, 1016, 1016, 1016,  535,

      887, 1060,  887,  887,  887,  887,  887,  528, 1439, 1434,
      887, 1439, 1434,  527,  887,  908,  908,  908, 1439, 1434,
      526, 1060,  909,  909,  909,  521,  887,  519, 1442,  518,
      912, 1442,  887,  910,  910,  910,  517,  511, 1442,  912,
     1001,  506,  505, 1001, 1444,  912,  504, 1444,  498,  912,
     1001, 1060, 1060, 1060, 1444,  497,  887,  887,  887,  911,
      496, 1001,  495,  494,  492,  912,  926,  490,  911, 1434,
      911,  911,  911,  911,  911,  926, 1447, 1438,  911, 1447,
     1438,  926,  489,  927,  488,  926, 1447, 1438,  483,  482,
      481,  473,  927,  472,  911,  912,  912,  912,  927,  455,

      928,  926,  927,  454, 1444, 1061,  429,  428, 1018,  928,
      426, 1001, 1001, 1001,  424,  928,  422, 1018,  927,  928,
     1061,  421,  420, 1018,  911,  911,  911, 1018,  419,  417,
      415,  926,  926,  926, 1449,  928, 1551, 1449,  413, 1551,
     1061, 1438,  412, 1018, 1449,  411, 1551,  386,  927,  927,
      927, 1078, 1078, 1078, 1078, 1078,  385,  368, 1168, 1168,
     1168, 1168, 1168,  349,  348,  928,  928,  928,  940,  336,
     1061, 1061, 1061, 1018, 1018, 1018, 1019,  940,  335,  940,
      940,  940,  940,  940, 1092, 1019,  322,  940,  321, 1020,
     1553, 1019,  319, 1553,  318, 1019,  317,  312, 1020, 1092,

     1553,  311,  310,  940, 1020, 1078, 1078, 1078, 1020,  298,
      297, 1019, 1168, 1168, 1168, 1560,  296, 1150, 1560, 1092,
     1565,  285,  284, 1565, 1020, 1560,  281,  280,  279,  276,
     1565,  274, 1150,  940,  940,  940,  943,  943,  943,  943,
      273, 1019, 1019, 1019,  272,  943,  943,  943,  943, 1092,
     1092, 1092, 1150,  252, 1020, 1020, 1020, 1151,  251,  250,
      239, 1070,  943,  943,  943,  943,  943,  943,  945,  945,
     1070,  945, 1151,  945,  238,  227, 1070,  945,  945,  945,
     1070,  945, 1150, 1150, 1150, 1567,  218,  217, 1567,  945,
     1071, 1574, 1151,  216, 1574, 1567, 1070, 1580,  175, 1071,

     1580, 1574,  169,  168,  167, 1071,  945, 1580,  945, 1071,
     1301, 1301, 1301, 1301, 1301, 1368, 1368, 1368, 1368, 1368,
      163,  160, 1151, 1151, 1151, 1071, 1070, 1070, 1070,  159,
      158,  151,  145,  945,  139,  945,  945,  982,  982,  982,
      982,  982, 1585,  982,  982, 1585,  982,  982,  982,  135,
      126,  982, 1585,  982,  124, 1071, 1071, 1071, 1617,  982,
      982, 1617,  123,  982, 1301, 1301, 1301,  122, 1617, 1368,
     1368, 1368,  117,  114, 1620,  113,  982, 1620,  982,  982,
      982,  112, 1072, 1625, 1620,  982, 1625,  108,  104, 1628,
      102, 1072, 1628, 1625,  101,  100,   95, 1072,   91, 1628,

       90, 1072,   89,  982,  982,  982,   82,  982,  982,  982,
      982,  982,  984,  984,  984,  984,  984, 1072,  984,  984,
       79,  984,  984,  984,   78,   77,  984,   70,  984,   64,
       63,   62,   55,   48,  984,  984,   44,   35,  984,   34,
       31, 1073,    0, 1641, 1641, 1641,    0, 1072, 1072, 1072,
     1073,  984,    0,  984,  984,  984, 1073, 1182,    0,    0,
     1073, 1641, 1641, 1641, 1641,    0,    0,    0,    0,    0,
        0,    0, 1182,    0,    0,    0, 1073,    0,  984,  984,
      984,    0,  984,  984,  984,  984,  984,  992,  992,  992,
      992,  992, 1182,  992,  992,    0,  992,  992,  992,    0,

        0,  992,    0,  992,    0,    0, 1073, 1073, 1073,  992,
      992,    0,    0,  992,    0,    0,    0,    0,    0,    0,
        0,    0, 1182, 1182, 1182,    0,  992,    0,  992,  992,
      992,    0,    0,    0, 1318,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1318,
        0,    0,    0,  992,  992,  992,    0,  992,  992,  992,
      992,  992,  996,  996,  996,  996,  996,  996,  996, 1318,
      996, 1319,  996,  996,  996,  996,    0,  996,  996,  996,
      996, 1011, 1011, 1011, 1011, 1011, 1319, 1011, 1011,    0,
     1011, 1011, 1011, 1077,    0, 1011, 1079, 1011,    0, 1318,

     1318, 1318, 1077, 1011, 1011, 1079, 1319, 1011, 1077,    0,
        0, 1079, 1077,    0,    0, 1079,    0,    0,    0,    0,
     1011,    0, 1011, 1011, 1011,    0,    0,    0, 1077,    0,
        0, 1079,    0,    0,    0,    0, 1319, 1319, 1319,    0,
        0,    0, 1385,    0,    0,    0,    0, 1011, 1011, 1011,
        0, 1011, 1011, 1011, 1011, 1011, 1017, 1385, 1077, 1077,
     1077, 1079, 1079, 1079, 1080, 1017,    0, 1017, 1017, 1017,
     1017, 1017,    0, 1080,    0, 1017,    0, 1385,    0, 1080,
        0, 1082,    0, 1080,    0,    0,    0,    0,    0,    0,
     1082, 1017,    0,    0,    0,    0, 1082,    0,    0, 1080,

     1082,    0,    0,    0,    0,    0,    0, 1385, 1385, 1385,
     1386,    0,    0,    0,    0,    0, 1082,    0,    0,    0,
        0, 1017, 1017, 1017, 1067, 1386,    0,    0,    0, 1080,
     1080, 1080,    0, 1067,    0, 1067, 1067, 1067, 1067, 1067,
        0,    0,    0, 1067,    0, 1386, 1082, 1082, 1082, 1086,
        0,    0, 1087,    0,    0,    0,    0,    0, 1086, 1067,
        0, 1087,    0, 1088, 1086,    0,    0, 1087, 1086,    0,
        0, 1087, 1088,    0,    0, 1386, 1386, 1386, 1088,    0,
        0,    0, 1088,    0, 1086,    0,    0, 1087,    0, 1067,
     1067, 1067, 1081,    0,    0,    0,    0,    0, 1088,    0,

        0, 1081,    0, 1081, 1081, 1081, 1081, 1081,    0,    0,
        0, 1081,    0,    0, 1086, 1086, 1086, 1087, 1087, 1087,
        0,    0,    0,    0,    0,    0, 1108, 1081, 1088, 1088,
     1088, 1109,    0,    0,    0, 1108,    0,    0,    0,    0,
     1109, 1108,    0,    0,    0, 1108, 1109,    0,    0,    0,
     1109,    0,    0,    0,    0,    0,    0, 1081, 1081, 1081,
     1107, 1108,    0,    0,    0,    0, 1109, 1110,    0, 1107,
        0, 1107, 1107, 1107, 1107, 1107, 1110,    0,    0, 1107,
        0,    0, 1110,    0,    0,    0, 1110,    0,    0,    0,
        0, 1108, 1108, 1108, 1160, 1107, 1109, 1109, 1109,    0,

        0, 1161, 1110, 1160,    0,    0,    0,    0,    0, 1160,
     1161,    0,    0, 1160,    0,    0, 1161,    0,    0,    0,
     1161,    0, 1162,    0,    0, 1107, 1107, 1107,    0, 1160,
        0, 1162, 1110, 1110, 1110, 1157, 1161, 1162,    0,    0,
        0, 1162,    0, 1163, 1157,    0, 1157, 1157, 1157, 1157,
     1157,    0, 1163,    0, 1157,    0, 1167, 1162, 1163, 1160,
     1160, 1160, 1163,    0, 1169, 1167, 1161, 1161, 1161,    0,
     1157, 1167,    0, 1169,    0, 1167,    0, 1170, 1163, 1169,
        0,    0,    0, 1169,    0,    0, 1170, 1162, 1162, 1162,
        0, 1167, 1170,    0,    0,    0, 1170,    0,    0, 1169,

     1157, 1157, 1157,    0,    0, 1172,    0,    0, 1163, 1163,
     1163,    0, 1170,    0, 1172,    0,    0, 1176,    0,    0,
     1172, 1167, 1167, 1167, 1172,    0, 1176,    0,    0, 1169,
     1169, 1169, 1176,    0,    0,    0, 1176,    0,    0,    0,
     1172,    0, 1170, 1170, 1170, 1171,    0,    0,    0,    0,
        0,    0, 1176,    0, 1171,    0, 1171, 1171, 1171, 1171,
     1171,    0,    0,    0, 1171,    0, 1177,    0,    0,    0,
     1172, 1172, 1172,    0,    0, 1177,    0,    0, 1178,    0,
     1171, 1177, 1176, 1176, 1176, 1177,    0, 1178,    0,    0,
        0,    0,    0, 1178,    0,    0,    0, 1178,    0, 1287,

        0, 1177,    0,    0,    0,    0, 1288,    0, 1287,    0,
     1171, 1171, 1171, 1178, 1287, 1288,    0,    0, 1287,    0,
        0, 1288,    0,    0,    0, 1288,    0,    0,    0,    0,
        0, 1177, 1177, 1177, 1287,    0,    0,    0,    0, 1289,
        0, 1288,    0, 1178, 1178, 1178, 1197, 1197, 1289, 1197,
        0, 1197,    0,    0, 1289, 1197, 1197, 1197, 1289, 1197,
        0,    0,    0,    0, 1287, 1287, 1287, 1197, 1295,    0,
        0, 1288, 1288, 1288, 1289,    0,    0, 1295,    0,    0,
        0,    0,    0, 1295, 1197,    0, 1197, 1295,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 1295, 1289, 1289, 1289,    0,    0,    0,
        0, 1197,    0, 1197, 1197, 1222, 1222, 1222, 1222, 1222,
        0, 1222, 1222,    0, 1222, 1222, 1222,    0,    0, 1222,
        0, 1222,    0, 1295, 1295, 1295,    0, 1222, 1222,    0,
        0, 1222,    0,    0, 1296,    0,    0,    0,    0,    0,
        0,    0,    0, 1296, 1222,    0, 1222, 1222, 1222, 1296,
        0,    0,    0, 1296,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1296,
        0, 1222, 1222, 1222,    0, 1222, 1222, 1222, 1222, 1222,
     1223, 1223, 1223, 1223, 1223,    0, 1223,    0,    0, 1223,

     1223, 1223,    0,    0, 1223,    0, 1223,    0,    0, 1296,
     1296, 1296, 1223, 1223,    0,    0, 1223, 1297,    0,    0,
        0,    0,    0,    0,    0,    0, 1297,    0,    0, 1223,
        0, 1223, 1297, 1223,    0, 1302, 1297,    0,    0,    0,
        0,    0,    0,    0, 1302,    0,    0,    0,    0,    0,
     1302,    0, 1297,    0, 1302,    0, 1223, 1223, 1223,    0,
     1223, 1223, 1223, 1223, 1223, 1224, 1224, 1224, 1224, 1224,
     1302, 1224, 1224,    0, 1224, 1224, 1224,    0,    0, 1224,
        0, 1224, 1297, 1297, 1297,    0,    0, 1224, 1224,    0,
        0, 1224,    0,    0,    0,    0,    0,    0,    0,    0,

     1302, 1302, 1302,    0, 1224,    0, 1224, 1224, 1224,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1224, 1224, 1224,    0, 1224, 1224, 1224, 1224, 1224,
     1228, 1228, 1228, 1228, 1228, 1228, 1228,    0, 1228,    0,
     1228, 1228, 1228, 1228,    0, 1228, 1228, 1228, 1228, 1265,
     1265, 1265, 1265, 1265,    0, 1265, 1265,    0, 1265, 1265,
     1265, 1303,    0, 1265, 1304, 1265,    0,    0,    0,    0,
     1303, 1265, 1265, 1304,    0, 1265, 1303,    0, 1310, 1304,
     1303,    0,    0, 1304,    0,    0,    0, 1310, 1265, 1311,

     1265, 1265, 1265, 1310,    0,    0, 1303, 1310, 1311, 1304,
        0,    0,    0,    0, 1311,    0,    0,    0, 1311,    0,
        0,    0,    0, 1310,    0, 1265, 1265, 1265,    0, 1265,
     1265, 1265, 1265, 1265, 1311,    0, 1303, 1303, 1303, 1304,
     1304, 1304, 1312,    0,    0,    0,    0,    0,    0,    0,
        0, 1312,    0, 1310, 1310, 1310,    0, 1312,    0, 1354,
        0, 1312,    0,    0, 1311, 1311, 1311, 1355, 1354,    0,
     1356,    0,    0,    0, 1354,    0, 1355, 1312, 1354, 1356,
        0, 1362, 1355,    0, 1363, 1356, 1355,    0,    0, 1356,
     1362,    0,    0, 1363, 1354, 1364, 1362,    0,    0, 1363,

     1362,    0, 1355, 1363, 1364, 1356,    0, 1312, 1312, 1312,
     1364,    0,    0,    0, 1364,    0, 1362,    0,    0, 1363,
        0,    0,    0,    0, 1354, 1354, 1354,    0,    0,    0,
     1364,    0, 1355, 1355, 1355, 1356, 1356, 1356,    0,    0,
        0,    0,    0,    0, 1369,    0, 1362, 1362, 1362, 1363,
     1363, 1363,    0, 1369,    0, 1370,    0,    0, 1371, 1369,
     1364, 1364, 1364, 1369, 1370,    0, 1377, 1371,    0, 1378,
     1370,    0,    0, 1371, 1370, 1377,    0, 1371, 1378, 1369,
     1379, 1377,    0,    0, 1378, 1377,    0,    0, 1378, 1379,
     1370,    0,    0, 1371,    0, 1379,    0,    0,    0, 1379,

        0, 1377,    0,    0, 1378,    0,    0,    0,    0, 1369,
     1369, 1369,    0,    0,    0, 1379,    0,    0,    0,    0,
     1370, 1370, 1370, 1371, 1371, 1371,    0,    0,    0,    0,
        0, 1377, 1377, 1377, 1378, 1378, 1378,    0,    0,    0,
        0,    0,    0,    0,    0, 1379, 1379, 1379, 1421, 1421,
     1421, 1421, 1421, 1421, 1421,    0, 1421,    0, 1421, 1421,
     1421, 1421,    0, 1421, 1421, 1421, 1421, 1433, 1433, 1433,
     1433, 1433,    0, 1433, 1433,    0, 1433, 1433, 1433,    0,
        0, 1433,    0, 1433,    0,    0,    0,    0,    0, 1433,
     1433,    0,    0, 1433,    0,    0, 1460,    0,    0,    0,

        0,    0,    0,    0,    0, 1460, 1433,    0, 1433, 1433,
     1433, 1460,    0,    0,    0, 1460,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1460,    0, 1433, 1433, 1433,    0, 1433, 1433, 1433,
     1433, 1433, 1435, 1435, 1435, 1435, 1435,    0, 1435, 1435,
        0, 1435, 1435, 1435,    0,    0, 1435,    0, 1435,    0,
        0, 1460, 1460, 1460, 1435, 1435,    0,    0, 1435,    0,
        0, 1461,    0,    0,    0,    0,    0,    0,    0,    0,
     1461, 1435,    0, 1435, 1435, 1435, 1461,    0,    0,    0,
     1461,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 1461,    0, 1435, 1435,
     1435,    0, 1435, 1435, 1435, 1435, 1435, 1441, 1441, 1441,
     1441, 1441,    0, 1441, 1441,    0, 1441, 1441, 1441,    0,
        0, 1441,    0, 1441,    0,    0, 1461, 1461, 1461, 1441,
     1441,    0,    0, 1441,    0,    0, 1462,    0,    0,    0,
        0,    0,    0,    0,    0, 1462, 1441,    0, 1441, 1441,
     1441, 1462,    0,    0,    0, 1462,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1462,    0, 1441, 1441, 1441,    0, 1441, 1441, 1441,
     1441, 1441, 1445, 1445, 1445, 1445, 1445,    0, 1445, 1445,

        0, 1445, 1445, 1445,    0,    0, 1445,    0, 1445,    0,
        0, 1462, 1462, 1462, 1445, 1445,    0,    0, 1445,    0,
        0, 1469,    0,    0,    0,    0,    0,    0,    0,    0,
     1469, 1445,    0, 1445, 1445, 1445, 1469,    0,    0,    0,
     1469,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1469,    0, 1445, 1445,
     1445,    0, 1445, 1445, 1445, 1445, 1445, 1446, 1446, 1446,
     1446, 1446,    0, 1446, 1446,    0, 1446, 1446, 1446,    0,
        0, 1446, 1470, 1446,    0, 1471, 1469, 1469, 1469, 1446,
     1446, 1470,    0, 1446, 1471,    0, 1477, 1470,    0,    0,

     1471, 1470,    0,    0, 1471, 1477, 1446, 1478, 1446, 1446,
     1446, 1477,    0,    0,    0, 1477, 1478, 1470,    0,    0,
     1471,    0, 1478,    0,    0,    0, 1478,    0,    0,    0,
        0, 1477,    0, 1446, 1446, 1446,    0, 1446, 1446, 1446,
     1446, 1446, 1478,    0,    0, 1479,    0, 1470, 1470, 1470,
     1471, 1471, 1471,    0, 1479,    0, 1504,    0,    0,    0,
     1479, 1477, 1477, 1477, 1479, 1504,    0, 1505,    0,    0,
     1506, 1504, 1478, 1478, 1478, 1504, 1505,    0, 1513, 1506,
     1479, 1514, 1505,    0,    0, 1506, 1505, 1513,    0, 1506,
     1514, 1504,    0, 1513,    0,    0, 1514, 1513,    0,    0,

     1514,    0, 1505,    0,    0, 1506,    0,    0,    0,    0,
     1479, 1479, 1479, 1513,    0,    0, 1514,    0,    0,    0,
        0, 1504, 1504, 1504,    0,    0,    0,    0,    0,    0,
        0,    0, 1505, 1505, 1505, 1506, 1506, 1506,    0,    0,
     1515,    0,    0, 1513, 1513, 1513, 1514, 1514, 1514, 1515,
        0, 1521,    0,    0, 1522, 1515,    0,    0,    0, 1515,
     1521,    0, 1523, 1522,    0,    0, 1521,    0,    0, 1522,
     1521, 1523,    0, 1522,    0, 1515,    0, 1523,    0,    0,
        0, 1523,    0,    0,    0,    0, 1521,    0,    0, 1522,
        0,    0,    0,    0,    0,    0,    0, 1523,    0,    0,

        0,    0,    0,    0,    0, 1515, 1515, 1515,    0,    0,
        0,    0,    0,    0,    0,    0, 1521, 1521, 1521, 1522,
     1522, 1522,    0,    0,    0,    0,    0, 1523, 1523, 1523,
     1558, 1558, 1558, 1558, 1558,    0, 1558, 1558,    0, 1558,
     1558, 1558,    0,    0, 1558,    0, 1558,    0,    0,    0,
        0,    0, 1558, 1558,    0,    0, 1558,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1558,
        0, 1558, 1558, 1558,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1558, 1558, 1558,    0,

     1558, 1558, 1558, 1558, 1558, 1572, 1572, 1572, 1572, 1572,
        0, 1572, 1572,    0, 1572, 1572, 1572,    0,    0, 1572,
        0, 1572,    0,    0,    0,    0,    0, 1572, 1572,    0,
        0, 1572,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1572,    0, 1572, 1572, 1572,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1572, 1572, 1572,    0, 1572, 1572, 1572, 1572, 1572,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,

     1646, 1646, 1646, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
     1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
     1650, 1650, 1650, 1650, 1650, 1651, 1651, 1651, 1651, 1651,

     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1652, 1652,
        0,    0,    0, 1652, 1652, 1652, 1652, 1652, 1652, 1652,
     1652, 1652, 1652, 1652, 1652,    0, 1652, 1652, 1652, 1652,
     1652, 1653,    0, 1653,    0,    0,    0, 1653,    0, 1653,
     1653, 1654, 1654,    0,    0, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1655, 1655, 1655, 1655, 1655, 1655,
     1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655,
     1655, 1655, 1655, 1655, 1655, 1655, 1655, 1656,    0, 1656,

        0,    0, 1656, 1656, 1656,    0, 1656, 1656,    0, 1656,
     1656, 1656, 1656, 1656, 1656, 1657,    0, 1657,    0,    0,
     1657, 1657, 1657,    0, 1657, 1657,    0, 1657, 1657, 1657,
     1657, 1657, 1657, 1658,    0, 1658,    0,    0, 1658, 1658,
        0,    0, 1658, 1658,    0,    0, 1658,    0, 1658, 1658,
     1658, 1659,    0, 1659,    0,    0, 1659, 1659, 1659, 1659,
     1659, 1659,    0, 1659, 1659, 1659, 1659, 1659, 1659, 1660,
        0, 1660,    0,    0, 1660, 1660, 1660, 1660, 1660, 1660,
        0, 1660, 1660, 1660, 1660, 1660, 1660, 1661,    0, 1661,
        0,    0, 1661, 1661,    0, 1661, 1661, 1661,    0,    0,

     1661,    0, 1661, 1661, 1661, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1663,    0,
        0,    0, 1663,    0, 1663, 1663, 1664, 1664, 1664,    0,
     1664,    0,    0, 1664,    0,    0, 1664, 1664, 1664, 1664,
     1664, 1665,    0,    0, 1665,    0, 1665,    0, 1665, 1665,
        0,    0, 1665, 1665, 1665, 1665,    0, 1665, 1665, 1665,
     1665, 1665, 1665, 1665, 1666, 1666,    0, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1667, 1667,    0,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1670,    0, 1670,    0,    0, 1670, 1670,
        0, 1670, 1670, 1670,    0,    0, 1670, 1670, 1670, 1670,
     1670, 1671,    0, 1671,    0,    0,    0, 1671,    0, 1671,
     1671, 1672, 1672,    0,    0, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1674,    0, 1674,    0,    0, 1674,

     1674, 1674,    0, 1674, 1674,    0, 1674, 1674, 1674, 1674,
     1674, 1674, 1675,    0, 1675,    0,    0, 1675, 1675, 1675,
        0, 1675, 1675,    0, 1675, 1675, 1675, 1675, 1675, 1675,
     1676,    0, 1676,    0,    0, 1676, 1676, 1676,    0, 1676,
     1676,    0, 1676, 1676, 1676, 1676, 1676, 1676, 1677,    0,
     1677,    0,    0, 1677, 1677,    0,    0, 1677, 1677,    0,
        0, 1677,    0, 1677, 1677, 1677, 1678,    0, 1678,    0,
        0, 1678, 1678, 1678,    0, 1678, 1678,    0, 1678, 1678,
     1678, 1678, 1678, 1678, 1679,    0, 1679,    0,    0, 1679,
     1679, 1679,    0, 1679, 1679,    0, 1679, 1679,    0, 1679,

     1679, 1679, 1680,    0, 1680,    0,    0, 1680, 1680, 1680,
        0, 1680, 1680,    0, 1680, 1680, 1680, 1680, 1680, 1680,
     1681,    0, 1681,    0,    0, 1681, 1681, 1681,    0, 1681,
     1681,    0, 1681, 1681, 1681, 1681, 1681, 1681, 1682,    0,
     1682,    0,    0, 1682, 1682,    0,    0, 1682,    0,    0,
        0, 1682, 1682, 1682, 1682, 1682, 1683,    0, 1683,    0,
        0, 1683, 1683, 1683,    0, 1683, 1683,    0, 1683, 1683,
     1683, 1683, 1683, 1683, 1684,    0, 1684,    0,    0, 1684,
     1684, 1684, 1684, 1684, 1684,    0, 1684, 1684, 1684, 1684,
     1684, 1684, 1685,    0, 1685,    0,    0, 1685, 1685, 1685,

     1685, 1685, 1685,    0, 1685, 1685, 1685, 1685, 1685, 1685,
     1686,    0, 1686,    0,    0, 1686, 1686, 1686, 1686, 1686,
     1686,    0, 1686, 1686, 1686, 1686, 1686, 1686, 1687,    0,
     1687,    0,    0, 1687, 1687,    0, 1687, 1687, 1687,    0,
        0, 1687,    0, 1687, 1687, 1687, 1688,    0, 1688,    0,
        0, 1688, 1688, 1688, 1688, 1688, 1688,    0, 1688, 1688,
     1688, 1688, 1688, 1688, 1689,    0, 1689,    0,    0, 1689,
     1689, 1689, 1689, 1689, 1689,    0, 1689, 1689,    0, 1689,
     1689, 1689, 1690,    0, 1690,    0,    0, 1690, 1690, 1690,
     1690, 1690, 1690,    0, 1690, 1690, 1690, 1690, 1690, 1690,

     1691,    0, 1691,    0,    0, 1691, 1691, 1691, 1691, 1691,
     1691,    0, 1691, 1691, 1691, 1691, 1691, 1691, 1692,    0,
     1692,    0,    0, 1692, 1692,    0, 1692, 1692,    0,    0,
        0, 1692, 1692, 1692, 1692, 1692, 1693,    0, 1693,    0,
        0, 1693, 1693, 1693, 1693, 1693, 1693,    0, 1693, 1693,
     1693, 1693, 1693, 1693, 1696,    0,    0,    0, 1696,    0,
     1696, 1696, 1697,    0,    0,    0, 1697,    0, 1697, 1697,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699,
     1699, 1699,    0, 1699, 1699, 1699, 1699, 1699, 1699, 1699,
     1699, 1699, 1699, 1700,    0, 1700,    0,    0,    0, 1700,

        0, 1700, 1700, 1701,    0,    0, 1701,    0, 1701,    0,
     1701, 1701,    0,    0, 1701, 1701, 1701, 1701,    0, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1703, 1703,    0, 1703,
     1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703,
     1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1704,
     1704,    0,    0,    0, 1704, 1704, 1704, 1704, 1704, 1704,
     1704, 1704, 1704, 1704, 1704, 1704,    0, 1704, 1704, 1704,
     1704, 1704, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705,
     1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705,
     1705, 1705, 1705, 1705, 1705, 1706,    0,    0,    0, 1706,

        0, 1706, 1706, 1707,    0,    0,    0, 1707,    0, 1707,
     1707, 1709,    0, 1709,    0,    0, 1709, 1709,    0, 1709,
     1709, 1709,    0,    0, 1709, 1709, 1709, 1709, 1709, 1710,
        0, 1710,    0,    0,    0, 1710,    0, 1710, 1710, 1712,
        0, 1712,    0,    0, 1712, 1712,    0,    0, 1712, 1712,
        0, 1712, 1712,    0, 1712, 1712, 1712, 1713,    0, 1713,
        0,    0, 1713, 1713, 1713,    0, 1713, 1713,    0, 1713,
     1713, 1713, 1713, 1713, 1713, 1714,    0, 1714,    0,    0,
     1714, 1714, 1714,    0, 1714, 1714,    0, 1714, 1714, 1714,
     1714, 1714, 1714, 1715,    0, 1715,    0,    0, 1715, 1715,

     1715,    0, 1715, 1715,    0, 1715, 1715, 1715, 1715, 1715,
     1715, 1716,    0, 1716,    0,    0, 1716, 1716, 1716,    0,
     1716, 1716,    0, 1716, 1716, 1716, 1716, 1716, 1716, 1717,
        0, 1717,    0,    0, 1717, 1717,    0,    0, 1717, 1717,
        0,    0, 1717, 1717, 1717, 1717, 1717, 1718,    0, 1718,
        0,    0, 1718, 1718,    0,    0, 1718,    0,    0,    0,
     1718, 1718, 1718, 1718, 1718, 1719,    0, 1719,    0,    0,
     1719, 1719, 1719,    0, 1719, 1719,    0, 1719, 1719, 1719,
     1719, 1719, 1719, 1720,    0, 1720,    0,    0, 1720, 1720,
     1720,    0, 1720, 1720,    0, 1720, 1720, 1720, 1720, 1720,

     1720, 1721,    0, 1721,    0,    0, 1721, 1721,    0,    0,
     1721, 1721,    0,    0, 1721, 1721, 1721, 1721, 1721, 1722,
        0, 1722,    0,    0, 1722, 1722, 1722,    0, 1722, 1722,
        0, 1722, 1722, 1722, 1722, 1722, 1722, 1723,    0, 1723,
        0,    0, 1723, 1723,    0,    0, 1723,    0,    0,    0,
     1723, 1723, 1723, 1723, 1723, 1724,    0, 1724,    0,    0,
     1724, 1724,    0,    0, 1724, 1724,    0,    0, 1724,    0,
     1724, 1724, 1724, 1725,    0, 1725,    0,    0, 1725, 1725,
     1725,    0, 1725, 1725,    0, 1725, 1725, 1725, 1725, 1725,
     1725, 1726,    0, 1726,    0,    0, 1726, 1726, 1726,    0,

     1726, 1726,    0, 1726, 1726, 1726, 1726, 1726, 1726, 1727,
        0, 1727,    0,    0, 1727, 1727,    0,    0, 1727,    0,
        0,    0, 1727, 1727, 1727, 1727, 1727, 1728,    0, 1728,
        0,    0, 1728, 1728,    0,    0, 1728,    0,    0,    0,
     1728, 1728, 1728, 1728, 1728, 1729,    0, 1729,    0,    0,
     1729, 1729, 1729,    0, 1729, 1729,    0, 1729, 1729, 1729,
     1729, 1729, 1729, 1730,    0, 1730,    0,    0, 1730, 1730,
     1730,    0, 1730, 1730,    0, 1730, 1730, 1730, 1730, 1730,
     1730, 1731,    0, 1731,    0,    0, 1731, 1731,    0, 1731,
     1731, 1731,    0, 1731, 1731,    0, 1731, 1731, 1731, 1732,

        0, 1732,    0,    0, 1732, 1732, 1732, 1732, 1732, 1732,
        0, 1732, 1732, 1732, 1732, 1732, 1732, 1733,    0, 1733,
        0,    0, 1733, 1733, 1733, 1733, 1733, 1733,    0, 1733,
     1733, 1733, 1733, 1733, 1733, 1734,    0, 1734,    0,    0,
     1734, 1734, 1734, 1734, 1734, 1734,    0, 1734, 1734, 1734,
     1734, 1734, 1734, 1735,    0, 1735,    0,    0, 1735, 1735,
     1735, 1735, 1735, 1735,    0, 1735, 1735, 1735, 1735, 1735,
     1735, 1736,    0, 1736,    0,    0, 1736, 1736,    0, 1736,
     1736, 1736,    0,    0, 1736, 1736, 1736, 1736, 1736, 1737,
        0, 1737,    0,    0, 1737, 1737,    0, 1737, 1737,    0,

        0,    0, 1737, 1737, 1737, 1737, 1737, 1738,    0, 1738,
        0,    0, 1738, 1738, 1738, 1738, 1738, 1738,    0, 1738,
     1738, 1738, 1738, 1738, 1738, 1739,    0, 1739,    0,    0,
     1739, 1739, 1739, 1739, 1739, 1739,    0, 1739, 1739, 1739,
     1739, 1739, 1739, 1740,    0, 1740,    0,    0, 1740, 1740,
        0, 1740, 1740, 1740,    0,    0, 1740, 1740, 1740, 1740,
     1740, 1741,    0, 1741,    0,    0, 1741, 1741, 1741, 1741,
     1741, 1741,    0, 1741, 1741, 1741, 1741, 1741, 1741, 1742,
        0, 1742,    0,    0, 1742, 1742,    0, 1742, 1742,    0,
        0,    0, 1742, 1742, 1742, 1742, 1742, 1743,    0, 1743,

        0,    0, 1743, 1743,    0, 1743, 1743, 1743,    0,    0,
     1743,    0, 1743, 1743, 1743, 1744,    0, 1744,    0,    0,
     1744, 1744, 1744, 1744, 1744, 1744,    0, 1744, 1744, 1744,
     1744, 1744, 1744, 1745,    0, 1745,    0,    0, 1745, 1745,
     1745, 1745, 1745, 1745,    0, 1745, 1745, 1745, 1745, 1745,
     1745, 1746,    0, 1746,    0,    0, 1746, 1746,    0, 1746,
     1746,    0,    0,    0, 1746, 1746, 1746, 1746, 1746, 1747,
        0, 1747,    0,    0, 1747, 1747,    0, 1747, 1747,    0,
        0,    0, 1747, 1747, 1747, 1747, 1747, 1748,    0, 1748,
        0,    0, 1748, 1748, 1748, 1748, 1748, 1748,    0, 1748,

     1748, 1748, 1748, 1748, 1748, 1749,    0, 1749,    0,    0,
     1749, 1749, 1749, 1749, 1749, 1749,    0, 1749, 1749, 1749,
     1749, 1749, 1749, 1753,    0,    0,    0, 1753,    0, 1753,
     1753, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755,
     1755, 1755, 1755,    0, 1755, 1755, 1755, 1755, 1755, 1755,
     1755, 1755, 1755, 1755, 1756,    0,    0, 1756,    0, 1756,
        0, 1756, 1756,    0,    0, 1756, 1756, 1756, 1756,    0,
     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1759,    0,    0,
     1759,    0,    0,    0, 1759,    0, 1759, 1759, 1760, 1760,
     1760, 1760, 1760,    0, 1760, 1760, 1760, 1760,    0,    0,

     1760,    0,    0, 1760, 1760, 1760,    0, 1760,    0,    0,
     1760, 1761,    0,    0, 1761, 1761,    0, 1761,    0,    0,
     1761, 1761,    0, 1761, 1761, 1761,    0,    0, 1761, 1761,
     1761, 1761, 1761, 1762,    0, 1762,    0,    0,    0, 1762,
        0, 1762, 1762, 1763,    0, 1763,    0,    0, 1763, 1763,
        0,    0, 1763, 1763,    0,    0, 1763, 1763, 1763, 1763,
     1763, 1764,    0, 1764,    0,    0, 1764, 1764, 1764,    0,
     1764, 1764,    0, 1764, 1764,    0, 1764, 1764, 1764, 1765,
        0, 1765,    0,    0, 1765, 1765, 1765,    0, 1765, 1765,
        0, 1765, 1765, 1765, 1765, 1765, 1765, 1766,    0, 1766,

        0,    0, 1766, 1766, 1766,    0, 1766, 1766,    0, 1766,
     1766, 1766, 1766, 1766, 1766, 1767,    0, 1767,    0,    0,
     1767, 1767, 1767,    0, 1767, 1767,    0, 1767, 1767, 1767,
     1767, 1767, 1767, 1768,    0, 1768,    0,    0, 1768, 1768,
        0,    0, 1768, 1768,    0,    0, 1768, 1768, 1768, 1768,
     1768, 1769,    0, 1769,    0,    0, 1769, 1769,    0,    0,
     1769,    0,    0,    0, 1769, 1769, 1769, 1769, 1769, 1770,
        0, 1770,    0,    0, 1770, 1770,    0,    0, 1770,    0,
        0,    0, 1770, 1770, 1770, 1770, 1770, 1771,    0, 1771,
        0,    0, 1771, 1771, 1771,    0, 1771, 1771,    0, 1771,

     1771, 1771, 1771, 1771, 1771, 1772,    0, 1772,    0,    0,
     1772, 1772, 1772,    0, 1772, 1772,    0, 1772, 1772, 1772,
     1772, 1772, 1772, 1773,    0, 1773,    0,    0, 1773, 1773,
        0,    0, 1773,    0,    0,    0, 1773, 1773, 1773, 1773,
     1773, 1774,    0, 1774,    0,    0, 1774, 1774,    0,    0,
     1774,    0,    0,    0, 1774, 1774, 1774, 1774, 1774, 1775,
        0, 1775,    0,    0, 1775, 1775,    0,    0, 1775,    0,
        0,    0, 1775, 1775, 1775, 1775, 1775, 1776,    0, 1776,
        0,    0, 1776, 1776,    0,    0, 1776,    0,    0,    0,
     1776, 1776, 1776, 1776, 1776, 1777,    0, 1777,    0,    0,

     1777, 1777,    0,    0, 1777, 1777,    0,    0, 1777, 1777,
     1777, 1777, 1777, 1778,    0, 1778,    0,    0, 1778, 1778,
     1778,    0, 1778, 1778,    0, 1778, 1778, 1778, 1778, 1778,
     1778, 1779,    0, 1779,    0,    0, 1779, 1779, 1779,    0,
     1779, 1779,    0, 1779, 1779, 1779, 1779, 1779, 1779, 1780,
        0, 1780,    0,    0, 1780, 1780, 1780,    0, 1780, 1780,
        0, 1780, 1780, 1780, 1780, 1780, 1780, 1781,    0, 1781,
        0,    0, 1781, 1781, 1781,    0, 1781, 1781,    0, 1781,
     1781, 1781, 1781, 1781, 1781, 1782,    0, 1782,    0,    0,
     1782, 1782,    0,    0, 1782, 1782,    0,    0, 1782,    0,

     1782, 1782, 1782, 1783,    0, 1783,    0,    0, 1783, 1783,
        0,    0, 1783,    0,    0,    0, 1783, 1783, 1783, 1783,
     1783, 1784,    0, 1784,    0,    0, 1784, 1784, 1784,    0,
     1784, 1784,    0, 1784, 1784, 1784, 1784, 1784, 1784, 1785,
        0, 1785,    0,    0, 1785, 1785,    0, 1785, 1785, 1785,
        0,    0, 1785, 1785, 1785, 1785, 1785, 1786,    0, 1786,
        0,    0, 1786, 1786, 1786, 1786, 1786, 1786,    0, 1786,
     1786,    0, 1786, 1786, 1786, 1787,    0, 1787,    0,    0,
     1787, 1787, 1787, 1787, 1787, 1787,    0, 1787, 1787, 1787,
     1787, 1787, 1787, 1788,    0, 1788,    0,    0, 1788, 1788,

     1788, 1788, 1788, 1788,    0, 1788, 1788, 1788, 1788, 1788,
     1788, 1789,    0, 1789,    0,    0, 1789, 1789, 1789, 1789,
     1789, 1789,    0, 1789, 1789, 1789, 1789, 1789, 1789, 1790,
        0, 1790,    0,    0, 1790, 1790,    0, 1790, 1790, 1790,
        0,    0, 1790, 1790, 1790, 1790, 1790, 1791,    0, 1791,
        0,    0, 1791, 1791,    0, 1791, 1791,    0,    0,    0,
     1791, 1791, 1791, 1791, 1791, 1792,    0, 1792,    0,    0,
     1792, 1792,    0, 1792, 1792,    0,    0,    0, 1792, 1792,
     1792, 1792, 1792, 1793,    0, 1793,    0,    0, 1793, 1793,
     1793, 1793, 1793, 1793,    0, 1793, 1793, 1793, 1793, 1793,

     1793, 1794,    0, 1794,    0,    0, 1794, 1794, 1794, 1794,
     1794, 1794,    0, 1794, 1794, 1794, 1794, 1794, 1794, 1795,
        0, 1795,    0,    0, 1795, 1795,    0, 1795, 1795,    0,
        0,    0, 1795, 1795, 1795, 1795, 1795, 1796,    0, 1796,
        0,    0, 1796, 1796,    0, 1796, 1796,    0,    0,    0,
     1796, 1796, 1796, 1796, 1796, 1797,    0, 1797,    0,    0,
     1797, 1797,    0, 1797, 1797,    0,    0,    0, 1797, 1797,
     1797, 1797, 1797, 1798,    0, 1798,    0,    0, 1798, 1798,
        0, 1798, 1798,    0,    0,    0, 1798, 1798, 1798, 1798,
     1798, 1799,    0, 1799,    0,    0, 1799, 1799,    0, 1799,

     1799, 1799,    0,    0, 1799, 1799, 1799, 1799, 1799, 1800,
        0, 1800,    0,    0, 1800, 1800, 1800, 1800, 1800, 1800,
        0, 1800, 1800, 1800, 1800, 1800, 1800, 1801,    0, 1801,
        0,    0, 1801, 1801, 1801, 1801, 1801, 1801,    0, 1801,
     1801, 1801, 1801, 1801, 1801, 1802,    0, 1802,    0,    0,
     1802, 1802, 1802, 1802, 1802, 1802,    0, 1802, 1802, 1802,
     1802, 1802, 1802, 1803,    0, 1803,    0,    0, 1803, 1803,
     1803, 1803, 1803, 1803,    0, 1803, 1803, 1803, 1803, 1803,
     1803, 1804,    0, 1804,    0,    0, 1804, 1804,    0, 1804,
     1804, 1804,    0,    0, 1804,    0, 1804, 1804, 1804, 1805,

        0, 1805,    0,    0, 1805, 1805,    0, 1805, 1805,    0,
        0,    0, 1805, 1805, 1805, 1805, 1805, 1806,    0, 1806,
        0,    0, 1806, 1806, 1806, 1806, 1806, 1806,    0, 1806,
     1806, 1806, 1806, 1806, 1806, 1808,    0,    0,    0, 1808,
        0, 1808, 1808, 1809,    0,    0, 1809,    0, 1809,    0,
     1809, 1809,    0,    0, 1809, 1809, 1809, 1809,    0, 1809,
     1809, 1809, 1809, 1809, 1809, 1809, 1812, 1812, 1812, 1812,
     1812,    0, 1812, 1812, 1812, 1812,    0,    0, 1812,    0,
        0, 1812, 1812, 1812,    0, 1812,    0, 1812, 1812, 1813,
     1813, 1813, 1813, 1813,    0, 1813, 1813, 1813, 1813,    0,

        0, 1813,    0,    0, 1813, 1813, 1813,    0, 1813, 1813,
        0, 1813, 1814,    0, 1814,    0,    0, 1814, 1814,    0,
     1814, 1814, 1814,    0,    0, 1814, 1814, 1814, 1814, 1814,
     1815,    0, 1815,    0,    0,    0, 1815,    0, 1815, 1815,
     1816,    0, 1816,    0,    0, 1816, 1816, 1816,    0, 1816,
     1816,    0, 1816, 1816, 1816, 1816, 1816, 1816, 1817,    0,
     1817,    0,    0, 1817, 1817, 1817,    0, 1817, 1817,    0,
     1817, 1817, 1817, 1817, 1817, 1817, 1818,    0, 1818,    0,
        0, 1818, 1818,    0,    0, 1818,    0,    0,    0, 1818,
     1818, 1818, 1818, 1818, 1819,    0, 1819,    0,    0, 1819,

     1819,    0,    0, 1819,    0,    0,    0, 1819, 1819, 1819,
     1819, 1819, 1820,    0, 1820,    0,    0, 1820, 1820,    0,
        0, 1820,    0,    0,    0, 1820, 1820, 1820, 1820, 1820,
     1821,    0, 1821,    0,    0, 1821, 1821,    0,    0, 1821,
        0,    0,    0, 1821, 1821, 1821, 1821, 1821, 1822,    0,
     1822,    0,    0, 1822, 1822,    0,    0, 1822, 1822,    0,
        0, 1822, 1822, 1822, 1822, 1822, 1823,    0, 1823,    0,
        0, 1823, 1823, 1823,    0, 1823, 1823,    0, 1823, 1823,
     1823, 1823, 1823, 1823, 1824,    0, 1824,    0,    0, 1824,
     1824, 1824,    0, 1824, 1824,    0, 1824, 1824, 1824, 1824,

     1824, 1824, 1825,    0, 1825,    0,    0, 1825, 1825, 1825,
        0, 1825, 1825,    0, 1825, 1825, 1825, 1825, 1825, 1825,
     1826,    0, 1826,    0,    0, 1826, 1826,    0,    0, 1826,
     1826,    0,    0, 1826, 1826, 1826, 1826, 1826, 1827,    0,
     1827,    0,    0, 1827, 1827, 1827,    0, 1827, 1827,    0,
     1827, 1827, 1827, 1827, 1827, 1827, 1828,    0, 1828,    0,
        0, 1828, 1828, 1828,    0, 1828, 1828,    0, 1828, 1828,
     1828, 1828, 1828, 1828, 1829,    0, 1829,    0,    0, 1829,
     1829, 1829,    0, 1829, 1829,    0, 1829, 1829, 1829, 1829,
     1829, 1829, 1830,    0, 1830,    0,    0, 1830, 1830, 1830,

        0, 1830, 1830,    0, 1830, 1830, 1830, 1830, 1830, 1830,
     1831,    0, 1831,    0,    0, 1831, 1831,    0,    0, 1831,
     1831,    0,    0, 1831, 1831, 1831, 1831, 1831, 1832,    0,
     1832,    0,    0, 1832, 1832,    0,    0, 1832,    0,    0,
        0, 1832, 1832, 1832, 1832, 1832, 1833,    0, 1833,    0,
        0, 1833, 1833, 1833, 1833, 1833, 1833,    0, 1833, 1833,
     1833, 1833, 1833, 1833, 1834,    0, 1834,    0,    0, 1834,
     1834, 1834, 1834, 1834, 1834,    0, 1834, 1834, 1834, 1834,
     1834, 1834, 1835,    0, 1835,    0,    0, 1835, 1835,    0,
     1835, 1835,    0,    0,    0, 1835, 1835, 1835, 1835, 1835,

     1836,    0, 1836,    0,    0, 1836, 1836,    0, 1836, 1836,
        0,    0,    0, 1836, 1836, 1836, 1836, 1836, 1837,    0,
     1837,    0,    0, 1837, 1837,    0, 1837, 1837,    0,    0,
        0, 1837, 1837, 1837, 1837, 1837, 1838,    0, 1838,    0,
        0, 1838, 1838,    0, 1838, 1838,    0,    0,    0, 1838,
     1838, 1838, 1838, 1838, 1839,    0, 1839,    0,    0, 1839,
     1839,    0, 1839, 1839, 1839,    0,    0, 1839, 1839, 1839,
     1839, 1839, 1840,    0, 1840,    0,    0, 1840, 1840, 1840,
     1840, 1840, 1840,    0, 1840, 1840, 1840, 1840, 1840, 1840,
     1841,    0, 1841,    0,    0, 1841, 1841, 1841, 1841, 1841,

     1841,    0, 1841, 1841, 1841, 1841, 1841, 1841, 1842,    0,
     1842,    0,    0, 1842, 1842, 1842, 1842, 1842, 1842,    0,
     1842, 1842, 1842, 1842, 1842, 1842, 1843,    0, 1843,    0,
        0, 1843, 1843,    0, 1843, 1843, 1843,    0,    0, 1843,
     1843, 1843, 1843, 1843, 1844,    0, 1844,    0,    0, 1844,
     1844, 1844, 1844, 1844, 1844,    0, 1844, 1844, 1844, 1844,
     1844, 1844, 1845,    0, 1845,    0,    0, 1845, 1845, 1845,
     1845, 1845, 1845,    0, 1845, 1845, 1845, 1845, 1845, 1845,
     1846,    0, 1846,    0,    0, 1846, 1846, 1846, 1846, 1846,
     1846,    0, 1846, 1846, 1846, 1846, 1846, 1846, 1847,    0,

     1847,    0,    0, 1847, 1847, 1847, 1847, 1847, 1847,    0,
     1847, 1847, 1847, 1847, 1847, 1847, 1848,    0, 1848,    0,
        0, 1848, 1848,    0, 1848, 1848, 1848,    0,    0, 1848,
     1848, 1848, 1848, 1848, 1849,    0, 1849,    0,    0, 1849,
     1849,    0, 1849, 1849,    0,    0,    0, 1849, 1849, 1849,
     1849, 1849, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850,
     1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850,
     1850, 1850, 1850, 1850, 1850, 1853, 1853, 1853, 1853, 1853,
        0, 1853, 1853, 1853, 1853,    0,    0, 1853,    0,    0,
     1853, 1853, 1853,    0, 1853, 1853,    0, 1853, 1854, 1854,

     1854, 1854, 1854,    0, 1854, 1854, 1854, 1854,    0,    0,
     1854,    0,    0, 1854, 1854, 1854,    0, 1854,    0,    0,
     1854, 1855, 1855, 1855, 1855, 1855,    0, 1855, 1855, 1855,
     1855,    0,    0, 1855,    0,    0, 1855, 1855, 1855,    0,
     1855,    0,    0, 1855, 1856, 1856, 1856, 1856, 1856,    0,
     1856, 1856, 1856, 1856,    0,    0, 1856,    0,    0, 1856,
     1856, 1856,    0, 1856,    0,    0, 1856, 1857, 1857, 1857,
     1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857,
     1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857,
     1858,    0, 1858,    0,    0, 1858, 1858, 1858,    0, 1858,

     1858,    0, 1858, 1858, 1858, 1858, 1858, 1858, 1859,    0,
     1859,    0,    0, 1859, 1859, 1859,    0, 1859, 1859,    0,
     1859, 1859, 1859, 1859, 1859, 1859, 1860,    0, 1860,    0,
        0, 1860, 1860, 1860,    0, 1860, 1860,    0, 1860, 1860,
     1860, 1860, 1860, 1860, 1861,    0, 1861,    0,    0, 1861,
     1861, 1861,    0, 1861, 1861,    0, 1861, 1861, 1861, 1861,
     1861, 1861, 1862,    0, 1862,    0,    0, 1862, 1862,    0,
        0, 1862, 1862,    0,    0, 1862, 1862, 1862, 1862, 1862,
     1863,    0, 1863,    0,    0, 1863, 1863, 1863,    0, 1863,
     1863,    0, 1863, 1863, 1863, 1863, 1863, 1863, 1864,    0,

     1864,    0,    0, 1864, 1864, 1864,    0, 1864, 1864,    0,
     1864, 1864, 1864, 1864, 1864, 1864, 1865,    0, 1865,    0,
        0, 1865, 1865, 1865,    0, 1865, 1865,    0, 1865, 1865,
     1865, 1865, 1865, 1865, 1866,    0, 1866,    0,    0, 1866,
     1866,    0,    0, 1866, 1866,    0,    0, 1866, 1866, 1866,
     1866, 1866, 1867,    0, 1867,    0,    0, 1867, 1867,    0,
        0, 1867,    0,    0,    0, 1867, 1867, 1867, 1867, 1867,
     1868,    0, 1868,    0,    0, 1868, 1868,    0,    0, 1868,
        0,    0,    0, 1868, 1868, 1868, 1868, 1868, 1869,    0,
     1869,    0,    0, 1869, 1869, 1869, 1869, 1869, 1869,    0,

     1869, 1869, 1869, 1869, 1869, 1869, 1870,    0, 1870,    0,
        0, 1870, 1870, 1870, 1870, 1870, 1870,    0, 1870, 1870,
     1870, 1870, 1870, 1870, 1871,    0, 1871,    0,    0, 1871,
     1871, 1871, 1871, 1871, 1871,    0, 1871, 1871, 1871, 1871,
     1871, 1871, 1872,    0, 1872,    0,    0, 1872, 1872, 1872,
     1872, 1872, 1872,    0, 1872, 1872, 1872, 1872, 1872, 1872,
     1873,    0, 1873,    0,    0, 1873, 1873,    0, 1873, 1873,
     1873,    0,    0, 1873, 1873, 1873, 1873, 1873, 1874,    0,
     1874,    0,    0, 1874, 1874, 1874, 1874, 1874, 1874,    0,
     1874, 1874, 1874, 1874, 1874, 1874, 1875,    0, 1875,    0,

        0, 1875, 1875, 1875, 1875, 1875, 1875,    0, 1875, 1875,
     1875, 1875, 1875, 1875, 1876,    0, 1876,    0,    0, 1876,
     1876, 1876, 1876, 1876, 1876,    0, 1876, 1876, 1876, 1876,
     1876, 1876, 1877,    0, 1877,    0,    0, 1877, 1877,    0,
     1877, 1877, 1877,    0,    0, 1877, 1877, 1877, 1877, 1877,
     1878,    0, 1878,    0,    0, 1878, 1878,    0, 1878, 1878,
        0,    0,    0, 1878, 1878, 1878, 1878, 1878, 1879,    0,
     1879,    0,    0, 1879, 1879,    0, 1879, 1879,    0,    0,
        0, 1879, 1879, 1879, 1879, 1879, 1880, 1880, 1880, 1880,
     1880,    0, 1880, 1880, 1880, 1880,    0,    0, 1880,    0,

        0, 1880, 1880, 1880,    0, 1880,    0,    0, 1880, 1881,
     1881, 1881, 1881, 1881,    0, 1881, 1881, 1881, 1881,    0,
        0, 1881,    0,    0, 1881, 1881, 1881,    0, 1881,    0,
        0, 1881, 1882, 1882, 1882, 1882, 1882,    0, 1882, 1882,
     1882, 1882,    0,    0, 1882,    0,    0, 1882, 1882, 1882,
        0, 1882,    0,    0, 1882, 1883,    0, 1883,    0,    0,
     1883, 1883, 1883,    0, 1883, 1883,    0, 1883, 1883, 1883,
     1883, 1883, 1883, 1884,    0, 1884,    0,    0, 1884, 1884,
     1884,    0, 1884, 1884,    0, 1884, 1884, 1884, 1884, 1884,
     1884, 1885,    0, 1885,    0,    0, 1885, 1885, 1885,    0,

     1885, 1885,    0, 1885, 1885, 1885, 1885, 1885, 1885, 1886,
     1886, 1886, 1886, 1886,    0, 1886, 1886, 1886, 1886,    0,
        0, 1886,    0,    0, 1886, 1886, 1886,    0, 1886,    0,
        0, 1886, 1887, 1887, 1887, 1887, 1887,    0, 1887, 1887,
     1887, 1887,    0,    0, 1887,    0,    0, 1887, 1887, 1887,
        0, 1887,    0,    0, 1887, 1888, 1888, 1888, 1888, 1888,
        0, 1888, 1888, 1888, 1888,    0,    0, 1888,    0,    0,
     1888, 1888, 1888,    0, 1888,    0,    0, 1888, 1889, 1889,
     1889, 1889, 1889,    0, 1889, 1889, 1889, 1889,    0,    0,
     1889,    0,    0, 1889, 1889, 1889,    0, 1889,    0,    0,

     1889, 1890, 1890, 1890, 1890, 1890,    0, 1890, 1890, 1890,
     1890,    0,    0, 1890,    0,    0, 1890, 1890, 1890,    0,
     1890,    0,    0, 1890, 1891, 1891, 1891, 1891, 1891,    0,
     1891, 1891, 1891, 1891,    0,    0, 1891,    0,    0, 1891,
     1891, 1891,    0, 1891,    0,    0, 1891, 1892, 1892, 1892,
     1892, 1892,    0, 1892, 1892, 1892, 1892,    0,    0, 1892,
        0,    0, 1892, 1892, 1892,    0, 1892,    0,    0, 1892,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parser.l"
/* Copyright 2009-2021
 * Kaz Kylheku <kaz@kylheku.com>
 * Vancouver, Canada
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#line 29 "parser.l"

#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <stdlib.h>
#include <limits.h>
#include <wchar.h>
#include <signal.h>
#include "config.h"
#include "lib.h"
#include "gc.h"
#include "stream.h"
#include "utf8.h"
#include "signal.h"
#include "unwind.h"
#include "hash.h"
#include "y.tab.h"
#include "parser.h"
#include "txr.h"

#define YY_INPUT(buf, result, max_size)                                 \
  do {                                                                  \
    val self = lit("parser");                                           \
    val n = get_bytes(self, yyextra->stream,                            \
                      coerce(mem_t *, buf), max_size);                  \
    result = c_num(n, self);                                            \
  } while (0)

#define YY_DECL \
  static int yylex_impl(YYSTYPE *yylval_param, yyscan_t yyscanner)

int opt_loglevel = 1;   /* 0 - quiet; 1 - normal; 2 - verbose */

val form_to_ln_hash;

static int directive_tok(scanner_t *yyg, int tok, int state);

#define FLEX_NUM_VERSION 10000*YY_FLEX_MAJOR_VERSION + \
                         100*YY_FLEX_MINOR_VERSION + \
                         YY_FLEX_SUBMINOR_VERSION

#if FLEX_NUM_VERSION < 20509
int yylex_destroy(void)
{
  return 0;
}
#endif

/* Missing prototypes not generated by flex. */
int yyget_column(yyscan_t);
void yyset_column (int column_no, yyscan_t yyscanner);

/* The following function is all that libflex provides.
   By providing it here, we eliminate the need to link libflex. */
#define YY_SKIP_YYWRAP
INLINE int yywrap(yyscan_t scanner)
{
  (void) scanner;
  return 1;
}

void yyerror(scanner_t *scanner, parser_t *parser, const char *s)
{
  yyerrorf(scanner, lit("~a"), string_utf8(s), nao);
  if (parser->prepared_msg) {
    yyerrorf(scanner, lit("~a"), parser->prepared_msg, nao);
    parser->prepared_msg = nil;
  }
}

void yyerrorf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    if (opt_compat && opt_compat <= 114)
      format(std_error, lit("~a: (~a:~d): "), prog_string,
             parser->name, num(parser->lineno), nao);
    else
      format(std_error, lit("~a:~d: "),
             parser->name, num(parser->lineno), nao);

    vformat(std_error, fmt, vl);
    put_char(chr('\n'), std_error);
    va_end (vl);
  }
  parser->errors++;
}

static void yyerrprepf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    set(mkloc(parser->prepared_msg, parser->parser),
        vformat_to_string(fmt, vl));
    va_end (vl);
  }
}

static void out_of_range_float(scanner_t *scanner, val tok)
{
    yyerrorf(scanner, lit("out-of-range floating-point literal: ~a"),
             tok, nao);
}

static wchar_t char_esc(int letter)
{
  switch (letter) {
  case ' ': return L' ';
  case 'a': return L'\a';
  case 'b': return L'\b';
  case 't': return L'\t';
  case 'n': return L'\n';
  case 'v': return L'\v';
  case 'f': return L'\f';
  case 'r': return L'\r';
  case 'e': return 27;
  case '"': return L'"';
  case '\'': return L'\'';
  case '`': return L'`';
  case '/': return L'/';
  case '@': return L'@';
  case '\\': return L'\\';
  }

  internal_error("unhandled escape character");
}

static wchar_t num_esc(scanner_t *scn, char *num)
{
  long val = 0;

  if (num[0] == 'x' || num[0] == 'u') {
    if (strlen(num) > 7)
      yyerror(scn, yyget_extra(scn), "too many digits in hex character escape");
    else
      val = strtol(num + 1, 0, 16);
  } else {
    if (num[0] == 'o')
      num++;
    if (strlen(num) > 8)
      yyerror(scn, yyget_extra(scn), "too many digits in octal character escape");
    else
      val = strtol(num, 0, 8);
  }

  if (val < 0 || val > 0x10FFFF || convert(wchar_t, val) != val) {
    yyerror(scn, yyget_extra(scn), "numeric character escape out of range");
    val = 0;
  }

  return val;
}

static wchar_t *unicode_ident(scanner_t *scn, const char *lex)
{
  wchar_t *wlex = utf8_dup_from(lex), *ptr = wlex, wch;

  while ((wch = *ptr++)) {
    if (wch < 0x1680 || (wch >= 0x3000 && wch < 0xdc00))
      continue;

    if ((wch >= 0xdc00 && wch <= 0xdcff) ||
        (wch >= 0xd800 && wch <= 0xdbff) ||
#if FULL_UNICODE
        (wch >= 0xf0000 && wch <= 0xffffd) ||
        (wch >= 0x100000 && wch <= 0x10fffd) ||
#endif
        (wch >= 0xe000 && wch <= 0xf8ff) ||
        (wch == 0xfffe) ||
        (wch == 0xffff))
    {
      yyerror(scn, yyget_extra(scn),
              "disallowed Unicode character in identifier");
      break;
    }

    switch (wch) {
    case 0x1680: case 0x180e: case 0x2000: case 0x2001: case 0x2002:
    case 0x2003: case 0x2004: case 0x2005: case 0x2006: case 0x2007:
    case 0x2008: case 0x2009: case 0x200a: case 0x2028: case 0x2029:
    case 0x205f: case 0x3000:
      yyerror(scn, yyget_extra(scn),
              "Unicode space occurs in identifier");
      break;
    default:
      continue;
    }

    break;
  }

  return wlex;
}

#line 4010 "lex.yy.c"
#define YY_NO_INPUT 1

#line 4013 "lex.yy.c"

#define INITIAL 0
#define SPECIAL 1
#define BRACED 2
#define NESTED 3
#define REGEX 4
#define SREGEX 5
#define STRLIT 6
#define CHRLIT 7
#define QSILIT 8
#define QSPECIAL 9
#define WLIT 10
#define QWLIT 11
#define BUFLIT 12
#define JSON 13
#define JLIT 14

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE parser_t *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		/* Create the reject buffer large enough to save one state per allowed character. */
		if ( ! yyg->yy_state_buf )
			yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
		if ( ! yyg->yy_state_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 290 "parser.l"


#line 4328 "lex.yy.c"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1646 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1645 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 292 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num(10));
  return NUMBER;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 304 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 2));
  int base;

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 323 "parser.l"
{
  int base = 0;
  val str = string_own(utf8_dup_from(yytext + 2));

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  yyerrorf(yyg, lit("trailing junk in numeric literal: ~a~a~a"),
           chr(yytext[0]), chr(yytext[1]), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 345 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);

  return NUMBER;
}
	YY_BREAK
case 5:
#line 360 "parser.l"
case 6:
#line 361 "parser.l"
case 7:
YY_RULE_SETUP
#line 361 "parser.l"
{
  val str = string_utf8(yytext);

  yyerrorf(yyg, lit("trailing junk in floating-point literal: ~a"), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);

  return NUMBER;
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 377 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);

  return NUMBER;
}
	YY_BREAK
case 9:
#line 392 "parser.l"
case 10:
YY_RULE_SETUP
#line 392 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(10));
  return METANUM;
}
	YY_BREAK
case 11:
#line 404 "parser.l"
case 12:
YY_RULE_SETUP
#line 404 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(16));
  return METANUM;
}
	YY_BREAK
case 13:
#line 416 "parser.l"
case 14:
YY_RULE_SETUP
#line 416 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(8));
  return METANUM;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 427 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(2));
  return METANUM;
}
	YY_BREAK
case 16:
#line 439 "parser.l"
case 17:
#line 440 "parser.l"
case 18:
YY_RULE_SETUP
#line 440 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 19:
#line 457 "parser.l"
case 20:
#line 458 "parser.l"
case 21:
YY_RULE_SETUP
#line 458 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 22:
#line 469 "parser.l"
case 23:
YY_RULE_SETUP
#line 469 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yyerrorf(yyg, lit("bad token: ~a"),
                    string_own(utf8_dup_from(yytext)),
                    nao);
  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 482 "parser.l"
{
  return directive_tok(yyg, ALL, 0);
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 486 "parser.l"
{
  return directive_tok(yyg, SOME, NESTED);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 490 "parser.l"
{
  return directive_tok(yyg, NONE, 0);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 494 "parser.l"
{
  return directive_tok(yyg, MAYBE, 0);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 498 "parser.l"
{
  return directive_tok(yyg, CASES, 0);
}
	YY_BREAK
case 29:
/* rule 29 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 502 "parser.l"
{
  return directive_tok(yyg, BLOCK, NESTED);
}
	YY_BREAK
case 30:
/* rule 30 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 506 "parser.l"
{
  return directive_tok(yyg, CHOOSE, NESTED);
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 510 "parser.l"
{
  return directive_tok(yyg, GATHER, NESTED);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 514 "parser.l"
{
  return directive_tok(yyg, AND, 0);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 518 "parser.l"
{
  return directive_tok(yyg, OR, 0);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 522 "parser.l"
{
  return directive_tok(yyg, END, 0);
}
	YY_BREAK
case 35:
/* rule 35 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 526 "parser.l"
{
  return directive_tok(yyg, COLLECT, NESTED);
}
	YY_BREAK
case 36:
/* rule 36 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 530 "parser.l"
{
  return directive_tok(yyg, COLL, NESTED);
}
	YY_BREAK
case 37:
/* rule 37 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 534 "parser.l"
{
  return directive_tok(yyg, UNTIL, NESTED);
}
	YY_BREAK
case 38:
/* rule 38 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 538 "parser.l"
{
  return directive_tok(yyg, OUTPUT, NESTED);
}
	YY_BREAK
case 39:
/* rule 39 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 542 "parser.l"
{
  return directive_tok(yyg, REPEAT, NESTED);
}
	YY_BREAK
case 40:
/* rule 40 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 546 "parser.l"
{
  return directive_tok(yyg, REP, NESTED);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 550 "parser.l"
{
  return directive_tok(yyg, SINGLE, 0);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 554 "parser.l"
{
  return directive_tok(yyg, FIRST, 0);
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 558 "parser.l"
{
  return directive_tok(yyg, LAST, NESTED);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 562 "parser.l"
{
  return directive_tok(yyg, EMPTY, 0);
}
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 566 "parser.l"
{
  return directive_tok(yyg, MOD, NESTED);
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 570 "parser.l"
{
  return directive_tok(yyg, MODLAST, NESTED);
}
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 574 "parser.l"
{
  return directive_tok(yyg, DEFINE, NESTED);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 578 "parser.l"
{
  return directive_tok(yyg, TRY, 0);
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 582 "parser.l"
{
  return directive_tok(yyg, CATCH, NESTED);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 586 "parser.l"
{
  return directive_tok(yyg, FINALLY, 0);
}
	YY_BREAK
case 51:
/* rule 51 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 590 "parser.l"
{
  return directive_tok(yyg, IF, NESTED);
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 594 "parser.l"
{
  return directive_tok(yyg, ELIF, NESTED);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 598 "parser.l"
{
  return directive_tok(yyg, ELSE, 0);
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 602 "parser.l"
{
  yy_push_state(BRACED, yyscanner);
  yylval->lineno = yyextra->lineno;
  return yytext[0];
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 608 "parser.l"
{
 yy_push_state(NESTED, yyscanner);
 yylval->lineno = yyextra->lineno;
 return yytext[0];
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 614 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 248) ? OLD_AT : '@';
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 619 "parser.l"
{
  yylval->chr = '*';
  return SPLICE;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 624 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 629 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 60:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 638 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space or 0 needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 653 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 662 "parser.l"
{
  /* Eat whitespace in directive */
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 666 "parser.l"
{
  yy_push_state(STRLIT, yyscanner);
  return '"';
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 671 "parser.l"
{
  yy_push_state(CHRLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_BACKSLASH;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 677 "parser.l"
{
  yy_push_state(BUFLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_B_QUOTE;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 683 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_SLASH;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 689 "parser.l"
{
  yy_push_state(QSILIT, yyscanner);
  return '`';
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 694 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WORDS;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 700 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WSPLICE;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 706 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWORDS;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 712 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWSPLICE;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 718 "parser.l"
{
  return '#';
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 722 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_H;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 727 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_S;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 732 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_R;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 737 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_N;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 742 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_T;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 747 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  yy_push_state(JSON, yyscanner);
  return HASH_J;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 753 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_SEMI;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 758 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));
  yylval->val = int_str(str, num(10));
  return HASH_N_EQUALS;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 764 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));
  yylval->val = int_str(str, num(10));
  return HASH_N_HASH;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 770 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 185) ? OLD_DOTDOT : DOTDOT;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 775 "parser.l"
{
  yy_pop_state(yyscanner);
  yylval->lexeme = chk_strdup(L"@");
  return TEXT;
}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 781 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 785 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  return '/';
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 790 "parser.l"
{
  yylval->chr = '.';
  return CONSDOT;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 795 "parser.l"
{
  yylval->chr = '.';
  return LAMBDOT;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 800 "parser.l"
{
  yylval->chr = '.';
  return UREFDOT;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 805 "parser.l"
{
  yylval->chr = '.';
  return '.';
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 810 "parser.l"
{
  yylval->chr = '.';
  return OREFDOT;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 815 "parser.l"
{
  yylval->chr = '.';
  return UOREFDOT;
}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 820 "parser.l"
{
  if (YYSTATE == SPECIAL)
    yy_pop_state(yyscanner);  /* @\ continuation */
  yyextra->lineno++;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 826 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = char_esc(yytext[1]);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);
  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 835 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = num_esc(yyg, yytext + 1);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);

  {
    char lastchar = yytext[yyleng-1];
    if (lastchar == ';' && opt_compat && opt_compat <= 109)
      unput(lastchar);
  }

  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 851 "parser.l"
{
  yyerrorf(yyg, lit("\\x escape without digits"), nao);
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 855 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 859 "parser.l"
{
  /* comment */
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 863 "parser.l"
{
  val ch = chr_str(string_utf8(yytext), zero);
  if (chr_isspace(ch))
    yyerrprepf(yyg, lit("unexpected whitespace character #\\x~,02x"),
               ch, nao);
  else if (chr_isunisp(ch))
    yyerrprepf(yyg, lit("unexpected Unicode space character #\\x~,02x"),
               ch, nao);
  else if (chr_iscntrl(ch))
    yyerrprepf(yyg, lit("unexpected control character #\\x~,02x"),
               ch, nao);
  else
    yyerrprepf(yyg, lit("unexpected character #\\~a"),
               ch, nao);
  return ERRTOK;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 880 "parser.l"
{
  yyerrprepf(yyg, lit("non-UTF-8 byte #x~02x in directive"),
             num(convert(unsigned char, yytext[0])), nao);
  return ERRTOK;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 886 "parser.l"
{
  yylval->chr = '/';
  return (YYSTATE == SREGEX) ? REGCHAR : '/';
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 891 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return REGCHAR;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 896 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext + 1);
  return REGCHAR;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 901 "parser.l"
{
  yylval->chr = yytext[1];
  return REGTOKEN;
}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 906 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 910 "parser.l"
{
  yyextra->lineno++;
  yyerrprepf(yyg, lit("newline in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 916 "parser.l"
{
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return REGCHAR;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 922 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 927 "parser.l"
{
  yylval->chr = yytext[1];
  return REGCHAR;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 932 "parser.l"
{
  if (opt_compat && opt_compat <= 105) {
    yylval->chr = yytext[1];
    return REGCHAR;
  }

  if (yytext[1] == 'x')
    yyerrprepf(yyg, lit("\\x escape without digits in regex"), nao);
  else
    yyerrprepf(yyg, lit("unrecognized escape in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 945 "parser.l"
{
  yyerrprepf(yyg, lit("dangling backslash in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 950 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yylval->lexeme = chk_strdup(wchr);
    return TEXT;
  }
  yylval->chr = wchr[0];
  return REGCHAR;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 960 "parser.l"
{
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return REGCHAR;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 965 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SPACE;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 970 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return TEXT;
}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 975 "parser.l"
{
  yyextra->lineno++;
  return '\n';
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 980 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
  return '*';
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 985 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 989 "parser.l"
{
  /* eat whole line comment */
  yyextra->lineno++;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 994 "parser.l"
{
  /* comment to end of line */
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 998 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1003 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1008 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1013 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 1018 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 1022 "parser.l"
{
  yyextra->lineno++;

  if (!opt_compat || opt_compat > 109)
    return ' ';
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1030 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext+1);
  return LITCHAR;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1035 "parser.l"
{
  yyerrorf(yyg, lit("\\x escape without digits"), nao);
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1039 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape: \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1043 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext);
  return LITCHAR;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1048 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1053 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK; /* hack */
}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1058 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1065 "parser.l"
{
  yyerrprepf(yyg, lit("newline in character literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 1072 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string quasiliteral"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 1079 "parser.l"
{
  yyextra->lineno++;

  if (opt_compat && opt_compat <= 109)
    return ' ';

  yyerrprepf(yyg, lit("newline in word list literal"), nao);
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 136:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1090 "parser.l"
{
  yy_push_state(QSPECIAL, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1095 "parser.l"
{
  yyerrprepf(yyg, lit("malformed @ expression in quasiliteral"), nao);
  return ERRTOK;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1100 "parser.l"
{
  return ' ';
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1104 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1109 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1114 "parser.l"
{
  wchar_t ch0, ch1;
  yytext[6] = 0;
  ch0 = num_esc(yyg, yytext + 1);
  ch1 = num_esc(yyg, yytext + 7);
  yylval->chr = ((ch0 - 0xD800) << 10 | (ch1 - 0xDC00)) + 0x10000;
  return LITCHAR;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1123 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext + 1);
  return LITCHAR;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1128 "parser.l"
{
  yyerrorf(yyg, lit("JSON \\u escape needs four digits"), nao);
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1132 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized JSON escape: \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 1136 "parser.l"
{
  yyerrprepf(yyg, lit("newline in JSON string"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1143 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yylval->lexeme = chk_strdup(wchr);
    return TEXT;
  }
  yylval->chr = wchr[0];
  return LITCHAR;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1153 "parser.l"
{
  yylval->chr = strtol(yytext, 0, 16);
  return LITCHAR;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1158 "parser.l"
{
  return '\'';
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1162 "parser.l"
{
}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 1165 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1169 "parser.l"
{
  yyerrorf(yyg, lit("bad character ~s in buffer literal"),
           chr(yytext[0]), nao);
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1174 "parser.l"
{
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return LITCHAR;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1179 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));
  if ((yylval->val = flo_str(str)) == nil)
    out_of_range_float(yyg, str);
  return NUMBER;
}
	YY_BREAK
case 154:
/* rule 154 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1186 "parser.l"
{
  yylval->val = t;
  return JSKW;
}
	YY_BREAK
case 155:
/* rule 155 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1191 "parser.l"
{
  yylval->val = nil;
  return JSKW;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1196 "parser.l"
{
  if (strcmp("true", yytext) == 0) {
    yylval->val = t;
    return JSKW;
  }

  if (strcmp("false", yytext) == 0) {
    yylval->val = nil;
    return JSKW;
  }

  {
    val str = string_own(utf8_dup_from(yytext));
    yyerrorf(yyg, lit("unrecognized JSON syntax: ~a"), str, nao);
  }
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1213 "parser.l"
{
  yy_push_state(JLIT, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1218 "parser.l"
{
  yy_push_state(NESTED, yyscanner);
  return JSPLICE;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1223 "parser.l"
{
  yy_push_state(NESTED, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1228 "parser.l"
{
  return yytext[0];
}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 1232 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1236 "parser.l"
{
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1239 "parser.l"
{
  yyerrorf(yyg, lit("bad character ~s in JSON literal"),
           chr(yytext[0]), nao);
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1244 "parser.l"
{
  yy_push_state(JLIT, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1249 "parser.l"
ECHO;
	YY_BREAK
#line 5962 "lex.yy.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(SPECIAL):
			case YY_STATE_EOF(BRACED):
			case YY_STATE_EOF(NESTED):
			case YY_STATE_EOF(REGEX):
			case YY_STATE_EOF(SREGEX):
			case YY_STATE_EOF(STRLIT):
			case YY_STATE_EOF(CHRLIT):
			case YY_STATE_EOF(QSILIT):
			case YY_STATE_EOF(QSPECIAL):
			case YY_STATE_EOF(WLIT):
			case YY_STATE_EOF(QWLIT):
			case YY_STATE_EOF(BUFLIT):
			case YY_STATE_EOF(JSON):
			case YY_STATE_EOF(JLIT):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1646 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1646 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1645);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1249 "parser.l"


static int directive_tok(scanner_t *yyscanner, int tok, int state)
{
  struct yyguts_t *yyg = convert(struct yyguts_t *, yyscanner);
  char *pstart = yytext + 1 + strspn(yytext + 1, " \t");
  char *pcolon = strchr(pstart, ':');
  char *pend = pstart + strspn(pstart, ":-abcdefghijklmnopqrstuvwxyz");

  *pend = 0;

  if (pcolon != 0) {
    val pkgname = string_utf8((*pcolon = 0, pstart));
    val package = if3(pstart[0], find_package(pkgname), keyword_package);
    if (!package) {
      yyerrprepf(yyg, lit("package ~a not found"), pkgname, nao);
      tok = ERRTOK;
    }
    if (package != user_package && package != keyword_package) {
      val sym = string_utf8(pcolon + 1);
      yyerrprepf(yyg, lit("~a:~a: original usr package expected, not ~a"),
                 pkgname, sym, pkgname, nao);
      tok = ERRTOK;
    }
  } else {
    val symname = string_utf8(pstart);
    val sym = intern_fallback(symname, cur_package);
    val package = symbol_package(sym);

    if (package != user_package && package != keyword_package) {
      yyerrprepf(yyg, lit("~a: this is ~a:~a, not usr:~a"),
                 symname, package_name(package), symname, symname, nao);
      tok = ERRTOK;
    }
  }

  if (state != 0)
    yy_push_state(state, yyscanner);
  else
    yy_pop_state(yyscanner);
  yylval->lineno = yyextra->lineno;
  return tok;
}

void end_of_regex(scanner_t *yyg)
{
  if (YYSTATE != REGEX && YYSTATE != SREGEX)
    internal_error("end_of_regex called in wrong scanner state");

  yy_pop_state(yyg);

  if (YYSTATE != INITIAL) {
    if (yy_top_state(yyg) == INITIAL
      || yy_top_state(yyg) == QSILIT
      || yy_top_state(yyg) == QWLIT)
      yy_pop_state(yyg);
  }
}

void end_of_char(scanner_t *yyg)
{
  if (YYSTATE != CHRLIT)
    internal_error("end_of_char called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_buflit(scanner_t *yyg)
{
  if (YYSTATE != BUFLIT)
    internal_error("end_of_buflit called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_json(scanner_t *yyg)
{
  if (YYSTATE == JLIT)
    yy_pop_state(yyg);

  if (YYSTATE != JSON)
    internal_error("end_of_json called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_json_unquote(scanner_t *yyg)
{
  if (YYSTATE == NESTED)
    yy_pop_state(yyg);

  if (YYSTATE != JSON)
    internal_error("end_of_json_unquote called in wrong scanner state");
}

val source_loc(val form)
{
  return gethash(form_to_ln_hash, form);
}

val source_loc_str(val form, val alt)
{
  cons_bind (line, file, gethash(form_to_ln_hash, form));
  if (missingp(alt))
    alt = lit("source location n/a");
  return if3(line, format(nil, lit("~a:~d"), file, line, nao), alt);
}

int yylex(YYSTYPE *yylval_param, yyscan_t yyscanner)
{
  struct yyguts_t * yyg = convert(struct yyguts_t *, yyscanner);
  int yy_char;

  if (yyextra->tok_idx > 0) {
    struct yy_token *tok = &yyextra->tok_pushback[--yyextra->tok_idx];
    yyextra->recent_tok = *tok;
    *yylval_param = tok->yy_lval;
    if (tok->yy_lex_state && tok->yy_lex_state != YYSTATE)
      yy_push_state(tok->yy_lex_state, yyg);
    return tok->yy_char;
  }

  yy_char = yyextra->recent_tok.yy_char = yylex_impl(yylval_param, yyscanner);
  yyextra->recent_tok.yy_lval = *yylval_param;
  yyextra->recent_tok.yy_lex_state = YYSTATE;

  return yy_char;
}

void prime_scanner(scanner_t *yyg, enum prime_parser prim)
{
  while (YYSTATE != INITIAL)
    yy_pop_state(yyg);

  switch (prim) {
  case prime_lisp:
  case prime_interactive:
    yy_push_state(SPECIAL, yyg);
    yy_push_state(NESTED, yyg);
    yy_push_state(NESTED, yyg);
    break;
  case prime_regex:
    yy_push_state(SREGEX, yyg);
    break;
  }
}

void scrub_scanner(scanner_t *yyg, int yy_char, wchar_t *lexeme)
{
  struct yy_token *rtok = &yyextra->recent_tok;

  if (rtok->yy_char == yy_char && rtok->yy_lval.lexeme == lexeme) {
    rtok->yy_char = 0;
    rtok->yy_lval.lexeme = 0;
  }
}

void parser_l_init(void)
{
  prot1(&form_to_ln_hash);
  form_to_ln_hash = make_eq_hash(t, nil);
}

