
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 168
#define YY_END_OF_BUFFER 169
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1775] =
    {   0,
       64,   64,   64,   64,   64,   64,   64,   64,  140,  140,
      140,  140,  151,  151,  165,  165,  169,  116,  168,  117,
      168,  117,  168,  115,  168,  119,  168,  116,  168,  116,
      168,  116,  168,  119,  168,  100,  101,  168,   64,  100,
      101,  168,   86,  168,   86,  100,  101,  168,   65,  100,
      101,  168,  100,  101,  168,   57,  100,  101,  168,   63,
      100,  101,  168,  100,  101,  168,   91,  100,  101,  168,
       87,  100,  101,  168,    1,    2,   21,  100,  101,  168,
    16402,   99,  100,  101,  168,   85,  100,  101,  168,   21,
      100,  101,  168,16402,   57,  100,  101,  168,  100,  101,

      168,   69,  100,  101,  168,   56,  100,  101,  168,   63,
      100,  101,  168,  101,  168,  101,  168,  101,  168,  101,
      168,   64,  100,  101,  168,   22,  100,  101,  168,16403,
       74,  100,  101,  168,   60,  100,  101,  168,   22,  100,
      101,  168,16403,   60,  100,  101,  168,   91,  100,  101,
      168,    1,    2,   22,  100,  101,  168,16403,   22,  100,
      101,  168,16403,   58,  100,  101,  168,   22,  100,  101,
      168,16403,   61,  100,  101,  168,  101,  168,  101,  168,
      101,  168,   64,  100,  101,  168,   23,  100,  101,  168,
    16404,   74,  100,  101,  168,   23,  100,  101,  168,16404,

       91,  100,  101,  168,    1,    2,   23,  100,  101,  168,
    16404,   23,  100,  101,  168,16404,   58,  100,  101,  168,
       23,  100,  101,  168,16404,  101,  168,  101,  168,  101,
      168,  113,  114,  168,  113,  114,  168,  107,  168,  107,
      113,  114,  168,  109,  113,  114,  168,  102,  109,  113,
      114,  168,  112,  113,  114,  168,  114,  168,  114,  168,
      114,  168,  114,  168,  108,  168,  108,  113,  114,  168,
      148,  154,  168,  148,  154,  168,  134,  168,  134,  148,
      154,  168,  122,  148,  154,  168,  148,  154,  168,  154,
      168,  154,  168,  154,  168,  154,  168,  133,  148,  154,

      168,  135,  168,  135,  148,  154,  168,  132,  133,  148,
      154,  168,  132,  133,  148,  154,  168,  132,  133,  148,
      154,  168,  133,  154,  168,  133,  154,  168,  133,  154,
      168,  133,  154,  168,  136,  168,  136,  148,  154,  168,
      139,  148,  154,  168,  148,  154,  168,  123,  148,  154,
      168,   64,  100,  101,  168,  100,  101,  168,  100,  101,
      168,   91,  100,  101,  168,    1,    2,   12,   21,  100,
      101,  168,16402,   58,  100,  101,  168,  100,  101,  168,
      140,  148,  154,  168,  137,  168,  137,  148,  154,  168,
      148,  154,  168,  148,  154,  168,  153,  168,  151,  153,

      168,  152,  168,  152,  153,  168,  150,  153,  168,  149,
      153,  168,  159,  166,  168,  165,  166,  168,  164,  168,
      164,  166,  168,  160,  163,  166,  168,  159,  166,  168,
      163,  166,  168,  159,  166,  168,  155,  159,  166,  168,
      155,  159,  166,  168,  159,  166,  168,  159,  166,  168,
      159,  166,  168,  162,  163,  166,  168,  147,  168,  147,
      148,  154,  168,  141,  148,  154,  168,  148,  154,  168,
      167,  168,  168,  116,  116,  116,  116,  117,  115,  121,
      118,  116,  116,  116,  121,   64,   90,   86,   70,   68,
       66,   72,    1,    2,   89,    5,    6,   92,    1,    2,

       21,16402,   21,16402,   21,16402,   99,   98,   94,   94,
       98,   95,   98,   96,   98,   97,   98,  100,   64,   90,
       22,   24,16403,   22,16403,   22,   24,16403,   22,16403,
       22,16403,   81,   75,   80,   78,   77,   76,   79,    1,
        2,   22,   24,16403,   59,    5,    6,    1,    2,   22,
       24,16403,   22,   24,16403,   22,   24,16403,   22,16403,
       24,   22,16403,   22,16403,   22,16403,   11,   22,16403,
       94,   22,  100,16403,   64,   90,   23,   25,16404,   23,
    16404,   23,   25,16404,   23,16404,   23,16404,    1,    2,
       23,   25,16404,   84,    5,    6,    1,    2,   23,   25,

    16404,   23,   25,16404,   23,   25,16404,   23,16404,   25,
       23,16404,   23,16404,   23,16404,   11,   23,16404,   23,
      100,16404,  107,  111,  106,  106,  111,  103,  111,  110,
      111,  104,  111,  105,  111,  111,  113,  108,  134,  130,
      126,  127,  126,  127,  130,  124,  130,  128,  130,  129,
      130,  148,  135,  132,  131,  132,  131,  132,  136,  138,
       11,  138,  138,  125,  130,   64,   90,    1,    2,   12,
        1,    2,   12,   21,16402,  140,  137,  127,  127,  130,
      151,  152,  159,  165,  164,  159,  155,  159,  155,  159,
      159,  159,  155,  159,  159,  159,  159,  161,  147,  146,

      142,  146,  145,  146,  121,  116,  121,  120,  120,  121,
       88,   93,   71,   73,   67,    3,    3,    3,   62,    1,
        2,    5,    6,    7,    7,    7,    2,   10,    5,    6,
        7,   10, 8210,    7,   10,    7,   10,    5,    6,   21,
    16402, 8210,   94,   96,   96,   96,   22,   24,16403,   22,
       24,16403,   22,   24,16403,   22,   24,16403, 8211,   22,
       24,16403,   22,   24,16403,   22,   24,16403,   24,   24,
       83,   82,   22,   24,16403,   22,16403,   22,16403,    5,
        6, 8211,    1,    2,   22,   24,16403,   22,   24,16403,
        8,    5,    6,    8,    8,    8,    2,    8,   10,   10,

        5,    6,    8,   10, 8211,    8,   10,   10,    8,   10,
       10,   10,   10,   22,   24,16403,    5,    6,   22,   24,
    16403,   22,   24,16403,   22,   24,16403,   24,   22,   24,
    16403,   24,   22,   24,16403,   22,16403,   22,16403,   11,
       22,   24,16403,   23,   25,16404,   23,   25,16404,   23,
       25,16404,   23,   25,16404, 8212,   23,   25,16404,   23,
       25,16404,   23,   25,16404,   25,   25,   23,   25,16404,
       23,16404,   23,16404,    5,    6, 8212,    1,    2,   23,
       25,16404,   23,   25,16404,    9,    5,    6,    9,    9,
        9,    2,    9,   10,   10,    5,    6,    9,   10, 8212,

        9,   10,   10,    9,   10,   10,   10,   10,   23,   25,
    16404,    5,    6,   23,   25,16404,   23,   25,16404,   23,
       25,16404,   25,   23,   25,16404,   25,   23,   25,16404,
       23,16404,   23,16404,   11,   23,   25,16404,  106,  106,
      104,  104,  104,  126,  127,  126,  127,  128,  128,  128,
       11,    3,   16,    3,   14,    1,    2,   12,    2,   10,
     8210,  127,  127,   83,  159,   82,  159,  155,  159,  159,
      155,  159,  159,  159,  159,  120,    5,    6,    7,    7,
        5,    6,    3,    4,    4,    3,    4,    3,    4,   53,
       53,   53,   53,   53,   53,   35,    5,    6,    7,   10,

        6,    5,    6,    7,    2,    5,    6,    7, 8210,    5,
        6,    7,    5,    6,    7,   21,16402,    7,   21,16402,
        5,    6,    8,    8,    5,    6,   22,   24,16403,   22,
       24,16403,   22,   24,16403,   22,   24,16403,   22,   24,
    16403,   22,   24,16403,   24,   24,   24,   24,   22,   24,
    16403,   22,   24,16403,   22,   24,16403,    5,    6,    8,
     8211,    8,    8,    8,    6,    8,    8,    5,    6,    8,
        8,    8,    8,    8,    8,    5,    6,    8,    2,    5,
        6,    8, 8211,    8,    5,    6,    8,    8,   22,   24,
    16403,   22,   24,16403,    5,    6,    8,   22,   24,16403,

        8,   22,   24,16403,   24,   22,   24,16403,   22,   24,
    16403,   22,   24,16403,   11,   22,   24,16403,    5,    6,
        9,    9,    5,    6,   23,   25,16404,   23,   25,16404,
       23,   25,16404,   23,   25,16404,   23,   25,16404,   23,
       25,16404,   25,   25,   25,   25,   23,   25,16404,   23,
       25,16404,   23,   25,16404,    5,    6,    9, 8212,    9,
        9,    9,    6,    9,    9,    5,    6,    9,    9,    9,
        9,    9,    9,    5,    6,    9,    2,    5,    6,    9,
     8212,    9,    5,    6,    9,    9,   23,   25,16404,   23,
       25,16404,    5,    6,    9,   23,   25,16404,    9,   23,

       25,16404,   25,   23,   25,16404,   23,   25,16404,   23,
       25,16404,   17,   15,   13,   11,   23,   25,16404,    3,
        4,   16,    3,    4,   14,    2,  159,  159,  159,    3,
        3,    3,   26,   34,   36,   47,   47,   47,   47,   47,
       47,   42,   42,   42,   42,   42,   42,   50,    6,    7,
        7,    5,    6,    6,    7,   10,    7,   10,    6,    7,
     8210,    5,    6,    8,   22,   24,16403,   22,   24,16403,
       22,   24,16403,   24,    8,    8,    6,    8,    8,    8,
        8,    8,    5,    6,    8,    6,    8,   10,    8,   10,
        6,    5,    6,    8,    8,   22,   24,16403,    8,   22,

       24,16403,    8,   22,   24,16403,    8,   22,   24,16403,
        8,   22,   24,16403,    8, 8211,    8,   22,   24,16403,
        8,   22,   24,16403,    5,    6,    8,   22,   24,16403,
        8,   22,   24,16403,    8,   22,   24,16403,    8,   22,
       24,16403,    8,   22,   24,16403,    8,   24,    8,   24,
        5,    6,    9,   23,   25,16404,   23,   25,16404,   23,
       25,16404,   25,    9,    9,    6,    9,    9,    9,    9,
        9,    5,    6,    9,    6,    9,   10,    9,   10,    6,
        5,    6,    9,    9,   23,   25,16404,    9,   23,   25,
    16404,    9,   23,   25,16404,    9,   23,   25,16404,    9,

       23,   25,16404,    9, 8212,    9,   23,   25,16404,    9,
       23,   25,16404,    5,    6,    9,   23,   25,16404,    9,
       23,   25,16404,    9,   23,   25,16404,    9,   23,   25,
    16404,    9,   23,   25,16404,    9,   25,    9,   25,  159,
      158,  156,    6,    7,    7,   38,   38,   38,   38,   38,
       38,   54,   54,   54,   54,   54,   54,   55,   45,   45,
       45,   45,   45,   45,   28,   27,   27,   27,   27,   27,
       27,    6,    7,    6,    7,    6,    8,    8,    6,    8,
        8,    8,    6,    8,    8,    6,    8,    6,    8,    8,
       22,   24,16403,    8,   22,   24,16403,    8,   22,   24,

    16403,    8,   22,   24,16403,    8,   22,   24,16403,    8,
       22,   24,16403,    8, 8211,    8,   22,   24,16403,    8,
       22,   24,16403,    8,   22,   24,16403,    8,   22,   24,
    16403,    8,   22,   24,16403,    8,   22,   24,16403,    8,
       24,    8,   24,    8,   24,    8,   24,    6,    9,    9,
        6,    9,    9,    9,    6,    9,    9,    6,    9,    6,
        9,    9,   23,   25,16404,    9,   23,   25,16404,    9,
       23,   25,16404,    9,   23,   25,16404,    9,   23,   25,
    16404,    9,   23,   25,16404,    9, 8212,    9,   23,   25,
    16404,    9,   23,   25,16404,    9,   23,   25,16404,    9,

       23,   25,16404,    9,   23,   25,16404,    9,   23,   25,
    16404,    9,   25,    9,   25,    9,   25,    9,   25,  157,
      144,  144,   31,   31,   31,   31,   31,   31,   30,   51,
       51,   51,   51,   51,   51,   46,   44,   29,   39,   39,
       39,   39,   39,   39,    6,    6,    8,    6,    8,    8,
       22,   24,16403,    8,   22,   24,16403,    8,   22,   24,
    16403,    8,   22,   24,16403,    8,   22,   24,16403,    8,
       22,   24,16403,    8,   22,   24,16403,    8,   22,   24,
    16403,    8,   22,   24,16403,    8,   24,    6,    9,    6,
        9,    9,   23,   25,16404,    9,   23,   25,16404,    9,

       23,   25,16404,    9,   23,   25,16404,    9,   23,   25,
    16404,    9,   23,   25,16404,    9,   23,   25,16404,    9,
       23,   25,16404,    9,   23,   25,16404,    9,   25,   32,
       32,   32,   32,   32,   32,   49,   49,   49,   49,   49,
       49,   33,   33,   33,   33,   33,   33,   40,   40,   40,
       40,   40,   40,   41,   41,   41,   41,   41,   41,   43,
       37,   37,   37,   37,   37,   37,   52,   48,   48,   48,
       48,   48,   48,  143
    } ;

static const flex_int16_t yy_accept[1749] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   18,   20,   22,   24,   26,   28,   30,
       32,   34,   36,   39,   43,   45,   49,   53,   56,   60,
       64,   67,   71,   75,   82,   86,   90,   95,   99,  102,
      106,  110,  114,  116,  118,  120,  122,  126,  131,  135,
      139,  144,  148,  152,  159,  164,  168,  173,  177,  179,
      181,  183,  187,  192,  196,  201,  205,  212,  217,  221,
      226,  228,  230,  232,  235,  238,  240,  244,  248,  253,

      257,  259,  261,  263,  265,  267,  271,  274,  277,  279,
      283,  287,  290,  292,  294,  296,  298,  302,  304,  308,
      313,  318,  323,  326,  329,  332,  335,  337,  341,  345,
      348,  352,  356,  359,  362,  366,  374,  378,  381,  385,
      387,  391,  394,  397,  399,  402,  404,  407,  410,  413,
      416,  419,  421,  424,  428,  431,  434,  437,  441,  445,
      448,  451,  454,  458,  460,  464,  468,  471,  473,  474,
      475,  476,  477,  478,  479,  480,  480,  481,  482,  483,
      484,  485,  485,  486,  487,  487,  488,  488,  489,  490,
      490,  491,  492,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  495,  496,  498,  499,  499,  499,  503,  505,  507,
      508,  508,  509,  510,  512,  514,  516,  518,  519,  519,
      519,  520,  520,  521,  521,  524,  526,  526,  529,  529,
      531,  531,  531,  531,  531,  533,  534,  535,  536,  537,
      538,  539,  540,  540,  545,  546,  548,  548,  548,  553,
      556,  559,  561,  562,  564,  564,  564,  564,  566,  566,
      568,  571,  571,  571,  571,  572,  575,  575,  575,  576,
      576,  577,  577,  580,  582,  582,  585,  585,  587,  587,

      587,  587,  589,  589,  594,  595,  597,  597,  597,  602,
      605,  608,  610,  611,  613,  613,  613,  613,  615,  615,
      617,  620,  620,  620,  620,  623,  623,  623,  623,  623,
      624,  625,  626,  628,  630,  632,  634,  636,  637,  638,
      638,  638,  639,  639,  639,  640,  641,  643,  646,  648,
      650,  652,  653,  653,  653,  654,  655,  657,  659,  660,
      660,  661,  661,  663,  664,  666,  667,  668,  668,  668,
      671,  671,  671,  676,  676,  677,  677,  678,  679,  681,
      682,  683,  684,  685,  686,  687,  689,  691,  692,  693,
      695,  696,  697,  698,  699,  700,  701,  703,  705,  706,

      707,  708,  709,  711,  712,  713,  713,  713,  713,  713,
      714,  715,  716,  716,  717,  717,  718,  718,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  720,  720,  722,  722,  722,
      725,  726,  727,  728,  729,  734,  736,  738,  738,  742,
      743,  744,  745,  746,  747,  747,  747,  747,  747,  747,
      747,  750,  753,  756,  759,  759,  759,  759,  760,  763,

      766,  769,  769,  769,  769,  770,  770,  771,  771,  771,
      771,  771,  771,  772,  773,  776,  778,  780,  780,  780,
      780,  783,  788,  791,  792,  792,  792,  792,  795,  796,
      796,  797,  797,  797,  797,  798,  800,  801,  806,  808,
      809,  811,  812,  813,  814,  817,  822,  825,  828,  829,
      832,  832,  832,  832,  833,  833,  833,  833,  833,  833,
      836,  838,  840,  840,  840,  840,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  847,  850,  853,  856,  856,
      856,  856,  857,  860,  863,  866,  866,  866,  866,  867,
      867,  868,  868,  868,  868,  868,  868,  871,  873,  875,

      875,  875,  875,  878,  883,  886,  887,  887,  887,  887,
      890,  891,  891,  892,  892,  892,  892,  893,  895,  896,
      901,  903,  904,  906,  907,  908,  909,  912,  917,  920,
      923,  924,  927,  927,  927,  927,  928,  928,  928,  928,
      928,  928,  931,  933,  935,  935,  935,  935,  935,  935,
      935,  939,  939,  939,  939,  940,  941,  942,  943,  944,
      944,  946,  948,  949,  950,  951,  951,  952,  952,  954,
      954,  956,  956,  959,  960,  962,  963,  964,  966,  968,
      970,  971,  973,  974,  975,  976,  976,  976,  977,  977,
      980,  981,  983,  983,  985,  986,  986,  988,  988,  990,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  991,  992,  993,  994,  995,  996,  996,  996,  996,
      996,  996,  997,  997,  997,  997,  997,  997,  997,  997,
     1001, 1002, 1002, 1005, 1005, 1006, 1006, 1010, 1013, 1013,
     1018, 1021, 1021, 1024, 1025, 1025, 1027, 1030, 1033, 1036,
     1036, 1036, 1036, 1036, 1036, 1039, 1042, 1045, 1045, 1045,
     1045, 1045, 1045, 1046, 1047, 1048, 1048, 1048, 1048, 1049,

     1049, 1049, 1049, 1049, 1049, 1049, 1052, 1055, 1058, 1058,
     1058, 1058, 1058, 1058, 1062, 1063, 1064, 1064, 1064, 1064,
     1065, 1066, 1067, 1068, 1071, 1072, 1073, 1073, 1073, 1073,
     1074, 1074, 1074, 1074, 1075, 1075, 1075, 1075, 1076, 1079,
     1079, 1079, 1079, 1080, 1080, 1084, 1085, 1088, 1092, 1095,
     1095, 1101, 1105, 1105, 1105, 1105, 1105, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1109, 1112, 1115, 1115,
     1115, 1115, 1115, 1115, 1119, 1119, 1119, 1122, 1123, 1123,
     1125, 1128, 1131, 1134, 1134, 1134, 1134, 1134, 1134, 1137,
     1140, 1143, 1143, 1143, 1143, 1143, 1143, 1144, 1145, 1146,

     1146, 1146, 1146, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1150, 1153, 1156, 1156, 1156, 1156, 1156, 1156, 1160, 1161,
     1162, 1162, 1162, 1162, 1163, 1164, 1165, 1166, 1169, 1170,
     1171, 1171, 1171, 1171, 1172, 1172, 1172, 1172, 1173, 1173,
     1173, 1173, 1174, 1177, 1177, 1177, 1177, 1178, 1178, 1182,
     1183, 1186, 1190, 1193, 1193, 1199, 1203, 1203, 1203, 1203,
     1203, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1207, 1210, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1214,
     1214, 1215, 1215, 1216, 1220, 1220, 1223, 1226, 1227, 1228,
     1229, 1230, 1230, 1230, 1230, 1230, 1231, 1232, 1233, 1233,

     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1234, 1234, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1236,
     1236, 1236, 1236, 1236, 1236, 1237, 1238, 1239, 1239, 1240,
     1241, 1242, 1242, 1242, 1243, 1244, 1245, 1245, 1246, 1247,
     1248, 1248, 1248, 1248, 1249, 1249, 1251, 1252, 1254, 1257,
     1259, 1259, 1260, 1262, 1262, 1262, 1265, 1268, 1271, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,

     1275, 1276, 1276, 1276, 1276, 1276, 1276, 1277, 1277, 1277,
     1277, 1279, 1280, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1282, 1283, 1283, 1283, 1283, 1283, 1283, 1286, 1286,
     1289, 1291, 1291, 1292, 1295, 1299, 1303, 1307, 1311, 1311,
     1311, 1311, 1315, 1317, 1321, 1325, 1331, 1335, 1335, 1335,
     1335, 1339, 1343, 1347, 1347, 1347, 1347, 1349, 1349, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1354, 1357, 1360, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1365,

     1365, 1365, 1365, 1365, 1365, 1366, 1366, 1366, 1366, 1368,
     1369, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1371,
     1372, 1372, 1372, 1372, 1372, 1372, 1375, 1375, 1378, 1380,
     1380, 1381, 1384, 1388, 1392, 1396, 1400, 1400, 1400, 1400,
     1404, 1406, 1410, 1414, 1420, 1424, 1424, 1424, 1424, 1428,
     1432, 1436, 1436, 1436, 1436, 1438, 1438, 1440, 1440, 1440,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440,
     1441, 1442, 1443, 1443, 1443, 1445, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,

     1446, 1446, 1447, 1448, 1449, 1449, 1450, 1451, 1452, 1452,
     1453, 1454, 1455, 1456, 1457, 1458, 1458, 1459, 1459, 1459,
     1459, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1465, 1465,
     1465, 1466, 1466, 1466, 1466, 1467, 1468, 1469, 1470, 1471,
     1472, 1472, 1472, 1474, 1476, 1478, 1479, 1479, 1479, 1479,
     1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479,
     1479, 1481, 1482, 1483, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1486, 1488, 1490, 1494, 1498, 1502, 1502, 1502,
     1502, 1502, 1502, 1506, 1510, 1514, 1514, 1514, 1514, 1516,
     1520, 1524, 1528, 1528, 1528, 1528, 1528, 1528, 1532, 1536,

     1540, 1540, 1540, 1540, 1540, 1540, 1542, 1544, 1546, 1546,
     1546, 1546, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1550, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1553, 1554, 1555,
     1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1558, 1560,
     1562, 1566, 1570, 1574, 1574, 1574, 1574, 1574, 1574, 1578,
     1582, 1586, 1586, 1586, 1586, 1588, 1592, 1596, 1600, 1600,
     1600, 1600, 1600, 1600, 1604, 1608, 1612, 1612, 1612, 1612,
     1612, 1612, 1614, 1616, 1618, 1618, 1618, 1618, 1620, 1620,
     1620, 1620, 1620, 1620, 1620, 1620, 1620, 1621, 1622, 1623,

     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1624, 1625, 1626, 1627,
     1628, 1629, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636,
     1636, 1636, 1636, 1636, 1637, 1637, 1637, 1638, 1638, 1638,
     1639, 1639, 1639, 1639, 1639, 1640, 1641, 1642, 1643, 1644,
     1645, 1646, 1646, 1646, 1646, 1646, 1648, 1648, 1648, 1650,
     1654, 1658, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1666,
     1670, 1674, 1674, 1674, 1674, 1674, 1674, 1678, 1682, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1688,
     1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688,

     1688, 1688, 1690, 1690, 1690, 1692, 1696, 1700, 1704, 1704,
     1704, 1704, 1704, 1704, 1704, 1708, 1712, 1716, 1716, 1716,
     1716, 1716, 1716, 1720, 1724, 1728, 1728, 1728, 1728, 1728,
     1728, 1728, 1728, 1728, 1728, 1730, 1730, 1730, 1730, 1730,
     1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730,
     1730, 1730, 1730, 1730, 1731, 1732, 1733, 1734, 1735, 1736,
     1736, 1737, 1738, 1739, 1740, 1741, 1742, 1742, 1743, 1744,
     1745, 1746, 1747, 1748, 1748, 1749, 1750, 1751, 1752, 1753,
     1754, 1755, 1756, 1757, 1758, 1759, 1760, 1760, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,

     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1762, 1763, 1764, 1765, 1766, 1767, 1767, 1768, 1769,
     1770, 1771, 1772, 1773, 1774, 1774, 1774, 1774, 1774, 1774,
     1774, 1774, 1774, 1774, 1774, 1774, 1775, 1775
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    6,    9,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,    6,
       25,    6,   26,   27,   28,   28,   29,   30,   31,   29,
       32,   33,   32,   34,   32,   32,   32,   35,   32,   32,
       32,   36,   37,   38,   32,   32,   39,   32,   32,   32,
       40,   41,   42,   43,   32,   44,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   32,   54,   55,   56,   57,
       58,   59,   32,   60,   61,   62,   63,   64,   39,   65,
       66,   32,   67,   68,   69,   70,    1,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   72,   72,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   75,
       75,   75,   75,   75,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,    6,    9,
       10,    2,   11,   12,   13,   12,   14,   15,   16,   16,
       16,   16,   17,   18,    6,    6,   19,   16,   16,   16,
       16,   20,   20,   20,   20,   20,   20,   20,   20,   10,
        6,    7,   21,    1,   16,   16,   16,   16,   22,   16,
       20,   20,   20,   20,   23,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   10,    1,    7,   11,
        1,    1,   24,   24,   24
    } ;

static const flex_int16_t yy_base[2011] =
    {   0,
        0,    3,   78,    0,  153,    0,  228,    0,  302,  376,
        6,    8,  350,  356,  451,    0,  525,  599,  673,    0,
      362,  534,  715,  789,  863,  912,  961, 1030,  539,  544,
     5852, 5847, 5842,  235,13219, 5828, 5824,   11,  250,  256,
      261,   12,13219,   24,13219, 5825,13219,  621, 1099, 5806,
       30,   37,13219,  389,    0,13219,    6,13219, 1172,13219,
    13219,13219,13219, 5748, 5747, 5737,  551,  633, 1231,13219,
     1289, 5789,   12,  682,  707,  724,   50,13219, 5730, 5729,
     5725,  572,  731, 5771, 1357,  625,  706,  752,  801,  379,
     5721, 5719, 5710,13219,  343,13219, 5774,13219,13219, 1432,

    13219, 5705, 5702, 5701,13219, 5768,13219,  345,13219, 5767,
    13219, 1505,13219, 5691, 5688, 5685,13219,13219, 5743,    0,
       41, 1552,13219, 5673, 5658, 5657,13219, 5723, 1595, 1660,
    13219,  559,  794,  318,  529,  616, 5715,   61,  366,13219,
     5713,  554,  409,13219,   13,13219, 5706,13219,13219,    0,
      344,13219, 5705,13219,  420,13219,  601,  649,  822, 5662,
     5638, 5639, 5678,13219, 5686,13219,  840,13219,13219,  509,
      584,  678,  690,13219, 5680,  922,    0,13219,  579,  697,
      775,  943,  411,  973,  933,  899,  995,13219,13219,  388,
    13219,13219,13219,  986, 1040,   52,    0,  710, 1681,  832,

      924, 1167,  805, 1205, 1002, 1212,  990, 1225, 1260, 1016,
     1265, 1093, 1268,  947, 1272, 5604, 5601, 5600,  690,  917,
     1164,  530, 1184,13219, 1047, 1744, 1336,  428, 1372,    0,
     1062,13219,  557,  808,13219, 1074,    0,13219, 5594, 5592,
     1393, 1349, 1188, 1499, 1514, 1569, 1282, 1610, 1329, 1623,
     5575, 5573, 5563, 1397, 1812,13219,13219,13219,13219,13219,
    13219,13219, 1404, 1880,13219, 1948, 1513, 2023,    0, 1811,
     1835, 1840,  703, 1853, 5562, 5560, 5552, 1908, 5599, 2091,
        0, 5550, 5528, 5527,  829, 1916, 5525, 5524, 1655, 1523,
     1872, 1927, 2098, 2109, 1539, 2112, 1555, 2120, 5516, 5513,

     5509, 2134, 1604, 2202,13219, 2270, 1671, 2345,    0, 2182,
     2229, 2236, 1036, 2241, 5502, 5498, 5494, 2413, 1165, 2481,
        0, 5493, 5490, 5487, 2418, 5480, 5478,  627,  541,13219,
    13219,  558,  867,13219,13219, 1303,13219,    0,13219, 5476,
     5475,13219,  983,  546,13219,13219,  585,  893,13219, 1628,
        0,13219, 5474, 5473,13219,    0, 1177, 2538,13219, 1124,
    13219, 1692, 1802,    0,13219, 1222,  659, 1830,  786, 1979,
     1965, 1898, 1987, 5497, 1241,  575,13219,  921, 1083, 1101,
    13219,    0, 1121,13219, 1995, 1214, 2427, 1991, 2220, 2433,
     5487, 5427, 5393,13219,13219,13219,13219,    7,    0, 1219,

      621,13219,  645, 1254,13219, 2159, 2169, 2448, 2304,13219,
    13219,13219,  716,  747, 1294, 1329,    0, 2574, 1308, 5379,
     5378, 5376,  972, 5379, 1142, 5381, 1304, 5376, 5375, 5366,
     5363,  624, 5346, 1211, 5354,  259, 5339, 5335, 1581, 1831,
     1899, 2153, 2207, 2439, 2263, 2454, 2400, 2225, 2460, 2232,
     2624, 2260, 2457, 2473, 2488, 2569, 2476, 2467, 2541, 2584,
     2587, 2607, 5312, 5311, 2081, 2699, 2760, 2412,    0, 2768,
        0, 2556, 2781,13219, 2148,    0, 2656, 2308, 2666, 2320,
     1271, 1817,13219, 5356, 5307, 2773, 2799, 2823, 2807, 2839,
     2840, 2857, 2862, 2865, 5303, 5301, 5297, 2785, 2899, 2902,

     2926, 5293, 5281, 5277, 2828, 5324, 1354, 5275, 5269, 5267,
     5255, 5254,13219,13219, 2938, 2943, 2971, 5253, 5248, 5247,
     3039, 3107, 2988, 2802, 5294, 2937, 2955, 3175, 1520, 2910,
     3019, 5240, 5239, 5238, 3052, 2918, 5277, 3243, 1546, 3045,
     3084, 5228, 5224, 5222, 3060, 3311, 3094, 3162, 1791, 3202,
     5221, 5208, 5199, 1798, 5195, 5194, 5193, 5190, 5187, 3230,
     3270, 3283, 5186, 5180, 5169, 3379, 5167, 5164, 5163, 2813,
     3005, 3447, 3124, 3193, 3319, 3352, 3406, 3413, 5155, 5154,
     5141, 3029, 3420, 3434, 3474, 5135, 5133, 5128, 3168, 5170,
     1863, 5121, 5116, 5098, 5093, 5090, 3496, 3507, 3510, 5084,

     5082, 5076, 3578, 3646, 3541, 2948, 5118, 3132, 3275, 3714,
     1887, 3087, 3345, 5068, 5056, 5054, 3591, 3011, 5100, 3782,
     2049, 3248, 3609, 5050, 5042, 5039, 3626, 3850, 3673, 3680,
     2071, 3685, 5038, 5033, 5032, 2075, 5026, 5025, 5018, 5000,
     4988, 3748, 3753, 3807, 4986, 4976, 4975, 2140, 2592, 1125,
     3918, 4954, 4952, 4951, 1370, 1279, 2250,13219, 4992, 4941,
     1394, 1315, 2418,13219, 4987, 4938, 3144, 2241, 2635,    0,
     3979,    0, 3211, 3361, 3201, 1656, 1406,    0,    0, 3545,
     3260, 3351, 4947, 4945, 4948,    0, 2580,13219, 3762, 3868,
     3821, 1522,  799, 1680, 4971, 3269, 3320, 4967, 4011, 4908,

     4906, 4919, 4923, 4906,  775, 4904, 4905, 4909,  280, 4802,
     4808, 1496, 4793,    0, 4790, 4783, 4793, 4774, 2128, 4767,
     4768, 4760, 4746, 4724, 4724, 3612, 3874, 3889, 3893, 3906,
     3898, 4000, 4041, 4060, 4064, 4079, 4083, 4095, 4099, 4107,
    13219, 4119, 4150, 4697, 4693, 4682, 4212, 4216, 4291, 4248,
     2245,13219, 4252, 4366, 4265, 4349, 4380, 4389, 4678, 4210,
     3798, 3369, 3388, 4464, 4227, 3522, 3599, 1702, 3832, 3617,
     4722, 4399, 4532, 4546, 3705, 4563, 3942, 4570, 4581, 4653,
     4651, 4646, 4645, 4641, 4606, 4623, 4634, 4640, 4624, 4618,
     4616, 4614, 3636, 3947, 2766, 4607, 4603, 4602, 2820, 4594,

     4593, 4581, 4576, 4568, 4564, 4645, 4659, 4667, 4563, 4559,
     4540, 4538, 4532, 4735, 3113, 2922, 4528, 4524, 4523, 2990,
     4803, 3126, 3194, 3730, 3058, 4707, 4521, 4520, 4517, 3221,
     4508, 4506, 4503, 4553, 4502, 4499, 4493, 3840, 4716, 4477,
     4475, 4878, 4752, 4129,    0, 4322, 4772, 4762, 4789, 4823,
     4946, 4953, 3437, 4474, 4410, 4390, 3234, 4389, 4385, 4373,
     4372, 4365, 4361, 4360, 4358, 4964, 4967, 4975, 4357, 4346,
     4340, 4334, 4333, 5043, 4331, 4984, 5111, 5062, 3747, 5071,
     5097, 5135, 5140, 4329, 4328, 4313, 4309, 4308, 5173, 5180,
     5194, 4282, 4281, 4279, 4278, 4276, 4640, 4796, 3278, 4266,

     4261, 4253, 3338, 4249, 4246, 4242, 4236, 4233, 4229, 5216,
     5233, 5254, 4209, 4202, 4201, 4198, 4197, 5322, 3425, 3342,
     4195, 4194, 4185, 3398, 5390, 3529, 3669, 3911, 3410, 5282,
     4181, 4174, 4172, 3500, 4169, 4163, 4162, 4970, 4152, 4151,
     4144, 5033, 5080, 4138, 4133, 5465, 5263, 4169,    0, 5154,
     5301, 5350, 5358, 5369, 5533, 5540, 3974, 4131, 4116, 4113,
     3504, 4108, 4107, 4100, 4090, 4084, 4076, 4075, 4073, 5551,
     5554, 5562, 4065, 4061, 4055, 4049, 4046,  837,  909, 3568,
     3651,    0,    0, 5630, 4037, 3968, 5691, 4430, 4056, 5740,
     5809,    0,    0, 3955, 5571, 1688, 4108, 5861, 4032, 2504,

     2811, 4052, 4049, 4046, 4034, 4035, 4029, 4021, 4021, 4006,
     2915, 4022, 4002, 4002, 3983, 3998, 3983, 3988, 3960, 3969,
     3963, 3962, 2942, 3953, 3085,13219, 3172,13219, 3791, 4102,
     3961, 4352, 5911, 4163, 5986, 5240, 4282, 3429,13219, 4255,
     4384, 4702, 6061, 4784,13219, 4313, 6092, 4527, 3932, 3925,
     3924, 5607, 4725,13219, 4618,    0, 5199, 3907, 3889, 3887,
     4740, 6155, 3523,13219, 4773, 5639, 4596, 4145,    0, 5053,
     4058, 4262, 4522, 6223, 5647, 6291, 5675, 5752, 5770, 3886,
     3883, 3881, 3880, 3875, 3873, 3872, 3863, 3857, 3631, 3856,
     3851, 3849, 3848, 3838, 3836, 3835, 3833, 3804, 3797, 3778,

     3640, 3773, 3768, 3762, 3761, 3745, 3665, 3741, 3739, 3729,
     6359, 5711, 3699, 3727, 3724, 3723, 3721, 3715, 3714, 3707,
     5371, 5379, 3693, 3691, 3661, 3659, 3647, 5784, 3646,    0,
     5942, 4684, 5949, 5815, 5830, 6024, 6160, 6163, 3628, 3627,
     3607, 6232, 5620, 6250, 6257, 6427, 6318, 3593, 3589, 3584,
     6325, 6330, 6393, 3579, 3578, 3571, 5692, 3610, 3733, 3555,
     3545, 3544, 3536, 3525, 3521, 3520, 3497, 3488, 3483, 3460,
     3458, 6495, 5839, 6563, 6398, 6434, 6461, 3445, 3443, 3435,
     3434, 3432, 3431, 3421, 3419, 3418, 3977, 3405, 3404, 3391,
     3368, 3364, 3353, 3333, 3326, 3306, 3303, 3292, 4483, 3284,

     3276, 3266, 3258, 3254, 4585, 3253, 3244, 3241, 6631, 6017,
     4596, 3230, 3228, 3214, 3201, 3188, 3183, 3173, 5969, 6101,
     3168, 3156, 3145, 3137, 3133, 5910, 3132,    0, 6188, 4846,
     6472, 6270, 6534, 6570, 6597, 6604, 3122, 3104, 3100, 6658,
     5874, 6665, 6676, 6744, 6699, 3069, 3064, 3054, 6752, 6769,
     6777, 3052, 3045, 3037, 6354, 3076, 4626, 3025, 3018, 3007,
     3005, 2986, 2984, 2981, 2972, 2965, 2961, 2960, 2944, 6851,
    13219,13219,    0,    0, 6510, 5421, 2952, 2929, 2937, 2926,
     2931, 2910,    0, 3689, 2898, 2895, 2886, 2879,    0, 2875,
     2878, 4084, 2858, 2866, 2854,    0, 2849, 6921, 6996, 7071,

     4214,13219, 4307, 7102, 4848, 2828, 2820, 2819, 4983,13219,
     4620,    0, 2815, 2807, 2798, 5012,13219, 5056, 5110, 5075,
     5189,13219, 5154,    0, 2795, 2793, 2781, 5177, 5358, 5193,
    13219, 5570, 5712, 5357,13219, 5349,    0, 2778, 2776, 2766,
     7165, 4936, 5440, 2408, 7233, 6544, 2744, 2740,  251,  255,
      280,  285,  291,  334,  348,  355,  462,  469,  483,  524,
     7301, 6814, 6195, 6579,  592,  606,  625,  634,  651,  658,
      670, 6724, 6826, 6850, 6884, 6943, 7016,  686,  702,  725,
      732,  737, 7034, 7170, 7204,  758,  774,  780, 6734, 7267,
     7272, 7326,  806,  817,  828,  873,  878, 7340, 7343, 7354,

      900,  915,  920,  937,  938, 6364, 6529, 4671,  948,  965,
      976, 4686,  977,  986,  987, 1000, 1007, 1008, 1025, 1031,
     7422, 6894, 1036, 1043, 1072, 1100, 1107, 1109, 1131, 1145,
     1149, 1155, 1176, 1187, 1236, 1248, 7490, 6957, 7026, 7006,
     1259, 1265, 1283, 1319, 1330, 1335, 1349, 7110, 7105, 7179,
     7381, 7449, 7456, 1350, 1440, 1442, 1446, 1452, 7461, 7524,
     7529, 1456, 1458, 1476, 7195, 7532, 7553, 7565, 1481, 1493,
     1495, 1497, 1504, 7592, 7606, 7614, 1505, 1508, 1513, 1514,
     1519, 6979, 7238, 4800, 1520, 1536, 1537, 4956, 1542, 1561,
     1563, 1568, 1570, 1574, 1580, 1597,13219,13219, 1632,    0,

     5446,    0, 1629, 1635, 1639, 5598, 1634, 5599, 1634, 5643,
     1641, 1653, 1659, 1674,    0,13219, 5145, 7645, 1662, 1664,
     1669, 5672,13219,13219, 5157,    0, 1690, 1763, 1769, 7708,
     5213, 7783, 5674,13219, 6047, 5685,13219, 7858, 5752,13219,
     5353, 7933, 8008, 6809,13219, 5543,    0, 1774, 1776, 1782,
     5314, 1785, 1788, 1797, 1798, 8076, 1804, 1810, 8144, 7730,
     7805, 7880, 1811, 1813, 1819, 1841, 1850, 1859, 7955, 8016,
     8084, 1861, 1863, 1869, 1870, 1874, 8101, 8161, 8169, 1879,
     1881, 1893, 1895, 1906, 1907, 1917, 1921, 1922, 4961, 1924,
     1934, 1947, 1948, 1969, 2033, 2034, 2036, 2038, 2045, 2048,

     2056, 8237, 2060, 2067, 8305, 8197, 8224, 8260, 2082, 2087,
     2091, 2104, 2121, 2134, 8265, 8277, 8338, 2135, 2140, 2141,
     2145, 2149, 8341, 8346, 8349, 2161, 2164, 2167, 2172, 2183,
     2195, 2196, 2217, 2224, 5076, 2225, 2237, 2241, 2246, 2251,
     2260, 2261, 2291, 2365,    0, 2367,    0, 2377,    0, 2389,
        0,    0, 5756,13219, 5766,    0, 2386, 2389, 2395, 8424,
    13219, 5794,    0, 2400, 2401, 2407, 7281,13219, 5825,    0,
     2410, 2413, 2414, 8499,13219, 6033,    0, 2424, 2434, 2439,
    13219, 6052,    0, 2447, 2448, 2451, 5786,13219, 2454, 2465,
     2466, 2468, 2472, 2473, 2481, 2482, 2494, 2502, 2508, 2509,

     2511, 2519, 2520, 2526, 2538, 2546, 2547, 2562, 2566, 2567,
     2574, 2575, 2578, 2581, 2592, 2594, 2641,    0, 5860,    0,
    13219, 6146,    0, 2602, 2603, 2608, 5872,13219,13219, 6178,
        0, 2613, 2619, 2623, 2645, 2705, 2707, 2713, 2715, 2726,
     2737, 2739, 6665,    0,    0,13219,13219, 8574, 8598, 8622,
     8646, 8670, 8694, 8718, 8730, 8753, 8777, 8796, 8815, 8834,
     8853, 8872, 8891, 8915, 8924, 8940, 8963, 8987, 9011, 9035,
     3862, 9054, 9066, 9089, 2846, 9108, 9127, 9146, 9165, 9184,
     9203, 9222, 9241, 9260, 9279, 9298, 9317, 9336, 9355, 9374,
     9393, 9412, 9431, 9450, 9469, 2865, 2890, 9478, 9486, 3880,

     9509, 9521, 9544, 2946, 9568, 9592, 9616, 9625, 9636, 3126,
     9654, 9665, 3428, 9683, 9702, 9721, 9740, 9759, 9778, 9797,
     9816, 9835, 9854, 9873, 9892, 9911, 9930, 9949, 9968, 9987,
    10006,10025,10044,10063,10082,10101,10120,10139,10158,10177,
    10196,10215,10234,10253,10272,10291,10310,10329,10348,10367,
    10386, 4239, 3640, 3658,10398, 3156,10421,10445, 3218, 3230,
    10457, 3298,10480,10503,10514,10532,10551,10570,10589,10608,
    10627,10646,10665,10684,10703,10722,10741,10760,10779,10798,
    10817,10836,10855,10874,10893,10912,10931,10950,10969,10988,
    11007,11026,11045,11064,11083,11102,11121,11140,11159,11178,

    11197,11216,11235,11254,11273,11292,11311,11330,11349, 3239,
    11361,11384, 3416, 3442,11393,11416,11440,11459,11478,11497,
    11516,11535,11554,11573,11592,11611,11630,11649,11668,11687,
    11706,11725,11744,11763,11782,11801,11820,11839,11858,11877,
    11896,11915,11934,11953,11972,11991,12010,12029,12048,12067,
    12086,12105,12124,12143,12167, 3443, 3510,12179,12202,12226,
    12250,12274,12298,12317,12336,12355,12374,12393,12412,12431,
    12450,12469,12488,12507,12526,12545,12564,12583,12602,12621,
    12640,12659,12678,12697,12716,12735,12754,12778,12802,12826,
    12845,12856,12874,12893,12912,12931,12950,12969,12988,13007,

    13026,13050,13074,13098,13122,13146,13170,13194, 3524, 3529
    } ;

static const flex_int16_t yy_def[2011] =
    {   0,
     1748, 1748, 1747,    3, 1747,    5, 1747,    7, 1749, 1749,
       10,   10, 1750, 1750, 1747,   15, 1750, 1750,    3,   19,
     1750, 1750, 1750, 1750, 1751, 1751, 1752, 1752, 1750, 1750,
     1753, 1753, 1747, 1754, 1747, 1747, 1747, 1747, 1754, 1754,
     1754, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1755, 1756, 1747, 1755, 1747, 1757, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1758, 1747, 1747,
     1758, 1747, 1747,   71, 1759, 1760,   71, 1747, 1747, 1747,
     1747, 1747, 1761,   69, 1761, 1747,   85, 1762, 1763,   85,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,

     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1764, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1765,
     1765, 1765, 1747, 1747, 1747, 1747, 1747, 1747, 1766, 1764,
     1747, 1747, 1747, 1747, 1747, 1755, 1747, 1747, 1747, 1747,
     1747,  130,  130, 1747, 1747, 1747, 1747, 1747, 1747, 1767,
     1747, 1747, 1747, 1747, 1767, 1747, 1767, 1767, 1767, 1767,
     1767, 1767, 1747, 1747, 1747, 1747, 1768, 1747, 1747, 1754,
     1754, 1754, 1754, 1747, 1747, 1747, 1769, 1747, 1754, 1754,
     1754, 1747, 1770, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1771,   49, 1772, 1747, 1772,

     1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772,
     1772, 1772, 1772, 1772, 1772, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1773, 1747, 1747, 1747, 1755, 1755, 1755, 1774,
     1747, 1747, 1747, 1747, 1747, 1747, 1775, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1776, 1777, 1747, 1778, 1779, 1777,
     1747, 1747, 1747, 1747, 1780, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1776, 1747, 1781, 1747, 1747,  264,  264,
     1782, 1783, 1784, 1783, 1747, 1747, 1747, 1785, 1747, 1785,
      280, 1747, 1747, 1747, 1747, 1777, 1747, 1747, 1747, 1747,
     1747, 1747, 1786, 1787, 1747, 1788, 1789, 1787, 1747, 1747,

     1747, 1790, 1747, 1786, 1747, 1791, 1747, 1747,  304,  304,
     1792, 1793, 1794, 1793, 1747, 1747, 1747, 1795, 1747, 1795,
      320, 1747, 1747, 1747, 1787, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1796, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1797, 1747, 1747, 1747, 1747, 1798, 1798, 1798, 1747, 1747,
     1747, 1747, 1799, 1799, 1747, 1747, 1747, 1747, 1800, 1747,
     1747, 1801, 1802, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1803, 1747, 1747, 1803, 1803, 1803, 1803, 1803, 1803,
     1803, 1803, 1803, 1747, 1747, 1747, 1747, 1804, 1805, 1806,

     1807, 1747, 1807, 1747, 1747, 1747, 1808, 1747, 1747, 1747,
     1747, 1747, 1747, 1809, 1747, 1809, 1810, 1809, 1811, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1811, 1811,
     1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811,
     1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811,
     1811, 1811, 1747, 1747, 1747, 1747, 1747, 1747, 1808, 1808,
     1808, 1808, 1747, 1747,  470, 1808, 1808, 1747, 1812, 1747,
     1747, 1747, 1747, 1813, 1747, 1747, 1747, 1814, 1747, 1747,
     1815, 1815, 1816, 1815, 1747, 1747, 1747, 1747, 1817, 1818,

     1818, 1747, 1747, 1747, 1819, 1747, 1820, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1821, 1822, 1822, 1747, 1747, 1747,
     1814, 1815,  522, 1823, 1747, 1747, 1814, 1824, 1825, 1826,
     1823, 1747, 1747, 1747, 1747, 1823, 1747, 1824, 1825, 1826,
     1823, 1747, 1747, 1747,  522, 1827, 1828, 1828, 1829, 1828,
     1747, 1747, 1747, 1830, 1747, 1747, 1747, 1747, 1747, 1831,
     1832, 1832, 1747, 1747, 1747, 1831, 1747, 1747, 1747, 1747,
     1747, 1833, 1747, 1747, 1834, 1834, 1835, 1834, 1747, 1747,
     1747, 1747, 1836, 1837, 1837, 1747, 1747, 1747, 1838, 1747,
     1839, 1747, 1747, 1747, 1747, 1747, 1840, 1841, 1841, 1747,

     1747, 1747, 1833, 1834,  604, 1842, 1747, 1747, 1833, 1843,
     1844, 1845, 1842, 1747, 1747, 1747, 1747, 1842, 1747, 1843,
     1844, 1845, 1842, 1747, 1747, 1747,  604, 1846, 1847, 1847,
     1848, 1847, 1747, 1747, 1747, 1849, 1747, 1747, 1747, 1747,
     1747, 1850, 1851, 1851, 1747, 1747, 1747, 1747, 1747, 1852,
     1850, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1853, 1747,
     1747, 1747, 1747, 1747, 1854, 1747, 1747, 1747, 1855, 1856,
     1855, 1857, 1747, 1747, 1747, 1747, 1747, 1858, 1858, 1858,
     1858, 1858, 1858, 1858, 1858, 1859, 1860, 1747, 1747, 1861,
     1861,  691, 1747, 1855, 1855, 1747, 1855, 1862,  671, 1747,

     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1863, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1864, 1864, 1864, 1864, 1864,
     1864, 1864, 1864, 1864, 1864, 1864, 1864, 1864, 1864, 1864,
     1747, 1864, 1747, 1747, 1747, 1747, 1864, 1864, 1864, 1864,
     1747, 1747, 1864, 1864, 1864, 1864, 1864, 1864, 1747, 1861,
      760, 1747, 1861, 1747, 1747, 1747,  760,  691,  691, 1865,
     1865, 1747, 1866, 1867, 1747, 1868, 1869, 1870, 1870, 1747,
     1747, 1747, 1747, 1747, 1871, 1871, 1871, 1747, 1747, 1747,
     1747, 1747, 1872, 1872, 1873, 1747, 1747, 1747, 1874, 1747,

     1747, 1747, 1747, 1747, 1747, 1875, 1875, 1875, 1747, 1747,
     1747, 1747, 1747, 1866, 1867, 1876, 1747, 1747, 1747, 1877,
     1868, 1867, 1867,  814, 1878, 1867, 1747, 1747, 1747, 1879,
     1747, 1747, 1747, 1880, 1747, 1747, 1747, 1867,  814, 1747,
     1747, 1747, 1747, 1747,  814, 1867,  814, 1881, 1882,  821,
     1883, 1884, 1885, 1747, 1747, 1747, 1886, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1887, 1887, 1887, 1747, 1747,
     1747, 1747, 1747, 1887, 1747, 1747, 1888, 1889, 1747, 1890,
     1891, 1892, 1892, 1747, 1747, 1747, 1747, 1747, 1893, 1893,
     1893, 1747, 1747, 1747, 1747, 1747, 1894, 1894, 1895, 1747,

     1747, 1747, 1896, 1747, 1747, 1747, 1747, 1747, 1747, 1897,
     1897, 1897, 1747, 1747, 1747, 1747, 1747, 1888, 1889, 1898,
     1747, 1747, 1747, 1899, 1890, 1889, 1889,  918, 1900, 1889,
     1747, 1747, 1747, 1901, 1747, 1747, 1747, 1902, 1747, 1747,
     1747, 1889,  918, 1747, 1747, 1747, 1747, 1747,  918, 1889,
      918, 1903, 1904,  925, 1905, 1906, 1907, 1747, 1747, 1747,
     1908, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1909,
     1909, 1909, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1910, 1910, 1909, 1747, 1911, 1911, 1747, 1912, 1912,
     1912, 1913, 1914, 1915, 1747, 1911, 1911,  987, 1747, 1747,

     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1916, 1747, 1747, 1917,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1918, 1918,
     1918, 1918, 1918, 1918, 1918, 1918, 1918, 1747, 1747, 1918,
     1918, 1918, 1918, 1918, 1747, 1918, 1747, 1918, 1747, 1747,
     1747, 1918, 1918, 1747, 1918, 1047, 1918, 1747, 1747, 1747,
     1918, 1918, 1747, 1747, 1918, 1915, 1915, 1915, 1066, 1915,
     1747, 1915, 1915, 1919, 1747, 1920, 1921, 1921, 1921, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1922, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,

     1923, 1747, 1747, 1747, 1747, 1747, 1924, 1747, 1747, 1747,
     1920, 1925, 1926, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1927, 1927, 1747, 1747, 1747, 1747, 1747, 1111, 1747, 1111,
     1925, 1747, 1919, 1111, 1928, 1928, 1929, 1928, 1747, 1747,
     1747, 1930, 1925, 1928, 1928, 1931, 1932, 1747, 1747, 1747,
     1933, 1934, 1934, 1747, 1747, 1747, 1935, 1747, 1936, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1937, 1747, 1938, 1939, 1939, 1939, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1940, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1941, 1747,

     1747, 1747, 1747, 1747, 1942, 1747, 1747, 1747, 1938, 1943,
     1944, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1945, 1945,
     1747, 1747, 1747, 1747, 1747, 1209, 1747, 1209, 1943, 1747,
     1937, 1209, 1946, 1946, 1947, 1946, 1747, 1747, 1747, 1948,
     1943, 1946, 1946, 1949, 1950, 1747, 1747, 1747, 1951, 1952,
     1952, 1747, 1747, 1747, 1953, 1747, 1954, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1955,
     1747, 1747, 1956, 1957, 1958, 1958, 1747, 1747, 1747, 1747,
     1959, 1747, 1960, 1747, 1747, 1747, 1747, 1747, 1961, 1747,
     1747, 1747, 1747, 1747, 1747, 1962, 1747, 1963, 1963, 1963,

     1299, 1747, 1299, 1747, 1299, 1747, 1747, 1747, 1299, 1747,
     1299, 1304, 1747, 1747, 1747, 1747, 1747, 1299, 1299, 1299,
     1299, 1747, 1299, 1304, 1747, 1747, 1747, 1299, 1299, 1747,
     1747, 1299, 1299, 1299, 1747, 1299, 1304, 1747, 1747, 1747,
     1299, 1747, 1958, 1276, 1964, 1965, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1964, 1965, 1965, 1361, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1965, 1361, 1361, 1966, 1967, 1967, 1747, 1747, 1747,
     1747, 1747, 1968, 1969, 1969, 1747, 1747, 1747, 1965, 1970,
     1971, 1971, 1747, 1747, 1747, 1747, 1747, 1972, 1972, 1972,

     1747, 1747, 1747, 1747, 1747, 1973, 1973, 1974, 1747, 1747,
     1747, 1975, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1976, 1977, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1976, 1977, 1977, 1437,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1977, 1437, 1437,
     1978, 1979, 1979, 1747, 1747, 1747, 1747, 1747, 1980, 1981,
     1981, 1747, 1747, 1747, 1977, 1982, 1983, 1983, 1747, 1747,
     1747, 1747, 1747, 1984, 1984, 1984, 1747, 1747, 1747, 1747,
     1747, 1985, 1985, 1986, 1747, 1747, 1747, 1987, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1988,

     1747, 1989, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1990, 1747, 1991, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1991, 1518, 1747, 1747, 1747, 1991,
     1991, 1991, 1747, 1747, 1991, 1747, 1747, 1991, 1747, 1747,
     1991, 1991, 1991, 1991, 1747, 1991, 1518, 1747, 1747, 1747,
     1992, 1747, 1747, 1747, 1747, 1993, 1747, 1747, 1993, 1994,
     1994, 1994, 1747, 1747, 1747, 1747, 1747, 1747, 1995, 1995,
     1995, 1747, 1747, 1747, 1747, 1747, 1996, 1996, 1996, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1997, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,

     1747, 1998, 1747, 1747, 1998, 1999, 1999, 1999, 1747, 1747,
     1747, 1747, 1747, 1747, 2000, 2000, 2000, 1747, 1747, 1747,
     1747, 1747, 2001, 2001, 2001, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1986, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 2002, 1747, 2003, 1747, 2004, 1747,
     2005, 2006, 1747, 1747, 1991, 1518, 1747, 1747, 1747, 1991,
     1747, 1991, 1518, 1747, 1747, 1747, 1991, 1747, 1991, 1518,
     1747, 1747, 1747, 1991, 1747, 1991, 1518, 1747, 1747, 1747,
     1747, 1991, 1518, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,

     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 2007, 1747, 2008,
     1747, 1991, 1518, 1747, 1747, 1747, 1747, 1747, 1747, 1991,
     1518, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 2009, 2010, 1747,    0, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,

     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,

     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,

     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747
    } ;

static const flex_int16_t yy_nxt[13295] =
    {   0,
     1747, 1747,   35,   36,   37,   35,   36,   37,  105,  106,
      105,  106,  176,  182,  380,  176,  182,  380,  177,  183,
     1747, 1747,  231,  178,  178,  184,   38, 1747,  184,   42,
      266,  266,  266,  266,  177,  183,  687,  185,  222,  185,
      186,  222,  187,  187,  187,  187,  220, 1747,  221,  221,
      221,  221,  233,  285,  687,  223,  223,  223,  223,  357,
      357,  357,  224,  233,  285,  417,  247,  417,  245,  245,
      245,  245,   39,   40,   41,   39,   40,   41,   43,   44,
       45,   46,   44,   43,   47,   48,   43,   43,   49,   50,
       43,   51,   43,   51,   52,   53,   54,   54,   54,   54,

       43,   55,   43,   43,   56,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   58,   59,   50,
       43,   60,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   61,   43,   62,   43,   63,   63,
       64,   65,   66,   43,   67,   45,   46,   67,   68,   47,
       69,   68,   70,   58,   43,   68,   71,   72,   71,   73,
       53,   74,   74,   74,   74,   75,   55,   68,   68,   76,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   58,   77,   43,   70,   60,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   43,
       43,   78,   68,   63,   63,   79,   80,   81,   43,   82,
       45,   46,   82,   83,   47,   84,   83,   70,   58,   50,
       83,   85,   72,   85,   86,   83,   87,   87,   87,   87,
       88,   55,   83,   83,   89,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   58,   90,   50,
       70,   60,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   43,   43,   62,   83,   63,   63,

       91,   92,   93,   95,   96,   97,   95,  171,  172,  173,
       98,  722,   98,   98,   98,   98,  723,   98,   98,   99,
      179,  777,  171,  172,  173,  785,  180,   98,  171,  172,
      173,  181, 1008,  171,  172,  173,  370,  370,  370,  370,
     1009,   98,  100,   98,  328,  383,  343,  328,  383,  343,
     1089,  108,  109,  110,  108, 1553,  111,  108,  109,  110,
      108,  793,  111,  139,  140,  141,  139,  375,  111,   98,
      375,   98,  101,  101,  102,  103,  104,   95,   96,   97,
       95,  233,  285,  329,   98,  344,   98,   98,   98,   98,
      112,   98,   98,   99,  410,  295,  112,  293,  293,  293,

      293,   98,  142,  225,  799,  226,  376,  227,  227,  227,
      227,  378,  379,  402,  403,   98,  100,   98,  806,  229,
      113,  113,  114,  115,  116, 1101,  113,  113,  114,  115,
      116,  411,  113,  113,  114,  115,  116,  229,  385,  385,
      385,  385, 1747,   98,  231,   98,  101,  101,  102,  103,
      104,  117,  107,  118,  119,  107,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  120,
      120,  120,  120,  117,  117,  117,  117,  117,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      117,  117,  117,  117,  117,  120,  120,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  120,  120,  121,  120,
      120,  120,  120,  120,  120,  122,  120,  117,  117,  117,
      117,  123,  123,  124,  125,  126,  108,  127,  128,  108,
      222,  222, 1554,  222,  222,  139,  140,  141,  139,  815,
      111,  164,  165,  332,  655,  166,  164,  165,  347,  661,
      166,  129,  241, 1107,  224,  241,  378,  379,  481,  656,
      366,  481,  656,  366,  242,  130,  242,  243,  131,  244,
      244,  244,  244,  289,  142,  367,  289,  378,  676,  167,
      346,  171,  172,  173,  167,  290,  662,  290,  291,  662,
      292,  292,  292,  292, 1555,  113,  113,  114,  115,  116,

      108,  127,  128,  108,  113,  113,  114,  115,  116,  113,
      113,  114,  115,  116,  113,  113,  114,  115,  116,  386,
      387,  387,  387,  402,  403,  129,  222,  189,  328,  222,
      371,  328,  372,  190,  373,  373,  373,  373,  191,  130,
      246,  305,  131,  306,  306,  306,  306,  688,  403,  247,
      224,  171,  172,  173,  179,  248,  171,  172,  173,  249,
      404,  192, 1113,  404,  193,  388,  194,  329,  716,  113,
      113,  114,  115,  116,  132,  250, 1557,  132,  195,  389,
      133,  717,   70,   58,  405,  196,  134,   72,  134,  135,
       43,  136,  136,  136,  136,  822,  267,  389,  268,  137,

      269,  269,  269,  269,  830,  251,  252,  253,  465,  465,
      465,  465,  270,  138,  272,   70,  139,  140,  141,  139,
      307, 1121,  308,  247,  309,  309,  309,  309, 1558,  273,
      270,  279,  199,  249,  414,  414,  310,  280,  294,  280,
      834,  129,  281,  281,  281,  281,  255,  295,  180,  274,
      171,  172,  173,  296,  310,  143, 1375,  297,  131,  312,
      181,  693,  171,  172,  173,  694,  694,  179,  295,  171,
      172,  173, 1566,  298,  313,  555,  556,  557,  297,  275,
      276,  277,  420,  421,  422,  113,  113,  114,  115,  116,
      139,  140,  141,  139,  314, 1567,  282,  283,  284,  670,

      189,  670, 1135,  299,  300,  301,  190, 1568,  319,  481,
      233,  191,  481,  693,  320,  129,  320,  996,  996,  321,
      321,  321,  321,  302,  315,  316,  317,  199, 1383,  143,
      481,  233,  131,  481,  192, 1003, 1004,  193,  388,  194,
      390,  390,  390,  390, 1575,  400,  397,  171,  172,  173,
     1576,  368,  389,  445,  199,  979,  979,  397,  369,  113,
      113,  114,  115,  116,  145,  146,  147,  145,  656,  332,
      389,  656,  148,  322,  323,  324, 1390,  420,  421,  422,
      397,  149,  149,  149,  149,  397,  439, 1583,  440,  397,
      149,  149,  149,  149,  662,  347,  397,  662, 1584,  397,

      404,  397,  398,  404,  420,  421,  422,  149,  149,  149,
      149,  149,  149,  145,  146,  147,  145,  223,  223,  223,
      223,  148,  677,  176,  405,  677,  176,  979,  979,  177,
      149,  149,  149,  149,  178,  223,  223,  223,  223,  149,
      149,  149,  149, 1144,  182,  177,  199,  182, 1585,  220,
      183,  187,  187,  187,  187,  178,  149,  149,  149,  149,
      149,  149,  151,  152,  153,  151,  183,  154,  155,  199,
     1398,  156,  156,  156,  184,  156,  157,  184,  441,  158,
      159,  159,  159,  156,  343, 1586,  185,  343,  185,  186,
     1587,  187,  187,  187,  187,  412,  420,  421,  422,  413,

      156,  413,  156,  156,  414,  414,  461, 1151, 1588,  406,
      160,  407,  199,  408,  408,  408,  408,  161, 1406,  420,
      421,  422,  162,  344,  199,  409,  702,  156,  703,  156,
      163,  151,  152,  153,  151, 1593,  154,  155,  199,  451,
      156,  156,  156,  409,  156,  157, 1594, 1412,  158,  159,
      159,  159,  156,  415,  449,  415, 1595, 1596,  416,  416,
      416,  225,  420,  421,  422,  473,  473,  473,  473,  156,
     1157,  156,  156,  455,  420,  421,  422, 1597,  848,  160,
      480,  480,  480,  480,  677,  378,  161,  677,  420,  421,
      422,  162,  482,  482,  482,  857,  156,  483,  156,  163,

      197,  866,  380,  197,  198,  380, 1175,  198,  637,  638,
      639,  198,  198, 1598,  198,  199,  198,  198,  198,  198,
      198,  199,  383,  198,  198,  383,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  982,  198,
      982,  458,  881,  200,  201,  202,  203,  204,  205,  206,
      198,  207,  198,  208,  209,  210,  211,  198,  212,  213,
      214,  215,  198,  198,  198,  420,  421,  422,  198,  648,
      889,  216,  217,  218,  233,  234,  235, 1187,  225, 1599,
      466,  649,  467,  467,  467,  467,  705,  302,  650,  199,
      236,  236,  236,  706,  409,  357,  357,  357,  468,  707,

      469,  897,  470,  470,  470,  470,  266,  266,  266,  266,
      648,  442,  409,  405,  472,  903,  235,  235,  443,  910,
      235,  235,  649,  366,  444, 1199,  366,  199,  235,  650,
      388,  235,  472,  235,  199,  235,  237,  189,  367,  420,
      421,  422,  375,  190,  389,  375, 1600,  199,  191,  254,
      254,  254,  254,  255,  256,  404,  450,  919,  404,  446,
      447,  448,  389,  257,  258,  259,  260,  261,  262,  452,
      719,  192,  481,  720,  193,  481,  194,  420,  421,  422,
      656,  376,  199,  656,  420,  421,  422,  199,  195,  179,
      199,  171,  172,  173,  199,  196,  246,  420,  421,  422,

      498,  498,  498,  498,  453,  263, 1205,  264,  264,  264,
      264,  248,  416,  416,  416,  249,  662,  454, 1601,  662,
      459,  657,  657,  657,  456,  460,  658,  457,  462, 1211,
      199,  250,  420,  421,  422, 1603,  506,  420,  421,  422,
      420,  421,  422,  696,  420,  421,  422,  697,  697,  697,
      225,  507,  226,  926,  227,  227,  227,  227,  709,  710,
      711,  251,  252,  253,  294,  486,  229,  244,  244,  244,
      244,  656,  332,  303,  656,  304,  304,  304,  304,  296,
      420,  421,  422,  297,  229,  478, 1747,  478,  231,  934,
      479,  479,  479,  479,  241,  662,  347,  241,  662,  298,

     1219,  508,  509,  510,  513, 1604,  242,  677,  242,  243,
      677,  244,  244,  244,  244,  254,  254,  254,  254,  938,
     1451,  514,  521,  521,  521,  521,  800,  801,  802,  299,
      300,  301,  331,  331,  332,  333,  334,  331,  331,  331,
      335,  331,  335,  335,  335,  335,  331,  335,  335,  335,
      336,  336,  336,  331,  331,  331,  331,  335,  331,  331,
      331,  337,  331,  331,  331,  331,  331,  331,  337,  331,
      337,  335,  334,  335,  331,  331,  334,  334,  331,  337,
      334,  334,  331,  331,  331,  331,  331,  331,  334,  331,
      331,  334,  337,  334,  331,  334,  338,  331,  331,  335,

      331,  335,  331,  331,  331,  331,  331,  347,  348,  349,
     1612,  349, 1613,  487,  349,  488, 1233,  489,  489,  489,
      489,  492, 1614,  350,  350,  350, 1459,  267, 1621,  490,
      247,  535,  535,  535,  535, 1747,  493, 1747,  469,  570,
      249,  292,  292,  292,  292,  349, 1622,  490,  349,  349,
      349, 1466, 1012,  349,  349, 1013,  494,  582,  582,  582,
      582,  349,  590, 1629,  349, 1630,  349, 1242,  349,  351,
      358,  358,  358,  358, 1631, 1474,  246,  591, 1632,  358,
      358,  358,  358, 1633, 1249,  247,  495,  496,  497, 1634,
     1482,  248,  831,  832,  833,  249,  358,  358,  358,  358,

      358,  358,  360,  199,  361,  361, 1639, 1640,  362,  361,
      362,  250, 1488,  363,  363,  363,  363,  500,  831,  832,
      833,  361,  603,  603,  603,  603,  247,  592,  593,  594,
      246, 1641,  273, 1642,  361,  726,  249,  361, 1255,  247,
     1643,  251,  252,  253,  952,  248,  663,  663,  663,  249,
      961,  664,  501,  420,  421,  422,  289,  677,  378,  289,
      677,  361,  347,  348,  349,  250,  349,  970,  290,  349,
      290,  291, 1644,  292,  292,  292,  292, 1645,  350,  350,
      350, 1646,  502,  503,  504,  307,  365, 1647, 1648,  617,
      617,  617,  617, 1649,  693,  251,  252,  253,  694,  694,

      349, 1650,  693,  349,  349,  349,  694,  694,  349,  349,
      667,  667,  667,  667, 1651, 1747,  349, 1747,  469,  349,
     1652,  349, 1653,  349,  351,  423,  424,  425,  426,  427,
      428,  429,  419,  430,  700,  431,  432,  433,  434,  701,
      435,  436,  437,  438,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      419,  474,  475,  475,  475,  475,  474,  474,  474,  474,
      474,  476,  476,  476,  477,  476,  476,  476,  476,  476,
      476,  476,  476,  474,  474,  474,  474,  474,  476,  476,
      476,  476,  477,  476,  476,  476,  476,  476,  476,  476,

      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  516,
      363,  363,  363,  363,  545, 1747,  545,  247,  247,  546,
      546,  546,  546,  700,  273,  482,  482,  482,  249,  701,
      483,  491,  548,  668,  419,  668,  700,  272,  669,  669,
      669,  247,  701,  199,  517, 1077,  247,  549, 1089,  491,
      272,  249,  273,  858,  859,  860,  249, 1101, 1107,  247,
      555,  556,  557,  404, 1113,  273,  404,  550,  727,  249,
     1121, 1560,  274, 1689,  518,  519,  520,  492,  305, 1690,
      306,  306,  306,  306,  267,  274,  268,  405,  522,  522,

      522,  522,  493,  420,  421,  422,  249,  551,  552,  553,
      523, 1375,  275,  276,  277,  561,  675,  675,  675,  675,
     1691,  199,  494,  246,  247,  275,  276,  277,  523, 1135,
      248, 1569,  247, 1692,  249,  904,  905,  906,  248, 1693,
     1383,  571,  249,  572, 1694,  573,  573,  573,  573, 1577,
      562, 1695,  495,  496,  497,  525,  728,  574,  250,  935,
      936,  937,  526, 1696,  527, 1390,  528,  528,  528,  528,
      529,  420,  421,  422,  530,  574, 1697, 1144,  531,  371,
      563,  564,  565,  674,  674,  674,  674, 1398,  251,  252,
      253, 1698, 1151,  371, 1589,  672,  531,  673,  673,  673,

      673,  371,  678,  372, 1699,  373,  373,  373,  373,  680,
      680,  680,  680,  385,  385,  385,  385, 1700, 1406,  679,
      532,  533,  534,  474,  474,  474,  474,  474,  536,  474,
      537,  536,  474,  474,  474,  536,  536,  474,  536, 1701,
      474,  538,  538,  538,  538,  539,  474,  536,  536,  540,
      536,  536,  536,  541,  536,  536,  536,  536,  536,  536,
      536,  536,  474,  536,  474,  474,  474,  536,  536,  536,
      536,  541,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  474,
      474,  474,  536,  474,  474,  542,  543,  544,  561,  465,

      465,  465,  465, 1412, 1702,  576, 1157,  247, 1175,  566,
      566,  566,  566,  248,  295, 1187,  294,  249, 1199,  584,
      577,  935,  936,  937,  297,  295, 1205,  294,  295,  751,
     1211,  296,  751,  562,  313,  297,  295, 1219,  297,  752,
      578,  598,  296,  962,  963,  964,  297,  637,  638,  639,
      295,  298, 1606,  978,  585,  978,  313, 1703,  979,  979,
      297, 1704,  298,  563,  564,  565,  767,  767,  767,  767,
      579,  580,  581,  406, 1451,  199,  599,  689,  689,  689,
      689,  299,  300,  301,  586,  587,  588,  690,  690,  690,
      690, 1705,  299,  300,  301,  627, 1747,  627,  295,  691,

      628,  628,  628,  628, 1233, 1615,  600,  601,  602,  576,
     1706, 1707,  575,  729,  730, 1459,  307,  691,  308, 1708,
      604,  604,  604,  604,  577,  420,  421,  422,  297,  199,
      575, 1623,  605,  681, 1709,  681,  630, 1710,  682,  682,
      682,  682, 1466,  312,  578,  295,  751,  199,  312,  751,
      605,  631,  295, 1711,  199,  297,  752,  295,  313,  669,
      669,  669,  297,  313,  731, 1242, 1474,  297,  657,  657,
      657,  632,  737,  658,  579,  580,  581,  607,  314,  420,
      421,  422,  199,  314,  608,  199,  609, 1712,  610,  610,
      610,  610,  611,  740, 1249, 1635,  612,  420,  421,  422,

      613,  633,  634,  635,  420,  421,  422, 1713,  315,  316,
      317, 1714,  733,  315,  316,  317, 1482,  478,  613,  478,
      747, 1715,  692,  692,  692,  692,  692,  692,  692,  692,
     1488, 1716,  420,  421,  422,  420,  421,  422,  480,  480,
      480,  480,  614,  615,  616,  474,  474,  474,  474,  474,
      618,  474,  619,  618,  474,  474,  474,  618,  618,  474,
      618, 1255,  618,  620,  620,  620,  620,  621,  474,  618,
      618,  622,  618,  618,  618,  623,  618,  618,  618,  618,
      618,  618,  618,  618,  474,  618,  474,  474,  474,  618,
      618,  618,  618,  623,  618,  618,  618,  618,  618,  618,

      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  474,  474,  474,  618,  474,  474,  624,  625,  626,
      643, 1747,  199, 1747,  469,  294,  468, 1717, 1718,  295,
      761,  761,  761,  761,  295,  296,  663,  663,  663,  297,
      296,  664, 1719,  388,  297,  390,  390,  390,  390,  388,
     1720,  390,  390,  390,  390,  644,  419,  389,  736,  700,
      298,  199,  406,  389,  407,  701,  408,  408,  408,  408,
      419,  700,  420,  421,  422,  389,  199,  701,  409,  199,
      419,  389,  199,  700,  701,  645,  646,  647,  643,  199,
      299,  300,  301,  732,  419,  199,  409,  295,  199,  651,

      651,  651,  651,  296,  700, 1025,  734,  297, 1025,  701,
      199,  420,  421,  422,  735, 1026,  738,  419,  700,  739,
      749,  701,  748,  644, 1560,  754,  420,  421,  422,  420,
      421,  422,  420,  421,  422, 1735, 1375,  753, 1569,  420,
      421,  422, 1736, 1383,  750,  420,  421,  422,  420,  421,
      422, 1577, 1737,  645,  646,  647,  358,  358,  358,  358,
      420,  421,  422,  199, 1390,  358,  358,  358,  358,  762,
      751,  762, 1398,  751,  763,  763,  763,  763, 1589, 1738,
      752, 1406,  358,  358,  358,  358,  358,  358,  698, 1412,
     1606,  199,  699,  699,  699,  699, 1739,  755,  992,  992,

      992,  699,  699,  699,  699,  980,  199,  980, 1451,  199,
      981,  981,  981,  420,  421,  422, 1615, 1740,  699,  699,
      699,  699,  699,  699,  741,  741,  741,  741,  741,  199,
      741,  742, 1459,  741,  741,  741, 1623, 1741,  741,  756,
      741,  420,  421,  422, 1466, 1474,  743,  741, 1635,  696,
      741, 1742,  757,  986,  986,  986,  420,  421,  422,  420,
      421,  422, 1482,  741, 1488,  741,  742,  741,  758,  478,
     1743,  478,  419,  700,  768,  768,  768,  768,  701,  420,
      421,  422,  769,  419,  770,  770,  770,  770, 1743,  700,
      741,  741,  741,  701,  741,  741,  744,  745,  746,  474,

      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474, 1560,  474,  760,  760,  760,
      760,  474,  474,  474,  474,  474,  476,  476,  476,  477,
      476,  476,  476,  476,  476,  476,  476,  476,  474,  474,
      474,  474,  474,  476,  476,  476,  476,  477,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  225, 1569,  466, 1577,  467,  467,
      467,  467,  468, 1589,  469, 1606,  470,  470,  470,  470,
      409,  266,  266,  266,  266,  225, 1615,  764,  472,  765,

      765,  765,  765,  498,  498,  498,  498, 1623,  409, 1635,
     1552,  766, 1027,  487, 1077, 1027,  472,  772,  772,  772,
      772,  487, 1028,  488,  816,  489,  489,  489,  489,  766,
      525,  306,  306,  306,  306,  794,  701,  490, 1090, 1091,
     1092,  773,  773,  773,  773,  529,  700,  492,  419,  530,
      795,  701,  775,  774,  775,  490,  247,  776,  776,  776,
      776,  484,  493,  700,  492,  419,  249,  484,  701,  778,
      794,  774,  492,  247,  817,  818,  819,  700,  247,  493,
      659,  247,  494,  249,  273,  419,  659,  493,  249,  701,
      700,  249,  800,  801,  802,  532,  533,  534,  419,  494,

      796,  797,  798, 1515,  779,  665,  786,  494, 1514,  500,
     1513,  665,  495,  496,  497,  247, 1038,  525,  247, 1038,
     1512,  549, 1511, 1510,  273,  249, 1039, 1509,  249,  495,
      496,  497,  820,  500,  780,  781,  782,  495,  496,  497,
      816,  787,  247, 1063,  501,  807, 1063, 1508,  273, 1507,
      516,  526,  249, 1064,  247,  821,  821,  821,  821,  247,
      549,  686,  525, 1506,  249,  273, 1505,  686,  501,  249,
      920,  788,  789,  790,  502,  503,  504,  529,  516, 1504,
      808,  530,  835,  836,  837,  517, 1503,  247, 1502, 1501,
      817,  818,  819,  273, 1102, 1103, 1104,  249,  502,  503,

      504,  545, 1747,  545,  247, 1500,  546,  546,  546,  546,
      809,  810,  811,  517,  642,  518,  519,  520,  491,  571,
      921,  922,  923,  876,  876,  876,  876,  532,  533,  534,
     1496,  970,  838,  920,  838,  636,  491,  839,  839,  839,
      839,  816,  629,  518,  519,  520,  525,  582,  582,  582,
      582, 1495,  525,  526,  961,  527, 1494,  814,  814,  814,
      814,  529, 1108, 1109, 1110,  530,  267,  820,  842,  531,
      843,  843,  843,  843, 1747,  952,  247, 1493,  546,  546,
      546,  546,  844,  921,  922,  923, 1025,  531, 1492, 1025,
      491,  817,  818,  819,  607, 1255, 1026,  846, 1257,  846,

      844,  548,  847,  847,  847,  847,  816, 1481,  491,  924,
      247,  532,  533,  534,  492, 1480,  549,  835,  836,  837,
      249,  267, 1249,  268, 1473,  522,  522,  522,  522,  493,
     1114, 1115, 1116,  249, 1472,  816,  550,  523,  571, 1242,
      572,  418,  573,  573,  573,  573,  608,  418,  816,  494,
      925,  925,  925,  925,  574,  523,  817,  818,  819,  939,
      940,  941,  667,  667,  667,  667,  551,  552,  553,  548,
     1458,  671,  574, 1027, 1457,  898, 1027,  671,  247,  495,
      496,  497,  823, 1028,  549,  817,  818,  819,  249,  526,
      899,  527, 1233,  824,  824,  824,  824,  825,  817,  818,

      819,  530,  606, 1447,  550,  826,  879,  938,  879,  548,
      898,  880,  880,  880,  880, 1446,  825,  815,  247,  480,
      480,  480,  480,  826,  549,  371, 1445,  672,  249,  673,
      673,  673,  673,  992,  551,  552,  553,  867, 1219,  992,
      900,  901,  902, 1444,  550,  993,  247,  827,  828,  829,
      823,  993,  493,  934,  983,  607,  249,  526, 1443,  527,
      983,  845,  845,  845,  845,  825,  817,  818,  819,  530,
      924,  926,  868,  826,  551,  552,  553,  561,  682,  682,
      682,  682,  607,  696, 1442,  815,  247,  997,  997,  997,
      561,  826,  248,  831,  832,  833,  249,  611, 1441,  247,

     1211,  612,  869,  870,  871,  248,  858,  859,  860,  249,
      998, 1436,  562,  998, 1435,  827,  828,  829,  849,  998,
      939,  940,  941, 1205, 1434,  562,  576,  850,  919,  851,
      851,  851,  851,  852,  696,  295, 1433,  853,  697,  697,
      697,  577,  563,  564,  565,  297, 1432,  614,  615,  616,
     1188, 1189, 1190,  494, 1199,  563,  564,  565,  942,  576,
      942,  578,  597,  943,  943,  943,  943,  920,  295,  682,
      682,  682,  682, 1431,  577,  371,  910,  672,  297,  988,
      988,  988,  988,  854,  855,  856,  867, 1068, 1068, 1068,
     1068,  579,  580,  581,  578,  247,  589,  874,  874,  874,

      874,  493, 1747, 1430,  469,  249,  763,  763,  763,  763,
      904,  905,  906,  882, 1200, 1201, 1202,  921,  922,  923,
      576,  868,  295,  903,  579,  580,  581,  890,  313,  295,
     1038, 1273,  297, 1038, 1429,  577,  295, 1273,  897,  297,
     1039,  584,  631,  484, 1158,  484,  297,  920,  883,  484,
      295,  869,  870,  871,  607,  578,  313, 1274, 1498, 1159,
      297, 1428,  891, 1274, 1498,  877,  877,  877,  877,  611,
     1206, 1207, 1208,  612, 1427, 1187,  585,  878,  884,  885,
      886,  584, 1212, 1213, 1214,  579,  580,  581,  583, 1426,
      295,  889,  892,  893,  894,  878,  313,  921,  922,  923,

      297,  575, 1425,  911,  881, 1424,  586,  587,  588, 1160,
     1161, 1162,  295, 1423,  598, 1175,  585,  598,  631,  614,
      615,  616,  297,  295, 1063, 1499,  295, 1063,  560,  313,
     1420, 1499,  313,  297, 1064, 1071,  297, 1071,  912, 1745,
     1072, 1072, 1072, 1072, 1746, 1745,  586,  587,  588,  599,
     1746,  920,  599,  866,  627, 1747,  627,  295,  554,  628,
      628,  628,  628,  680,  680,  680,  680,  547,  913,  914,
      915,  575,  935,  936,  937,  389,  962,  963,  964,  600,
      601,  602,  600,  601,  602,  607,  981,  981,  981,  575,
     1419,  857,  608,  389,  609, 1418,  918,  918,  918,  918,

      611,  921,  922,  923,  612,  307,  848,  946,  613,  947,
      947,  947,  947, 1025, 1417, 1416, 1025,  767,  767,  767,
      767,  948,  950, 1026,  950, 1157,  613,  951,  951,  951,
      951,  920, 1159,  769,  199,  770,  770,  770,  770,  948,
     1747, 1405,  295,  794,  628,  628,  628,  628, 1404, 1151,
      614,  615,  616,  576, 1397,  659,  575,  659,  795, 1396,
      307,  659,  308, 1144,  604,  604,  604,  604,  577,  981,
      981,  981,  297,  665,  575,  665,  605, 1382,  794,  665,
      630,  921,  922,  923,  420,  421,  422,  630,  578,  295,
     1316,  929,  630, 1316,  605,  631,  295, 1381, 1135,  297,

     1317,  295,  631, 1090, 1091, 1092,  297,  631,  796,  797,
      798,  297, 1102, 1103, 1104,  632,  524, 1371,  579,  580,
      581,  927,  632,  776,  776,  776,  776,  632,  608,  834,
      609, 1370,  928,  928,  928,  928,  929, 1108, 1109, 1110,
      612,  921,  922,  923,  930,  633,  634,  635,  824,  824,
      824,  824,  633,  634,  635,  971,  919,  633,  634,  635,
      643, 1369,  930, 1121,  295,  880,  880,  880,  880,  295,
      577, 1114, 1115, 1116,  297,  296,  406, 1368,  994,  297,
      995,  995,  995,  995,  830, 1367,  931,  932,  933,  927,
      972,  822,  766, 1366, 1365,  644,  608, 1113,  609, 1360,

      949,  949,  949,  949,  929, 1413, 1414, 1415,  612, 1359,
      766, 1107,  930,  199,  643, 1358, 1066, 1066, 1066, 1066,
      973,  974,  975,  295,  919,  645,  646,  647, 1067,  296,
      930,  815, 1357,  297,  478, 1747,  478, 1747, 1356,  768,
      768,  768,  768, 1101, 1298, 1747, 1067, 1747,  515,  644,
     1073, 1073, 1073, 1073,  931,  932,  933,  953,  839,  839,
      839,  839,  816,  420,  421,  422,  954, 1355,  955,  955,
      955,  955,  956,  418,  806, 1027,  957,  418, 1027,  645,
      646,  647,  468,  418,  469, 1028,  470,  470,  470,  470,
     1747,  671,  578, 1747, 1747,  671,  199, 1747,  472, 1747,

     1747,  671, 1747,  505, 1747, 1354,  799, 1747, 1353, 1747,
     1747,  199,  817,  818,  819,  199,  472, 1747,  793, 1352,
      199, 1351,  958,  959,  960,  971, 1089,  499,  199,  928,
      928,  928,  928, 1350,  295, 1029,  984,  984,  984,  984,
      577, 1030,  785,  491,  297, 1349,  420,  421,  422, 1078,
      777, 1348, 1031, 1347,  794, 1032, 1077,  701,  247,  700,
      972,  420,  421,  422,  549,  420,  421,  422,  249,  795,
      420,  421,  422, 1275, 1275, 1275, 1275,  419,  420,  421,
      422, 1256,  696,  199, 1079, 1276,  986,  986,  986,  794,
      973,  974,  975,  698,  701,  700, 1257,  987,  987,  987,

      987, 1747,  419, 1276, 1747, 1297,  987,  987,  987,  987,
     1296, 1747, 1300, 1295, 1080, 1081, 1082, 1294, 1293,  796,
      797,  798,  199,  987,  987,  987,  987,  987,  987,  699,
      699,  699,  699,  420,  421,  422, 1292, 1291,  699,  699,
      699,  699, 1747, 1290, 1289, 1747, 1258, 1259, 1260, 1188,
     1189, 1190, 1747, 1288, 1033,  699,  699,  699,  699,  699,
      699, 1747, 1287,  199, 1747, 1747, 1286, 1285, 1747, 1284,
     1283, 1747,  420,  421,  422, 1747, 1072, 1072, 1072, 1072,
     1747, 1282,  199, 1747, 1038, 1330,  199, 1038, 1330, 1281,
     1747, 1280, 1279, 1034, 1039, 1331, 1747, 1278, 1277, 1747,

     1747,  199,  419, 1747, 1270,  199, 1747,  318, 1747, 1035,
     1747, 1747, 1036,  420,  421,  422, 1269,  199, 1747,  642,
     1747,  199,  696, 1747,  199, 1268,  697,  697,  697,  199,
     1747, 1267,  420,  421,  422,  970,  420,  421,  422, 1040,
     1037,  199, 1132,  311, 1132, 1266,  636, 1133, 1133, 1133,
     1133,  420,  421,  422, 1265,  420,  421,  422, 1042, 1041,
      629,  469, 1299,  763,  763,  763,  763,  420,  421,  422,
     1264,  420,  421,  422,  420,  421,  422, 1263,  961,  420,
      421,  422, 1230, 1262, 1230,  199, 1261, 1231, 1231, 1231,
     1231,  420,  421,  422,  423,  424,  425,  426,  427,  428,

      429,  952,  430, 1227,  431,  432,  433,  434,  606,  435,
      436,  437,  438, 1747, 1225, 1747, 1747, 1747, 1747, 1309,
     1747, 1224,  938, 1747,  468, 1747,  469, 1747,  470,  470,
      470,  470, 1218, 1217,  199,  420,  421,  422,  199,  934,
      472,  225, 1216,  764, 1215,  765,  765,  765,  765, 1747,
      983,  926, 1747, 1747,  983, 1204, 1747,  766,  472, 1747,
      983, 1044, 1530, 1747, 1203,  919, 1747, 1198,  597, 1747,
      199, 1197, 1196, 1043,  199,  766, 1747,  199,  469,  910,
     1344, 1344, 1344, 1344,  420,  421,  422,  199,  420,  421,
      422, 1045, 1045, 1045, 1045, 1045, 1052, 1045, 1046,  293,

     1045, 1045, 1045, 1195,  199, 1045,  589, 1045, 1747, 1319,
     1053, 1747, 1194, 1047, 1045, 1061, 1193, 1045, 1747,  903,
      420,  421,  422, 1192,  420,  421,  422,  420,  421,  422,
     1045, 1191, 1045, 1046, 1045,  199,  897,  420,  421,  422,
      847,  847,  847,  847,  816, 1048, 1186, 1318,  583, 1185,
     1747, 1184,  889, 1747,  420,  421,  422, 1045, 1045, 1045,
     1747, 1045, 1045, 1049, 1050, 1051, 1054, 1054, 1054, 1054,
     1054,  199, 1054, 1055,  199, 1054, 1054, 1054, 1183,  575,
     1054, 1063, 1054, 1182, 1063,  420,  421,  422, 1056, 1054,
     1747, 1064, 1054, 1747,  817,  818,  819, 1062, 1181,  881,

     1747,  278,  199, 1171,  560, 1054,  199, 1054, 1055, 1054,
     1170,  199, 1301,  487, 1057, 1074, 1169, 1075, 1075, 1075,
     1075,  420,  421,  422,  420,  421,  422,  866,  271,  844,
     1168,  554, 1054, 1054, 1054, 1167, 1054, 1054, 1058, 1059,
     1060, 1065,  547, 1166,  371, 1320,  672,  844,  988,  988,
      988,  988,  420,  421,  422, 1165,  420,  421,  422,  857,
     1164,  420,  421,  422,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
     1163,  474, 1069, 1069, 1069, 1069,  474,  474,  474,  474,
      474,  476,  476,  476, 1070,  476,  476,  476,  476,  476,

      476,  476,  476,  474,  474,  474,  474,  474,  476,  476,
      476,  476, 1070,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  823,
     1073, 1073, 1073, 1073,  848, 1129,  526,  524,  527,  199,
      824,  824,  824,  824,  825, 1200, 1201, 1202,  530,  846,
     1122,  846,  826, 1127,  847,  847,  847,  847,  816, 1126,
      525, 1329,  834, 1120,  815,  816, 1119,  778,  830,  527,
      826, 1076, 1076, 1076, 1076,  529,  247, 1118,  778,  530,
     1117,  822,  273, 1106, 1105, 1122,  249,  247,  815,  420,

      421,  422, 1100,  273,  827,  828,  829,  249,  515, 1342,
     1099, 1342,  779,  786, 1343, 1343, 1343, 1343,  817,  818,
      819, 1747,  247,  779, 1747, 1123, 1124, 1125,  549, 1098,
      786, 1747,  249,  806,  245,  532,  533,  534, 1097,  247,
      199,  786,  780,  781,  782,  549,  505,  898,  787,  249,
      247, 1096,  807,  780,  781,  782,  549, 1206, 1207, 1208,
      249,  247,  899, 1095,  799,  787,  807,  549, 1212, 1213,
     1214,  249, 1094, 1093,  807,  247,  787,  793,  788,  789,
      790,  549,  898,  247, 1088,  249,  499,  808, 1087,  549,
      420,  421,  422,  249, 1086,  788,  789,  790, 1489, 1490,

     1491,  808, 1133, 1133, 1133, 1133,  788,  789,  790,  808,
      785, 1085,  900,  901,  902,  491, 1084,  809,  810,  811,
      838, 1083,  838,  777,  199,  839,  839,  839,  839,  816,
     1747,  809,  810,  811, 1128, 1128, 1128, 1128,  231,  809,
      810,  811,  823, 1590, 1591, 1592,  822,  199,  198,  526,
     1321,  527,  701,  845,  845,  845,  845,  825, 1413, 1414,
     1415,  530,  199,  700,  822,  826,  267,  419,  842, 1136,
      843,  843,  843,  843,  420,  421,  422,  815,  247,  817,
      818,  819,  844,  826, 1137, 1024, 1747, 1332,  249, 1023,
     1134, 1134, 1134, 1134, 1334,  199,  492,  420,  421,  422,

      844, 1022,  822,  898, 1138,  247,  199,  827,  828,  829,
      525, 1142,  420,  421,  422,  249, 1021,  526,  899,  527,
      822, 1111, 1111, 1111, 1111,  529, 1020, 1341, 1019,  530,
     1018,  494, 1328, 1112, 1139, 1140, 1141, 1747,  898, 1747,
     1017, 1143, 1143, 1143, 1143,  420,  421,  422, 1016, 1747,
     1015, 1112, 1747,  524, 1014, 1011,  420,  421,  422, 1747,
     1010,  495,  496,  497, 1231, 1231, 1231, 1231,  900,  901,
      902,  524, 1636, 1637, 1638,  532,  533,  534,  474,  474,
      474,  474,  474,  536,  474,  537,  536,  474,  474,  474,
      536,  536,  474,  536, 1531,  474, 1130, 1130, 1130, 1130,

      539,  474,  536,  536,  540,  536,  536,  536, 1131,  536,
      536,  536,  536,  536,  536,  536,  536,  474,  536,  474,
      474,  474,  536,  536,  536,  536, 1131,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  474,  474,  474,  536,  474,  474,
      542,  543,  544, 1145, 1551, 1551, 1551, 1551, 1007, 1006,
     1152, 1005,  850, 1002, 1146, 1146, 1146, 1146, 1147,  247,
     1001,  867,  853, 1000,  867,  273,  999, 1220,  419,  249,
      247,  698,  867,  247, 1747, 1747,  493, 1747, 1138,  493,
      249,  247,  920,  249, 1747, 1153,  991,  493,  571,  990,

     1172,  249, 1173, 1173, 1173, 1173,  868,  989,  352,  868,
      664,  339, 1220, 1316,  948,  658, 1316,  868, 1148, 1149,
     1150,  325,  985, 1317,  318, 1154, 1155, 1156, 1489, 1490,
     1491, 1532,  948, 1590, 1591, 1592,  869,  870,  871,  869,
      870,  871, 1221, 1222, 1223,  977,  976,  869,  870,  871,
      867,  943,  943,  943,  943,  920,  642, 1533,  969,  247,
     1533,  874,  874,  874,  874,  493, 1071, 1534, 1071,  249,
      311, 1344, 1344, 1344, 1344,  950, 1536,  950,  607, 1536,
      951,  951,  951,  951,  920,  868, 1537,  609,  968, 1174,
     1174, 1174, 1174,  611, 1747,  967,  636,  612, 1226, 1226,

     1226, 1226,  966,  965, 1176,  921,  922,  923,  629,  945,
      926, 1747,  944,  295, 1747,  869,  870,  871,  927,  631,
      606, 1747,  924,  297,  945,  608,  944,  609,  926,  928,
      928,  928,  928,  929,  921,  922,  923,  612,  606, 1177,
      924,  930,  882,  614,  615,  616,  917,  882, 1636, 1637,
     1638,  295,  916,  919,  597, 1747,  295,  313, 1747,  930,
      909,  297,  313,  293, 1535, 1747,  297,  199,  908, 1178,
     1179, 1180,  951,  951,  951,  951,  920,  883, 1539,  199,
      890, 1539,  883,  931,  932,  933,  907,  890, 1540,  295,
     1747,  589,  591, 1747, 1330,  631,  295, 1330,  896,  297,

     1747,  890,  631,  895, 1331,  583,  297,  884,  885,  886,
      295,  888,  884,  885,  886,  891,  631,  420,  421,  422,
      297,  199,  891,  911,  887,  575,  921,  922,  923,  420,
      421,  422,  295,  286,  875,  199,  891,  278,  631,  873,
      911, 1316,  297, 1333, 1316,  892,  893,  894, 1538,  295,
      872, 1317,  892,  893,  894,  631,  560,  865,  912,  297,
      271,  911,  199,  864,  863,  554,  892,  893,  894,  862,
      295,  420,  421,  422, 1660,  912,  631,  307,  861,  946,
      297,  947,  947,  947,  947,  420,  421,  422,  913,  914,
      915,  547,  841,  948,  840,  942,  912,  942,  524,  820,

      943,  943,  943,  943,  920,  913,  914,  915,  841,  840,
      524,  948,  420,  421,  422, 1747,  820,  813,  812, 1232,
     1232, 1232, 1232,  515,  805,  245,  913,  914,  915,  927,
      469,  926, 1343, 1343, 1343, 1343,  608,  804,  609,  803,
      949,  949,  949,  949,  929,  505,  507,  792,  612,  926,
     1747,  791,  930, 1747,  921,  922,  923, 1234, 1747, 1747,
     1747, 1747, 1747,  499,  919,  576,  295,  784, 1747, 1747,
      930,  783, 1235,  491,  295,  199,  297,  238, 1122,  483,
     1240,  759,  198, 1747,  297, 1747, 1122, 1241, 1241, 1241,
     1241,  725, 1236,  816,  931,  932,  933,  607,  724,  606,

      578,  816,  721,  718,  608, 1544,  609,  715, 1209, 1209,
     1209, 1209,  611, 1122, 1674,  714,  612,  606, 1541,  713,
     1210, 1122, 1237, 1238, 1239,  420,  421,  422,  712,  708,
      579,  580,  581,  704, 1071, 1747, 1071, 1747, 1210, 1344,
     1344, 1344, 1344, 1123, 1124, 1125,  701, 1522,  700,  419,
     1522, 1123, 1124, 1125, 1747,  685,  469, 1523, 1343, 1343,
     1343, 1343,  614,  615,  616,  474,  474,  474,  474,  474,
      618,  474,  619,  618,  474,  474,  474,  618,  618,  474,
      618,  684,  618, 1228, 1228, 1228, 1228,  621,  474,  618,
      618,  622,  618,  618,  618, 1229,  618,  618,  618,  618,

      618,  618,  618,  618,  474,  618,  474,  474,  474,  618,
      618,  618,  618, 1229,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  474,  474,  474,  618,  474,  474,  624,  625,  626,
     1243,  683,  648,  666,  352,  660,  339, 1250,  654,  954,
      325, 1244, 1244, 1244, 1244, 1245,  295,  653,  971,  957,
      652,  971,  313,  318,  641,  199,  297,  295,  640,  971,
      295, 1747,  311,  577, 1747, 1236,  577,  297,  295,  596,
      297, 1747, 1251,  595,  577,  406,  293,  994,  297,  995,
      995,  995,  995,  972,  569,  286,  972,  568,  567, 1533,

     1536,  766, 1533, 1536,  972, 1246, 1247, 1248, 1330, 1534,
     1537, 1330, 1252, 1253, 1254,  420,  421,  422, 1331,  766,
      278,  255,  559,  973,  974,  975,  973,  974,  975,  199,
      558, 1542,  271,  512,  973,  974,  975,  971, 1389, 1389,
     1389, 1389,  816,  511, 1539,  245,  295, 1539,  984,  984,
      984,  984,  577,  468, 1540,  469,  297, 1066, 1066, 1066,
     1066,  487,  485, 1074,  238, 1075, 1075, 1075, 1075, 1067,
      464,  463,  972, 1522,  198, 1533, 1522,  844, 1533,  420,
      421,  422, 1078, 1523,  175, 1534, 1536, 1067,  395, 1536,
      394,  247,  817,  818,  819,  844, 1537,  549,  393, 1407,

      392,  249,  973,  974,  975,  698,  391,  384,  381,  987,
      987,  987,  987, 1747, 1408,  377, 1747, 1079,  987,  987,
      987,  987,  374, 1747, 1363,  359, 1363,  354,  353, 1364,
     1364, 1364, 1364,  816, 1407,  987,  987,  987,  987,  987,
      987, 1271, 1271,  352, 1271,  355, 1271, 1080, 1081, 1082,
     1271, 1271, 1271, 1539, 1271,  354, 1539, 1687,  353, 1078,
     1687,  352, 1271, 1540, 1409, 1410, 1411, 1688,  247,  345,
      342,  341,  340, 1543,  549,  339,  330, 1078,  249, 1271,
      327, 1271, 1271,  817,  818,  819,  247, 1687,  199,  326,
     1687,  325,  549,  302, 1079,  288,  249, 1688, 1747,  287,

      286,  265, 1128, 1128, 1128, 1128, 1271,  240, 1271, 1271,
     1272, 1272, 1079, 1272,  822, 1272,  199,  239,  238, 1272,
     1272, 1272,  219, 1272, 1080, 1081, 1082,  188,  175, 1747,
      174, 1272,  822, 1134, 1134, 1134, 1134, 1136,  420,  421,
      422, 1747, 1080, 1081, 1082,  822,  247,  199, 1272,  169,
     1272, 1272, 1137,  571,  169, 1172,  249, 1173, 1173, 1173,
     1173, 1727, 1747,  822, 1727, 1747,  420,  421,  422,  948,
     1747, 1728, 1138, 1727, 1747, 1272, 1727, 1272, 1272,  699,
      699,  699,  699, 1728, 1747, 1747, 1747,  948,  699,  699,
      699,  699, 1465, 1465, 1465, 1465,  920,  420,  421,  422,

     1747, 1747, 1139, 1140, 1141,  699,  699,  699,  699,  699,
      699, 1302, 1302, 1302, 1302, 1302, 1747, 1302, 1303, 1747,
     1302, 1302, 1302, 1747, 1747, 1302, 1747, 1302, 1226, 1226,
     1226, 1226, 1747, 1304, 1302, 1747, 1747, 1302, 1747, 1747,
      926, 1747, 1747, 1747, 1747, 1747,  921,  922,  923, 1747,
     1302, 1747, 1302, 1303, 1302, 1372,  525, 1372,  926, 1305,
     1373, 1373, 1373, 1373,  816,  527, 1747, 1374, 1374, 1374,
     1374,  529, 1747, 1747, 1747,  530, 1220, 1302, 1302, 1302,
     1747, 1302, 1302, 1306, 1307, 1308, 1310, 1310, 1310, 1310,
     1310,  920, 1310, 1311, 1747, 1310, 1310, 1310, 1747, 1747,

     1310, 1747, 1310, 1747, 1747, 1747, 1747, 1747, 1312, 1310,
     1747, 1220, 1310, 1747,  817,  818,  819, 1747, 1747, 1747,
     1747,  532,  533,  534, 1747, 1310, 1747, 1310, 1311, 1310,
     1439, 1136, 1439, 1747, 1747, 1440, 1440, 1440, 1440,  920,
      247, 1221, 1222, 1223, 1747, 1747, 1137, 1747, 1747, 1747,
      249, 1747, 1310, 1310, 1310,  199, 1310, 1310, 1313, 1314,
     1315, 1322, 1322, 1322, 1322, 1322, 1138, 1322, 1323,  199,
     1322, 1322, 1322, 1747,  199, 1322, 1747, 1322, 1747, 1747,
     1747, 1747, 1747, 1324, 1322, 1747, 1747, 1322, 1747,  921,
      922,  923, 1747, 1747, 1747, 1747, 1139, 1140, 1141, 1747,

     1322, 1747, 1322, 1323, 1322,  420,  421,  422, 1220, 1747,
     1747, 1747, 1667, 1747, 1747, 1747, 1747, 1747, 1747,  420,
      421,  422, 1747,  920,  420,  421,  422, 1322, 1322, 1322,
     1747, 1322, 1322, 1325, 1326, 1327,  423,  424,  425,  426,
      427,  428,  429, 1220,  430, 1747,  431,  432,  433,  434,
     1747,  435,  436,  437,  438, 1335, 1335, 1335, 1335, 1335,
     1747, 1335, 1336, 1747, 1335, 1335, 1335, 1376,  199, 1335,
     1136, 1335, 1747, 1221, 1222, 1223,  247, 1337, 1335,  247,
     1747, 1335,  273, 1747, 1747, 1137,  249, 1747, 1747,  249,
     1747, 1747, 1747, 1747, 1335, 1747, 1335, 1336, 1335, 1747,

      199, 1448, 1377, 1448, 1747, 1138, 1449, 1449, 1449, 1449,
      920, 1747, 1747, 1364, 1364, 1364, 1364,  816,  420,  421,
      422, 1335, 1335, 1335, 1747, 1335, 1335, 1338, 1339, 1340,
      525, 1747, 1378, 1379, 1380, 1139, 1140, 1141, 1747, 1384,
     1747, 1345, 1345, 1345, 1345,  529, 1747, 1747,  247,  530,
      420,  421,  422, 1346,  273, 1747, 1747, 1136,  249, 1747,
      921,  922,  923, 1747, 1136, 1747,  247,  817,  818,  819,
     1747, 1346, 1137,  247, 1385, 1747,  249, 1747, 1747, 1147,
     1747, 1747, 1747,  249, 1747, 1747, 1747, 1747, 1232, 1232,
     1232, 1232, 1138, 1747, 1747,  532,  533,  534,  823, 1138,

      926, 1747, 1747, 1747, 1386, 1387, 1388,  527, 1747, 1134,
     1134, 1134, 1134,  825, 1747, 1747, 1747,  530,  926, 1747,
     1747, 1747, 1139, 1140, 1141, 1391, 1747, 1747, 1747, 1139,
     1140, 1141, 1399,  815,  247, 1747, 1747, 1152, 1747, 1747,
      273,  247, 1747, 1747,  249, 1747,  247,  549, 1747, 1747,
     1747,  249,  273, 1747, 1747, 1747,  249, 1747, 1747, 1747,
     1392, 1483, 1747,  827,  828,  829,  823, 1400, 1747, 1747,
     1747, 1407, 1153,  526, 1747,  527, 1484, 1361, 1361, 1361,
     1361,  825, 1747, 1747, 1747,  530, 1408, 1747, 1747, 1362,
     1393, 1394, 1395, 1747, 1747, 1747, 1483, 1401, 1402, 1403,

     1152,  815, 1154, 1155, 1156, 1176, 1407, 1362, 1747,  247,
     1747, 1747, 1747, 1747,  295,  273, 1747, 1747, 1747,  249,
      631, 1747, 1747, 1747,  297, 1747, 1485, 1486, 1487, 1747,
     1747,  827,  828,  829, 1145, 1153, 1409, 1410, 1411, 1747,
     1177, 1176, 1747,  850, 1747, 1146, 1146, 1146, 1146, 1147,
      295, 1747, 1747,  853, 1747, 1747,  631, 1747, 1747, 1747,
      297, 1747, 1747, 1747, 1747, 1154, 1155, 1156, 1176, 1138,
     1178, 1179, 1180, 1747, 1747, 1747, 1177,  295, 1747,  607,
     1747, 1747, 1747,  631, 1747, 1747, 1747,  297,  609, 1747,
     1450, 1450, 1450, 1450,  611, 1747, 1747, 1747,  612, 1148,

     1149, 1150,  607, 1177, 1747, 1747, 1178, 1179, 1180, 1747,
     1747, 1747, 1747, 1421, 1421, 1421, 1421,  611, 1747, 1747,
     1747,  612, 1747, 1747,  468, 1422,  469, 1747, 1066, 1066,
     1066, 1066, 1747, 1178, 1179, 1180, 1407, 1747, 1747, 1747,
     1067, 1234, 1747, 1422,  614,  615,  616, 1747, 1747, 1747,
      295, 1408, 1747, 1747, 1747, 1747, 1235, 1372, 1067, 1372,
      297, 1747, 1373, 1373, 1373, 1373,  816,  614,  615,  616,
      927, 1407, 1747, 1747, 1747, 1747, 1236, 1234, 1747,  609,
     1747, 1232, 1232, 1232, 1232,  929,  295, 1747, 1747,  612,
     1747, 1747, 1235, 1747, 1747, 1747,  297, 1556, 1556, 1556,

     1556, 1409, 1410, 1411, 1452,  919, 1237, 1238, 1239,  822,
     1747, 1234, 1236,  295, 1747, 1747,  817,  818,  819,  313,
      295, 1747, 1747,  297, 1747, 1747, 1235,  822, 1747, 1747,
      297, 1747, 1747, 1747, 1747,  931,  932,  933,  927, 1453,
     1747, 1747, 1237, 1238, 1239,  608, 1236,  609, 1747, 1437,
     1437, 1437, 1437,  929, 1747, 1747, 1747,  612, 1747, 1747,
     1747, 1438, 1747, 1747, 1747, 1460, 1747, 1747, 1747, 1454,
     1455, 1456, 1234,  919,  295, 1747, 1237, 1238, 1239, 1438,
      313,  295, 1747, 1234,  297, 1747, 1747, 1235, 1747, 1747,
     1747,  297,  295, 1744, 1744, 1744, 1747, 1747, 1245, 1747,

     1461, 1747,  297,  931,  932,  933, 1467, 1236, 1747, 1747,
     1747, 1744, 1744, 1744, 1744,  295, 1747, 1747, 1236, 1747,
     1747,  313, 1747, 1747, 1747,  297, 1747, 1747, 1747, 1747,
     1462, 1463, 1464, 1747, 1747, 1747, 1747, 1237, 1238, 1239,
     1747, 1468, 1373, 1373, 1373, 1373,  816, 1747, 1237, 1238,
     1239, 1243, 1389, 1389, 1389, 1389,  816, 1747, 1747, 1475,
      954, 1747, 1244, 1244, 1244, 1244, 1245, 1747,  295, 1747,
      957, 1469, 1470, 1471,  631, 1747, 1250, 1747,  297, 1747,
     1747, 1747, 1747, 1747, 1250,  295, 1236, 1747, 1747, 1747,
     1747,  313, 1747,  295, 1476,  297,  817,  818,  819,  313,

     1747, 1747, 1747,  297, 1747, 1747,  817,  818,  819, 1747,
     1687, 1251, 1747, 1687, 1747, 1747, 1246, 1247, 1248, 1251,
     1688, 1747, 1747, 1747, 1477, 1478, 1479, 1363, 1747, 1363,
     1747,  199, 1364, 1364, 1364, 1364,  816, 1747, 1747, 1747,
     1747, 1252, 1253, 1254, 1559, 1559, 1559, 1559, 1747, 1252,
     1253, 1254, 1497, 1497, 1747, 1497,  822, 1497, 1747, 1747,
     1747, 1497, 1497, 1497, 1747, 1497, 1747, 1747, 1559, 1559,
     1559, 1559, 1747, 1497,  822, 1747, 1747, 1747, 1747, 1747,
      822,  420,  421,  422, 1747, 1747,  817,  818,  819, 1747,
     1497, 1561, 1497, 1497, 1747, 1747, 1747, 1747,  822, 1747,

      247, 1747, 1747, 1747, 1747, 1747,  549, 1448, 1747, 1448,
      249, 1747, 1449, 1449, 1449, 1449,  920, 1497, 1747, 1497,
     1497, 1516, 1516, 1516, 1516, 1516, 1562, 1516, 1517, 1747,
     1516, 1516, 1516, 1747, 1747, 1516, 1747, 1516, 1747, 1747,
     1747, 1747, 1747, 1518, 1516, 1747, 1747, 1516, 1747, 1747,
     1376, 1747, 1747, 1747, 1747, 1747, 1563, 1564, 1565,  247,
     1516, 1747, 1516, 1517, 1516,  273,  921,  922,  923,  249,
     1439, 1747, 1439, 1747, 1747, 1440, 1440, 1440, 1440,  920,
     1747, 1747, 1747, 1747, 1747, 1377, 1483, 1516, 1516, 1516,
     1747, 1516, 1516, 1519, 1520, 1521, 1747, 1522, 1747, 1747,

     1522, 1484, 1747, 1747, 1747, 1747, 1747, 1523, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1378, 1379, 1380,  199, 1747,
     1747, 1483, 1747, 1376, 1602, 1602, 1602, 1602, 1747,  921,
      922,  923,  247, 1747, 1747, 1747,  926, 1747,  273, 1747,
     1747, 1570,  249, 1747, 1440, 1440, 1440, 1440,  920, 1747,
      247, 1485, 1486, 1487,  926, 1747,  549, 1747, 1377, 1747,
      249, 1747, 1747, 1747, 1747, 1747, 1747, 1747,  420,  421,
      422, 1524, 1524, 1524, 1524, 1524, 1571, 1524, 1525, 1747,
     1524, 1524, 1524, 1747, 1747, 1524, 1747, 1524, 1378, 1379,
     1380, 1747, 1747, 1526, 1524, 1747, 1747, 1524,  921,  922,

      923, 1747, 1747, 1747, 1747, 1747, 1572, 1573, 1574, 1747,
     1524, 1747, 1524, 1525, 1524, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1605, 1605, 1605, 1605, 1747, 1449, 1449,
     1449, 1449,  920, 1747, 1747,  926, 1747, 1524, 1524, 1524,
     1747, 1524, 1524, 1527, 1528, 1529,  423,  424,  425,  426,
      427,  428,  429,  926,  430, 1747,  431,  432,  433,  434,
     1747,  435,  436,  437,  438, 1545, 1545, 1545, 1545, 1545,
     1747, 1545, 1546, 1747, 1545, 1545, 1545, 1384, 1747, 1545,
     1747, 1545,  921,  922,  923, 1747,  247, 1547, 1545, 1747,
     1747, 1545,  273, 1747, 1747, 1747,  249, 1605, 1605, 1605,

     1605, 1747, 1747, 1747, 1545, 1747, 1545, 1546, 1545,  926,
     1747, 1384, 1385, 1465, 1465, 1465, 1465,  920, 1747, 1747,
      247, 1747, 1747, 1747, 1747, 1747,  273,  926, 1747, 1747,
      249, 1545, 1545, 1545, 1747, 1545, 1545, 1548, 1549, 1550,
      823, 1747, 1386, 1387, 1388, 1483, 1385,  526, 1747,  527,
     1747, 1361, 1361, 1361, 1361,  825, 1747, 1747, 1747,  530,
     1484, 1747, 1747, 1362, 1747, 1747, 1747,  921,  922,  923,
     1747, 1747, 1747, 1747, 1578,  815, 1386, 1387, 1388, 1391,
     1483, 1362, 1727,  247, 1747, 1727, 1747, 1747,  247,  549,
     1747, 1747, 1728,  249,  273, 1747, 1747, 1747,  249, 1747,

     1747, 1747, 1747,  199, 1747,  827,  828,  829,  823, 1579,
     1485, 1486, 1487, 1747, 1392,  526, 1747,  527, 1747, 1361,
     1361, 1361, 1361,  825, 1747, 1747, 1747,  530, 1747, 1747,
     1747, 1362, 1747, 1391, 1747, 1747, 1747, 1747, 1747, 1580,
     1581, 1582,  247,  815, 1393, 1394, 1395, 1399,  273, 1362,
     1399, 1747,  249,  420,  421,  422,  247, 1747, 1747,  247,
     1747, 1399,  549, 1747, 1747,  549,  249, 1747, 1392,  249,
      247, 1747, 1747,  827,  828,  829,  549, 1747, 1747, 1747,
      249, 1747, 1400, 1747, 1747, 1400, 1747, 1747, 1607, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1400,  295, 1393, 1394,

     1395, 1747, 1747,  631, 1747, 1747, 1747,  297, 1747, 1747,
     1747, 1747, 1401, 1402, 1403, 1401, 1402, 1403, 1747, 1747,
     1747, 1747, 1747, 1608, 1747, 1747, 1401, 1402, 1403,  927,
     1747, 1747, 1747, 1747, 1747, 1747,  608, 1747,  609, 1747,
     1437, 1437, 1437, 1437,  929, 1747, 1747, 1747,  612, 1747,
     1747, 1747, 1438, 1609, 1610, 1611, 1452, 1747, 1747, 1747,
     1747, 1747, 1747, 1452,  919,  295, 1747, 1747, 1616, 1747,
     1438,  313,  295, 1747, 1747,  297, 1747,  295,  313, 1747,
     1747, 1747,  297,  631, 1747, 1747, 1747,  297, 1747, 1747,
     1747, 1453, 1747, 1747,  931,  932,  933,  927, 1453, 1747,

     1747, 1747, 1747, 1617,  608, 1747,  609, 1747, 1437, 1437,
     1437, 1437,  929, 1747, 1747, 1747,  612, 1747, 1747, 1747,
     1438, 1454, 1455, 1456, 1747, 1747, 1747, 1747, 1454, 1455,
     1456, 1460,  919, 1618, 1619, 1620, 1460, 1747, 1438, 1624,
      295, 1747, 1747, 1747, 1747,  295,  313, 1747,  295, 1747,
      297,  313, 1747, 1747,  631,  297, 1747, 1747,  297, 1747,
     1467, 1747,  931,  932,  933, 1747, 1461, 1747, 1747,  295,
     1747, 1461, 1467, 1747, 1625,  313, 1747, 1747, 1747,  297,
     1747,  295, 1747, 1747, 1747, 1747, 1747,  313, 1747, 1747,
     1747,  297, 1747, 1747, 1747, 1468, 1462, 1463, 1464, 1475,

     1747, 1462, 1463, 1464, 1626, 1627, 1628, 1468,  295, 1747,
     1747, 1747, 1747, 1475,  631, 1747, 1747, 1747,  297, 1747,
     1747, 1475,  295, 1747, 1747, 1469, 1470, 1471,  631, 1747,
      295, 1747,  297, 1747, 1476, 1747,  631, 1469, 1470, 1471,
      297, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1476, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1476, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1477, 1478, 1479, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1477, 1478,
     1479, 1747, 1747, 1747, 1747, 1747, 1477, 1478, 1479,  423,
      424,  425,  426,  427,  428,  429, 1747,  430, 1747,  431,

      432,  433,  434, 1747,  435,  436,  437,  438, 1654, 1654,
     1654, 1654, 1654, 1747, 1654, 1655, 1747, 1654, 1654, 1654,
     1747, 1747, 1654, 1747, 1654, 1747, 1747, 1747, 1747, 1747,
     1656, 1654, 1747, 1747, 1654, 1747, 1747, 1561, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747,  247, 1654, 1747, 1654,
     1655, 1654,  549, 1747, 1747, 1747,  249, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1562, 1747, 1654, 1654, 1654, 1747, 1654, 1654,
     1657, 1658, 1659, 1661, 1661, 1661, 1661, 1661, 1747, 1661,
     1662, 1747, 1661, 1661, 1661, 1747, 1747, 1661, 1747, 1661,

     1747, 1747, 1563, 1564, 1565, 1663, 1661, 1747, 1747, 1661,
     1747, 1747, 1561, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747,  247, 1661, 1747, 1661, 1662, 1661,  549, 1747, 1747,
     1747,  249, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1562, 1747, 1661,
     1661, 1661, 1747, 1661, 1661, 1664, 1665, 1666, 1668, 1668,
     1668, 1668, 1668, 1747, 1668, 1669, 1747, 1668, 1668, 1668,
     1747, 1747, 1668, 1747, 1668, 1747, 1747, 1563, 1564, 1565,
     1670, 1668, 1747, 1747, 1668, 1747, 1747, 1561, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747,  247, 1668, 1747, 1668,

     1669, 1668,  549, 1747, 1747, 1747,  249, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1562, 1747, 1668, 1668, 1668, 1747, 1668, 1668,
     1671, 1672, 1673, 1675, 1675, 1675, 1675, 1675, 1747, 1675,
     1676, 1747, 1675, 1675, 1675, 1747, 1747, 1675, 1747, 1675,
     1747, 1747, 1563, 1564, 1565, 1677, 1675, 1747, 1747, 1675,
     1747, 1747, 1570, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747,  247, 1675, 1747, 1675, 1676, 1675,  549, 1747, 1747,
     1747,  249, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1571, 1747, 1675,

     1675, 1675, 1747, 1675, 1675, 1678, 1679, 1680, 1681, 1681,
     1681, 1681, 1681, 1747, 1681, 1682, 1747, 1681, 1681, 1681,
     1747, 1747, 1681, 1570, 1681, 1747, 1747, 1572, 1573, 1574,
     1683, 1681,  247, 1747, 1681, 1747, 1747, 1747,  549, 1747,
     1747, 1747,  249, 1747, 1747, 1747, 1747, 1681, 1747, 1681,
     1682, 1681, 1747, 1747, 1747, 1747, 1747, 1747, 1571, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1681, 1681, 1681, 1747, 1681, 1681,
     1684, 1685, 1686,  823, 1747, 1747, 1747, 1747, 1572, 1573,
     1574, 1570,  527, 1747, 1556, 1556, 1556, 1556,  825, 1747,

      247, 1747,  530, 1747, 1747, 1747,  549, 1747, 1578, 1747,
      249, 1747, 1747, 1747, 1747, 1747, 1747,  247,  815, 1747,
     1747, 1747, 1747,  549, 1747, 1747, 1571,  249, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1579, 1747, 1747, 1747, 1747,  827,  828,
      829,  823, 1747, 1747, 1747, 1747, 1572, 1573, 1574, 1747,
      527, 1747, 1559, 1559, 1559, 1559,  825, 1747, 1578, 1747,
      530, 1747, 1747, 1580, 1581, 1582, 1578,  247, 1747, 1747,
     1747, 1747, 1747,  549, 1747,  247,  815,  249, 1747, 1747,
     1747,  549, 1747, 1747, 1747,  249, 1747, 1747, 1747, 1747,

     1747, 1747, 1747, 1579, 1607, 1747, 1747, 1747, 1747, 1747,
     1747, 1579, 1747,  295, 1747, 1747,  827,  828,  829,  631,
     1747, 1747, 1747,  297, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1607, 1747, 1580, 1581, 1582, 1747, 1747, 1747, 1608,
      295, 1580, 1581, 1582,  927, 1747,  631, 1747, 1747, 1747,
      297, 1747, 1747,  609, 1747, 1602, 1602, 1602, 1602,  929,
     1747, 1747, 1747,  612, 1747, 1747, 1608, 1607, 1747, 1609,
     1610, 1611, 1616, 1747, 1747, 1747,  295, 1747, 1747,  919,
     1747,  295,  631, 1747, 1616, 1747,  297,  631, 1747, 1747,
     1747,  297, 1747,  295, 1747, 1747, 1609, 1610, 1611,  631,

     1747, 1747, 1608,  297, 1747, 1747, 1747, 1617, 1747,  931,
      932,  933,  927, 1747, 1747, 1747, 1747, 1747, 1747, 1617,
     1747,  609, 1747, 1605, 1605, 1605, 1605,  929, 1747, 1747,
     1747,  612, 1609, 1610, 1611, 1747, 1747, 1618, 1619, 1620,
     1747, 1747, 1747, 1747, 1747, 1616, 1747,  919, 1624, 1618,
     1619, 1620, 1747, 1624,  295, 1747, 1624,  295, 1747, 1747,
      631, 1747,  295,  631,  297,  295, 1747,  297,  631, 1747,
     1747,  631,  297, 1747, 1747,  297, 1747,  931,  932,  933,
     1617, 1747, 1747, 1625, 1747, 1747, 1747, 1747, 1625, 1747,
     1747, 1625, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,

     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1618, 1619, 1620, 1626, 1627, 1628, 1747, 1747, 1626, 1627,
     1628, 1626, 1627, 1628, 1721, 1721, 1721, 1721, 1721, 1747,
     1721, 1722, 1747, 1721, 1721, 1721, 1747, 1747, 1721, 1747,
     1721, 1747, 1747, 1747, 1747, 1747, 1723, 1721, 1747, 1747,
     1721, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1721, 1747, 1721, 1722, 1721, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1721, 1721, 1721, 1747, 1721, 1721, 1724, 1725, 1726, 1729,

     1729, 1729, 1729, 1729, 1747, 1729, 1730, 1747, 1729, 1729,
     1729, 1747, 1747, 1729, 1747, 1729, 1747, 1747, 1747, 1747,
     1747, 1731, 1729, 1747, 1747, 1729, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1729, 1747,
     1729, 1730, 1729, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1729, 1729, 1729, 1747, 1729,
     1729, 1732, 1733, 1734,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   94,   94,

       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  168,  168,  168,  168,  168,  168,

      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  170,  170,
     1747, 1747, 1747,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170, 1747,  170,  170,  170,
      170,  170,  228,  228, 1747,  228, 1747, 1747, 1747,  228,
     1747,  228,  228,  230,  230, 1747, 1747,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  245, 1747,  245, 1747, 1747,  245,  245, 1747,  245,
     1747,  245,  245, 1747,  245,  245,  245,  245,  245,  245,
      271, 1747,  271, 1747, 1747,  271,  271, 1747,  271, 1747,
      271,  271, 1747,  271,  271,  271,  271,  271,  271,  278,
     1747,  278, 1747, 1747,  278,  278, 1747, 1747, 1747,  278,
      278, 1747, 1747,  278, 1747,  278,  278,  278,  293, 1747,
      293, 1747, 1747,  293,  293, 1747,  293,  293,  293,  293,
     1747,  293,  293,  293,  293,  293,  293,  311, 1747,  311,
     1747, 1747,  311,  311, 1747,  311,  311,  311,  311, 1747,
      311,  311,  311,  311,  311,  311,  318, 1747,  318, 1747,

     1747,  318,  318, 1747, 1747,  318,  318,  318, 1747, 1747,
      318, 1747,  318,  318,  318,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  356,
     1747, 1747, 1747,  356, 1747,  356,  356,  364,  364,  364,
     1747,  364,  364, 1747, 1747,  364, 1747, 1747,  364,  364,
      364,  364,  364,  382, 1747, 1747, 1747, 1747,  382, 1747,
      382,  382, 1747, 1747,  382, 1747,  382,  382,  382, 1747,
      382,  382,  382, 1747,  382,  382,  382,  396,  396, 1747,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,

      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  399,  399, 1747,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  419,
     1747,  419, 1747, 1747,  419,  419, 1747, 1747,  419,  419,
      419, 1747, 1747,  419,  419,  419,  419,  419,  471,  471,
     1747,  471, 1747, 1747, 1747,  471, 1747,  471,  471,  230,
      230, 1747, 1747,  230,  230,  230,  230,  230,  230,  230,

      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  491, 1747,  491, 1747, 1747,  491,  491,
     1747,  491, 1747,  491,  491, 1747,  491,  491,  491,  491,
      491,  491,  245, 1747,  245, 1747, 1747,  245,  245, 1747,
      245, 1747,  245,  245, 1747,  245,  245,  245,  245,  245,
      245,  499, 1747,  499, 1747, 1747,  499,  499, 1747,  499,
     1747,  499,  499, 1747,  499,  499,  499,  499,  499,  499,
      505, 1747,  505, 1747, 1747,  505,  505, 1747, 1747, 1747,
      505,  505, 1747, 1747,  505, 1747,  505,  505,  505,  515,
     1747,  515, 1747, 1747,  515,  515, 1747,  515, 1747,  515,

      515, 1747,  515,  515,  515,  515,  515,  515,  524, 1747,
      524, 1747, 1747,  524,  524,  524,  524, 1747,  524,  524,
     1747,  524,  524, 1747,  524,  524,  524,  547, 1747,  547,
     1747, 1747,  547,  547, 1747,  547, 1747,  547,  547, 1747,
      547,  547,  547,  547,  547,  547,  271, 1747,  271, 1747,
     1747,  271,  271, 1747,  271, 1747,  271,  271, 1747,  271,
      271,  271,  271,  271,  271,  554, 1747,  554, 1747, 1747,
      554,  554, 1747, 1747, 1747,  554, 1747, 1747, 1747,  554,
      554,  554,  554,  554,  560, 1747,  560, 1747, 1747,  560,
      560, 1747,  560, 1747,  560,  560, 1747,  560,  560,  560,

      560,  560,  560,  575, 1747,  575, 1747, 1747,  575,  575,
     1747,  575,  575,  575,  575, 1747,  575,  575,  575,  575,
      575,  575,  293, 1747,  293, 1747, 1747,  293,  293, 1747,
      293,  293,  293,  293, 1747,  293,  293,  293,  293,  293,
      293,  583, 1747,  583, 1747, 1747,  583,  583, 1747,  583,
      583,  583,  583, 1747,  583,  583,  583,  583,  583,  583,
      589, 1747,  589, 1747, 1747,  589,  589, 1747, 1747,  589,
      589,  589, 1747, 1747,  589, 1747,  589,  589,  589,  597,
     1747,  597, 1747, 1747,  597,  597, 1747,  597,  597,  597,
      597, 1747,  597,  597,  597,  597,  597,  597,  606, 1747,

      606, 1747, 1747,  606,  606,  606,  606,  606,  606,  606,
     1747,  606,  606, 1747,  606,  606,  606,  629, 1747,  629,
     1747, 1747,  629,  629, 1747,  629,  629,  629,  629, 1747,
      629,  629,  629,  629,  629,  629,  311, 1747,  311, 1747,
     1747,  311,  311, 1747,  311,  311,  311,  311, 1747,  311,
      311,  311,  311,  311,  311,  636, 1747,  636, 1747, 1747,
      636,  636, 1747, 1747,  636,  636, 1747, 1747, 1747,  636,
      636,  636,  636,  636,  642, 1747,  642, 1747, 1747,  642,
      642, 1747,  642,  642,  642,  642, 1747,  642,  642,  642,
      642,  642,  642,  356, 1747, 1747, 1747,  356, 1747,  356,

      356,  364, 1747, 1747, 1747,  364, 1747,  364,  364,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474, 1747,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  228,  228, 1747,  228, 1747, 1747, 1747,
      228, 1747,  228,  228,  382, 1747, 1747, 1747, 1747,  382,
     1747,  382,  382, 1747, 1747,  382, 1747,  382,  382,  382,
     1747,  382,  382,  382, 1747,  382,  382,  382,  399,  399,
     1747,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  170,  170, 1747, 1747, 1747,  170,  170,  170,

      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
     1747,  170,  170,  170,  170,  170,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      471, 1747, 1747, 1747,  471, 1747,  471,  471,  695, 1747,
     1747,  695, 1747, 1747, 1747,  695, 1747,  695,  695,  419,
     1747,  419, 1747, 1747,  419,  419, 1747, 1747,  419,  419,
      419, 1747, 1747,  419,  419,  419,  419,  419,  771, 1747,
      771, 1747, 1747, 1747,  771, 1747,  771,  771,  524, 1747,
      524, 1747, 1747,  524,  524, 1747, 1747, 1747,  524,  524,

     1747,  524,  524, 1747,  524,  524,  524,  491, 1747,  491,
     1747, 1747,  491,  491, 1747,  491, 1747,  491,  491, 1747,
      491,  491,  491,  491,  491,  491,  777, 1747,  777, 1747,
     1747,  777,  777, 1747,  777, 1747,  777,  777, 1747,  777,
      777,  777,  777,  777,  777,  785, 1747,  785, 1747, 1747,
      785,  785, 1747,  785, 1747,  785,  785, 1747,  785,  785,
      785,  785,  785,  785,  499, 1747,  499, 1747, 1747,  499,
      499, 1747,  499, 1747,  499,  499, 1747,  499,  499,  499,
      499,  499,  499,  793, 1747,  793, 1747, 1747,  793,  793,
     1747, 1747, 1747,  793,  793, 1747, 1747,  793,  793,  793,

      793,  793,  799, 1747,  799, 1747, 1747,  799,  799, 1747,
     1747, 1747,  799, 1747, 1747, 1747,  799,  799,  799,  799,
      799,  806, 1747,  806, 1747, 1747,  806,  806, 1747,  806,
     1747,  806,  806, 1747,  806,  806,  806,  806,  806,  806,
      515, 1747,  515, 1747, 1747,  515,  515, 1747,  515, 1747,
      515,  515, 1747,  515,  515,  515,  515,  515,  515,  815,
     1747,  815, 1747, 1747,  815,  815, 1747, 1747, 1747,  815,
      815, 1747, 1747,  815,  815,  815,  815,  815,  822, 1747,
      822, 1747, 1747,  822,  822,  822,  822, 1747,  822,  822,
     1747,  822,  822,  822,  822,  822,  822,  830, 1747,  830,

     1747, 1747,  830,  830, 1747, 1747, 1747,  830, 1747, 1747,
     1747,  830,  830,  830,  830,  830,  834, 1747,  834, 1747,
     1747,  834,  834, 1747, 1747, 1747,  834,  834, 1747, 1747,
      834, 1747,  834,  834,  834,  848, 1747,  848, 1747, 1747,
      848,  848, 1747,  848, 1747,  848,  848, 1747,  848,  848,
      848,  848,  848,  848,  547, 1747,  547, 1747, 1747,  547,
      547, 1747,  547, 1747,  547,  547, 1747,  547,  547,  547,
      547,  547,  547,  857, 1747,  857, 1747, 1747,  857,  857,
     1747, 1747, 1747,  857, 1747, 1747, 1747,  857,  857,  857,
      857,  857,  554, 1747,  554, 1747, 1747,  554,  554, 1747,

     1747, 1747,  554, 1747, 1747, 1747,  554,  554,  554,  554,
      554,  866, 1747,  866, 1747, 1747,  866,  866, 1747,  866,
     1747,  866,  866, 1747,  866,  866,  866,  866,  866,  866,
      560, 1747,  560, 1747, 1747,  560,  560, 1747,  560, 1747,
      560,  560, 1747,  560,  560,  560,  560,  560,  560,  606,
     1747,  606, 1747, 1747,  606,  606, 1747, 1747,  606,  606,
      606, 1747,  606,  606, 1747,  606,  606,  606,  575, 1747,
      575, 1747, 1747,  575,  575, 1747,  575,  575,  575,  575,
     1747,  575,  575,  575,  575,  575,  575,  881, 1747,  881,
     1747, 1747,  881,  881, 1747,  881,  881,  881,  881, 1747,

      881,  881,  881,  881,  881,  881,  889, 1747,  889, 1747,
     1747,  889,  889, 1747,  889,  889,  889,  889, 1747,  889,
      889,  889,  889,  889,  889,  583, 1747,  583, 1747, 1747,
      583,  583, 1747,  583,  583,  583,  583, 1747,  583,  583,
      583,  583,  583,  583,  897, 1747,  897, 1747, 1747,  897,
      897, 1747, 1747,  897,  897,  897, 1747, 1747,  897,  897,
      897,  897,  897,  903, 1747,  903, 1747, 1747,  903,  903,
     1747, 1747,  903,  903, 1747, 1747, 1747,  903,  903,  903,
      903,  903,  910, 1747,  910, 1747, 1747,  910,  910, 1747,
      910,  910,  910,  910, 1747,  910,  910,  910,  910,  910,

      910,  597, 1747,  597, 1747, 1747,  597,  597, 1747,  597,
      597,  597,  597, 1747,  597,  597,  597,  597,  597,  597,
      919, 1747,  919, 1747, 1747,  919,  919, 1747, 1747,  919,
      919,  919, 1747, 1747,  919,  919,  919,  919,  919,  926,
     1747,  926, 1747, 1747,  926,  926,  926,  926,  926,  926,
      926, 1747,  926,  926,  926,  926,  926,  926,  934, 1747,
      934, 1747, 1747,  934,  934, 1747, 1747,  934,  934, 1747,
     1747, 1747,  934,  934,  934,  934,  934,  938, 1747,  938,
     1747, 1747,  938,  938, 1747, 1747,  938,  938,  938, 1747,
     1747,  938, 1747,  938,  938,  938,  952, 1747,  952, 1747,

     1747,  952,  952, 1747,  952,  952,  952,  952, 1747,  952,
      952,  952,  952,  952,  952,  629, 1747,  629, 1747, 1747,
      629,  629, 1747,  629,  629,  629,  629, 1747,  629,  629,
      629,  629,  629,  629,  961, 1747,  961, 1747, 1747,  961,
      961, 1747, 1747,  961,  961, 1747, 1747, 1747,  961,  961,
      961,  961,  961,  636, 1747,  636, 1747, 1747,  636,  636,
     1747, 1747,  636,  636, 1747, 1747, 1747,  636,  636,  636,
      636,  636,  970, 1747,  970, 1747, 1747,  970,  970, 1747,
      970,  970,  970,  970, 1747,  970,  970,  970,  970,  970,
      970,  642, 1747,  642, 1747, 1747,  642,  642, 1747,  642,

      642,  642,  642, 1747,  642,  642,  642,  642,  642,  642,
      695, 1747, 1747,  695, 1747, 1747, 1747,  695, 1747,  695,
      695,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474, 1747,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  382, 1747, 1747, 1747, 1747,
      382, 1747,  382,  382, 1747, 1747,  382, 1747,  382,  382,
      382, 1747,  382,  382,  382, 1747,  382,  382,  382,  471,
      471, 1747,  471, 1747, 1747, 1747,  471, 1747,  471,  471,
      741,  741,  741,  741,  741, 1747,  741,  741,  741,  741,
     1747, 1747,  741,  741, 1747, 1747,  741,  741,  741, 1747,

      741, 1747, 1747,  741,  419, 1747, 1747,  419,  419, 1747,
      419, 1747, 1747,  419,  419, 1747, 1747,  419,  419,  419,
     1747, 1747,  419,  419,  419,  419,  419,  771, 1747,  771,
     1747, 1747, 1747,  771, 1747,  771,  771,  822, 1747,  822,
     1747, 1747,  822,  822,  822,  822, 1747,  822,  822, 1747,
      822,  822,  822,  822,  822,  822,  815, 1747,  815, 1747,
     1747,  815,  815, 1747, 1747, 1747,  815,  815, 1747, 1747,
      815,  815,  815,  815,  815,  524, 1747,  524, 1747, 1747,
      524,  524, 1747,  524, 1747,  524,  524, 1747,  524,  524,
     1747,  524,  524,  524, 1077, 1747, 1077, 1747, 1747, 1077,

     1077, 1747, 1077, 1747, 1077, 1077, 1747, 1077, 1077, 1077,
     1077, 1077, 1077,  777, 1747,  777, 1747, 1747,  777,  777,
     1747,  777, 1747,  777,  777, 1747,  777,  777,  777,  777,
      777,  777,  785, 1747,  785, 1747, 1747,  785,  785, 1747,
      785, 1747,  785,  785, 1747,  785,  785,  785,  785,  785,
      785,  793, 1747,  793, 1747, 1747,  793,  793, 1747, 1747,
     1747,  793,  793, 1747, 1747,  793,  793,  793,  793,  793,
     1089, 1747, 1089, 1747, 1747, 1089, 1089, 1747, 1747, 1747,
     1089, 1747, 1747, 1747, 1089, 1089, 1089, 1089, 1089,  799,
     1747,  799, 1747, 1747,  799,  799, 1747, 1747, 1747,  799,

     1747, 1747, 1747,  799,  799,  799,  799,  799,  806, 1747,
      806, 1747, 1747,  806,  806, 1747,  806, 1747,  806,  806,
     1747,  806,  806,  806,  806,  806,  806, 1101, 1747, 1101,
     1747, 1747, 1101, 1101, 1747, 1747, 1747, 1101, 1747, 1747,
     1747, 1101, 1101, 1101, 1101, 1101, 1107, 1747, 1107, 1747,
     1747, 1107, 1107, 1747, 1747, 1747, 1107, 1747, 1747, 1747,
     1107, 1107, 1107, 1107, 1107, 1113, 1747, 1113, 1747, 1747,
     1113, 1113, 1747, 1747, 1747, 1113, 1747, 1747, 1747, 1113,
     1113, 1113, 1113, 1113,  830, 1747,  830, 1747, 1747,  830,
      830, 1747, 1747, 1747,  830, 1747, 1747, 1747,  830,  830,

      830,  830,  830, 1121, 1747, 1121, 1747, 1747, 1121, 1121,
     1747, 1747, 1747, 1121, 1121, 1747, 1747, 1121, 1121, 1121,
     1121, 1121, 1135, 1747, 1135, 1747, 1747, 1135, 1135, 1747,
     1135, 1747, 1135, 1135, 1747, 1135, 1135, 1135, 1135, 1135,
     1135,  491, 1747,  491, 1747, 1747,  491,  491, 1747,  491,
     1747,  491,  491, 1747,  491,  491,  491,  491,  491,  491,
     1144, 1747, 1144, 1747, 1747, 1144, 1144, 1747, 1144, 1747,
     1144, 1144, 1747, 1144, 1144, 1144, 1144, 1144, 1144, 1151,
     1747, 1151, 1747, 1747, 1151, 1151, 1747, 1151, 1747, 1151,
     1151, 1747, 1151, 1151, 1151, 1151, 1151, 1151, 1157, 1747,

     1157, 1747, 1747, 1157, 1157, 1747, 1747, 1747, 1157, 1157,
     1747, 1747, 1157, 1747, 1157, 1157, 1157,  857, 1747,  857,
     1747, 1747,  857,  857, 1747, 1747, 1747,  857, 1747, 1747,
     1747,  857,  857,  857,  857,  857,  866, 1747,  866, 1747,
     1747,  866,  866, 1747,  866, 1747,  866,  866, 1747,  866,
      866,  866,  866,  866,  866,  926, 1747,  926, 1747, 1747,
      926,  926,  926,  926,  926,  926,  926, 1747,  926,  926,
      926,  926,  926,  926,  919, 1747,  919, 1747, 1747,  919,
      919, 1747, 1747,  919,  919,  919, 1747, 1747,  919,  919,
      919,  919,  919,  606, 1747,  606, 1747, 1747,  606,  606,

     1747,  606,  606,  606,  606, 1747,  606,  606, 1747,  606,
      606,  606, 1175, 1747, 1175, 1747, 1747, 1175, 1175, 1747,
     1175, 1175, 1175, 1175, 1747, 1175, 1175, 1175, 1175, 1175,
     1175,  881, 1747,  881, 1747, 1747,  881,  881, 1747,  881,
      881,  881,  881, 1747,  881,  881,  881,  881,  881,  881,
      889, 1747,  889, 1747, 1747,  889,  889, 1747,  889,  889,
      889,  889, 1747,  889,  889,  889,  889,  889,  889,  897,
     1747,  897, 1747, 1747,  897,  897, 1747, 1747,  897,  897,
      897, 1747, 1747,  897,  897,  897,  897,  897, 1187, 1747,
     1187, 1747, 1747, 1187, 1187, 1747, 1747, 1187, 1187, 1747,

     1747, 1747, 1187, 1187, 1187, 1187, 1187,  903, 1747,  903,
     1747, 1747,  903,  903, 1747, 1747,  903,  903, 1747, 1747,
     1747,  903,  903,  903,  903,  903,  910, 1747,  910, 1747,
     1747,  910,  910, 1747,  910,  910,  910,  910, 1747,  910,
      910,  910,  910,  910,  910, 1199, 1747, 1199, 1747, 1747,
     1199, 1199, 1747, 1747, 1199, 1199, 1747, 1747, 1747, 1199,
     1199, 1199, 1199, 1199, 1205, 1747, 1205, 1747, 1747, 1205,
     1205, 1747, 1747, 1205, 1205, 1747, 1747, 1747, 1205, 1205,
     1205, 1205, 1205, 1211, 1747, 1211, 1747, 1747, 1211, 1211,
     1747, 1747, 1211, 1211, 1747, 1747, 1747, 1211, 1211, 1211,

     1211, 1211,  934, 1747,  934, 1747, 1747,  934,  934, 1747,
     1747,  934,  934, 1747, 1747, 1747,  934,  934,  934,  934,
      934, 1219, 1747, 1219, 1747, 1747, 1219, 1219, 1747, 1747,
     1219, 1219, 1219, 1747, 1747, 1219, 1219, 1219, 1219, 1219,
     1233, 1747, 1233, 1747, 1747, 1233, 1233, 1747, 1233, 1233,
     1233, 1233, 1747, 1233, 1233, 1233, 1233, 1233, 1233,  575,
     1747,  575, 1747, 1747,  575,  575, 1747,  575,  575,  575,
      575, 1747,  575,  575,  575,  575,  575,  575, 1242, 1747,
     1242, 1747, 1747, 1242, 1242, 1747, 1242, 1242, 1242, 1242,
     1747, 1242, 1242, 1242, 1242, 1242, 1242, 1249, 1747, 1249,

     1747, 1747, 1249, 1249, 1747, 1249, 1249, 1249, 1249, 1747,
     1249, 1249, 1249, 1249, 1249, 1249, 1255, 1747, 1255, 1747,
     1747, 1255, 1255, 1747, 1747, 1255, 1255, 1255, 1747, 1747,
     1255, 1747, 1255, 1255, 1255,  961, 1747,  961, 1747, 1747,
      961,  961, 1747, 1747,  961,  961, 1747, 1747, 1747,  961,
      961,  961,  961,  961,  970, 1747,  970, 1747, 1747,  970,
      970, 1747,  970,  970,  970,  970, 1747,  970,  970,  970,
      970,  970,  970,  695, 1747, 1747,  695, 1747, 1747, 1747,
      695, 1747,  695,  695,  382, 1747, 1747, 1747, 1747,  382,
     1747,  382,  382, 1747, 1747,  382, 1747,  382,  382,  382,

     1747,  382,  382,  382, 1747,  382,  382,  382,  471, 1747,
     1747, 1747,  471, 1747,  471,  471, 1045, 1045, 1045, 1045,
     1045, 1747, 1045, 1045, 1045, 1045, 1747, 1747, 1045, 1045,
     1747, 1747, 1045, 1045, 1045, 1747, 1045, 1747, 1045, 1045,
     1054, 1054, 1054, 1054, 1054, 1747, 1054, 1054, 1054, 1054,
     1747, 1747, 1054, 1054, 1747, 1747, 1054, 1054, 1054, 1747,
     1054, 1054, 1747, 1054,  419, 1747,  419, 1747, 1747,  419,
      419, 1747, 1747,  419,  419,  419, 1747, 1747,  419,  419,
      419,  419,  419,  524, 1747,  524, 1747, 1747,  524,  524,
     1747, 1747, 1747,  524,  524, 1747,  524,  524, 1747,  524,

      524,  524,  822, 1747,  822, 1747, 1747,  822,  822, 1747,
      822, 1747,  822,  822, 1747,  822,  822,  822,  822,  822,
      822, 1077, 1747, 1077, 1747, 1747, 1077, 1077, 1747, 1077,
     1747, 1077, 1077, 1747, 1077, 1077, 1077, 1077, 1077, 1077,
     1089, 1747, 1089, 1747, 1747, 1089, 1089, 1747, 1747, 1747,
     1089, 1747, 1747, 1747, 1089, 1089, 1089, 1089, 1089, 1101,
     1747, 1101, 1747, 1747, 1101, 1101, 1747, 1747, 1747, 1101,
     1747, 1747, 1747, 1101, 1101, 1101, 1101, 1101, 1107, 1747,
     1107, 1747, 1747, 1107, 1107, 1747, 1747, 1747, 1107, 1747,
     1747, 1747, 1107, 1107, 1107, 1107, 1107,  815, 1747,  815,

     1747, 1747,  815,  815, 1747, 1747, 1747,  815,  815, 1747,
     1747,  815,  815,  815,  815,  815, 1113, 1747, 1113, 1747,
     1747, 1113, 1113, 1747, 1747, 1747, 1113, 1747, 1747, 1747,
     1113, 1113, 1113, 1113, 1113, 1121, 1747, 1121, 1747, 1747,
     1121, 1121, 1747, 1747, 1747, 1121, 1121, 1747, 1747, 1121,
     1121, 1121, 1121, 1121, 1135, 1747, 1135, 1747, 1747, 1135,
     1135, 1747, 1135, 1747, 1135, 1135, 1747, 1135, 1135, 1135,
     1135, 1135, 1135, 1375, 1747, 1375, 1747, 1747, 1375, 1375,
     1747, 1375, 1747, 1375, 1375, 1747, 1375, 1375, 1375, 1375,
     1375, 1375, 1383, 1747, 1383, 1747, 1747, 1383, 1383, 1747,

     1383, 1747, 1383, 1383, 1747, 1383, 1383, 1383, 1383, 1383,
     1383, 1144, 1747, 1144, 1747, 1747, 1144, 1144, 1747, 1144,
     1747, 1144, 1144, 1747, 1144, 1144, 1144, 1144, 1144, 1144,
     1390, 1747, 1390, 1747, 1747, 1390, 1390, 1747, 1390, 1747,
     1390, 1390, 1747, 1390, 1390, 1390, 1390, 1390, 1390, 1398,
     1747, 1398, 1747, 1747, 1398, 1398, 1747, 1398, 1747, 1398,
     1398, 1747, 1398, 1398, 1398, 1398, 1398, 1398, 1151, 1747,
     1151, 1747, 1747, 1151, 1151, 1747, 1151, 1747, 1151, 1151,
     1747, 1151, 1151, 1151, 1151, 1151, 1151, 1406, 1747, 1406,
     1747, 1747, 1406, 1406, 1747, 1747, 1747, 1406, 1406, 1747,

     1747, 1406, 1406, 1406, 1406, 1406, 1412, 1747, 1412, 1747,
     1747, 1412, 1412, 1747, 1747, 1747, 1412, 1747, 1747, 1747,
     1412, 1412, 1412, 1412, 1412,  606, 1747,  606, 1747, 1747,
      606,  606, 1747, 1747,  606,  606,  606, 1747,  606,  606,
     1747,  606,  606,  606,  926, 1747,  926, 1747, 1747,  926,
      926, 1747,  926,  926,  926,  926, 1747,  926,  926,  926,
      926,  926,  926, 1175, 1747, 1175, 1747, 1747, 1175, 1175,
     1747, 1175, 1175, 1175, 1175, 1747, 1175, 1175, 1175, 1175,
     1175, 1175, 1187, 1747, 1187, 1747, 1747, 1187, 1187, 1747,
     1747, 1187, 1187, 1747, 1747, 1747, 1187, 1187, 1187, 1187,

     1187, 1199, 1747, 1199, 1747, 1747, 1199, 1199, 1747, 1747,
     1199, 1199, 1747, 1747, 1747, 1199, 1199, 1199, 1199, 1199,
     1205, 1747, 1205, 1747, 1747, 1205, 1205, 1747, 1747, 1205,
     1205, 1747, 1747, 1747, 1205, 1205, 1205, 1205, 1205,  919,
     1747,  919, 1747, 1747,  919,  919, 1747, 1747,  919,  919,
      919, 1747, 1747,  919,  919,  919,  919,  919, 1211, 1747,
     1211, 1747, 1747, 1211, 1211, 1747, 1747, 1211, 1211, 1747,
     1747, 1747, 1211, 1211, 1211, 1211, 1211, 1219, 1747, 1219,
     1747, 1747, 1219, 1219, 1747, 1747, 1219, 1219, 1219, 1747,
     1747, 1219, 1219, 1219, 1219, 1219, 1233, 1747, 1233, 1747,

     1747, 1233, 1233, 1747, 1233, 1233, 1233, 1233, 1747, 1233,
     1233, 1233, 1233, 1233, 1233, 1451, 1747, 1451, 1747, 1747,
     1451, 1451, 1747, 1451, 1451, 1451, 1451, 1747, 1451, 1451,
     1451, 1451, 1451, 1451, 1459, 1747, 1459, 1747, 1747, 1459,
     1459, 1747, 1459, 1459, 1459, 1459, 1747, 1459, 1459, 1459,
     1459, 1459, 1459, 1242, 1747, 1242, 1747, 1747, 1242, 1242,
     1747, 1242, 1242, 1242, 1242, 1747, 1242, 1242, 1242, 1242,
     1242, 1242, 1466, 1747, 1466, 1747, 1747, 1466, 1466, 1747,
     1466, 1466, 1466, 1466, 1747, 1466, 1466, 1466, 1466, 1466,
     1466, 1474, 1747, 1474, 1747, 1747, 1474, 1474, 1747, 1474,

     1474, 1474, 1474, 1747, 1474, 1474, 1474, 1474, 1474, 1474,
     1249, 1747, 1249, 1747, 1747, 1249, 1249, 1747, 1249, 1249,
     1249, 1249, 1747, 1249, 1249, 1249, 1249, 1249, 1249, 1482,
     1747, 1482, 1747, 1747, 1482, 1482, 1747, 1747, 1482, 1482,
     1482, 1747, 1747, 1482, 1482, 1482, 1482, 1482, 1488, 1747,
     1488, 1747, 1747, 1488, 1488, 1747, 1747, 1488, 1488, 1747,
     1747, 1747, 1488, 1488, 1488, 1488, 1488,  382,  382,  382,
     1747,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  471,  471, 1747,  471, 1747, 1747, 1747,  471, 1747,

      471,  471, 1302, 1302, 1302, 1302, 1302, 1747, 1302, 1302,
     1302, 1302, 1747, 1747, 1302, 1302, 1747, 1747, 1302, 1302,
     1302, 1747, 1302, 1302, 1747, 1302, 1310, 1310, 1310, 1310,
     1310, 1747, 1310, 1310, 1310, 1310, 1747, 1747, 1310, 1310,
     1747, 1747, 1310, 1310, 1310, 1747, 1310, 1747, 1747, 1310,
     1322, 1322, 1322, 1322, 1322, 1747, 1322, 1322, 1322, 1322,
     1747, 1747, 1322, 1322, 1747, 1747, 1322, 1322, 1322, 1747,
     1322, 1747, 1747, 1322, 1335, 1335, 1335, 1335, 1335, 1747,
     1335, 1335, 1335, 1335, 1747, 1747, 1335, 1335, 1747, 1747,
     1335, 1335, 1335, 1747, 1335, 1747, 1747, 1335,  419,  419,

      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  822, 1747,  822, 1747, 1747,  822,  822,  822,
      822, 1747,  822,  822, 1747,  822,  822,  822,  822,  822,
      822,  815, 1747,  815, 1747, 1747,  815,  815, 1747, 1747,
     1747,  815,  815, 1747, 1747,  815,  815,  815,  815,  815,
     1560, 1747, 1560, 1747, 1747, 1560, 1560, 1747, 1560, 1747,
     1560, 1560, 1747, 1560, 1560, 1560, 1560, 1560, 1560, 1375,
     1747, 1375, 1747, 1747, 1375, 1375, 1747, 1375, 1747, 1375,
     1375, 1747, 1375, 1375, 1375, 1375, 1375, 1375, 1569, 1747,

     1569, 1747, 1747, 1569, 1569, 1747, 1569, 1747, 1569, 1569,
     1747, 1569, 1569, 1569, 1569, 1569, 1569, 1383, 1747, 1383,
     1747, 1747, 1383, 1383, 1747, 1383, 1747, 1383, 1383, 1747,
     1383, 1383, 1383, 1383, 1383, 1383, 1577, 1747, 1577, 1747,
     1747, 1577, 1577, 1747, 1577, 1747, 1577, 1577, 1747, 1577,
     1577, 1577, 1577, 1577, 1577, 1390, 1747, 1390, 1747, 1747,
     1390, 1390, 1747, 1390, 1747, 1390, 1390, 1747, 1390, 1390,
     1390, 1390, 1390, 1390, 1398, 1747, 1398, 1747, 1747, 1398,
     1398, 1747, 1398, 1747, 1398, 1398, 1747, 1398, 1398, 1398,
     1398, 1398, 1398, 1406, 1747, 1406, 1747, 1747, 1406, 1406,

     1747, 1747, 1747, 1406, 1406, 1747, 1747, 1406, 1406, 1406,
     1406, 1406, 1589, 1747, 1589, 1747, 1747, 1589, 1589, 1747,
     1747, 1747, 1589, 1747, 1747, 1747, 1589, 1589, 1589, 1589,
     1589, 1412, 1747, 1412, 1747, 1747, 1412, 1412, 1747, 1747,
     1747, 1412, 1747, 1747, 1747, 1412, 1412, 1412, 1412, 1412,
      926, 1747,  926, 1747, 1747,  926,  926,  926,  926,  926,
      926,  926, 1747,  926,  926,  926,  926,  926,  926,  919,
     1747,  919, 1747, 1747,  919,  919, 1747, 1747,  919,  919,
      919, 1747, 1747,  919,  919,  919,  919,  919, 1606, 1747,
     1606, 1747, 1747, 1606, 1606, 1747, 1606, 1606, 1606, 1606,

     1747, 1606, 1606, 1606, 1606, 1606, 1606, 1451, 1747, 1451,
     1747, 1747, 1451, 1451, 1747, 1451, 1451, 1451, 1451, 1747,
     1451, 1451, 1451, 1451, 1451, 1451, 1615, 1747, 1615, 1747,
     1747, 1615, 1615, 1747, 1615, 1615, 1615, 1615, 1747, 1615,
     1615, 1615, 1615, 1615, 1615, 1459, 1747, 1459, 1747, 1747,
     1459, 1459, 1747, 1459, 1459, 1459, 1459, 1747, 1459, 1459,
     1459, 1459, 1459, 1459, 1623, 1747, 1623, 1747, 1747, 1623,
     1623, 1747, 1623, 1623, 1623, 1623, 1747, 1623, 1623, 1623,
     1623, 1623, 1623, 1466, 1747, 1466, 1747, 1747, 1466, 1466,
     1747, 1466, 1466, 1466, 1466, 1747, 1466, 1466, 1466, 1466,

     1466, 1466, 1474, 1747, 1474, 1747, 1747, 1474, 1474, 1747,
     1474, 1474, 1474, 1474, 1747, 1474, 1474, 1474, 1474, 1474,
     1474, 1482, 1747, 1482, 1747, 1747, 1482, 1482, 1747, 1747,
     1482, 1482, 1482, 1747, 1747, 1482, 1482, 1482, 1482, 1482,
     1635, 1747, 1635, 1747, 1747, 1635, 1635, 1747, 1747, 1635,
     1635, 1747, 1747, 1747, 1635, 1635, 1635, 1635, 1635, 1488,
     1747, 1488, 1747, 1747, 1488, 1488, 1747, 1747, 1488, 1488,
     1747, 1747, 1747, 1488, 1488, 1488, 1488, 1488, 1516, 1516,
     1516, 1516, 1516, 1747, 1516, 1516, 1516, 1516, 1747, 1747,
     1516, 1516, 1747, 1747, 1516, 1516, 1516, 1747, 1516, 1747,

     1747, 1516, 1524, 1524, 1524, 1524, 1524, 1747, 1524, 1524,
     1524, 1524, 1747, 1747, 1524, 1524, 1747, 1747, 1524, 1524,
     1524, 1747, 1524, 1747, 1747, 1524, 1545, 1545, 1545, 1545,
     1545, 1747, 1545, 1545, 1545, 1545, 1747, 1747, 1545, 1545,
     1747, 1747, 1545, 1545, 1545, 1747, 1545, 1747, 1747, 1545,
      419, 1747,  419, 1747, 1747,  419,  419, 1747, 1747,  419,
      419,  419, 1747, 1747,  419,  419,  419,  419,  419,  471,
     1747,  471, 1747, 1747, 1747,  471, 1747,  471,  471,  822,
     1747,  822, 1747, 1747,  822,  822, 1747,  822, 1747,  822,
      822, 1747,  822,  822,  822,  822,  822,  822, 1560, 1747,

     1560, 1747, 1747, 1560, 1560, 1747, 1560, 1747, 1560, 1560,
     1747, 1560, 1560, 1560, 1560, 1560, 1560, 1569, 1747, 1569,
     1747, 1747, 1569, 1569, 1747, 1569, 1747, 1569, 1569, 1747,
     1569, 1569, 1569, 1569, 1569, 1569, 1577, 1747, 1577, 1747,
     1747, 1577, 1577, 1747, 1577, 1747, 1577, 1577, 1747, 1577,
     1577, 1577, 1577, 1577, 1577, 1589, 1747, 1589, 1747, 1747,
     1589, 1589, 1747, 1747, 1747, 1589, 1747, 1747, 1747, 1589,
     1589, 1589, 1589, 1589,  926, 1747,  926, 1747, 1747,  926,
      926, 1747,  926,  926,  926,  926, 1747,  926,  926,  926,
      926,  926,  926, 1606, 1747, 1606, 1747, 1747, 1606, 1606,

     1747, 1606, 1606, 1606, 1606, 1747, 1606, 1606, 1606, 1606,
     1606, 1606, 1615, 1747, 1615, 1747, 1747, 1615, 1615, 1747,
     1615, 1615, 1615, 1615, 1747, 1615, 1615, 1615, 1615, 1615,
     1615, 1623, 1747, 1623, 1747, 1747, 1623, 1623, 1747, 1623,
     1623, 1623, 1623, 1747, 1623, 1623, 1623, 1623, 1623, 1623,
     1654, 1654, 1654, 1654, 1654, 1747, 1654, 1654, 1654, 1654,
     1747, 1747, 1654, 1654, 1747, 1747, 1654, 1654, 1654, 1747,
     1654, 1747, 1747, 1654, 1661, 1661, 1661, 1661, 1661, 1747,
     1661, 1661, 1661, 1661, 1747, 1747, 1661, 1661, 1747, 1747,
     1661, 1661, 1661, 1747, 1661, 1747, 1747, 1661, 1668, 1668,

     1668, 1668, 1668, 1747, 1668, 1668, 1668, 1668, 1747, 1747,
     1668, 1668, 1747, 1747, 1668, 1668, 1668, 1747, 1668, 1747,
     1747, 1668, 1675, 1675, 1675, 1675, 1675, 1747, 1675, 1675,
     1675, 1675, 1747, 1747, 1675, 1675, 1747, 1747, 1675, 1675,
     1675, 1747, 1675, 1747, 1747, 1675, 1681, 1681, 1681, 1681,
     1681, 1747, 1681, 1681, 1681, 1681, 1747, 1747, 1681, 1681,
     1747, 1747, 1681, 1681, 1681, 1747, 1681, 1747, 1747, 1681,
     1721, 1721, 1721, 1721, 1721, 1747, 1721, 1721, 1721, 1721,
     1747, 1747, 1721, 1721, 1747, 1747, 1721, 1721, 1721, 1747,
     1721, 1747, 1747, 1721, 1729, 1729, 1729, 1729, 1729, 1747,

     1729, 1729, 1729, 1729, 1747, 1747, 1729, 1729, 1747, 1747,
     1729, 1729, 1729, 1747, 1729, 1747, 1747, 1729,   33, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747

    } ;

static const flex_int16_t yy_chk[13295] =
    {   0,
        0,    0,    1,    1,    1,    2,    2,    2,   11,   11,
       12,   12,   38,   42,  145,   38,   42,  145,   38,   42,
       57,    0,   57,   38,   42,   44,    1,    0,   44,    2,
       73,   73,   73,   73,   38,   42,  398,   44,   52,   44,
       44,   52,   44,   44,   44,   44,   51,    0,   51,   51,
       51,   51,   77,   77,  398,   52,   52,   52,   52,  121,
      121,  121,   52,  138,  138,  196,   77,  196,   77,   77,
       77,   77,    1,    1,    1,    2,    2,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    9,    9,    9,    9,   34,   34,   34,
        9,  436,    9,    9,    9,    9,  436,    9,    9,    9,
       39, 1349,   39,   39,   39, 1350,   40,    9,   40,   40,
       40,   41,  709,   41,   41,   41,  134,  134,  134,  134,
      709,    9,    9,    9,   95,  151,  108,   95,  151,  108,
     1351,   13,   13,   13,   13, 1352,   13,   14,   14,   14,
       14, 1353,   14,   21,   21,   21,   21,  139,   21,    9,
      139,    9,    9,    9,    9,    9,    9,   10,   10,   10,
       10,   90,   90,   95,   10,  108,   10,   10,   10,   10,
       13,   10,   10,   10,  190,   90,   14,   90,   90,   90,

       90,   10,   21,   54, 1354,   54,  139,   54,   54,   54,
       54,  143,  143,  183,  183,   10,   10,   10, 1355,   54,
       13,   13,   13,   13,   13, 1356,   14,   14,   14,   14,
       14,  190,   21,   21,   21,   21,   21,   54,  155,  155,
      155,  155,  228,   10,  228,   10,   10,   10,   10,   10,
       10,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   17,   17,   17,   17,
      135,  222, 1357,  135,  222,   22,   22,   22,   22, 1358,
       22,   29,   29,  329,  329,   29,   30,   30,  344,  344,
       30,   17,   67, 1359,  135,   67,  142,  142,  233,  332,
      132,  233,  332,  132,   67,   17,   67,   67,   17,   67,
       67,   67,   67,   82,   22,  132,   82,  376,  376,   29,
      142,  170,  170,  170,   30,   82,  347,   82,   82,  347,
       82,   82,   82,   82, 1360,   17,   17,   17,   17,   17,

       18,   18,   18,   18,   22,   22,   22,   22,   22,   29,
       29,   29,   29,   29,   30,   30,   30,   30,   30,  157,
      157,  157,  157,  401,  401,   18,   86,   48,  328,   86,
      136,  328,  136,   48,  136,  136,  136,  136,   48,   18,
       68,   86,   18,   86,   86,   86,   86,  403,  403,   68,
       86,  179,  179,  179,  171,   68,  171,  171,  171,   68,
      367,   48, 1365,  367,   48,  158,   48,  328,  432,   18,
       18,   18,   18,   18,   19,   68, 1366,   19,   48,  158,
       19,  432,   19,   19,  367,   48,   19,   19,   19,   19,
       19,   19,   19,   19,   19, 1367,   74,  158,   74,   19,

       74,   74,   74,   74, 1368,   68,   68,   68,  219,  219,
      219,  219,   74,   19,   75,   19,   23,   23,   23,   23,
       87, 1369,   87,   75,   87,   87,   87,   87, 1370,   75,
       74,   76,  198,   75,  413,  413,   87,   76,   83,   76,
     1371,   23,   76,   76,   76,   76,   76,   83,  172,   75,
      172,  172,  172,   83,   87,   23, 1378,   83,   23,   88,
      173,  414,  173,  173,  173,  414,  414,  180,   88,  180,
      180,  180, 1379,   83,   88,  273,  273,  273,   88,   75,
       75,   75,  198,  198,  198,   23,   23,   23,   23,   23,
       24,   24,   24,   24,   88, 1380,   76,   76,   76,  369,

      133,  369, 1381,   83,   83,   83,  133, 1382,   89,  234,
      234,  133,  234,  693,   89,   24,   89,  693,  693,   89,
       89,   89,   89,   89,   88,   88,   88,  203, 1386,   24,
      285,  285,   24,  285,  133,  705,  705,  133,  159,  133,
      159,  159,  159,  159, 1387,  181,  167,  181,  181,  181,
     1388,  133,  159,  203,  200,  978,  978,  167,  133,   24,
       24,   24,   24,   24,   25,   25,   25,   25,  333,  333,
      159,  333,   25,   89,   89,   89, 1393,  203,  203,  203,
      167,   25,   25,   25,   25,  167,  200, 1394,  200,  167,
       25,   25,   25,   25,  348,  348,  167,  348, 1395,  167,

      186,  167,  167,  186,  200,  200,  200,   25,   25,   25,
       25,   25,   25,   26,   26,   26,   26,  186,  186,  186,
      186,   26,  378,  176,  186,  378,  176,  979,  979,  176,
       26,   26,   26,   26,  176,  220,  220,  220,  220,   26,
       26,   26,   26, 1396,  182,  176,  201,  182, 1397,  185,
      182,  185,  185,  185,  185,  182,   26,   26,   26,   26,
       26,   26,   27,   27,   27,   27,  182,   27,   27,  214,
     1401,   27,   27,   27,  184,   27,   27,  184,  201,   27,
       27,   27,   27,   27,  343, 1402,  184,  343,  184,  184,
     1403,  184,  184,  184,  184,  194,  201,  201,  201,  194,

       27,  194,   27,   27,  194,  194,  214, 1404, 1405,  187,
       27,  187,  207,  187,  187,  187,  187,   27, 1409,  214,
      214,  214,   27,  343,  205,  187,  423,   27,  423,   27,
       27,   28,   28,   28,   28, 1410,   28,   28,  210,  207,
       28,   28,   28,  187,   28,   28, 1411, 1413,   28,   28,
       28,   28,   28,  195,  205,  195, 1414, 1415,  195,  195,
      195,  225,  207,  207,  207,  225,  225,  225,  225,   28,
     1416,   28,   28,  210,  205,  205,  205, 1417, 1418,   28,
      231,  231,  231,  231,  379,  379,   28,  379,  210,  210,
      210,   28,  236,  236,  236, 1419,   28,  236,   28,   28,

       49, 1420,  380,   49,   49,  380, 1423,   49,  313,  313,
      313,   49,   49, 1424,   49,  212,   49,   49,   49,   49,
       49,   49,  383,   49,   49,  383,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,  650,   49,
      650,  212, 1425,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,  212,  212,  212,   49,  360,
     1426,   49,   49,   49,   59,   59,   59, 1427,  221, 1428,
      221,  360,  221,  221,  221,  221,  425,  319,  360,  202,
       59,   59,   59,  425,  221,  357,  357,  357,  223,  425,

      223, 1429,  223,  223,  223,  223,  243,  243,  243,  243,
      319,  202,  221,  243,  223, 1430,   59,   59,  202, 1431,
       59,   59,  319,  366,  202, 1432,  366,  204,   59,  319,
      386,   59,  223,   59,  206,   59,   59,   69,  366,  202,
      202,  202,  375,   69,  386,  375, 1433,  208,   69,   69,
       69,   69,   69,   69,   69,  404,  206, 1434,  404,  204,
      204,  204,  386,   69,   69,   69,   69,   69,   69,  208,
      434,   69,  481,  434,   69,  481,   69,  204,  204,  204,
      656,  375,  209,  656,  206,  206,  206,  211,   69,  400,
      213,  400,  400,  400,  215,   69,   71,  208,  208,  208,

      247,  247,  247,  247,  209,   71, 1435,   71,   71,   71,
       71,   71,  415,  415,  415,   71,  662,  209, 1436,  662,
      213,  336,  336,  336,  211,  213,  336,  211,  215, 1441,
      419,   71,  209,  209,  209, 1442,  249,  211,  211,  211,
      213,  213,  213,  416,  215,  215,  215,  416,  416,  416,
      227,  249,  227, 1443,  227,  227,  227,  227,  427,  427,
      427,   71,   71,   71,   85,  242,  227,  242,  242,  242,
      242,  655,  655,   85,  655,   85,   85,   85,   85,   85,
      419,  419,  419,   85,  227,  229,  229,  229,  229, 1444,
      229,  229,  229,  229,  241,  661,  661,  241,  661,   85,

     1445,  249,  249,  249,  254, 1446,  241,  677,  241,  241,
      677,  241,  241,  241,  241,  254,  254,  254,  254, 1447,
     1454,  254,  263,  263,  263,  263,  507,  507,  507,   85,
       85,   85,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  112,  112,  112,
     1455,  112, 1456,  244,  112,  244, 1457,  244,  244,  244,
      244,  245, 1458,  112,  112,  112, 1462,  267, 1463,  244,
      245,  267,  267,  267,  267,  692,  245,  692,  692,  290,
      245,  290,  290,  290,  290,  112, 1464,  244,  112,  112,
      112, 1469,  712,  112,  112,  712,  245,  295,  295,  295,
      295,  112,  297, 1470,  112, 1471,  112, 1472,  112,  112,
      122,  122,  122,  122, 1473, 1477,  246,  297, 1478,  122,
      122,  122,  122, 1479, 1480,  246,  245,  245,  245, 1481,
     1485,  246,  529,  529,  529,  246,  122,  122,  122,  122,

      122,  122,  129,  439,  129,  129, 1486, 1487,  129,  129,
      129,  246, 1489,  129,  129,  129,  129,  248,  539,  539,
      539,  129,  303,  303,  303,  303,  248,  297,  297,  297,
      250, 1490,  248, 1491,  129,  439,  248,  129, 1492,  250,
     1493,  246,  246,  246, 1494,  250,  350,  350,  350,  250,
     1495,  350,  248,  439,  439,  439,  289,  676,  676,  289,
      676,  129,  130,  130,  130,  250,  130, 1496,  289,  130,
      289,  289, 1499,  289,  289,  289,  289, 1503,  130,  130,
      130, 1504,  248,  248,  248,  307,  130, 1505, 1507,  307,
      307,  307,  307, 1509,  694,  250,  250,  250,  694,  694,

      130, 1511,  996,  130,  130,  130,  996,  996,  130,  130,
      362,  362,  362,  362, 1512,  768,  130,  768,  768,  130,
     1513,  130, 1514,  130,  130,  199,  199,  199,  199,  199,
      199,  199, 1519,  199, 1520,  199,  199,  199,  199, 1521,
      199,  199,  199,  199,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
     1527,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  255,
      363,  363,  363,  363,  270,  270,  270,  270,  255,  270,
      270,  270,  270, 1528,  255,  482,  482,  482,  255, 1529,
      482,  270,  271,  368, 1548,  368, 1549,  272,  368,  368,
      368,  271, 1550,  440,  255, 1552,  272,  271, 1553,  270,
      274,  271,  272,  549,  549,  549,  272, 1554, 1555,  274,
      554,  554,  554,  291, 1557,  274,  291,  271,  440,  274,
     1558, 1563,  272, 1564,  255,  255,  255,  264,  291, 1565,
      291,  291,  291,  291,  264,  274,  264,  291,  264,  264,

      264,  264,  264,  440,  440,  440,  264,  271,  271,  271,
      264, 1566,  272,  272,  272,  278,  372,  372,  372,  372,
     1567,  441,  264,  286,  278,  274,  274,  274,  264, 1568,
      278, 1572,  286, 1573,  278,  591,  591,  591,  286, 1574,
     1575,  292,  286,  292, 1576,  292,  292,  292,  292, 1580,
      278, 1581,  264,  264,  264,  266,  441,  292,  286,  611,
      611,  611,  266, 1582,  266, 1583,  266,  266,  266,  266,
      266,  441,  441,  441,  266,  292, 1584, 1585,  266,  371,
      278,  278,  278,  371,  371,  371,  371, 1586,  286,  286,
      286, 1587, 1588,  370, 1590,  370,  266,  370,  370,  370,

      370,  373,  385,  373, 1591,  373,  373,  373,  373,  388,
      388,  388,  388,  385,  385,  385,  385, 1592, 1593,  385,
      266,  266,  266,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268, 1594,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  280,  465,

      465,  465,  465, 1595, 1596,  293, 1597,  280, 1598,  280,
      280,  280,  280,  280,  293, 1599,  294,  280, 1600,  296,
      293,  621,  621,  621,  293,  294, 1601,  298,  296,  719,
     1603,  294,  719,  280,  296,  294,  298, 1604,  296,  719,
      293,  302,  298,  631,  631,  631,  298,  636,  636,  636,
      302,  294, 1609,  648,  296,  648,  302, 1610,  648,  648,
      302, 1611,  298,  280,  280,  280,  475,  475,  475,  475,
      293,  293,  293,  406, 1612,  442,  302,  406,  406,  406,
      406,  294,  294,  294,  296,  296,  296,  407,  407,  407,
      407, 1613,  298,  298,  298,  310,  310,  310,  310,  407,

      310,  310,  310,  310, 1614, 1618,  302,  302,  302,  304,
     1619, 1620,  310,  442,  442, 1621,  304,  407,  304, 1622,
      304,  304,  304,  304,  304,  442,  442,  442,  304,  443,
      310, 1626,  304,  389, 1627,  389,  311, 1628,  389,  389,
      389,  389, 1629,  312,  304,  311,  751,  448,  314,  751,
      304,  311,  312, 1630,  450,  311,  751,  314,  312,  668,
      668,  668,  312,  314,  443, 1631, 1632,  314,  657,  657,
      657,  311,  448,  657,  304,  304,  304,  306,  312,  443,
      443,  443,  452,  314,  306,  445,  306, 1633,  306,  306,
      306,  306,  306,  450, 1634, 1636,  306,  448,  448,  448,

      306,  311,  311,  311,  450,  450,  450, 1637,  312,  312,
      312, 1638,  445,  314,  314,  314, 1639,  409,  306,  409,
      452, 1640,  409,  409,  409,  409,  478,  478,  478,  478,
     1641, 1642,  452,  452,  452,  445,  445,  445,  480,  480,
      480,  480,  306,  306,  306,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308, 1643,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,

      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      318, 1344,  447, 1344, 1344,  325,  468, 1644, 1646,  318,
      468,  468,  468,  468,  325,  318,  663,  663,  663,  318,
      325,  663, 1648,  387,  325,  387,  387,  387,  387,  390,
     1650,  390,  390,  390,  390,  318, 1657,  387,  447, 1658,
      325,  444,  408,  390,  408, 1659,  408,  408,  408,  408,
     1664, 1665,  447,  447,  447,  387,  446, 1666,  408,  453,
     1671,  390,  449, 1672, 1673,  318,  318,  318,  320,  458,
      325,  325,  325,  444, 1678,  454,  408,  320,  457,  320,

      320,  320,  320,  320, 1679, 1000,  446,  320, 1000, 1680,
      455,  444,  444,  444,  446, 1000,  449, 1684, 1685,  449,
      454, 1686,  453,  320, 1689,  458,  446,  446,  446,  453,
      453,  453,  449,  449,  449, 1690, 1691,  457, 1692,  458,
      458,  458, 1693, 1694,  455,  454,  454,  454,  457,  457,
      457, 1695, 1696,  320,  320,  320,  358,  358,  358,  358,
      455,  455,  455,  459, 1697,  358,  358,  358,  358,  472,
      456,  472, 1698,  456,  472,  472,  472,  472, 1699, 1700,
      456, 1701,  358,  358,  358,  358,  358,  358,  418, 1702,
     1703,  456,  418,  418,  418,  418, 1704,  459,  687,  687,

      687,  418,  418,  418,  418,  649,  460,  649, 1705,  461,
      649,  649,  649,  459,  459,  459, 1706, 1707,  418,  418,
      418,  418,  418,  418,  451,  451,  451,  451,  451,  462,
      451,  451, 1708,  451,  451,  451, 1709, 1710,  451,  460,
      451,  456,  456,  456, 1711, 1712,  451,  451, 1713,  669,
      451, 1714,  461,  669,  669,  669,  460,  460,  460,  461,
      461,  461, 1715,  451, 1716,  451,  451,  451,  462,  477,
     1717,  477, 1724, 1725,  477,  477,  477,  477, 1726,  462,
      462,  462,  479, 1732,  479,  479,  479,  479, 1717, 1733,
      451,  451,  451, 1734,  451,  451,  451,  451,  451,  466,

      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466, 1735,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  467, 1736,  467, 1737,  467,  467,
      467,  467,  470, 1738,  470, 1739,  470,  470,  470,  470,
      467,  486,  486,  486,  486,  473, 1740,  473,  470,  473,

      473,  473,  473,  498,  498,  498,  498, 1741,  467, 1742,
     1348,  473, 1001,  487, 1347, 1001,  470,  487,  487,  487,
      487,  489, 1001,  489,  524,  489,  489,  489,  489,  473,
      488,  570,  570,  570,  570,  505, 1340,  489,  795,  795,
      795,  488,  488,  488,  488,  488, 1339,  491, 1338,  488,
      505, 1327,  490,  488,  490,  489,  491,  490,  490,  490,
      490, 1775,  491, 1326,  492, 1325,  491, 1775, 1315,  493,
      505,  488,  494,  492,  524,  524,  524, 1314,  493,  492,
     1796,  494,  491,  492,  493, 1313, 1796,  494,  493, 1308,
     1307,  494,  799,  799,  799,  488,  488,  488, 1306,  492,

      505,  505,  505, 1297,  493, 1797,  499,  494, 1295,  500,
     1294, 1797,  491,  491,  491,  499, 1011,  530,  500, 1011,
     1293,  499, 1291, 1290,  500,  499, 1011, 1288,  500,  492,
      492,  492,  530,  501,  493,  493,  493,  494,  494,  494,
      536,  499,  501, 1023,  500,  515, 1023, 1287,  501, 1286,
      516,  526,  501, 1023,  515,  526,  526,  526,  526,  516,
      515, 1804,  527, 1285,  515,  516, 1282, 1804,  501,  516,
      606,  499,  499,  499,  500,  500,  500,  527,  517, 1281,
      515,  527,  530,  530,  530,  516, 1280,  517, 1279, 1278,
      536,  536,  536,  517,  816,  816,  816,  517,  501,  501,

      501,  523,  523,  523,  523, 1277,  523,  523,  523,  523,
      515,  515,  515,  517, 1269,  516,  516,  516,  523,  571,
      606,  606,  606,  571,  571,  571,  571,  527,  527,  527,
     1268, 1267,  531,  618,  531, 1266,  523,  531,  531,  531,
      531,  531, 1265,  517,  517,  517,  521,  582,  582,  582,
      582, 1264,  540,  521, 1263,  521, 1262,  521,  521,  521,
      521,  521,  820,  820,  820,  521,  535,  540,  535,  521,
      535,  535,  535,  535,  545, 1261,  545, 1260,  545,  545,
      545,  545,  535,  618,  618,  618, 1025,  521, 1259, 1025,
      545,  531,  531,  531,  612, 1258, 1025,  541, 1256,  541,

      535,  547,  541,  541,  541,  541,  541, 1254,  545,  612,
      547,  521,  521,  521,  522, 1253,  547,  540,  540,  540,
      547,  522, 1252,  522, 1248,  522,  522,  522,  522,  522,
      825,  825,  825,  522, 1247,  815,  547,  522,  573, 1246,
      573, 1810,  573,  573,  573,  573,  608, 1810,  822,  522,
      608,  608,  608,  608,  573,  522,  541,  541,  541,  612,
      612,  612,  667,  667,  667,  667,  547,  547,  547,  548,
     1239, 1856,  573, 1027, 1238,  589, 1027, 1856,  548,  522,
      522,  522,  528, 1027,  548,  815,  815,  815,  548,  528,
      589,  528, 1237,  528,  528,  528,  528,  528,  822,  822,

      822,  528, 1227, 1225,  548,  528,  574, 1224,  574,  550,
      589,  574,  574,  574,  574, 1223,  823,  528,  550,  675,
      675,  675,  675,  528,  550,  673, 1222,  673,  550,  673,
      673,  673,  673, 1859,  548,  548,  548,  560, 1221, 1859,
      589,  589,  589, 1218,  550, 1860,  560,  528,  528,  528,
      538, 1860,  560, 1217, 1910,  622,  560,  538, 1216,  538,
     1910,  538,  538,  538,  538,  538,  823,  823,  823,  538,
      622, 1215,  560,  538,  550,  550,  550,  561,  681,  681,
      681,  681,  609,  696, 1214,  538,  561,  696,  696,  696,
      562,  538,  561,  830,  830,  830,  561,  609, 1213,  562,

     1212,  609,  560,  560,  560,  562,  857,  857,  857,  562,
     1862, 1208,  561, 1862, 1207,  538,  538,  538,  546, 1862,
      622,  622,  622, 1206, 1204,  562,  575,  546, 1203,  546,
      546,  546,  546,  546,  697,  575, 1202,  546,  697,  697,
      697,  575,  561,  561,  561,  575, 1201,  609,  609,  609,
      899,  899,  899,  546, 1200,  562,  562,  562,  613,  576,
      613,  575, 1198,  613,  613,  613,  613,  613,  576,  682,
      682,  682,  682, 1197,  576,  674, 1196,  674,  576,  674,
      674,  674,  674,  546,  546,  546,  566,  762,  762,  762,
      762,  575,  575,  575,  576,  566, 1195,  566,  566,  566,

      566,  566,  763, 1194,  763,  566,  763,  763,  763,  763,
      903,  903,  903,  577,  920,  920,  920,  613,  613,  613,
      578,  566,  577, 1193,  576,  576,  576,  583,  577,  578,
     1038, 1913,  577, 1038, 1192,  578,  583, 1913, 1191,  578,
     1038,  584,  583, 1813,  853, 1813,  583,  919,  577, 1813,
      584,  566,  566,  566,  572,  578,  584, 1914, 1956,  853,
      584, 1190,  583, 1914, 1956,  572,  572,  572,  572,  572,
      924,  924,  924,  572, 1189, 1188,  584,  572,  577,  577,
      577,  585,  929,  929,  929,  578,  578,  578, 1186, 1185,
      585, 1184,  583,  583,  583,  572,  585,  919,  919,  919,

      585, 1183, 1182,  597, 1181, 1180,  584,  584,  584,  853,
      853,  853,  597, 1179,  598, 1178,  585,  599,  597,  572,
      572,  572,  597,  598, 1063, 1957,  599, 1063, 1171,  598,
     1170, 1957,  599,  598, 1063,  766,  599,  766,  597, 2009,
      766,  766,  766,  766, 2010, 2009,  585,  585,  585,  598,
     2010,  926,  599, 1169,  605,  605,  605,  605, 1168,  605,
      605,  605,  605,  680,  680,  680,  680, 1167,  597,  597,
      597,  605,  934,  934,  934,  680,  961,  961,  961,  598,
      598,  598,  599,  599,  599,  603,  980,  980,  980,  605,
     1166, 1165,  603,  680,  603, 1164,  603,  603,  603,  603,

      603,  926,  926,  926,  603,  617, 1163,  617,  603,  617,
      617,  617,  617,  726, 1162, 1161,  726,  767,  767,  767,
      767,  617,  623,  726,  623, 1160,  603,  623,  623,  623,
      623,  623, 1158,  770,  726,  770,  770,  770,  770,  617,
      627, 1156,  627,  793,  627,  627,  627,  627, 1155, 1154,
      603,  603,  603,  604, 1150, 1853,  627, 1853,  793, 1149,
      604, 1853,  604, 1148,  604,  604,  604,  604,  604,  981,
      981,  981,  604, 1854,  627, 1854,  604, 1141,  793, 1854,
      629,  623,  623,  623,  726,  726,  726,  630,  604,  629,
     1284,  927,  632, 1284,  604,  629,  630, 1140, 1139,  629,

     1284,  632,  630, 1089, 1089, 1089,  630,  632,  793,  793,
      793,  632, 1101, 1101, 1101,  629, 1129, 1127,  604,  604,
      604,  610,  630,  775,  775,  775,  775,  632,  610, 1126,
      610, 1125,  610,  610,  610,  610,  610, 1107, 1107, 1107,
      610,  927,  927,  927,  610,  629,  629,  629,  824,  824,
      824,  824,  630,  630,  630,  642,  610,  632,  632,  632,
      643, 1124,  610, 1123,  642,  879,  879,  879,  879,  643,
      642, 1113, 1113, 1113,  642,  643,  689, 1120,  689,  643,
      689,  689,  689,  689, 1119, 1118,  610,  610,  610,  620,
      642, 1117,  689, 1116, 1115,  643,  620, 1114,  620, 1110,

      620,  620,  620,  620,  620, 1159, 1159, 1159,  620, 1109,
      689, 1108,  620, 1029,  644, 1106,  761,  761,  761,  761,
      642,  642,  642,  644,  620,  643,  643,  643,  761,  644,
      620, 1105, 1104,  644,  691,  691,  691,  691, 1103,  691,
      691,  691,  691, 1102, 1029,  769,  761,  769, 1100,  644,
      769,  769,  769,  769,  620,  620,  620,  628,  838,  838,
      838,  838,  838, 1029, 1029, 1029,  628, 1099,  628,  628,
      628,  628,  628, 1771, 1098,  727,  628, 1771,  727,  644,
      644,  644,  690, 1771,  690,  727,  690,  690,  690,  690,
      728, 1800,  628,  728,  729, 1800,  727,  729,  690,  731,

      728, 1800,  731, 1097,  729, 1096, 1095,  730, 1094,  731,
      730,  728,  838,  838,  838,  729,  690,  730, 1093, 1092,
      731, 1091,  628,  628,  628,  651, 1090, 1088,  730,  928,
      928,  928,  928, 1087,  651,  728,  651,  651,  651,  651,
      651,  729, 1086, 1085,  651, 1084,  727,  727,  727,  777,
     1083, 1082,  730, 1081,  794,  731, 1080, 1060,  777, 1059,
      651,  728,  728,  728,  777,  729,  729,  729,  777,  794,
      731,  731,  731,  994,  994,  994,  994, 1058,  730,  730,
      730,  957,  986, 1031,  777,  994,  986,  986,  986,  794,
      651,  651,  651,  671, 1051, 1050,  957,  671,  671,  671,

      671,  732, 1049,  994,  732, 1024,  671,  671,  671,  671,
     1022,  732, 1031, 1021,  777,  777,  777, 1020, 1019,  794,
      794,  794,  732,  671,  671,  671,  671,  671,  671,  699,
      699,  699,  699, 1031, 1031, 1031, 1018, 1017,  699,  699,
      699,  699,  733, 1016, 1015,  733,  957,  957,  957, 1187,
     1187, 1187,  733, 1014,  732,  699,  699,  699,  699,  699,
      699,  734, 1013,  733,  734,  735, 1012, 1010,  735, 1009,
     1008,  734,  732,  732,  732,  735, 1071, 1071, 1071, 1071,
      736, 1007,  734,  736,  737, 1292,  735,  737, 1292, 1006,
      736, 1005, 1004,  733,  737, 1292,  738, 1003, 1002,  738,

      739,  736,  999,  739,  989,  737,  738,  985,  740,  734,
      739,  740,  735,  733,  733,  733,  977,  738,  740,  976,
      742,  739,  997,  742, 1030,  975,  997,  997,  997,  740,
      742,  974,  734,  734,  734,  973,  735,  735,  735,  738,
      736,  742,  844,  969,  844,  968,  967,  844,  844,  844,
      844,  736,  736,  736,  966,  737,  737,  737,  740,  739,
      965, 1068, 1030, 1068, 1068, 1068, 1068,  738,  738,  738,
      964,  739,  739,  739, 1030, 1030, 1030,  963,  962,  740,
      740,  740,  948,  960,  948, 1034,  959,  948,  948,  948,
      948,  742,  742,  742,  743,  743,  743,  743,  743,  743,

      743,  958,  743,  945,  743,  743,  743,  743,  944,  743,
      743,  743,  743,  747,  941, 1301,  747,  748, 1301, 1034,
      748,  940,  939,  747,  760, 1301,  760,  748,  760,  760,
      760,  760,  937,  936,  747, 1034, 1034, 1034,  748,  935,
      760,  765,  933,  765,  932,  765,  765,  765,  765,  750,
     1852,  931,  750,  753, 1852,  923,  753,  765,  760,  750,
     1852,  748, 1301,  753,  922,  921,  755,  917,  916,  755,
      750,  915,  914,  747,  753,  765,  755, 1040, 1072,  913,
     1072, 1072, 1072, 1072,  747,  747,  747,  755,  748,  748,
      748,  749,  749,  749,  749,  749,  750,  749,  749,  909,

      749,  749,  749,  908, 1037,  749,  907,  749, 1303, 1040,
      753, 1303,  906,  749,  749,  755,  905,  749, 1303,  904,
      750,  750,  750,  902,  753,  753,  753, 1040, 1040, 1040,
      749,  901,  749,  749,  749, 1046,  900,  755,  755,  755,
      846,  846,  846,  846,  846,  749,  896, 1037,  895,  894,
      756,  893,  892,  756, 1037, 1037, 1037,  749,  749,  749,
      756,  749,  749,  749,  749,  749,  754,  754,  754,  754,
      754,  756,  754,  754, 1032,  754,  754,  754,  888,  887,
      754,  757,  754,  886,  757, 1046, 1046, 1046,  754,  754,
      758,  757,  754,  758,  846,  846,  846,  756,  885,  884,

      758,  875,  757,  873,  872,  754, 1041,  754,  754,  754,
      871,  758, 1032,  772,  754,  772,  870,  772,  772,  772,
      772,  756,  756,  756, 1032, 1032, 1032,  869,  865,  772,
      864,  863,  754,  754,  754,  862,  754,  754,  754,  754,
      754,  758,  861,  860,  988, 1041,  988,  772,  988,  988,
      988,  988,  757,  757,  757,  859, 1041, 1041, 1041,  858,
      856,  758,  758,  758,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      855,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,

      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  773,
     1073, 1073, 1073, 1073,  854,  841,  773,  840,  773, 1048,
      773,  773,  773,  773,  773, 1199, 1199, 1199,  773,  774,
      834,  774,  773,  837,  774,  774,  774,  774,  774,  836,
      776, 1048,  835,  833,  773,  834,  832,  778,  831,  776,
      773,  776,  776,  776,  776,  776,  778,  829,  779,  776,
      828,  827,  778,  819,  818,  834,  778,  779,  817, 1048,

     1048, 1048,  813,  779,  773,  773,  773,  779,  812, 1067,
      811, 1067,  778,  785, 1067, 1067, 1067, 1067,  774,  774,
      774, 1311,  785,  779, 1311,  834,  834,  834,  785,  810,
      786, 1311,  785,  809,  805,  776,  776,  776,  804,  786,
     1055,  787,  778,  778,  778,  786,  803,  897,  785,  786,
      787,  802,  806,  779,  779,  779,  787, 1205, 1205, 1205,
      787,  806,  897,  801,  800,  786,  807,  806, 1211, 1211,
     1211,  806,  798,  797,  808,  807,  787,  796,  785,  785,
      785,  807,  897,  808,  792,  807,  791,  806,  790,  808,
     1055, 1055, 1055,  808,  789,  786,  786,  786, 1257, 1257,

     1257,  807, 1132, 1132, 1132, 1132,  787,  787,  787,  808,
      788,  784,  897,  897,  897,  783,  782,  806,  806,  806,
      826,  781,  826,  780, 1042,  826,  826,  826,  826,  826,
      839,  807,  807,  807,  839,  839,  839,  839,  771,  808,
      808,  808,  814, 1408, 1408, 1408,  839, 1053,  759,  814,
     1042,  814,  746,  814,  814,  814,  814,  814, 1412, 1412,
     1412,  814, 1061,  745,  839,  814,  843,  744,  843,  848,
      843,  843,  843,  843, 1042, 1042, 1042,  814,  848,  826,
      826,  826,  843,  814,  848,  725,  847, 1053,  848,  724,
      847,  847,  847,  847, 1061, 1065,  849, 1053, 1053, 1053,

      843,  723,  847,  898,  848,  849, 1044,  814,  814,  814,
      821,  849, 1061, 1061, 1061,  849,  722,  821,  898,  821,
      847,  821,  821,  821,  821,  821,  721, 1065,  720,  821,
      718,  849, 1044,  821,  848,  848,  848,  850,  898,  850,
      717,  850,  850,  850,  850, 1065, 1065, 1065,  716, 1305,
      715,  821, 1305,  850,  713,  711, 1044, 1044, 1044, 1305,
      710,  849,  849,  849, 1230, 1230, 1230, 1230,  898,  898,
      898,  850, 1484, 1484, 1484,  821,  821,  821,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842, 1305,  842,  842,  842,  842,  842,

      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  851, 1342, 1342, 1342, 1342,  708,  707,
      852,  706,  851,  704,  851,  851,  851,  851,  851,  852,
      703,  866,  851,  702,  867,  852,  701,  938,  700,  852,
      866,  698,  868,  867, 1309,  695,  866, 1309,  851,  867,
      866,  868,  938,  867, 1309,  852,  685,  868,  876,  684,

      876,  868,  876,  876,  876,  876,  866,  683,  666,  867,
      665,  660,  938, 1316,  876,  659, 1316,  868,  851,  851,
      851,  654,  653, 1316,  652,  852,  852,  852, 1488, 1488,
     1488, 1309,  876, 1589, 1589, 1589,  866,  866,  866,  867,
      867,  867,  938,  938,  938,  647,  646,  868,  868,  868,
      874,  942,  942,  942,  942,  942,  645, 1318,  641,  874,
     1318,  874,  874,  874,  874,  874, 1070, 1318, 1070,  874,
      640, 1070, 1070, 1070, 1070,  878, 1320,  878,  880, 1320,
      878,  878,  878,  878,  878,  874, 1320,  880,  639,  880,
      880,  880,  880,  880,  943,  638,  637,  880,  943,  943,

      943,  943,  635,  634,  881,  942,  942,  942,  633,  626,
      943, 1319,  625,  881, 1319,  874,  874,  874,  877,  881,
      624, 1319,  619,  881,  616,  877,  615,  877,  943,  877,
      877,  877,  877,  877,  878,  878,  878,  877,  614,  881,
      607,  877,  882,  880,  880,  880,  602,  883, 1635, 1635,
     1635,  882,  601,  877,  600, 1323,  883,  882, 1323,  877,
      596,  882,  883,  595, 1319, 1323,  883, 1517,  594,  881,
      881,  881,  950,  950,  950,  950,  950,  882, 1328, 1525,
      889, 1328,  883,  877,  877,  877,  593,  890, 1328,  889,
     1321,  592,  590, 1321, 1330,  889,  890, 1330,  588,  889,

     1321,  891,  890,  587, 1330,  586,  890,  882,  882,  882,
      891,  581,  883,  883,  883,  889,  891, 1517, 1517, 1517,
      891, 1057,  890,  910,  580,  579,  950,  950,  950, 1525,
     1525, 1525,  910,  569,  568, 1531,  891,  567,  910,  565,
      911, 1036,  910, 1057, 1036,  889,  889,  889, 1321,  911,
      564, 1036,  890,  890,  890,  911,  563,  559,  910,  911,
      558,  912, 1036,  557,  556,  555,  891,  891,  891,  553,
      912, 1057, 1057, 1057, 1531,  911,  912,  947,  552,  947,
      912,  947,  947,  947,  947, 1531, 1531, 1531,  910,  910,
      910,  551,  544,  947,  543,  930,  912,  930,  542,  537,

      930,  930,  930,  930,  930,  911,  911,  911,  534,  533,
      532,  947, 1036, 1036, 1036,  951,  525,  520,  519,  951,
      951,  951,  951,  518,  512,  511,  912,  912,  912,  918,
     1551,  951, 1551, 1551, 1551, 1551,  918,  510,  918,  509,
      918,  918,  918,  918,  918,  508,  506,  504,  918,  951,
     1336,  503,  918, 1336,  930,  930,  930,  952, 1334, 1329,
     1336, 1334, 1329,  502,  918,  953,  952,  497, 1334, 1329,
      918,  496,  952,  495,  953, 1541,  952,  485, 1121,  484,
      953,  464,  463,  954,  953,  954, 1122,  954,  954,  954,
      954,  438,  952, 1121,  918,  918,  918,  925,  437,  954,

      953, 1122,  435,  433,  925, 1334,  925,  431,  925,  925,
      925,  925,  925, 1121, 1541,  430,  925,  954, 1329,  429,
      925, 1122,  952,  952,  952, 1541, 1541, 1541,  428,  426,
      953,  953,  953,  424, 1276, 1276, 1276, 1276,  925, 1276,
     1276, 1276, 1276, 1121, 1121, 1121,  422, 1501,  421,  420,
     1501, 1122, 1122, 1122, 1343,  393, 1343, 1501, 1343, 1343,
     1343, 1343,  925,  925,  925,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  392,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,

      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      955,  391,  374,  354,  353,  341,  340,  956,  327,  955,
      326,  955,  955,  955,  955,  955,  956,  324,  970,  955,
      323,  971,  956,  322,  317, 1546,  956,  970,  316,  972,
      971, 1332,  315,  970, 1332,  955,  971,  970,  972,  301,
      971, 1332,  956,  300,  972,  995,  299,  995,  972,  995,
      995,  995,  995,  970,  288,  287,  971,  284,  283, 1506,

     1508,  995, 1506, 1508,  972,  955,  955,  955, 1052, 1506,
     1508, 1052,  956,  956,  956, 1546, 1546, 1546, 1052,  995,
      282,  279,  277,  970,  970,  970,  971,  971,  971, 1052,
      276, 1332,  275,  253,  972,  972,  972,  984, 1143, 1143,
     1143, 1143, 1143,  252, 1510,  251,  984, 1510,  984,  984,
      984,  984,  984, 1066, 1510, 1066,  984, 1066, 1066, 1066,
     1066, 1075,  240, 1075,  239, 1075, 1075, 1075, 1075, 1066,
      218,  217,  984, 1522,  216, 1533, 1522, 1075, 1533, 1052,
     1052, 1052, 1077, 1522,  175, 1533, 1536, 1066,  165, 1536,
      163, 1077, 1143, 1143, 1143, 1075, 1536, 1077,  162, 1157,

      161, 1077,  984,  984,  984,  987,  160,  153,  147,  987,
      987,  987,  987, 1333, 1157,  141, 1333, 1077,  987,  987,
      987,  987,  137, 1333, 1112,  128, 1112,  126,  125, 1112,
     1112, 1112, 1112, 1112, 1157,  987,  987,  987,  987,  987,
      987,  990,  990,  124,  990,  119,  990, 1077, 1077, 1077,
      990,  990,  990, 1539,  990,  116, 1539, 1653,  115, 1078,
     1653,  114,  990, 1539, 1157, 1157, 1157, 1653, 1078,  110,
      106,  104,  103, 1333, 1078,  102,   97, 1079, 1078,  990,
       93,  990,  990, 1112, 1112, 1112, 1079, 1687, 1655,   92,
     1687,   91, 1079,   84, 1078,   81, 1079, 1687, 1128,   80,

       79,   72, 1128, 1128, 1128, 1128,  990,   66,  990,  990,
      991,  991, 1079,  991, 1128,  991, 1662,   65,   64,  991,
      991,  991,   50,  991, 1078, 1078, 1078,   46,   37, 1134,
       36,  991, 1128, 1134, 1134, 1134, 1134, 1135, 1655, 1655,
     1655,   33, 1079, 1079, 1079, 1134, 1135, 1669,  991,   32,
      991,  991, 1135, 1173,   31, 1173, 1135, 1173, 1173, 1173,
     1173, 1719,    0, 1134, 1719,    0, 1662, 1662, 1662, 1173,
        0, 1719, 1135, 1727,    0,  991, 1727,  991,  991,  998,
      998,  998,  998, 1727,    0,    0,    0, 1173,  998,  998,
      998,  998, 1241, 1241, 1241, 1241, 1241, 1669, 1669, 1669,

        0,    0, 1135, 1135, 1135,  998,  998,  998,  998,  998,
      998, 1033, 1033, 1033, 1033, 1033,    0, 1033, 1033,    0,
     1033, 1033, 1033,    0, 1226, 1033,    0, 1033, 1226, 1226,
     1226, 1226,    0, 1033, 1033,    0,    0, 1033,    0,    0,
     1226,    0,    0,    0,    0,    0, 1241, 1241, 1241,    0,
     1033,    0, 1033, 1033, 1033, 1131, 1133, 1131, 1226, 1033,
     1131, 1131, 1131, 1131, 1131, 1133,    0, 1133, 1133, 1133,
     1133, 1133,    0,    0,    0, 1133, 1219, 1033, 1033, 1033,
        0, 1033, 1033, 1033, 1033, 1033, 1035, 1035, 1035, 1035,
     1035, 1219, 1035, 1035,    0, 1035, 1035, 1035,    0,    0,

     1035,    0, 1035,    0,    0,    0,    0,    0, 1035, 1035,
        0, 1219, 1035,    0, 1131, 1131, 1131,    0,    0,    0,
        0, 1133, 1133, 1133,    0, 1035,    0, 1035, 1035, 1035,
     1210, 1136, 1210,    0,    0, 1210, 1210, 1210, 1210, 1210,
     1136, 1219, 1219, 1219,    0,    0, 1136,    0,    0,    0,
     1136,    0, 1035, 1035, 1035, 1676, 1035, 1035, 1035, 1035,
     1035, 1043, 1043, 1043, 1043, 1043, 1136, 1043, 1043, 1535,
     1043, 1043, 1043,    0, 1682, 1043,    0, 1043,    0,    0,
        0,    0,    0, 1043, 1043,    0,    0, 1043,    0, 1210,
     1210, 1210,    0,    0,    0,    0, 1136, 1136, 1136,    0,

     1043,    0, 1043, 1043, 1043, 1676, 1676, 1676, 1220,    0,
        0,    0, 1535,    0,    0,    0,    0,    0,    0, 1535,
     1535, 1535,    0, 1220, 1682, 1682, 1682, 1043, 1043, 1043,
        0, 1043, 1043, 1043, 1043, 1043, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1220, 1047,    0, 1047, 1047, 1047, 1047,
        0, 1047, 1047, 1047, 1047, 1062, 1062, 1062, 1062, 1062,
        0, 1062, 1062,    0, 1062, 1062, 1062, 1137, 1722, 1062,
     1138, 1062,    0, 1220, 1220, 1220, 1137, 1062, 1062, 1138,
        0, 1062, 1137,    0,    0, 1138, 1137,    0,    0, 1138,
        0,    0,    0,    0, 1062,    0, 1062, 1062, 1062,    0,

     1730, 1229, 1137, 1229,    0, 1138, 1229, 1229, 1229, 1229,
     1229,    0,    0, 1363, 1363, 1363, 1363, 1363, 1722, 1722,
     1722, 1062, 1062, 1062,    0, 1062, 1062, 1062, 1062, 1062,
     1074,    0, 1137, 1137, 1137, 1138, 1138, 1138,    0, 1142,
        0, 1074, 1074, 1074, 1074, 1074,    0,    0, 1142, 1074,
     1730, 1730, 1730, 1074, 1142,    0,    0, 1144, 1142,    0,
     1229, 1229, 1229,    0, 1145,    0, 1144, 1363, 1363, 1363,
        0, 1074, 1144, 1145, 1142,    0, 1144,    0,    0, 1145,
        0,    0,    0, 1145, 1232,    0,    0,    0, 1232, 1232,
     1232, 1232, 1144,    0,    0, 1074, 1074, 1074, 1076, 1145,

     1232,    0,    0,    0, 1142, 1142, 1142, 1076,    0, 1076,
     1076, 1076, 1076, 1076,    0,    0,    0, 1076, 1232,    0,
        0,    0, 1144, 1144, 1144, 1147,    0,    0,    0, 1145,
     1145, 1145, 1151, 1076, 1147,    0,    0, 1152,    0,    0,
     1147, 1151,    0,    0, 1147,    0, 1152, 1151,    0,    0,
        0, 1151, 1152,    0,    0,    0, 1152,    0,    0,    0,
     1147, 1255,    0, 1076, 1076, 1076, 1111, 1151,    0,    0,
        0, 1406, 1152, 1111,    0, 1111, 1255, 1111, 1111, 1111,
     1111, 1111,    0,    0,    0, 1111, 1406,    0,    0, 1111,
     1147, 1147, 1147,    0,    0,    0, 1255, 1151, 1151, 1151,

     1153, 1111, 1152, 1152, 1152, 1175, 1406, 1111,    0, 1153,
        0,    0,    0,    0, 1175, 1153,    0,    0,    0, 1153,
     1175,    0,    0,    0, 1175,    0, 1255, 1255, 1255,    0,
        0, 1111, 1111, 1111, 1146, 1153, 1406, 1406, 1406,    0,
     1175, 1176,    0, 1146,    0, 1146, 1146, 1146, 1146, 1146,
     1176,    0,    0, 1146,    0,    0, 1176,    0,    0,    0,
     1176,    0,    0,    0,    0, 1153, 1153, 1153, 1177, 1146,
     1175, 1175, 1175,    0,    0,    0, 1176, 1177,    0, 1231,
        0,    0,    0, 1177,    0,    0,    0, 1177, 1231,    0,
     1231, 1231, 1231, 1231, 1231,    0,    0,    0, 1231, 1146,

     1146, 1146, 1172, 1177,    0,    0, 1176, 1176, 1176,    0,
        0,    0,    0, 1172, 1172, 1172, 1172, 1172,    0,    0,
        0, 1172,    0,    0, 1275, 1172, 1275,    0, 1275, 1275,
     1275, 1275,    0, 1177, 1177, 1177, 1407,    0,    0,    0,
     1275, 1233,    0, 1172, 1231, 1231, 1231,    0,    0,    0,
     1233, 1407,    0,    0,    0,    0, 1233, 1346, 1275, 1346,
     1233,    0, 1346, 1346, 1346, 1346, 1346, 1172, 1172, 1172,
     1174, 1407,    0,    0,    0,    0, 1233, 1234,    0, 1174,
        0, 1174, 1174, 1174, 1174, 1174, 1234,    0,    0, 1174,
        0,    0, 1234, 1364,    0,    0, 1234, 1364, 1364, 1364,

     1364, 1407, 1407, 1407, 1235, 1174, 1233, 1233, 1233, 1364,
        0, 1236, 1234, 1235,    0,    0, 1346, 1346, 1346, 1235,
     1236,    0,    0, 1235,    0,    0, 1236, 1364,    0,    0,
     1236,    0,    0,    0,    0, 1174, 1174, 1174, 1209, 1235,
        0,    0, 1234, 1234, 1234, 1209, 1236, 1209,    0, 1209,
     1209, 1209, 1209, 1209,    0,    0,    0, 1209,    0,    0,
        0, 1209,    0,    0,    0, 1240,    0,    0,    0, 1235,
     1235, 1235, 1242, 1209, 1240,    0, 1236, 1236, 1236, 1209,
     1240, 1242,    0, 1243, 1240,    0,    0, 1242,    0,    0,
        0, 1242, 1243, 1743, 1743, 1743,    0,    0, 1243,    0,

     1240,    0, 1243, 1209, 1209, 1209, 1245, 1242,    0,    0,
        0, 1743, 1743, 1743, 1743, 1245,    0,    0, 1243,    0,
        0, 1245,    0,    0,    0, 1245,    0,    0,    0,    0,
     1240, 1240, 1240,    0,    0,    0,    0, 1242, 1242, 1242,
        0, 1245, 1372, 1372, 1372, 1372, 1372,    0, 1243, 1243,
     1243, 1244, 1389, 1389, 1389, 1389, 1389,    0,    0, 1249,
     1244,    0, 1244, 1244, 1244, 1244, 1244,    0, 1249,    0,
     1244, 1245, 1245, 1245, 1249,    0, 1250,    0, 1249,    0,
        0,    0,    0,    0, 1251, 1250, 1244,    0,    0,    0,
        0, 1250,    0, 1251, 1249, 1250, 1372, 1372, 1372, 1251,

        0,    0,    0, 1251,    0,    0, 1389, 1389, 1389,    0,
     1544, 1250,    0, 1544,    0,    0, 1244, 1244, 1244, 1251,
     1544,    0,    0,    0, 1249, 1249, 1249, 1362,    0, 1362,
        0, 1544, 1362, 1362, 1362, 1362, 1362,    0,    0,    0,
     1373, 1250, 1250, 1250, 1373, 1373, 1373, 1373,    0, 1251,
     1251, 1251, 1270, 1270,    0, 1270, 1373, 1270,    0,    0,
        0, 1270, 1270, 1270, 1374, 1270,    0,    0, 1374, 1374,
     1374, 1374,    0, 1270, 1373,    0,    0,    0,    0,    0,
     1374, 1544, 1544, 1544,    0,    0, 1362, 1362, 1362,    0,
     1270, 1375, 1270, 1270,    0,    0,    0,    0, 1374,    0,

     1375,    0,    0,    0,    0,    0, 1375, 1422,    0, 1422,
     1375,    0, 1422, 1422, 1422, 1422, 1422, 1270,    0, 1270,
     1270, 1298, 1298, 1298, 1298, 1298, 1375, 1298, 1298,    0,
     1298, 1298, 1298,    0,    0, 1298,    0, 1298,    0,    0,
        0,    0,    0, 1298, 1298,    0,    0, 1298,    0,    0,
     1376,    0,    0,    0,    0,    0, 1375, 1375, 1375, 1376,
     1298,    0, 1298, 1298, 1298, 1376, 1422, 1422, 1422, 1376,
     1438,    0, 1438,    0,    0, 1438, 1438, 1438, 1438, 1438,
        0,    0,    0,    0,    0, 1376, 1482, 1298, 1298, 1298,
        0, 1298, 1298, 1298, 1298, 1298, 1299, 1299, 1299, 1299,

     1299, 1482, 1299,    0,    0, 1299, 1299, 1299,    0,    0,
     1299,    0, 1299,    0,    0, 1376, 1376, 1376, 1299, 1299,
     1440, 1482, 1299, 1377, 1440, 1440, 1440, 1440,    0, 1438,
     1438, 1438, 1377,    0,    0, 1299, 1440, 1299, 1377, 1299,
        0, 1383, 1377,    0, 1439, 1439, 1439, 1439, 1439,    0,
     1383, 1482, 1482, 1482, 1440,    0, 1383,    0, 1377,    0,
     1383,    0, 1299, 1299, 1299,    0, 1299, 1299, 1299, 1299,
     1299, 1300, 1300, 1300, 1300, 1300, 1383, 1300, 1300,    0,
     1300, 1300, 1300,    0,    0, 1300,    0, 1300, 1377, 1377,
     1377,    0,    0, 1300, 1300,    0,    0, 1300, 1439, 1439,

     1439,    0,    0,    0,    0,    0, 1383, 1383, 1383,    0,
     1300,    0, 1300, 1300, 1300,    0,    0,    0,    0, 1449,
        0,    0,    0, 1449, 1449, 1449, 1449,    0, 1448, 1448,
     1448, 1448, 1448,    0,    0, 1449,    0, 1300, 1300, 1300,
        0, 1300, 1300, 1300, 1300, 1300, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1449, 1304,    0, 1304, 1304, 1304, 1304,
        0, 1304, 1304, 1304, 1304, 1341, 1341, 1341, 1341, 1341,
        0, 1341, 1341,    0, 1341, 1341, 1341, 1384,    0, 1341,
        0, 1341, 1448, 1448, 1448,    0, 1384, 1341, 1341,    0,
        0, 1341, 1384, 1450,    0,    0, 1384, 1450, 1450, 1450,

     1450,    0,    0,    0, 1341,    0, 1341, 1341, 1341, 1450,
        0, 1385, 1384, 1465, 1465, 1465, 1465, 1465,    0,    0,
     1385,    0,    0,    0,    0,    0, 1385, 1450,    0,    0,
     1385, 1341, 1341, 1341,    0, 1341, 1341, 1341, 1341, 1341,
     1345,    0, 1384, 1384, 1384, 1483, 1385, 1345,    0, 1345,
        0, 1345, 1345, 1345, 1345, 1345,    0,    0,    0, 1345,
     1483,    0,    0, 1345,    0,    0,    0, 1465, 1465, 1465,
        0,    0,    0,    0, 1390, 1345, 1385, 1385, 1385, 1391,
     1483, 1345, 1667, 1390,    0, 1667,    0,    0, 1391, 1390,
        0,    0, 1667, 1390, 1391,    0,    0,    0, 1391,    0,

        0,    0,    0, 1667,    0, 1345, 1345, 1345, 1361, 1390,
     1483, 1483, 1483,    0, 1391, 1361,    0, 1361,    0, 1361,
     1361, 1361, 1361, 1361,    0,    0,    0, 1361,    0,    0,
        0, 1361,    0, 1392,    0,    0,    0,    0,    0, 1390,
     1390, 1390, 1392, 1361, 1391, 1391, 1391, 1398, 1392, 1361,
     1399,    0, 1392, 1667, 1667, 1667, 1398,    0,    0, 1399,
        0, 1400, 1398,    0,    0, 1399, 1398,    0, 1392, 1399,
     1400,    0,    0, 1361, 1361, 1361, 1400,    0,    0,    0,
     1400,    0, 1398,    0,    0, 1399,    0,    0, 1451,    0,
        0,    0,    0,    0,    0,    0, 1400, 1451, 1392, 1392,

     1392,    0,    0, 1451,    0,    0,    0, 1451,    0,    0,
        0,    0, 1398, 1398, 1398, 1399, 1399, 1399,    0,    0,
        0,    0,    0, 1451,    0,    0, 1400, 1400, 1400, 1421,
        0,    0,    0,    0,    0,    0, 1421,    0, 1421,    0,
     1421, 1421, 1421, 1421, 1421,    0,    0,    0, 1421,    0,
        0,    0, 1421, 1451, 1451, 1451, 1452,    0,    0,    0,
        0,    0,    0, 1453, 1421, 1452,    0,    0, 1459,    0,
     1421, 1452, 1453,    0,    0, 1452,    0, 1459, 1453,    0,
        0,    0, 1453, 1459,    0,    0,    0, 1459,    0,    0,
        0, 1452,    0,    0, 1421, 1421, 1421, 1437, 1453,    0,

        0,    0,    0, 1459, 1437,    0, 1437,    0, 1437, 1437,
     1437, 1437, 1437,    0,    0,    0, 1437,    0,    0,    0,
     1437, 1452, 1452, 1452,    0,    0,    0,    0, 1453, 1453,
     1453, 1460, 1437, 1459, 1459, 1459, 1461,    0, 1437, 1466,
     1460,    0,    0,    0,    0, 1461, 1460,    0, 1466,    0,
     1460, 1461,    0,    0, 1466, 1461,    0,    0, 1466,    0,
     1467,    0, 1437, 1437, 1437,    0, 1460,    0,    0, 1467,
        0, 1461, 1468,    0, 1466, 1467,    0,    0,    0, 1467,
        0, 1468,    0,    0,    0,    0,    0, 1468,    0,    0,
        0, 1468,    0,    0,    0, 1467, 1460, 1460, 1460, 1474,

        0, 1461, 1461, 1461, 1466, 1466, 1466, 1468, 1474,    0,
        0,    0,    0, 1475, 1474,    0,    0,    0, 1474,    0,
        0, 1476, 1475,    0,    0, 1467, 1467, 1467, 1475,    0,
     1476,    0, 1475,    0, 1474,    0, 1476, 1468, 1468, 1468,
     1476,    0,    0,    0,    0,    0,    0,    0, 1475,    0,
        0,    0,    0,    0,    0,    0, 1476,    0,    0,    0,
        0,    0,    0,    0, 1474, 1474, 1474,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1475, 1475,
     1475,    0,    0,    0,    0,    0, 1476, 1476, 1476, 1518,
     1518, 1518, 1518, 1518, 1518, 1518,    0, 1518,    0, 1518,

     1518, 1518, 1518,    0, 1518, 1518, 1518, 1518, 1530, 1530,
     1530, 1530, 1530,    0, 1530, 1530,    0, 1530, 1530, 1530,
        0,    0, 1530,    0, 1530,    0,    0,    0,    0,    0,
     1530, 1530,    0,    0, 1530,    0,    0, 1560,    0,    0,
        0,    0,    0,    0,    0,    0, 1560, 1530,    0, 1530,
     1530, 1530, 1560,    0,    0,    0, 1560,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1560,    0, 1530, 1530, 1530,    0, 1530, 1530,
     1530, 1530, 1530, 1532, 1532, 1532, 1532, 1532,    0, 1532,
     1532,    0, 1532, 1532, 1532,    0,    0, 1532,    0, 1532,

        0,    0, 1560, 1560, 1560, 1532, 1532,    0,    0, 1532,
        0,    0, 1561,    0,    0,    0,    0,    0,    0,    0,
        0, 1561, 1532,    0, 1532, 1532, 1532, 1561,    0,    0,
        0, 1561,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1561,    0, 1532,
     1532, 1532,    0, 1532, 1532, 1532, 1532, 1532, 1538, 1538,
     1538, 1538, 1538,    0, 1538, 1538,    0, 1538, 1538, 1538,
        0,    0, 1538,    0, 1538,    0,    0, 1561, 1561, 1561,
     1538, 1538,    0,    0, 1538,    0,    0, 1562,    0,    0,
        0,    0,    0,    0,    0,    0, 1562, 1538,    0, 1538,

     1538, 1538, 1562,    0,    0,    0, 1562,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1562,    0, 1538, 1538, 1538,    0, 1538, 1538,
     1538, 1538, 1538, 1542, 1542, 1542, 1542, 1542,    0, 1542,
     1542,    0, 1542, 1542, 1542,    0,    0, 1542,    0, 1542,
        0,    0, 1562, 1562, 1562, 1542, 1542,    0,    0, 1542,
        0,    0, 1569,    0,    0,    0,    0,    0,    0,    0,
        0, 1569, 1542,    0, 1542, 1542, 1542, 1569,    0,    0,
        0, 1569,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1569,    0, 1542,

     1542, 1542,    0, 1542, 1542, 1542, 1542, 1542, 1543, 1543,
     1543, 1543, 1543,    0, 1543, 1543,    0, 1543, 1543, 1543,
        0,    0, 1543, 1570, 1543,    0,    0, 1569, 1569, 1569,
     1543, 1543, 1570,    0, 1543,    0,    0,    0, 1570,    0,
        0,    0, 1570,    0,    0,    0,    0, 1543,    0, 1543,
     1543, 1543,    0,    0,    0,    0,    0,    0, 1570,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1543, 1543, 1543,    0, 1543, 1543,
     1543, 1543, 1543, 1556,    0,    0,    0,    0, 1570, 1570,
     1570, 1571, 1556,    0, 1556, 1556, 1556, 1556, 1556,    0,

     1571,    0, 1556,    0,    0,    0, 1571,    0, 1577,    0,
     1571,    0,    0,    0,    0,    0,    0, 1577, 1556,    0,
        0,    0,    0, 1577,    0,    0, 1571, 1577,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1577,    0,    0,    0,    0, 1556, 1556,
     1556, 1559,    0,    0,    0,    0, 1571, 1571, 1571,    0,
     1559,    0, 1559, 1559, 1559, 1559, 1559,    0, 1578,    0,
     1559,    0,    0, 1577, 1577, 1577, 1579, 1578,    0,    0,
        0,    0,    0, 1578,    0, 1579, 1559, 1578,    0,    0,
        0, 1579,    0,    0,    0, 1579,    0,    0,    0,    0,

        0,    0,    0, 1578, 1606,    0,    0,    0,    0,    0,
        0, 1579,    0, 1606,    0,    0, 1559, 1559, 1559, 1606,
        0,    0,    0, 1606,    0,    0,    0,    0,    0,    0,
        0, 1607,    0, 1578, 1578, 1578,    0,    0,    0, 1606,
     1607, 1579, 1579, 1579, 1602,    0, 1607,    0,    0,    0,
     1607,    0,    0, 1602,    0, 1602, 1602, 1602, 1602, 1602,
        0,    0,    0, 1602,    0,    0, 1607, 1608,    0, 1606,
     1606, 1606, 1615,    0,    0,    0, 1608,    0,    0, 1602,
        0, 1615, 1608,    0, 1616,    0, 1608, 1615,    0,    0,
        0, 1615,    0, 1616,    0,    0, 1607, 1607, 1607, 1616,

        0,    0, 1608, 1616,    0,    0,    0, 1615,    0, 1602,
     1602, 1602, 1605,    0,    0,    0,    0,    0,    0, 1616,
        0, 1605,    0, 1605, 1605, 1605, 1605, 1605,    0,    0,
        0, 1605, 1608, 1608, 1608,    0,    0, 1615, 1615, 1615,
        0,    0,    0,    0,    0, 1617,    0, 1605, 1623, 1616,
     1616, 1616,    0, 1624, 1617,    0, 1625, 1623,    0,    0,
     1617,    0, 1624, 1623, 1617, 1625,    0, 1623, 1624,    0,
        0, 1625, 1624,    0,    0, 1625,    0, 1605, 1605, 1605,
     1617,    0,    0, 1623,    0,    0,    0,    0, 1624,    0,
        0, 1625,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1617, 1617, 1617, 1623, 1623, 1623,    0,    0, 1624, 1624,
     1624, 1625, 1625, 1625, 1660, 1660, 1660, 1660, 1660,    0,
     1660, 1660,    0, 1660, 1660, 1660,    0,    0, 1660,    0,
     1660,    0,    0,    0,    0,    0, 1660, 1660,    0,    0,
     1660,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1660,    0, 1660, 1660, 1660,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1660, 1660, 1660,    0, 1660, 1660, 1660, 1660, 1660, 1674,

     1674, 1674, 1674, 1674,    0, 1674, 1674,    0, 1674, 1674,
     1674,    0,    0, 1674,    0, 1674,    0,    0,    0,    0,
        0, 1674, 1674,    0,    0, 1674,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1674,    0,
     1674, 1674, 1674,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1674, 1674, 1674,    0, 1674,
     1674, 1674, 1674, 1674, 1748, 1748, 1748, 1748, 1748, 1748,
     1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748,
     1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1749, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1750, 1750, 1750, 1750, 1750, 1750, 1750, 1750,
     1750, 1750, 1750, 1750, 1750, 1750, 1750, 1750, 1750, 1750,
     1750, 1750, 1750, 1750, 1750, 1750, 1751, 1751, 1751, 1751,
     1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751,
     1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751,
     1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752,
     1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752,
     1752, 1752, 1752, 1752, 1753, 1753, 1753, 1753, 1753, 1753,

     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1754, 1754,
        0,    0,    0, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754,    0, 1754, 1754, 1754,
     1754, 1754, 1755, 1755,    0, 1755,    0,    0,    0, 1755,
        0, 1755, 1755, 1756, 1756,    0,    0, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,

     1757, 1758,    0, 1758,    0,    0, 1758, 1758,    0, 1758,
        0, 1758, 1758,    0, 1758, 1758, 1758, 1758, 1758, 1758,
     1759,    0, 1759,    0,    0, 1759, 1759,    0, 1759,    0,
     1759, 1759,    0, 1759, 1759, 1759, 1759, 1759, 1759, 1760,
        0, 1760,    0,    0, 1760, 1760,    0,    0,    0, 1760,
     1760,    0,    0, 1760,    0, 1760, 1760, 1760, 1761,    0,
     1761,    0,    0, 1761, 1761,    0, 1761, 1761, 1761, 1761,
        0, 1761, 1761, 1761, 1761, 1761, 1761, 1762,    0, 1762,
        0,    0, 1762, 1762,    0, 1762, 1762, 1762, 1762,    0,
     1762, 1762, 1762, 1762, 1762, 1762, 1763,    0, 1763,    0,

        0, 1763, 1763,    0,    0, 1763, 1763, 1763,    0,    0,
     1763,    0, 1763, 1763, 1763, 1764, 1764, 1764, 1764, 1764,
     1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764,
     1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1765,
        0,    0,    0, 1765,    0, 1765, 1765, 1766, 1766, 1766,
        0, 1766, 1766,    0,    0, 1766,    0,    0, 1766, 1766,
     1766, 1766, 1766, 1767,    0,    0,    0,    0, 1767,    0,
     1767, 1767,    0,    0, 1767,    0, 1767, 1767, 1767,    0,
     1767, 1767, 1767,    0, 1767, 1767, 1767, 1768, 1768,    0,
     1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768,

     1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768,
     1768, 1769, 1769,    0, 1769, 1769, 1769, 1769, 1769, 1769,
     1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769,
     1769, 1769, 1769, 1769, 1769, 1770, 1770, 1770, 1770, 1770,
     1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770,
     1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1772,
        0, 1772,    0,    0, 1772, 1772,    0,    0, 1772, 1772,
     1772,    0,    0, 1772, 1772, 1772, 1772, 1772, 1773, 1773,
        0, 1773,    0,    0,    0, 1773,    0, 1773, 1773, 1774,
     1774,    0,    0, 1774, 1774, 1774, 1774, 1774, 1774, 1774,

     1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774,
     1774, 1774, 1774, 1776,    0, 1776,    0,    0, 1776, 1776,
        0, 1776,    0, 1776, 1776,    0, 1776, 1776, 1776, 1776,
     1776, 1776, 1777,    0, 1777,    0,    0, 1777, 1777,    0,
     1777,    0, 1777, 1777,    0, 1777, 1777, 1777, 1777, 1777,
     1777, 1778,    0, 1778,    0,    0, 1778, 1778,    0, 1778,
        0, 1778, 1778,    0, 1778, 1778, 1778, 1778, 1778, 1778,
     1779,    0, 1779,    0,    0, 1779, 1779,    0,    0,    0,
     1779, 1779,    0,    0, 1779,    0, 1779, 1779, 1779, 1780,
        0, 1780,    0,    0, 1780, 1780,    0, 1780,    0, 1780,

     1780,    0, 1780, 1780, 1780, 1780, 1780, 1780, 1781,    0,
     1781,    0,    0, 1781, 1781, 1781, 1781,    0, 1781, 1781,
        0, 1781, 1781,    0, 1781, 1781, 1781, 1782,    0, 1782,
        0,    0, 1782, 1782,    0, 1782,    0, 1782, 1782,    0,
     1782, 1782, 1782, 1782, 1782, 1782, 1783,    0, 1783,    0,
        0, 1783, 1783,    0, 1783,    0, 1783, 1783,    0, 1783,
     1783, 1783, 1783, 1783, 1783, 1784,    0, 1784,    0,    0,
     1784, 1784,    0,    0,    0, 1784,    0,    0,    0, 1784,
     1784, 1784, 1784, 1784, 1785,    0, 1785,    0,    0, 1785,
     1785,    0, 1785,    0, 1785, 1785,    0, 1785, 1785, 1785,

     1785, 1785, 1785, 1786,    0, 1786,    0,    0, 1786, 1786,
        0, 1786, 1786, 1786, 1786,    0, 1786, 1786, 1786, 1786,
     1786, 1786, 1787,    0, 1787,    0,    0, 1787, 1787,    0,
     1787, 1787, 1787, 1787,    0, 1787, 1787, 1787, 1787, 1787,
     1787, 1788,    0, 1788,    0,    0, 1788, 1788,    0, 1788,
     1788, 1788, 1788,    0, 1788, 1788, 1788, 1788, 1788, 1788,
     1789,    0, 1789,    0,    0, 1789, 1789,    0,    0, 1789,
     1789, 1789,    0,    0, 1789,    0, 1789, 1789, 1789, 1790,
        0, 1790,    0,    0, 1790, 1790,    0, 1790, 1790, 1790,
     1790,    0, 1790, 1790, 1790, 1790, 1790, 1790, 1791,    0,

     1791,    0,    0, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
        0, 1791, 1791,    0, 1791, 1791, 1791, 1792,    0, 1792,
        0,    0, 1792, 1792,    0, 1792, 1792, 1792, 1792,    0,
     1792, 1792, 1792, 1792, 1792, 1792, 1793,    0, 1793,    0,
        0, 1793, 1793,    0, 1793, 1793, 1793, 1793,    0, 1793,
     1793, 1793, 1793, 1793, 1793, 1794,    0, 1794,    0,    0,
     1794, 1794,    0,    0, 1794, 1794,    0,    0,    0, 1794,
     1794, 1794, 1794, 1794, 1795,    0, 1795,    0,    0, 1795,
     1795,    0, 1795, 1795, 1795, 1795,    0, 1795, 1795, 1795,
     1795, 1795, 1795, 1798,    0,    0,    0, 1798,    0, 1798,

     1798, 1799,    0,    0,    0, 1799,    0, 1799, 1799, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801,    0, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1802, 1802,    0, 1802,    0,    0,    0,
     1802,    0, 1802, 1802, 1803,    0,    0,    0,    0, 1803,
        0, 1803, 1803,    0,    0, 1803,    0, 1803, 1803, 1803,
        0, 1803, 1803, 1803,    0, 1803, 1803, 1803, 1805, 1805,
        0, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1806, 1806,    0,    0,    0, 1806, 1806, 1806,

     1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806,
        0, 1806, 1806, 1806, 1806, 1806, 1807, 1807, 1807, 1807,
     1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807,
     1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807,
     1808,    0,    0,    0, 1808,    0, 1808, 1808, 1809,    0,
        0, 1809,    0,    0,    0, 1809,    0, 1809, 1809, 1811,
        0, 1811,    0,    0, 1811, 1811,    0,    0, 1811, 1811,
     1811,    0,    0, 1811, 1811, 1811, 1811, 1811, 1812,    0,
     1812,    0,    0,    0, 1812,    0, 1812, 1812, 1814,    0,
     1814,    0,    0, 1814, 1814,    0,    0,    0, 1814, 1814,

        0, 1814, 1814,    0, 1814, 1814, 1814, 1815,    0, 1815,
        0,    0, 1815, 1815,    0, 1815,    0, 1815, 1815,    0,
     1815, 1815, 1815, 1815, 1815, 1815, 1816,    0, 1816,    0,
        0, 1816, 1816,    0, 1816,    0, 1816, 1816,    0, 1816,
     1816, 1816, 1816, 1816, 1816, 1817,    0, 1817,    0,    0,
     1817, 1817,    0, 1817,    0, 1817, 1817,    0, 1817, 1817,
     1817, 1817, 1817, 1817, 1818,    0, 1818,    0,    0, 1818,
     1818,    0, 1818,    0, 1818, 1818,    0, 1818, 1818, 1818,
     1818, 1818, 1818, 1819,    0, 1819,    0,    0, 1819, 1819,
        0,    0,    0, 1819, 1819,    0,    0, 1819, 1819, 1819,

     1819, 1819, 1820,    0, 1820,    0,    0, 1820, 1820,    0,
        0,    0, 1820,    0,    0,    0, 1820, 1820, 1820, 1820,
     1820, 1821,    0, 1821,    0,    0, 1821, 1821,    0, 1821,
        0, 1821, 1821,    0, 1821, 1821, 1821, 1821, 1821, 1821,
     1822,    0, 1822,    0,    0, 1822, 1822,    0, 1822,    0,
     1822, 1822,    0, 1822, 1822, 1822, 1822, 1822, 1822, 1823,
        0, 1823,    0,    0, 1823, 1823,    0,    0,    0, 1823,
     1823,    0,    0, 1823, 1823, 1823, 1823, 1823, 1824,    0,
     1824,    0,    0, 1824, 1824, 1824, 1824,    0, 1824, 1824,
        0, 1824, 1824, 1824, 1824, 1824, 1824, 1825,    0, 1825,

        0,    0, 1825, 1825,    0,    0,    0, 1825,    0,    0,
        0, 1825, 1825, 1825, 1825, 1825, 1826,    0, 1826,    0,
        0, 1826, 1826,    0,    0,    0, 1826, 1826,    0,    0,
     1826,    0, 1826, 1826, 1826, 1827,    0, 1827,    0,    0,
     1827, 1827,    0, 1827,    0, 1827, 1827,    0, 1827, 1827,
     1827, 1827, 1827, 1827, 1828,    0, 1828,    0,    0, 1828,
     1828,    0, 1828,    0, 1828, 1828,    0, 1828, 1828, 1828,
     1828, 1828, 1828, 1829,    0, 1829,    0,    0, 1829, 1829,
        0,    0,    0, 1829,    0,    0,    0, 1829, 1829, 1829,
     1829, 1829, 1830,    0, 1830,    0,    0, 1830, 1830,    0,

        0,    0, 1830,    0,    0,    0, 1830, 1830, 1830, 1830,
     1830, 1831,    0, 1831,    0,    0, 1831, 1831,    0, 1831,
        0, 1831, 1831,    0, 1831, 1831, 1831, 1831, 1831, 1831,
     1832,    0, 1832,    0,    0, 1832, 1832,    0, 1832,    0,
     1832, 1832,    0, 1832, 1832, 1832, 1832, 1832, 1832, 1833,
        0, 1833,    0,    0, 1833, 1833,    0,    0, 1833, 1833,
     1833,    0, 1833, 1833,    0, 1833, 1833, 1833, 1834,    0,
     1834,    0,    0, 1834, 1834,    0, 1834, 1834, 1834, 1834,
        0, 1834, 1834, 1834, 1834, 1834, 1834, 1835,    0, 1835,
        0,    0, 1835, 1835,    0, 1835, 1835, 1835, 1835,    0,

     1835, 1835, 1835, 1835, 1835, 1835, 1836,    0, 1836,    0,
        0, 1836, 1836,    0, 1836, 1836, 1836, 1836,    0, 1836,
     1836, 1836, 1836, 1836, 1836, 1837,    0, 1837,    0,    0,
     1837, 1837,    0, 1837, 1837, 1837, 1837,    0, 1837, 1837,
     1837, 1837, 1837, 1837, 1838,    0, 1838,    0,    0, 1838,
     1838,    0,    0, 1838, 1838, 1838,    0,    0, 1838, 1838,
     1838, 1838, 1838, 1839,    0, 1839,    0,    0, 1839, 1839,
        0,    0, 1839, 1839,    0,    0,    0, 1839, 1839, 1839,
     1839, 1839, 1840,    0, 1840,    0,    0, 1840, 1840,    0,
     1840, 1840, 1840, 1840,    0, 1840, 1840, 1840, 1840, 1840,

     1840, 1841,    0, 1841,    0,    0, 1841, 1841,    0, 1841,
     1841, 1841, 1841,    0, 1841, 1841, 1841, 1841, 1841, 1841,
     1842,    0, 1842,    0,    0, 1842, 1842,    0,    0, 1842,
     1842, 1842,    0,    0, 1842, 1842, 1842, 1842, 1842, 1843,
        0, 1843,    0,    0, 1843, 1843, 1843, 1843, 1843, 1843,
     1843,    0, 1843, 1843, 1843, 1843, 1843, 1843, 1844,    0,
     1844,    0,    0, 1844, 1844,    0,    0, 1844, 1844,    0,
        0,    0, 1844, 1844, 1844, 1844, 1844, 1845,    0, 1845,
        0,    0, 1845, 1845,    0,    0, 1845, 1845, 1845,    0,
        0, 1845,    0, 1845, 1845, 1845, 1846,    0, 1846,    0,

        0, 1846, 1846,    0, 1846, 1846, 1846, 1846,    0, 1846,
     1846, 1846, 1846, 1846, 1846, 1847,    0, 1847,    0,    0,
     1847, 1847,    0, 1847, 1847, 1847, 1847,    0, 1847, 1847,
     1847, 1847, 1847, 1847, 1848,    0, 1848,    0,    0, 1848,
     1848,    0,    0, 1848, 1848,    0,    0,    0, 1848, 1848,
     1848, 1848, 1848, 1849,    0, 1849,    0,    0, 1849, 1849,
        0,    0, 1849, 1849,    0,    0,    0, 1849, 1849, 1849,
     1849, 1849, 1850,    0, 1850,    0,    0, 1850, 1850,    0,
     1850, 1850, 1850, 1850,    0, 1850, 1850, 1850, 1850, 1850,
     1850, 1851,    0, 1851,    0,    0, 1851, 1851,    0, 1851,

     1851, 1851, 1851,    0, 1851, 1851, 1851, 1851, 1851, 1851,
     1855,    0,    0, 1855,    0,    0,    0, 1855,    0, 1855,
     1855, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857,
     1857, 1857, 1857, 1857,    0, 1857, 1857, 1857, 1857, 1857,
     1857, 1857, 1857, 1857, 1857, 1858,    0,    0,    0,    0,
     1858,    0, 1858, 1858,    0,    0, 1858,    0, 1858, 1858,
     1858,    0, 1858, 1858, 1858,    0, 1858, 1858, 1858, 1861,
     1861,    0, 1861,    0,    0,    0, 1861,    0, 1861, 1861,
     1863, 1863, 1863, 1863, 1863,    0, 1863, 1863, 1863, 1863,
        0,    0, 1863, 1863,    0,    0, 1863, 1863, 1863,    0,

     1863,    0,    0, 1863, 1864,    0,    0, 1864, 1864,    0,
     1864,    0,    0, 1864, 1864,    0,    0, 1864, 1864, 1864,
        0,    0, 1864, 1864, 1864, 1864, 1864, 1865,    0, 1865,
        0,    0,    0, 1865,    0, 1865, 1865, 1866,    0, 1866,
        0,    0, 1866, 1866, 1866, 1866,    0, 1866, 1866,    0,
     1866, 1866, 1866, 1866, 1866, 1866, 1867,    0, 1867,    0,
        0, 1867, 1867,    0,    0,    0, 1867, 1867,    0,    0,
     1867, 1867, 1867, 1867, 1867, 1868,    0, 1868,    0,    0,
     1868, 1868,    0, 1868,    0, 1868, 1868,    0, 1868, 1868,
        0, 1868, 1868, 1868, 1869,    0, 1869,    0,    0, 1869,

     1869,    0, 1869,    0, 1869, 1869,    0, 1869, 1869, 1869,
     1869, 1869, 1869, 1870,    0, 1870,    0,    0, 1870, 1870,
        0, 1870,    0, 1870, 1870,    0, 1870, 1870, 1870, 1870,
     1870, 1870, 1871,    0, 1871,    0,    0, 1871, 1871,    0,
     1871,    0, 1871, 1871,    0, 1871, 1871, 1871, 1871, 1871,
     1871, 1872,    0, 1872,    0,    0, 1872, 1872,    0,    0,
        0, 1872, 1872,    0,    0, 1872, 1872, 1872, 1872, 1872,
     1873,    0, 1873,    0,    0, 1873, 1873,    0,    0,    0,
     1873,    0,    0,    0, 1873, 1873, 1873, 1873, 1873, 1874,
        0, 1874,    0,    0, 1874, 1874,    0,    0,    0, 1874,

        0,    0,    0, 1874, 1874, 1874, 1874, 1874, 1875,    0,
     1875,    0,    0, 1875, 1875,    0, 1875,    0, 1875, 1875,
        0, 1875, 1875, 1875, 1875, 1875, 1875, 1876,    0, 1876,
        0,    0, 1876, 1876,    0,    0,    0, 1876,    0,    0,
        0, 1876, 1876, 1876, 1876, 1876, 1877,    0, 1877,    0,
        0, 1877, 1877,    0,    0,    0, 1877,    0,    0,    0,
     1877, 1877, 1877, 1877, 1877, 1878,    0, 1878,    0,    0,
     1878, 1878,    0,    0,    0, 1878,    0,    0,    0, 1878,
     1878, 1878, 1878, 1878, 1879,    0, 1879,    0,    0, 1879,
     1879,    0,    0,    0, 1879,    0,    0,    0, 1879, 1879,

     1879, 1879, 1879, 1880,    0, 1880,    0,    0, 1880, 1880,
        0,    0,    0, 1880, 1880,    0,    0, 1880, 1880, 1880,
     1880, 1880, 1881,    0, 1881,    0,    0, 1881, 1881,    0,
     1881,    0, 1881, 1881,    0, 1881, 1881, 1881, 1881, 1881,
     1881, 1882,    0, 1882,    0,    0, 1882, 1882,    0, 1882,
        0, 1882, 1882,    0, 1882, 1882, 1882, 1882, 1882, 1882,
     1883,    0, 1883,    0,    0, 1883, 1883,    0, 1883,    0,
     1883, 1883,    0, 1883, 1883, 1883, 1883, 1883, 1883, 1884,
        0, 1884,    0,    0, 1884, 1884,    0, 1884,    0, 1884,
     1884,    0, 1884, 1884, 1884, 1884, 1884, 1884, 1885,    0,

     1885,    0,    0, 1885, 1885,    0,    0,    0, 1885, 1885,
        0,    0, 1885,    0, 1885, 1885, 1885, 1886,    0, 1886,
        0,    0, 1886, 1886,    0,    0,    0, 1886,    0,    0,
        0, 1886, 1886, 1886, 1886, 1886, 1887,    0, 1887,    0,
        0, 1887, 1887,    0, 1887,    0, 1887, 1887,    0, 1887,
     1887, 1887, 1887, 1887, 1887, 1888,    0, 1888,    0,    0,
     1888, 1888, 1888, 1888, 1888, 1888, 1888,    0, 1888, 1888,
     1888, 1888, 1888, 1888, 1889,    0, 1889,    0,    0, 1889,
     1889,    0,    0, 1889, 1889, 1889,    0,    0, 1889, 1889,
     1889, 1889, 1889, 1890,    0, 1890,    0,    0, 1890, 1890,

        0, 1890, 1890, 1890, 1890,    0, 1890, 1890,    0, 1890,
     1890, 1890, 1891,    0, 1891,    0,    0, 1891, 1891,    0,
     1891, 1891, 1891, 1891,    0, 1891, 1891, 1891, 1891, 1891,
     1891, 1892,    0, 1892,    0,    0, 1892, 1892,    0, 1892,
     1892, 1892, 1892,    0, 1892, 1892, 1892, 1892, 1892, 1892,
     1893,    0, 1893,    0,    0, 1893, 1893,    0, 1893, 1893,
     1893, 1893,    0, 1893, 1893, 1893, 1893, 1893, 1893, 1894,
        0, 1894,    0,    0, 1894, 1894,    0,    0, 1894, 1894,
     1894,    0,    0, 1894, 1894, 1894, 1894, 1894, 1895,    0,
     1895,    0,    0, 1895, 1895,    0,    0, 1895, 1895,    0,

        0,    0, 1895, 1895, 1895, 1895, 1895, 1896,    0, 1896,
        0,    0, 1896, 1896,    0,    0, 1896, 1896,    0,    0,
        0, 1896, 1896, 1896, 1896, 1896, 1897,    0, 1897,    0,
        0, 1897, 1897,    0, 1897, 1897, 1897, 1897,    0, 1897,
     1897, 1897, 1897, 1897, 1897, 1898,    0, 1898,    0,    0,
     1898, 1898,    0,    0, 1898, 1898,    0,    0,    0, 1898,
     1898, 1898, 1898, 1898, 1899,    0, 1899,    0,    0, 1899,
     1899,    0,    0, 1899, 1899,    0,    0,    0, 1899, 1899,
     1899, 1899, 1899, 1900,    0, 1900,    0,    0, 1900, 1900,
        0,    0, 1900, 1900,    0,    0,    0, 1900, 1900, 1900,

     1900, 1900, 1901,    0, 1901,    0,    0, 1901, 1901,    0,
        0, 1901, 1901,    0,    0,    0, 1901, 1901, 1901, 1901,
     1901, 1902,    0, 1902,    0,    0, 1902, 1902,    0,    0,
     1902, 1902, 1902,    0,    0, 1902, 1902, 1902, 1902, 1902,
     1903,    0, 1903,    0,    0, 1903, 1903,    0, 1903, 1903,
     1903, 1903,    0, 1903, 1903, 1903, 1903, 1903, 1903, 1904,
        0, 1904,    0,    0, 1904, 1904,    0, 1904, 1904, 1904,
     1904,    0, 1904, 1904, 1904, 1904, 1904, 1904, 1905,    0,
     1905,    0,    0, 1905, 1905,    0, 1905, 1905, 1905, 1905,
        0, 1905, 1905, 1905, 1905, 1905, 1905, 1906,    0, 1906,

        0,    0, 1906, 1906,    0, 1906, 1906, 1906, 1906,    0,
     1906, 1906, 1906, 1906, 1906, 1906, 1907,    0, 1907,    0,
        0, 1907, 1907,    0,    0, 1907, 1907, 1907,    0,    0,
     1907,    0, 1907, 1907, 1907, 1908,    0, 1908,    0,    0,
     1908, 1908,    0,    0, 1908, 1908,    0,    0,    0, 1908,
     1908, 1908, 1908, 1908, 1909,    0, 1909,    0,    0, 1909,
     1909,    0, 1909, 1909, 1909, 1909,    0, 1909, 1909, 1909,
     1909, 1909, 1909, 1911,    0,    0, 1911,    0,    0,    0,
     1911,    0, 1911, 1911, 1912,    0,    0,    0,    0, 1912,
        0, 1912, 1912,    0,    0, 1912,    0, 1912, 1912, 1912,

        0, 1912, 1912, 1912,    0, 1912, 1912, 1912, 1915,    0,
        0,    0, 1915,    0, 1915, 1915, 1916, 1916, 1916, 1916,
     1916,    0, 1916, 1916, 1916, 1916,    0,    0, 1916, 1916,
        0,    0, 1916, 1916, 1916,    0, 1916,    0, 1916, 1916,
     1917, 1917, 1917, 1917, 1917,    0, 1917, 1917, 1917, 1917,
        0,    0, 1917, 1917,    0,    0, 1917, 1917, 1917,    0,
     1917, 1917,    0, 1917, 1918,    0, 1918,    0,    0, 1918,
     1918,    0,    0, 1918, 1918, 1918,    0,    0, 1918, 1918,
     1918, 1918, 1918, 1919,    0, 1919,    0,    0, 1919, 1919,
        0,    0,    0, 1919, 1919,    0, 1919, 1919,    0, 1919,

     1919, 1919, 1920,    0, 1920,    0,    0, 1920, 1920,    0,
     1920,    0, 1920, 1920,    0, 1920, 1920, 1920, 1920, 1920,
     1920, 1921,    0, 1921,    0,    0, 1921, 1921,    0, 1921,
        0, 1921, 1921,    0, 1921, 1921, 1921, 1921, 1921, 1921,
     1922,    0, 1922,    0,    0, 1922, 1922,    0,    0,    0,
     1922,    0,    0,    0, 1922, 1922, 1922, 1922, 1922, 1923,
        0, 1923,    0,    0, 1923, 1923,    0,    0,    0, 1923,
        0,    0,    0, 1923, 1923, 1923, 1923, 1923, 1924,    0,
     1924,    0,    0, 1924, 1924,    0,    0,    0, 1924,    0,
        0,    0, 1924, 1924, 1924, 1924, 1924, 1925,    0, 1925,

        0,    0, 1925, 1925,    0,    0,    0, 1925, 1925,    0,
        0, 1925, 1925, 1925, 1925, 1925, 1926,    0, 1926,    0,
        0, 1926, 1926,    0,    0,    0, 1926,    0,    0,    0,
     1926, 1926, 1926, 1926, 1926, 1927,    0, 1927,    0,    0,
     1927, 1927,    0,    0,    0, 1927, 1927,    0,    0, 1927,
     1927, 1927, 1927, 1927, 1928,    0, 1928,    0,    0, 1928,
     1928,    0, 1928,    0, 1928, 1928,    0, 1928, 1928, 1928,
     1928, 1928, 1928, 1929,    0, 1929,    0,    0, 1929, 1929,
        0, 1929,    0, 1929, 1929,    0, 1929, 1929, 1929, 1929,
     1929, 1929, 1930,    0, 1930,    0,    0, 1930, 1930,    0,

     1930,    0, 1930, 1930,    0, 1930, 1930, 1930, 1930, 1930,
     1930, 1931,    0, 1931,    0,    0, 1931, 1931,    0, 1931,
        0, 1931, 1931,    0, 1931, 1931, 1931, 1931, 1931, 1931,
     1932,    0, 1932,    0,    0, 1932, 1932,    0, 1932,    0,
     1932, 1932,    0, 1932, 1932, 1932, 1932, 1932, 1932, 1933,
        0, 1933,    0,    0, 1933, 1933,    0, 1933,    0, 1933,
     1933,    0, 1933, 1933, 1933, 1933, 1933, 1933, 1934,    0,
     1934,    0,    0, 1934, 1934,    0, 1934,    0, 1934, 1934,
        0, 1934, 1934, 1934, 1934, 1934, 1934, 1935,    0, 1935,
        0,    0, 1935, 1935,    0,    0,    0, 1935, 1935,    0,

        0, 1935, 1935, 1935, 1935, 1935, 1936,    0, 1936,    0,
        0, 1936, 1936,    0,    0,    0, 1936,    0,    0,    0,
     1936, 1936, 1936, 1936, 1936, 1937,    0, 1937,    0,    0,
     1937, 1937,    0,    0, 1937, 1937, 1937,    0, 1937, 1937,
        0, 1937, 1937, 1937, 1938,    0, 1938,    0,    0, 1938,
     1938,    0, 1938, 1938, 1938, 1938,    0, 1938, 1938, 1938,
     1938, 1938, 1938, 1939,    0, 1939,    0,    0, 1939, 1939,
        0, 1939, 1939, 1939, 1939,    0, 1939, 1939, 1939, 1939,
     1939, 1939, 1940,    0, 1940,    0,    0, 1940, 1940,    0,
        0, 1940, 1940,    0,    0,    0, 1940, 1940, 1940, 1940,

     1940, 1941,    0, 1941,    0,    0, 1941, 1941,    0,    0,
     1941, 1941,    0,    0,    0, 1941, 1941, 1941, 1941, 1941,
     1942,    0, 1942,    0,    0, 1942, 1942,    0,    0, 1942,
     1942,    0,    0,    0, 1942, 1942, 1942, 1942, 1942, 1943,
        0, 1943,    0,    0, 1943, 1943,    0,    0, 1943, 1943,
     1943,    0,    0, 1943, 1943, 1943, 1943, 1943, 1944,    0,
     1944,    0,    0, 1944, 1944,    0,    0, 1944, 1944,    0,
        0,    0, 1944, 1944, 1944, 1944, 1944, 1945,    0, 1945,
        0,    0, 1945, 1945,    0,    0, 1945, 1945, 1945,    0,
        0, 1945, 1945, 1945, 1945, 1945, 1946,    0, 1946,    0,

        0, 1946, 1946,    0, 1946, 1946, 1946, 1946,    0, 1946,
     1946, 1946, 1946, 1946, 1946, 1947,    0, 1947,    0,    0,
     1947, 1947,    0, 1947, 1947, 1947, 1947,    0, 1947, 1947,
     1947, 1947, 1947, 1947, 1948,    0, 1948,    0,    0, 1948,
     1948,    0, 1948, 1948, 1948, 1948,    0, 1948, 1948, 1948,
     1948, 1948, 1948, 1949,    0, 1949,    0,    0, 1949, 1949,
        0, 1949, 1949, 1949, 1949,    0, 1949, 1949, 1949, 1949,
     1949, 1949, 1950,    0, 1950,    0,    0, 1950, 1950,    0,
     1950, 1950, 1950, 1950,    0, 1950, 1950, 1950, 1950, 1950,
     1950, 1951,    0, 1951,    0,    0, 1951, 1951,    0, 1951,

     1951, 1951, 1951,    0, 1951, 1951, 1951, 1951, 1951, 1951,
     1952,    0, 1952,    0,    0, 1952, 1952,    0, 1952, 1952,
     1952, 1952,    0, 1952, 1952, 1952, 1952, 1952, 1952, 1953,
        0, 1953,    0,    0, 1953, 1953,    0,    0, 1953, 1953,
     1953,    0,    0, 1953, 1953, 1953, 1953, 1953, 1954,    0,
     1954,    0,    0, 1954, 1954,    0,    0, 1954, 1954,    0,
        0,    0, 1954, 1954, 1954, 1954, 1954, 1955, 1955, 1955,
        0, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955,
     1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955,
     1955, 1958, 1958,    0, 1958,    0,    0,    0, 1958,    0,

     1958, 1958, 1959, 1959, 1959, 1959, 1959,    0, 1959, 1959,
     1959, 1959,    0,    0, 1959, 1959,    0,    0, 1959, 1959,
     1959,    0, 1959, 1959,    0, 1959, 1960, 1960, 1960, 1960,
     1960,    0, 1960, 1960, 1960, 1960,    0,    0, 1960, 1960,
        0,    0, 1960, 1960, 1960,    0, 1960,    0,    0, 1960,
     1961, 1961, 1961, 1961, 1961,    0, 1961, 1961, 1961, 1961,
        0,    0, 1961, 1961,    0,    0, 1961, 1961, 1961,    0,
     1961,    0,    0, 1961, 1962, 1962, 1962, 1962, 1962,    0,
     1962, 1962, 1962, 1962,    0,    0, 1962, 1962,    0,    0,
     1962, 1962, 1962,    0, 1962,    0,    0, 1962, 1963, 1963,

     1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963,
     1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963,
     1963, 1963, 1964,    0, 1964,    0,    0, 1964, 1964, 1964,
     1964,    0, 1964, 1964,    0, 1964, 1964, 1964, 1964, 1964,
     1964, 1965,    0, 1965,    0,    0, 1965, 1965,    0,    0,
        0, 1965, 1965,    0,    0, 1965, 1965, 1965, 1965, 1965,
     1966,    0, 1966,    0,    0, 1966, 1966,    0, 1966,    0,
     1966, 1966,    0, 1966, 1966, 1966, 1966, 1966, 1966, 1967,
        0, 1967,    0,    0, 1967, 1967,    0, 1967,    0, 1967,
     1967,    0, 1967, 1967, 1967, 1967, 1967, 1967, 1968,    0,

     1968,    0,    0, 1968, 1968,    0, 1968,    0, 1968, 1968,
        0, 1968, 1968, 1968, 1968, 1968, 1968, 1969,    0, 1969,
        0,    0, 1969, 1969,    0, 1969,    0, 1969, 1969,    0,
     1969, 1969, 1969, 1969, 1969, 1969, 1970,    0, 1970,    0,
        0, 1970, 1970,    0, 1970,    0, 1970, 1970,    0, 1970,
     1970, 1970, 1970, 1970, 1970, 1971,    0, 1971,    0,    0,
     1971, 1971,    0, 1971,    0, 1971, 1971,    0, 1971, 1971,
     1971, 1971, 1971, 1971, 1972,    0, 1972,    0,    0, 1972,
     1972,    0, 1972,    0, 1972, 1972,    0, 1972, 1972, 1972,
     1972, 1972, 1972, 1973,    0, 1973,    0,    0, 1973, 1973,

        0,    0,    0, 1973, 1973,    0,    0, 1973, 1973, 1973,
     1973, 1973, 1974,    0, 1974,    0,    0, 1974, 1974,    0,
        0,    0, 1974,    0,    0,    0, 1974, 1974, 1974, 1974,
     1974, 1975,    0, 1975,    0,    0, 1975, 1975,    0,    0,
        0, 1975,    0,    0,    0, 1975, 1975, 1975, 1975, 1975,
     1976,    0, 1976,    0,    0, 1976, 1976, 1976, 1976, 1976,
     1976, 1976,    0, 1976, 1976, 1976, 1976, 1976, 1976, 1977,
        0, 1977,    0,    0, 1977, 1977,    0,    0, 1977, 1977,
     1977,    0,    0, 1977, 1977, 1977, 1977, 1977, 1978,    0,
     1978,    0,    0, 1978, 1978,    0, 1978, 1978, 1978, 1978,

        0, 1978, 1978, 1978, 1978, 1978, 1978, 1979,    0, 1979,
        0,    0, 1979, 1979,    0, 1979, 1979, 1979, 1979,    0,
     1979, 1979, 1979, 1979, 1979, 1979, 1980,    0, 1980,    0,
        0, 1980, 1980,    0, 1980, 1980, 1980, 1980,    0, 1980,
     1980, 1980, 1980, 1980, 1980, 1981,    0, 1981,    0,    0,
     1981, 1981,    0, 1981, 1981, 1981, 1981,    0, 1981, 1981,
     1981, 1981, 1981, 1981, 1982,    0, 1982,    0,    0, 1982,
     1982,    0, 1982, 1982, 1982, 1982,    0, 1982, 1982, 1982,
     1982, 1982, 1982, 1983,    0, 1983,    0,    0, 1983, 1983,
        0, 1983, 1983, 1983, 1983,    0, 1983, 1983, 1983, 1983,

     1983, 1983, 1984,    0, 1984,    0,    0, 1984, 1984,    0,
     1984, 1984, 1984, 1984,    0, 1984, 1984, 1984, 1984, 1984,
     1984, 1985,    0, 1985,    0,    0, 1985, 1985,    0,    0,
     1985, 1985, 1985,    0,    0, 1985, 1985, 1985, 1985, 1985,
     1986,    0, 1986,    0,    0, 1986, 1986,    0,    0, 1986,
     1986,    0,    0,    0, 1986, 1986, 1986, 1986, 1986, 1987,
        0, 1987,    0,    0, 1987, 1987,    0,    0, 1987, 1987,
        0,    0,    0, 1987, 1987, 1987, 1987, 1987, 1988, 1988,
     1988, 1988, 1988,    0, 1988, 1988, 1988, 1988,    0,    0,
     1988, 1988,    0,    0, 1988, 1988, 1988,    0, 1988,    0,

        0, 1988, 1989, 1989, 1989, 1989, 1989,    0, 1989, 1989,
     1989, 1989,    0,    0, 1989, 1989,    0,    0, 1989, 1989,
     1989,    0, 1989,    0,    0, 1989, 1990, 1990, 1990, 1990,
     1990,    0, 1990, 1990, 1990, 1990,    0,    0, 1990, 1990,
        0,    0, 1990, 1990, 1990,    0, 1990,    0,    0, 1990,
     1991,    0, 1991,    0,    0, 1991, 1991,    0,    0, 1991,
     1991, 1991,    0,    0, 1991, 1991, 1991, 1991, 1991, 1992,
        0, 1992,    0,    0,    0, 1992,    0, 1992, 1992, 1993,
        0, 1993,    0,    0, 1993, 1993,    0, 1993,    0, 1993,
     1993,    0, 1993, 1993, 1993, 1993, 1993, 1993, 1994,    0,

     1994,    0,    0, 1994, 1994,    0, 1994,    0, 1994, 1994,
        0, 1994, 1994, 1994, 1994, 1994, 1994, 1995,    0, 1995,
        0,    0, 1995, 1995,    0, 1995,    0, 1995, 1995,    0,
     1995, 1995, 1995, 1995, 1995, 1995, 1996,    0, 1996,    0,
        0, 1996, 1996,    0, 1996,    0, 1996, 1996,    0, 1996,
     1996, 1996, 1996, 1996, 1996, 1997,    0, 1997,    0,    0,
     1997, 1997,    0,    0,    0, 1997,    0,    0,    0, 1997,
     1997, 1997, 1997, 1997, 1998,    0, 1998,    0,    0, 1998,
     1998,    0, 1998, 1998, 1998, 1998,    0, 1998, 1998, 1998,
     1998, 1998, 1998, 1999,    0, 1999,    0,    0, 1999, 1999,

        0, 1999, 1999, 1999, 1999,    0, 1999, 1999, 1999, 1999,
     1999, 1999, 2000,    0, 2000,    0,    0, 2000, 2000,    0,
     2000, 2000, 2000, 2000,    0, 2000, 2000, 2000, 2000, 2000,
     2000, 2001,    0, 2001,    0,    0, 2001, 2001,    0, 2001,
     2001, 2001, 2001,    0, 2001, 2001, 2001, 2001, 2001, 2001,
     2002, 2002, 2002, 2002, 2002,    0, 2002, 2002, 2002, 2002,
        0,    0, 2002, 2002,    0,    0, 2002, 2002, 2002,    0,
     2002,    0,    0, 2002, 2003, 2003, 2003, 2003, 2003,    0,
     2003, 2003, 2003, 2003,    0,    0, 2003, 2003,    0,    0,
     2003, 2003, 2003,    0, 2003,    0,    0, 2003, 2004, 2004,

     2004, 2004, 2004,    0, 2004, 2004, 2004, 2004,    0,    0,
     2004, 2004,    0,    0, 2004, 2004, 2004,    0, 2004,    0,
        0, 2004, 2005, 2005, 2005, 2005, 2005,    0, 2005, 2005,
     2005, 2005,    0,    0, 2005, 2005,    0,    0, 2005, 2005,
     2005,    0, 2005,    0,    0, 2005, 2006, 2006, 2006, 2006,
     2006,    0, 2006, 2006, 2006, 2006,    0,    0, 2006, 2006,
        0,    0, 2006, 2006, 2006,    0, 2006,    0,    0, 2006,
     2007, 2007, 2007, 2007, 2007,    0, 2007, 2007, 2007, 2007,
        0,    0, 2007, 2007,    0,    0, 2007, 2007, 2007,    0,
     2007,    0,    0, 2007, 2008, 2008, 2008, 2008, 2008,    0,

     2008, 2008, 2008, 2008,    0,    0, 2008, 2008,    0,    0,
     2008, 2008, 2008,    0, 2008,    0,    0, 2008, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747

    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parser.l"
/* Copyright 2009-2022
 * Kaz Kylheku <kaz@kylheku.com>
 * Vancouver, Canada
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#line 30 "parser.l"

#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <stdlib.h>
#include <limits.h>
#include <wchar.h>
#include <signal.h>
#include "config.h"
#include "lib.h"
#include "gc.h"
#include "stream.h"
#include "utf8.h"
#include "signal.h"
#include "unwind.h"
#include "hash.h"
#include "y.tab.h"
#include "parser.h"
#include "txr.h"

#define YY_INPUT(buf, result, max_size)                                 \
  do {                                                                  \
    val self = lit("parser");                                           \
    val n = get_bytes(self, yyextra->stream,                            \
                      coerce(mem_t *, buf), max_size);                  \
    result = c_num(n, self);                                            \
  } while (0)

#define YY_DECL \
  static int yylex_impl(YYSTYPE *yylval_param, yyscan_t yyscanner)

int opt_loglevel = 1;   /* 0 - quiet; 1 - normal; 2 - verbose */

val form_to_ln_hash;

static int directive_tok(scanner_t *yyg, int tok, int state);

#define FLEX_NUM_VERSION 10000*YY_FLEX_MAJOR_VERSION + \
                         100*YY_FLEX_MINOR_VERSION + \
                         YY_FLEX_SUBMINOR_VERSION

#if FLEX_NUM_VERSION < 20509
int yylex_destroy(void)
{
  return 0;
}
#endif

/* Missing prototypes not generated by flex. */
int yyget_column(yyscan_t);
void yyset_column (int column_no, yyscan_t yyscanner);

/* The following function is all that libflex provides.
   By providing it here, we eliminate the need to link libflex. */
#define YY_SKIP_YYWRAP
INLINE int yywrap(yyscan_t scanner)
{
  (void) scanner;
  return 1;
}

void yyerror(scanner_t *scanner, parser_t *parser, const char *s)
{
  yyerrorf(scanner, lit("~a"), string_utf8(s), nao);
  if (parser->prepared_msg) {
    yyerrorf(scanner, lit("~a"), parser->prepared_msg, nao);
    parser->prepared_msg = nil;
  }
}

void yyerrorf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    if (opt_compat && opt_compat <= 114)
      format(std_error, lit("~a: (~a:~d): "), prog_string,
             parser->name, num(parser->lineno), nao);
    else
      format(std_error, lit("~a:~d: "),
             parser->name, num(parser->lineno), nao);

    vformat(std_error, fmt, vl);
    put_char(chr('\n'), std_error);
    va_end (vl);
  }
  parser->errors++;
}

static void yyerrprepf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    set(mkloc(parser->prepared_msg, parser->parser),
        vformat_to_string(fmt, vl));
    va_end (vl);
  }
}

static void out_of_range_float(scanner_t *scanner, const char *tok)
{
    yyerrorf(scanner, lit("out-of-range floating-point literal: ~a"),
             string_utf8(tok), nao);
}

static wchar_t char_esc(int letter)
{
  switch (letter) {
  case ' ': return L' ';
  case 'a': return L'\a';
  case 'b': return L'\b';
  case 't': return L'\t';
  case 'n': return L'\n';
  case 'v': return L'\v';
  case 'f': return L'\f';
  case 'r': return L'\r';
  case 'e': return 27;
  case '"': return L'"';
  case '\'': return L'\'';
  case '`': return L'`';
  case '/': return L'/';
  case '@': return L'@';
  case '\\': return L'\\';
  }

  internal_error("unhandled escape character");
}

static wchar_t num_esc(scanner_t *scn, char *num)
{
  long val = 0;

  if (num[0] == 'x' || num[0] == 'u') {
    if (strlen(num) > 7)
      yyerror(scn, yyget_extra(scn), "too many digits in hex character escape");
    else
      val = strtol(num + 1, 0, 16);
  } else {
    if (num[0] == 'o')
      num++;
    if (strlen(num) > 8)
      yyerror(scn, yyget_extra(scn), "too many digits in octal character escape");
    else
      val = strtol(num, 0, 8);
  }

  if (val < 0 || val > 0x10FFFF || convert(wchar_t, val) != val) {
    yyerror(scn, yyget_extra(scn), "numeric character escape out of range");
    val = 0;
  }

  return val;
}

static wchar_t *unicode_ident(scanner_t *scn, const char *lex)
{
  wchar_t *wlex = utf8_dup_from(lex), *ptr = wlex, wch;

  while ((wch = *ptr++)) {
    if (wch < 0x1680 || (wch >= 0x3000 && wch < 0xdc00))
      continue;

    if ((wch >= 0xdc00 && wch <= 0xdcff) ||
        (wch >= 0xd800 && wch <= 0xdbff) ||
#if FULL_UNICODE
        (wch >= 0xf0000 && wch <= 0xffffd) ||
        (wch >= 0x100000 && wch <= 0x10fffd) ||
#endif
        (wch >= 0xe000 && wch <= 0xf8ff) ||
        (wch == 0xfffe) ||
        (wch == 0xffff))
    {
      yyerror(scn, yyget_extra(scn),
              "disallowed Unicode character in identifier");
      break;
    }

    switch (wch) {
    case 0x1680: case 0x180e: case 0x2000: case 0x2001: case 0x2002:
    case 0x2003: case 0x2004: case 0x2005: case 0x2006: case 0x2007:
    case 0x2008: case 0x2009: case 0x200a: case 0x2028: case 0x2029:
    case 0x205f: case 0x3000:
      yyerror(scn, yyget_extra(scn),
              "Unicode space occurs in identifier");
      break;
    default:
      continue;
    }

    break;
  }

  return wlex;
}

static char *remove_char(char *str, int c)
{
  char *dst = str, *src = str;

  while (*src) {
    int ch = *src++;
    if (ch != c)
      *dst++ = ch;
  }

  *dst = 0;

  return str;
}

#line 4443 "lex.yy.c"
#define YY_NO_INPUT 1

#line 4446 "lex.yy.c"

#define INITIAL 0
#define SPECIAL 1
#define BRACED 2
#define NESTED 3
#define REGEX 4
#define SREGEX 5
#define STRLIT 6
#define CHRLIT 7
#define QSILIT 8
#define QSPECIAL 9
#define WLIT 10
#define QWLIT 11
#define BUFLIT 12
#define JSON 13
#define JLIT 14
#define JMARKER 15

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE parser_t *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		/* Create the reject buffer large enough to save one state per allowed character. */
		if ( ! yyg->yy_state_buf )
			yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
		if ( ! yyg->yy_state_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 317 "parser.l"


#line 4762 "lex.yy.c"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1748 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1747 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 319 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num(10));
  return NUMBER;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 331 "parser.l"
{
  val str = string_own(utf8_dup_from(remove_char(yytext, ',')));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num(10));
  return NUMBER;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 343 "parser.l"
{
  val str = string_own(utf8_dup_from(remove_char(yytext + 2, ',')));
  int base;

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 362 "parser.l"
{
  int base = 0;
  val str = string_own(utf8_dup_from(yytext + 2));

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  yyerrorf(yyg, lit("trailing junk in numeric literal: ~a~a~a"),
           chr(yytext[0]), chr(yytext[1]), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 384 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str_utf8(yytext)) == nil)
    out_of_range_float(yyg, yytext);

  return NUMBER;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 396 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  remove_char(yytext, ',');

  if ((yylval->val = flo_str_utf8(yytext)) == nil)
    out_of_range_float(yyg, yytext);

  return NUMBER;
}
	YY_BREAK
case 7:
#line 412 "parser.l"
case 8:
#line 413 "parser.l"
case 9:
YY_RULE_SETUP
#line 413 "parser.l"
{
  val str = string_utf8(yytext);

  yyerrorf(yyg, lit("trailing junk in floating-point literal: ~a"), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str_utf8(yytext)) == nil)
    out_of_range_float(yyg, yytext);

  return NUMBER;
}
	YY_BREAK
case 10:
/* rule 10 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 429 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str_utf8(yytext)) == nil)
    out_of_range_float(yyg, yytext);

  return NUMBER;
}
	YY_BREAK
case 11:
#line 442 "parser.l"
case 12:
YY_RULE_SETUP
#line 442 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(10));
  return METANUM;
}
	YY_BREAK
case 13:
#line 454 "parser.l"
case 14:
YY_RULE_SETUP
#line 454 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(16));
  return METANUM;
}
	YY_BREAK
case 15:
#line 466 "parser.l"
case 16:
YY_RULE_SETUP
#line 466 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(8));
  return METANUM;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 477 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(2));
  return METANUM;
}
	YY_BREAK
case 18:
#line 489 "parser.l"
case 19:
#line 490 "parser.l"
case 20:
YY_RULE_SETUP
#line 490 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 21:
#line 507 "parser.l"
case 22:
#line 508 "parser.l"
case 23:
YY_RULE_SETUP
#line 508 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 24:
#line 519 "parser.l"
case 25:
YY_RULE_SETUP
#line 519 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yyerrorf(yyg, lit("bad token: ~a"),
                    string_own(utf8_dup_from(yytext)),
                    nao);
  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 532 "parser.l"
{
  return directive_tok(yyg, ALL, 0);
}
	YY_BREAK
case 27:
/* rule 27 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 536 "parser.l"
{
  return directive_tok(yyg, SOME, NESTED);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 540 "parser.l"
{
  return directive_tok(yyg, NONE, 0);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 544 "parser.l"
{
  return directive_tok(yyg, MAYBE, 0);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 548 "parser.l"
{
  return directive_tok(yyg, CASES, 0);
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 552 "parser.l"
{
  return directive_tok(yyg, BLOCK, NESTED);
}
	YY_BREAK
case 32:
/* rule 32 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 556 "parser.l"
{
  return directive_tok(yyg, CHOOSE, NESTED);
}
	YY_BREAK
case 33:
/* rule 33 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 560 "parser.l"
{
  return directive_tok(yyg, GATHER, NESTED);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 564 "parser.l"
{
  return directive_tok(yyg, AND, 0);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 568 "parser.l"
{
  return directive_tok(yyg, OR, 0);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 572 "parser.l"
{
  return directive_tok(yyg, END, 0);
}
	YY_BREAK
case 37:
/* rule 37 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 576 "parser.l"
{
  return directive_tok(yyg, COLLECT, NESTED);
}
	YY_BREAK
case 38:
/* rule 38 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 580 "parser.l"
{
  return directive_tok(yyg, COLL, NESTED);
}
	YY_BREAK
case 39:
/* rule 39 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 584 "parser.l"
{
  return directive_tok(yyg, UNTIL, NESTED);
}
	YY_BREAK
case 40:
/* rule 40 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 588 "parser.l"
{
  return directive_tok(yyg, OUTPUT, NESTED);
}
	YY_BREAK
case 41:
/* rule 41 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 592 "parser.l"
{
  return directive_tok(yyg, REPEAT, NESTED);
}
	YY_BREAK
case 42:
/* rule 42 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 596 "parser.l"
{
  return directive_tok(yyg, REP, NESTED);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 600 "parser.l"
{
  return directive_tok(yyg, SINGLE, 0);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 604 "parser.l"
{
  return directive_tok(yyg, FIRST, 0);
}
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 608 "parser.l"
{
  return directive_tok(yyg, LAST, NESTED);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 612 "parser.l"
{
  return directive_tok(yyg, EMPTY, 0);
}
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 616 "parser.l"
{
  return directive_tok(yyg, MOD, NESTED);
}
	YY_BREAK
case 48:
/* rule 48 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 620 "parser.l"
{
  return directive_tok(yyg, MODLAST, NESTED);
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 624 "parser.l"
{
  return directive_tok(yyg, DEFINE, NESTED);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 628 "parser.l"
{
  return directive_tok(yyg, TRY, 0);
}
	YY_BREAK
case 51:
/* rule 51 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 632 "parser.l"
{
  return directive_tok(yyg, CATCH, NESTED);
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 636 "parser.l"
{
  return directive_tok(yyg, FINALLY, 0);
}
	YY_BREAK
case 53:
/* rule 53 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 640 "parser.l"
{
  return directive_tok(yyg, IF, NESTED);
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 644 "parser.l"
{
  return directive_tok(yyg, ELIF, NESTED);
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 648 "parser.l"
{
  return directive_tok(yyg, ELSE, 0);
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 652 "parser.l"
{
  yy_push_state(BRACED, yyscanner);
  yylval->lineno = yyextra->lineno;
  return yytext[0];
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 658 "parser.l"
{
 yy_push_state(NESTED, yyscanner);
 yylval->lineno = yyextra->lineno;
 return yytext[0];
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 664 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 248) ? OLD_AT : '@';
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 669 "parser.l"
{
  yylval->chr = '*';
  return SPLICE;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 674 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 679 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 62:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 688 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space or 0 needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 703 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 712 "parser.l"
{
  /* Eat whitespace in directive */
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 716 "parser.l"
{
  yy_push_state(STRLIT, yyscanner);
  return '"';
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 721 "parser.l"
{
  yy_push_state(CHRLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_BACKSLASH;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 727 "parser.l"
{
  yy_push_state(BUFLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_B_QUOTE;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 733 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_SLASH;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 739 "parser.l"
{
  yy_push_state(QSILIT, yyscanner);
  return '`';
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 744 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WORDS;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 750 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WSPLICE;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 756 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWORDS;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 762 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWSPLICE;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 768 "parser.l"
{
  return '#';
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 772 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_H;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 777 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_S;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 782 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_R;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 787 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_N;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 792 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_T;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 797 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  yy_push_state(JSON, yyscanner);
  return HASH_J;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 803 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_SEMI;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 808 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));
  yylval->val = int_str(str, num(10));
  return HASH_N_EQUALS;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 814 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));
  yylval->val = int_str(str, num(10));
  return HASH_N_HASH;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 820 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 185) ? OLD_DOTDOT : DOTDOT;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 825 "parser.l"
{
  yy_pop_state(yyscanner);
  yylval->lexeme = chk_strdup(L"@");
  return TEXT;
}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 831 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 835 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  return '/';
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 840 "parser.l"
{
  yylval->chr = '.';
  return CONSDOT;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 845 "parser.l"
{
  yylval->chr = '.';
  return LAMBDOT;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 850 "parser.l"
{
  yylval->chr = '.';
  return UREFDOT;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 855 "parser.l"
{
  yylval->chr = '.';
  return '.';
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 860 "parser.l"
{
  yylval->chr = '.';
  return OREFDOT;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 865 "parser.l"
{
  yylval->chr = '.';
  return UOREFDOT;
}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 870 "parser.l"
{
  if (YYSTATE == SPECIAL)
    yy_pop_state(yyscanner);  /* @\ continuation */
  yyextra->lineno++;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 876 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = char_esc(yytext[1]);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);
  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 885 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = num_esc(yyg, yytext + 1);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);

  {
    char lastchar = yytext[yyleng-1];
    if (lastchar == ';' && opt_compat && opt_compat <= 109)
      unput(lastchar);
  }

  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 901 "parser.l"
{
  yyerrorf(yyg, lit("\\x escape without digits"), nao);
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 905 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 909 "parser.l"
{
  /* comment */
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 913 "parser.l"
{
  val ch = chr_str(string_utf8(yytext), zero);
  if (chr_isspace(ch))
    yyerrprepf(yyg, lit("unexpected whitespace character #\\x~,02x"),
               ch, nao);
  else if (chr_isunisp(ch))
    yyerrprepf(yyg, lit("unexpected Unicode space character #\\x~,02x"),
               ch, nao);
  else if (chr_iscntrl(ch))
    yyerrprepf(yyg, lit("unexpected control character #\\x~,02x"),
               ch, nao);
  else
    yyerrprepf(yyg, lit("unexpected character #\\~a"),
               ch, nao);
  return ERRTOK;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 930 "parser.l"
{
  yyerrprepf(yyg, lit("non-UTF-8 byte #x~02x in directive"),
             num(convert(unsigned char, yytext[0])), nao);
  return ERRTOK;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 936 "parser.l"
{
  yylval->chr = '/';
  return (YYSTATE == SREGEX) ? REGCHAR : '/';
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 941 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return REGCHAR;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 946 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext + 1);
  return REGCHAR;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 951 "parser.l"
{
  yylval->chr = yytext[1];
  return REGTOKEN;
}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 956 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 960 "parser.l"
{
  yyextra->lineno++;
  yyerrprepf(yyg, lit("newline in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 966 "parser.l"
{
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return REGCHAR;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 972 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 977 "parser.l"
{
  yylval->chr = yytext[1];
  return REGCHAR;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 982 "parser.l"
{
  if (opt_compat && opt_compat <= 105) {
    yylval->chr = yytext[1];
    return REGCHAR;
  }

  if (yytext[1] == 'x')
    yyerrprepf(yyg, lit("\\x escape without digits in regex"), nao);
  else
    yyerrprepf(yyg, lit("unrecognized escape in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 995 "parser.l"
{
  yyerrprepf(yyg, lit("dangling backslash in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1000 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yylval->lexeme = chk_strdup(wchr);
    return TEXT;
  }
  yylval->chr = wchr[0];
  return REGCHAR;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1010 "parser.l"
{
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return REGCHAR;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1015 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SPACE;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1020 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return TEXT;
}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 1025 "parser.l"
{
  yyextra->lineno++;
  return '\n';
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1030 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
  return '*';
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1035 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 1039 "parser.l"
{
  /* eat whole line comment */
  yyextra->lineno++;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1044 "parser.l"
{
  /* comment to end of line */
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1048 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1053 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1058 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1063 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 1068 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 1072 "parser.l"
{
  yyextra->lineno++;

  if (!opt_compat || opt_compat > 109)
    return ' ';
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1080 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext+1);
  return LITCHAR;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1085 "parser.l"
{
  yyerrorf(yyg, lit("\\x escape without digits"), nao);
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1089 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape: \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1093 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext);
  return LITCHAR;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1098 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1103 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK; /* hack */
}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 1108 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 1115 "parser.l"
{
  yyerrprepf(yyg, lit("newline in character literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 1122 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string quasiliteral"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 1129 "parser.l"
{
  yyextra->lineno++;

  if (opt_compat && opt_compat <= 109)
    return ' ';

  yyerrprepf(yyg, lit("newline in word list literal"), nao);
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 138:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1140 "parser.l"
{
  yy_push_state(QSPECIAL, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1145 "parser.l"
{
  yyerrprepf(yyg, lit("malformed @ expression in quasiliteral"), nao);
  return ERRTOK;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1150 "parser.l"
{
  return ' ';
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1154 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1159 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1164 "parser.l"
{
  wchar_t ch0, ch1;
  yytext[6] = 0;
  ch0 = num_esc(yyg, yytext + 1);
  ch1 = num_esc(yyg, yytext + 7);
  yylval->chr = ((ch0 - 0xD800) << 10 | (ch1 - 0xDC00)) + 0x10000;
  return LITCHAR;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1173 "parser.l"
{
  wchar_t ch = num_esc(yyg, yytext + 1);
  yylval->chr = if3(ch, ch, 0xDC00);
  return LITCHAR;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1179 "parser.l"
{
  yyerrorf(yyg, lit("JSON \\u escape needs four digits"), nao);
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1183 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized JSON escape: \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 1187 "parser.l"
{
  yyerrprepf(yyg, lit("newline in JSON string"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1194 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yylval->lexeme = chk_strdup(wchr);
    return TEXT;
  }
  yylval->chr = wchr[0];
  return LITCHAR;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1204 "parser.l"
{
  yylval->chr = strtol(yytext, 0, 16);
  return LITCHAR;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1209 "parser.l"
{
  return '\'';
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1213 "parser.l"
{
}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 1216 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1220 "parser.l"
{
  yyerrorf(yyg, lit("bad character ~s in buffer literal"),
           chr(yytext[0]), nao);
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1225 "parser.l"
{
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return LITCHAR;
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1230 "parser.l"
{
  if ((yylval->val = flo_str_utf8(yytext)) == nil)
    out_of_range_float(yyg, yytext);
  return NUMBER;
}
	YY_BREAK
case 156:
/* rule 156 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1236 "parser.l"
{
  yylval->val = t;
  return JSKW;
}
	YY_BREAK
case 157:
/* rule 157 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1241 "parser.l"
{
  yylval->val = nil;
  return JSKW;
}
	YY_BREAK
case 158:
/* rule 158 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1246 "parser.l"
{
  yylval->val = null_s;
  return JSKW;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1251 "parser.l"
{
  if (strcmp("true", yytext) == 0) {
    yylval->val = t;
    return JSKW;
  }

  if (strcmp("false", yytext) == 0) {
    yylval->val = nil;
    return JSKW;
  }

  if (strcmp("null", yytext) == 0) {
    yylval->val = null_s;
    return JSKW;
  }

  {
    val str = string_own(utf8_dup_from(yytext));
    yyerrorf(yyg, lit("unrecognized JSON syntax: ~a"), str, nao);
  }
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1273 "parser.l"
{
  yy_push_state(JLIT, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1278 "parser.l"
{
  yy_push_state(JMARKER, yyscanner);
  yy_push_state(NESTED, yyscanner);
  return JSPLICE;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1284 "parser.l"
{
  yy_push_state(JMARKER, yyscanner);
  yy_push_state(NESTED, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1290 "parser.l"
{
  return yytext[0];
}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 1294 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1298 "parser.l"
{
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1301 "parser.l"
{
  yyerrorf(yyg, lit("bad character ~s in JSON literal"),
           chr(yytext[0]), nao);
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1306 "parser.l"
{
  internal_error("scanner processed input JMARKER state");
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1310 "parser.l"
ECHO;
	YY_BREAK
#line 6443 "lex.yy.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(SPECIAL):
			case YY_STATE_EOF(BRACED):
			case YY_STATE_EOF(NESTED):
			case YY_STATE_EOF(REGEX):
			case YY_STATE_EOF(SREGEX):
			case YY_STATE_EOF(STRLIT):
			case YY_STATE_EOF(CHRLIT):
			case YY_STATE_EOF(QSILIT):
			case YY_STATE_EOF(QSPECIAL):
			case YY_STATE_EOF(WLIT):
			case YY_STATE_EOF(QWLIT):
			case YY_STATE_EOF(BUFLIT):
			case YY_STATE_EOF(JSON):
			case YY_STATE_EOF(JLIT):
			case YY_STATE_EOF(JMARKER):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1748 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1748 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1747);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1310 "parser.l"


static int directive_tok(scanner_t *yyscanner, int tok, int state)
{
  struct yyguts_t *yyg = convert(struct yyguts_t *, yyscanner);
  char *pstart = yytext + 1 + strspn(yytext + 1, " \t");
  char *pcolon = strchr(pstart, ':');
  char *pend = pstart + strspn(pstart, ":-abcdefghijklmnopqrstuvwxyz");

  *pend = 0;

  if (pcolon != 0) {
    val pkgname = string_utf8((*pcolon = 0, pstart));
    val package = if3(pstart[0], find_package(pkgname), keyword_package);
    if (!package) {
      yyerrprepf(yyg, lit("package ~a not found"), pkgname, nao);
      tok = ERRTOK;
    }
    if (package != user_package && package != keyword_package) {
      val sym = string_utf8(pcolon + 1);
      yyerrprepf(yyg, lit("~a:~a: original usr package expected, not ~a"),
                 pkgname, sym, pkgname, nao);
      tok = ERRTOK;
    }
  } else {
    val symname = string_utf8(pstart);
    val sym = intern_fallback(symname, cur_package);
    val package = symbol_package(sym);

    if (package != user_package && package != keyword_package) {
      yyerrprepf(yyg, lit("~a: this is ~a:~a, not usr:~a"),
                 symname, package_name(package), symname, symname, nao);
      tok = ERRTOK;
    }
  }

  if (state != 0)
    yy_push_state(state, yyscanner);
  else
    yy_pop_state(yyscanner);
  yylval->lineno = yyextra->lineno;
  return tok;
}

void end_of_regex(scanner_t *yyg)
{
  if (YYSTATE != REGEX && YYSTATE != SREGEX)
    internal_error("end_of_regex called in wrong scanner state");

  yy_pop_state(yyg);

  if (YYSTATE != INITIAL) {
    if (yy_top_state(yyg) == INITIAL
      || yy_top_state(yyg) == QSILIT
      || yy_top_state(yyg) == QWLIT)
      yy_pop_state(yyg);
  }
}

void end_of_char(scanner_t *yyg)
{
  if (YYSTATE != CHRLIT)
    internal_error("end_of_char called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_buflit(scanner_t *yyg)
{
  if (YYSTATE != BUFLIT)
    internal_error("end_of_buflit called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_json(scanner_t *yyg)
{
  if (YYSTATE == JLIT)
    yy_pop_state(yyg);

  if (YYSTATE != JSON)
    internal_error("end_of_json called in wrong scanner state");

  yy_pop_state(yyg);
}

/* The complexity here is necessary because TXR Lisp parsing looks ahead
 * by one token. (The reason for *that* is the support of a.b.c referencing dot
 * syntax in TXR Lisp.)
 *
 * Consider these two different cases:
 *
 * ^#J[,~(+ 2.0 2.0)]
 * ^#J[,~(+ 2.0 2.0) #J42]
 *
 * This end_of_json_unquote function gets called when the (+ 2.0 2.0)
 * has been parsed, but the Yacc-generated parser has shifted one tokan
 * ahead.  It has read the ] token in the one case or the #J token in
 * the other. These tokens have totally different effects on the Lex
 * start condition. When the lexer reads the ] token, it pops off a NESTED
 * state, whereas the #J token wants to push on a new JSON state.
 * By the time end_of_json_unquote has been called, this has already happened.
 *
 * To deal with this, we use the dummy JMARKER start state which serves as a
 * kind of parenthesis inside the start condition stack. BHefore scanning Lisp
 * unquote within JSON, we push JMARKER state first, then the NESTED state.
 *
 * If the lookahead token is like ], and pops off a state, it will pop off
 * our NESTED state, so we are left at the JMARKER state. If the lookahead
 * token is something else like #J (HASH_J), then it will push a new
 * state like JSON on top, and we have JMARKER NESTED JSON.
 *
 * So what we are doing here is popping off everything until we get down
 * to the JMARKER state, and putting it into our little save area.
 *
 * Then we lose the JMARKER state.
 *
 * If the save area is empty, it means that the lookahead token consumed
 * our NESTED state, and so we are done.
 *
 * If the save area is not empty, it means the lookahead put something
 * extra over our NESTED state. We drop that state from our save area,
 * and restore the rest of the save area back into the stack.
 * Effectively, we are deleting the unquote-related states from the
 * interior of the start condition stack, not to disturb new material
 * initiated by the lookahead token.
 */
void end_of_json_unquote(scanner_t *yyg)
{
  int stacksave[8];
  int top = 0;

  while (YYSTATE != JMARKER) {
    stacksave[top++] = YYSTATE;
    yy_pop_state(yyg);
  }

  yy_pop_state(yyg);

  if (top-- > 0) {
    while (top > 0)
      yy_push_state(stacksave[--top], yyg);
  }
}

val source_loc(val form)
{
  return gethash(form_to_ln_hash, form);
}

val source_loc_str(val form, val alt)
{
  cons_bind (line, file, gethash(form_to_ln_hash, form));
  if (missingp(alt))
    alt = lit("source location n/a");
  return if3(line, format(nil, lit("~a:~d"), file, line, nao), alt);
}

int yylex(YYSTYPE *yylval_param, yyscan_t yyscanner)
{
  struct yyguts_t * yyg = convert(struct yyguts_t *, yyscanner);
  int yy_char;

  if (yyextra->tok_idx > 0) {
    struct yy_token *tok = &yyextra->tok_pushback[--yyextra->tok_idx];
    yyextra->recent_tok = *tok;
    *yylval_param = tok->yy_lval;
    if (tok->yy_lex_state && tok->yy_lex_state != YYSTATE)
      yy_push_state(tok->yy_lex_state, yyg);
    return tok->yy_char;
  }

  yy_char = yyextra->recent_tok.yy_char = yylex_impl(yylval_param, yyscanner);
  yyextra->recent_tok.yy_lval = *yylval_param;
  yyextra->recent_tok.yy_lex_state = YYSTATE;

  return yy_char;
}

void prime_scanner(scanner_t *yyg, enum prime_parser prim)
{
  while (YYSTATE != INITIAL)
    yy_pop_state(yyg);

  switch (prim) {
  case prime_lisp:
  case prime_interactive:
    yy_push_state(SPECIAL, yyg);
    yy_push_state(NESTED, yyg);
    yy_push_state(NESTED, yyg);
    break;
  case prime_regex:
    yy_push_state(SREGEX, yyg);
    break;
  case prime_json:
    yy_push_state(JSON, yyg);
    break;
  }
}

void scrub_scanner(scanner_t *yyg, int yy_char, wchar_t *lexeme)
{
  struct yy_token *rtok = &yyextra->recent_tok;

  if (rtok->yy_char == yy_char && rtok->yy_lval.lexeme == lexeme) {
    rtok->yy_char = 0;
    rtok->yy_lval.lexeme = 0;
  }
}

void parser_l_init(void)
{
  prot1(&form_to_ln_hash);
  form_to_ln_hash = make_eq_hash(hash_weak_keys);
}

