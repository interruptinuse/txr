
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 169
#define YY_END_OF_BUFFER 170
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1781] =
    {   0,
       65,   65,   65,   65,   65,   65,   65,   65,  141,  141,
      141,  141,  152,  152,  166,  166,  170,  117,  169,  118,
      169,  118,  169,  116,  169,  120,  169,  117,  169,  117,
      169,  117,  169,  120,  169,  101,  102,  169,   65,  101,
      102,  169,   87,  169,   87,  101,  102,  169,   66,  101,
      102,  169,  101,  102,  169,   58,  101,  102,  169,   64,
      101,  102,  169,  101,  102,  169,   92,  101,  102,  169,
       88,  101,  102,  169,    1,    2,   21,  101,  102,  169,
    16402,  100,  101,  102,  169,   86,  101,  102,  169,   21,
      101,  102,  169,16402,   58,  101,  102,  169,  101,  102,

      169,   70,  101,  102,  169,   57,  101,  102,  169,   64,
      101,  102,  169,  102,  169,  102,  169,  102,  169,  102,
      169,   65,  101,  102,  169,   22,  101,  102,  169,16403,
       75,  101,  102,  169,   61,  101,  102,  169,   22,  101,
      102,  169,16403,   61,  101,  102,  169,   92,  101,  102,
      169,    1,    2,   22,  101,  102,  169,16403,   22,  101,
      102,  169,16403,   59,  101,  102,  169,   22,  101,  102,
      169,16403,   62,  101,  102,  169,  102,  169,  102,  169,
      102,  169,   65,  101,  102,  169,   23,  101,  102,  169,
    16404,   75,  101,  102,  169,   23,  101,  102,  169,16404,

       92,  101,  102,  169,    1,    2,   23,  101,  102,  169,
    16404,   23,  101,  102,  169,16404,   59,  101,  102,  169,
       23,  101,  102,  169,16404,  102,  169,  102,  169,  102,
      169,  114,  115,  169,  114,  115,  169,  108,  169,  108,
      114,  115,  169,  110,  114,  115,  169,  103,  110,  114,
      115,  169,  113,  114,  115,  169,  115,  169,  115,  169,
      115,  169,  115,  169,  109,  169,  109,  114,  115,  169,
      149,  155,  169,  149,  155,  169,  135,  169,  135,  149,
      155,  169,  123,  149,  155,  169,  149,  155,  169,  155,
      169,  155,  169,  155,  169,  155,  169,  134,  149,  155,

      169,  136,  169,  136,  149,  155,  169,  133,  134,  149,
      155,  169,  133,  134,  149,  155,  169,  133,  134,  149,
      155,  169,  134,  155,  169,  134,  155,  169,  134,  155,
      169,  134,  155,  169,  137,  169,  137,  149,  155,  169,
      140,  149,  155,  169,  149,  155,  169,  124,  149,  155,
      169,   65,  101,  102,  169,  101,  102,  169,  101,  102,
      169,   92,  101,  102,  169,    1,    2,   12,   21,  101,
      102,  169,16402,   59,  101,  102,  169,  101,  102,  169,
      141,  149,  155,  169,  138,  169,  138,  149,  155,  169,
      149,  155,  169,  149,  155,  169,  154,  169,  152,  154,

      169,  153,  169,  153,  154,  169,  151,  154,  169,  150,
      154,  169,  160,  167,  169,  166,  167,  169,  165,  169,
      165,  167,  169,  161,  164,  167,  169,  160,  167,  169,
      164,  167,  169,  160,  167,  169,  156,  160,  167,  169,
      156,  160,  167,  169,  160,  167,  169,  160,  167,  169,
      160,  167,  169,  163,  164,  167,  169,  148,  169,  148,
      149,  155,  169,  142,  149,  155,  169,  149,  155,  169,
      168,  169,  169,  117,  117,  117,  117,  118,  116,  122,
      119,  117,  117,  117,  122,   65,   91,   87,   71,   69,
       67,   73,    1,    2,   90,    5,    6,   93,    1,    2,

       21,16402,   21,16402,   21,16402,  100,   99,   95,   95,
       99,   96,   99,   97,   99,   98,   99,  101,   65,   91,
       22,   24,16403,   22,16403,   22,   24,16403,   22,16403,
       22,16403,   82,   76,   81,   79,   78,   77,   80,    1,
        2,   22,   24,16403,   60,    5,    6,    1,    2,   22,
       24,16403,   22,   24,16403,   22,   24,16403,   22,16403,
       24,   22,16403,   22,16403,   22,16403,   11,   22,16403,
       95,   22,  101,16403,   65,   91,   23,   25,16404,   23,
    16404,   23,   25,16404,   23,16404,   23,16404,    1,    2,
       23,   25,16404,   85,    5,    6,    1,    2,   23,   25,

    16404,   23,   25,16404,   23,   25,16404,   23,16404,   25,
       23,16404,   23,16404,   23,16404,   11,   23,16404,   23,
      101,16404,  108,  112,  107,  107,  112,  104,  112,  111,
      112,  105,  112,  106,  112,  112,  114,  109,  135,  131,
      127,  128,  127,  128,  131,  125,  131,  129,  131,  130,
      131,  149,  136,  133,  132,  133,  132,  133,  137,  139,
       11,  139,  139,  126,  131,   65,   91,    1,    2,   12,
        1,    2,   12,   21,16402,  141,  138,  128,  128,  131,
      152,  153,  160,  166,  165,  160,  156,  160,  156,  160,
      160,  160,  156,  160,  160,  160,  160,  162,  148,  147,

      143,  147,  146,  147,  122,  117,  122,  121,  121,  122,
       89,   94,   72,   74,   68,    3,    3,    3,   63,    1,
        2,    5,    6,    7,    7,    7,    2,   10,    5,    6,
        7,   10, 8210,    7,   10,    7,   10,    5,    6,   21,
    16402, 8210,   95,   97,   97,   97,   22,   24,16403,   22,
       24,16403,   22,   24,16403,   22,   24,16403, 8211,   22,
       24,16403,   22,   24,16403,   22,   24,16403,   24,   24,
       84,   83,   22,   24,16403,   22,16403,   22,16403,    5,
        6, 8211,    1,    2,   22,   24,16403,   22,   24,16403,
        8,    5,    6,    8,    8,    8,    2,    8,   10,   10,

        5,    6,    8,   10, 8211,    8,   10,   10,    8,   10,
       10,   10,   10,   22,   24,16403,    5,    6,   22,   24,
    16403,   22,   24,16403,   22,   24,16403,   24,   22,   24,
    16403,   24,   22,   24,16403,   22,16403,   22,16403,   11,
       22,   24,16403,   23,   25,16404,   23,   25,16404,   23,
       25,16404,   23,   25,16404, 8212,   23,   25,16404,   23,
       25,16404,   23,   25,16404,   25,   25,   23,   25,16404,
       23,16404,   23,16404,    5,    6, 8212,    1,    2,   23,
       25,16404,   23,   25,16404,    9,    5,    6,    9,    9,
        9,    2,    9,   10,   10,    5,    6,    9,   10, 8212,

        9,   10,   10,    9,   10,   10,   10,   10,   23,   25,
    16404,    5,    6,   23,   25,16404,   23,   25,16404,   23,
       25,16404,   25,   23,   25,16404,   25,   23,   25,16404,
       23,16404,   23,16404,   11,   23,   25,16404,  107,  107,
      105,  105,  105,  127,  128,  127,  128,  129,  129,  129,
       11,    3,   16,    3,   14,    1,    2,   12,    2,   10,
     8210,  128,  128,   84,  160,   83,  160,  156,  160,  160,
      156,  160,  160,  160,  160,  121,    5,    6,    7,    7,
        5,    6,    3,    4,    4,    3,    4,    3,    4,   54,
       54,   54,   54,   54,   54,   35,    5,    6,    7,   10,

        6,    5,    6,    7,    2,    5,    6,    7, 8210,    5,
        6,    7,    5,    6,    7,   21,16402,    7,   21,16402,
        5,    6,    8,    8,    5,    6,   22,   24,16403,   22,
       24,16403,   22,   24,16403,   22,   24,16403,   22,   24,
    16403,   22,   24,16403,   24,   24,   24,   24,   22,   24,
    16403,   22,   24,16403,   22,   24,16403,    5,    6,    8,
     8211,    8,    8,    8,    6,    8,    8,    5,    6,    8,
        8,    8,    8,    8,    8,    5,    6,    8,    2,    5,
        6,    8, 8211,    8,    5,    6,    8,    8,   22,   24,
    16403,   22,   24,16403,    5,    6,    8,   22,   24,16403,

        8,   22,   24,16403,   24,   22,   24,16403,   22,   24,
    16403,   22,   24,16403,   11,   22,   24,16403,    5,    6,
        9,    9,    5,    6,   23,   25,16404,   23,   25,16404,
       23,   25,16404,   23,   25,16404,   23,   25,16404,   23,
       25,16404,   25,   25,   25,   25,   23,   25,16404,   23,
       25,16404,   23,   25,16404,    5,    6,    9, 8212,    9,
        9,    9,    6,    9,    9,    5,    6,    9,    9,    9,
        9,    9,    9,    5,    6,    9,    2,    5,    6,    9,
     8212,    9,    5,    6,    9,    9,   23,   25,16404,   23,
       25,16404,    5,    6,    9,   23,   25,16404,    9,   23,

       25,16404,   25,   23,   25,16404,   23,   25,16404,   23,
       25,16404,   17,   15,   13,   11,   23,   25,16404,    3,
        4,   16,    3,    4,   14,    2,  160,  160,  160,    3,
        3,    3,   26,   34,   36,   48,   48,   48,   48,   48,
       48,   43,   43,   43,   43,   43,   43,   51,    6,    7,
        7,    5,    6,    6,    7,   10,    7,   10,    6,    7,
     8210,    5,    6,    8,   22,   24,16403,   22,   24,16403,
       22,   24,16403,   24,    8,    8,    6,    8,    8,    8,
        8,    8,    5,    6,    8,    6,    8,   10,    8,   10,
        6,    5,    6,    8,    8,   22,   24,16403,    8,   22,

       24,16403,    8,   22,   24,16403,    8,   22,   24,16403,
        8,   22,   24,16403,    8, 8211,    8,   22,   24,16403,
        8,   22,   24,16403,    5,    6,    8,   22,   24,16403,
        8,   22,   24,16403,    8,   22,   24,16403,    8,   22,
       24,16403,    8,   22,   24,16403,    8,   24,    8,   24,
        5,    6,    9,   23,   25,16404,   23,   25,16404,   23,
       25,16404,   25,    9,    9,    6,    9,    9,    9,    9,
        9,    5,    6,    9,    6,    9,   10,    9,   10,    6,
        5,    6,    9,    9,   23,   25,16404,    9,   23,   25,
    16404,    9,   23,   25,16404,    9,   23,   25,16404,    9,

       23,   25,16404,    9, 8212,    9,   23,   25,16404,    9,
       23,   25,16404,    5,    6,    9,   23,   25,16404,    9,
       23,   25,16404,    9,   23,   25,16404,    9,   23,   25,
    16404,    9,   23,   25,16404,    9,   25,    9,   25,  160,
      159,  157,    6,    7,    7,   38,   38,   38,   38,   38,
       38,   55,   55,   55,   55,   55,   55,   56,   46,   46,
       46,   46,   46,   46,   28,   42,   42,   42,   42,   42,
       42,   27,   27,   27,   27,   27,   27,    6,    7,    6,
        7,    6,    8,    8,    6,    8,    8,    8,    6,    8,
        8,    6,    8,    6,    8,    8,   22,   24,16403,    8,

       22,   24,16403,    8,   22,   24,16403,    8,   22,   24,
    16403,    8,   22,   24,16403,    8,   22,   24,16403,    8,
     8211,    8,   22,   24,16403,    8,   22,   24,16403,    8,
       22,   24,16403,    8,   22,   24,16403,    8,   22,   24,
    16403,    8,   22,   24,16403,    8,   24,    8,   24,    8,
       24,    8,   24,    6,    9,    9,    6,    9,    9,    9,
        6,    9,    9,    6,    9,    6,    9,    9,   23,   25,
    16404,    9,   23,   25,16404,    9,   23,   25,16404,    9,
       23,   25,16404,    9,   23,   25,16404,    9,   23,   25,
    16404,    9, 8212,    9,   23,   25,16404,    9,   23,   25,

    16404,    9,   23,   25,16404,    9,   23,   25,16404,    9,
       23,   25,16404,    9,   23,   25,16404,    9,   25,    9,
       25,    9,   25,    9,   25,  158,  145,  145,   31,   31,
       31,   31,   31,   31,   30,   52,   52,   52,   52,   52,
       52,   47,   45,   29,   39,   39,   39,   39,   39,   39,
        6,    6,    8,    6,    8,    8,   22,   24,16403,    8,
       22,   24,16403,    8,   22,   24,16403,    8,   22,   24,
    16403,    8,   22,   24,16403,    8,   22,   24,16403,    8,
       22,   24,16403,    8,   22,   24,16403,    8,   22,   24,
    16403,    8,   24,    6,    9,    6,    9,    9,   23,   25,

    16404,    9,   23,   25,16404,    9,   23,   25,16404,    9,
       23,   25,16404,    9,   23,   25,16404,    9,   23,   25,
    16404,    9,   23,   25,16404,    9,   23,   25,16404,    9,
       23,   25,16404,    9,   25,   32,   32,   32,   32,   32,
       32,   50,   50,   50,   50,   50,   50,   33,   33,   33,
       33,   33,   33,   40,   40,   40,   40,   40,   40,   41,
       41,   41,   41,   41,   41,   44,   37,   37,   37,   37,
       37,   37,   53,   49,   49,   49,   49,   49,   49,  144
    } ;

static const flex_int16_t yy_accept[1763] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   18,   20,   22,   24,   26,   28,   30,
       32,   34,   36,   39,   43,   45,   49,   53,   56,   60,
       64,   67,   71,   75,   82,   86,   90,   95,   99,  102,
      106,  110,  114,  116,  118,  120,  122,  126,  131,  135,
      139,  144,  148,  152,  159,  164,  168,  173,  177,  179,
      181,  183,  187,  192,  196,  201,  205,  212,  217,  221,
      226,  228,  230,  232,  235,  238,  240,  244,  248,  253,

      257,  259,  261,  263,  265,  267,  271,  274,  277,  279,
      283,  287,  290,  292,  294,  296,  298,  302,  304,  308,
      313,  318,  323,  326,  329,  332,  335,  337,  341,  345,
      348,  352,  356,  359,  362,  366,  374,  378,  381,  385,
      387,  391,  394,  397,  399,  402,  404,  407,  410,  413,
      416,  419,  421,  424,  428,  431,  434,  437,  441,  445,
      448,  451,  454,  458,  460,  464,  468,  471,  473,  474,
      475,  476,  477,  478,  479,  480,  480,  481,  482,  483,
      484,  485,  485,  486,  487,  487,  488,  488,  489,  490,
      490,  491,  492,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  495,  496,  498,  499,  499,  499,  503,  505,
      507,  508,  508,  509,  510,  512,  514,  516,  518,  519,
      519,  519,  520,  520,  521,  521,  524,  526,  526,  529,
      529,  531,  531,  531,  531,  531,  533,  534,  535,  536,
      537,  538,  539,  540,  540,  545,  546,  548,  548,  548,
      553,  556,  559,  561,  562,  564,  564,  564,  564,  566,
      566,  568,  571,  571,  571,  571,  572,  575,  575,  575,
      576,  576,  577,  577,  580,  582,  582,  585,  585,  587,

      587,  587,  587,  589,  589,  594,  595,  597,  597,  597,
      602,  605,  608,  610,  611,  613,  613,  613,  613,  615,
      615,  617,  620,  620,  620,  620,  623,  623,  623,  623,
      623,  624,  625,  626,  628,  630,  632,  634,  636,  637,
      638,  638,  638,  639,  639,  639,  640,  641,  643,  646,
      648,  650,  652,  653,  653,  653,  654,  655,  657,  659,
      660,  660,  661,  661,  663,  664,  666,  667,  668,  668,
      668,  671,  671,  671,  676,  676,  677,  677,  678,  679,
      681,  682,  683,  684,  685,  686,  687,  689,  691,  692,
      693,  695,  696,  697,  698,  699,  700,  701,  703,  705,

      706,  707,  708,  709,  711,  712,  713,  713,  713,  713,
      713,  714,  715,  716,  716,  717,  717,  718,  718,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  720,  720,
      722,  722,  722,  725,  726,  727,  728,  729,  734,  736,
      738,  738,  742,  743,  744,  745,  746,  747,  747,  747,
      747,  747,  747,  747,  750,  753,  756,  759,  759,  759,

      759,  760,  763,  766,  769,  769,  769,  769,  770,  770,
      771,  771,  771,  771,  771,  771,  772,  773,  776,  778,
      780,  780,  780,  780,  783,  788,  791,  792,  792,  792,
      792,  795,  796,  796,  797,  797,  797,  797,  798,  800,
      801,  806,  808,  809,  811,  812,  813,  814,  817,  822,
      825,  828,  829,  832,  832,  832,  832,  833,  833,  833,
      833,  833,  833,  836,  838,  840,  840,  840,  840,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  847,  850,
      853,  856,  856,  856,  856,  857,  860,  863,  866,  866,
      866,  866,  867,  867,  868,  868,  868,  868,  868,  868,

      871,  873,  875,  875,  875,  875,  878,  883,  886,  887,
      887,  887,  887,  890,  891,  891,  892,  892,  892,  892,
      893,  895,  896,  901,  903,  904,  906,  907,  908,  909,
      912,  917,  920,  923,  924,  927,  927,  927,  927,  928,
      928,  928,  928,  928,  928,  931,  933,  935,  935,  935,
      935,  935,  935,  935,  939,  939,  939,  939,  940,  941,
      942,  943,  944,  944,  946,  948,  949,  950,  951,  951,
      952,  952,  954,  954,  956,  956,  959,  960,  962,  963,
      964,  966,  968,  970,  971,  973,  974,  975,  976,  976,
      976,  977,  977,  980,  981,  983,  983,  985,  986,  986,

      988,  988,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  991,  992,  993,  994,  995,
      996,  996,  996,  996,  996,  996,  997,  997,  997,  997,
      997,  997,  997,  997,  997, 1001, 1002, 1002, 1005, 1005,
     1006, 1006, 1010, 1013, 1013, 1018, 1021, 1021, 1024, 1025,
     1025, 1027, 1030, 1033, 1036, 1036, 1036, 1036, 1036, 1036,
     1039, 1042, 1045, 1045, 1045, 1045, 1045, 1045, 1046, 1047,

     1048, 1048, 1048, 1048, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1052, 1055, 1058, 1058, 1058, 1058, 1058, 1058, 1062,
     1063, 1064, 1064, 1064, 1064, 1065, 1066, 1067, 1068, 1071,
     1072, 1073, 1073, 1073, 1073, 1074, 1074, 1074, 1074, 1075,
     1075, 1075, 1075, 1076, 1079, 1079, 1079, 1079, 1080, 1080,
     1084, 1085, 1088, 1092, 1095, 1095, 1101, 1105, 1105, 1105,
     1105, 1105, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1109, 1112, 1115, 1115, 1115, 1115, 1115, 1115, 1119,
     1119, 1119, 1122, 1123, 1123, 1125, 1128, 1131, 1134, 1134,
     1134, 1134, 1134, 1134, 1137, 1140, 1143, 1143, 1143, 1143,

     1143, 1143, 1144, 1145, 1146, 1146, 1146, 1146, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1150, 1153, 1156, 1156, 1156,
     1156, 1156, 1156, 1160, 1161, 1162, 1162, 1162, 1162, 1163,
     1164, 1165, 1166, 1169, 1170, 1171, 1171, 1171, 1171, 1172,
     1172, 1172, 1172, 1173, 1173, 1173, 1173, 1174, 1177, 1177,
     1177, 1177, 1178, 1178, 1182, 1183, 1186, 1190, 1193, 1193,
     1199, 1203, 1203, 1203, 1203, 1203, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1207, 1210, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1214, 1214, 1215, 1215, 1216, 1220,
     1220, 1223, 1226, 1227, 1228, 1229, 1230, 1230, 1230, 1230,

     1230, 1231, 1232, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1234, 1234, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1236, 1236, 1236, 1236, 1236,
     1236, 1237, 1238, 1239, 1239, 1240, 1241, 1242, 1242, 1242,
     1242, 1243, 1244, 1245, 1245, 1246, 1247, 1248, 1248, 1248,
     1248, 1249, 1249, 1251, 1252, 1254, 1257, 1259, 1259, 1260,
     1262, 1262, 1262, 1265, 1268, 1271, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1275, 1275, 1275, 1275,

     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1276, 1276,
     1276, 1276, 1276, 1276, 1277, 1277, 1277, 1277, 1279, 1280,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1282, 1283,
     1283, 1283, 1283, 1283, 1283, 1286, 1286, 1289, 1291, 1291,
     1292, 1295, 1299, 1303, 1307, 1311, 1311, 1311, 1311, 1315,
     1317, 1321, 1325, 1331, 1335, 1335, 1335, 1335, 1339, 1343,
     1347, 1347, 1347, 1347, 1349, 1349, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1354, 1357, 1360, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1364, 1364, 1364, 1364, 1364, 1364,

     1364, 1364, 1364, 1364, 1364, 1364, 1365, 1365, 1365, 1365,
     1365, 1365, 1366, 1366, 1366, 1366, 1368, 1369, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1370, 1371, 1372, 1372, 1372,
     1372, 1372, 1372, 1375, 1375, 1378, 1380, 1380, 1381, 1384,
     1388, 1392, 1396, 1400, 1400, 1400, 1400, 1404, 1406, 1410,
     1414, 1420, 1424, 1424, 1424, 1424, 1428, 1432, 1436, 1436,
     1436, 1436, 1438, 1438, 1440, 1440, 1440, 1440, 1440, 1440,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1441, 1442, 1443,
     1443, 1443, 1445, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,

     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1447, 1448, 1449, 1449, 1450, 1451, 1452, 1452, 1453, 1454,
     1455, 1456, 1457, 1458, 1458, 1459, 1459, 1459, 1459, 1459,
     1460, 1461, 1462, 1463, 1464, 1465, 1465, 1465, 1465, 1466,
     1466, 1467, 1468, 1469, 1470, 1471, 1472, 1472, 1472, 1473,
     1474, 1475, 1476, 1477, 1478, 1478, 1478, 1480, 1482, 1484,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1487, 1488, 1489, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1492, 1494, 1496, 1500,
     1504, 1508, 1508, 1508, 1508, 1508, 1508, 1512, 1516, 1520,

     1520, 1520, 1520, 1522, 1526, 1530, 1534, 1534, 1534, 1534,
     1534, 1534, 1538, 1542, 1546, 1546, 1546, 1546, 1546, 1546,
     1548, 1550, 1552, 1552, 1552, 1552, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1556, 1557, 1557, 1557, 1557,
     1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
     1557, 1559, 1560, 1561, 1563, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1564, 1566, 1568, 1572, 1576, 1580, 1580, 1580,
     1580, 1580, 1580, 1584, 1588, 1592, 1592, 1592, 1592, 1594,
     1598, 1602, 1606, 1606, 1606, 1606, 1606, 1606, 1610, 1614,
     1618, 1618, 1618, 1618, 1618, 1618, 1620, 1622, 1624, 1624,

     1624, 1624, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1627, 1628, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1630, 1631, 1632, 1633, 1634, 1635, 1635, 1636, 1637, 1638,
     1639, 1640, 1641, 1642, 1642, 1642, 1642, 1642, 1643, 1643,
     1643, 1644, 1644, 1644, 1645, 1645, 1645, 1645, 1645, 1646,
     1647, 1648, 1649, 1650, 1651, 1652, 1652, 1652, 1652, 1652,
     1654, 1654, 1654, 1656, 1660, 1664, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1672, 1676, 1680, 1680, 1680, 1680, 1680,
     1680, 1684, 1688, 1692, 1692, 1692, 1692, 1692, 1692, 1692,

     1692, 1692, 1692, 1694, 1694, 1694, 1694, 1694, 1694, 1694,
     1694, 1694, 1694, 1694, 1694, 1694, 1696, 1696, 1696, 1698,
     1702, 1706, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1714,
     1718, 1722, 1722, 1722, 1722, 1722, 1722, 1726, 1730, 1734,
     1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1736,
     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736,
     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1737, 1738,
     1739, 1740, 1741, 1742, 1742, 1743, 1744, 1745, 1746, 1747,
     1748, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1754, 1755,
     1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765,

     1766, 1766, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767,
     1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767,
     1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767,
     1767, 1767, 1767, 1767, 1767, 1768, 1769, 1770, 1771, 1772,
     1773, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1781, 1781
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    6,    9,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,    6,
       25,    6,   26,   27,   28,   28,   29,   30,   31,   29,
       32,   33,   32,   34,   32,   32,   32,   35,   32,   32,
       32,   36,   37,   38,   32,   32,   39,   32,   32,   32,
       40,   41,   42,   43,   32,   44,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   32,   54,   55,   56,   57,
       58,   59,   32,   60,   61,   62,   63,   64,   39,   65,
       66,   32,   67,   68,   69,   70,    1,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   72,   72,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   75,
       75,   75,   75,   75,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,    6,    9,
       10,    2,   11,   12,   13,   12,   14,   15,   16,   16,
       16,   16,   17,   18,    6,    6,   19,   16,   16,   16,
       16,   20,   20,   20,   20,   20,   20,   20,   20,   10,
        6,    7,   21,    1,   16,   16,   16,   16,   22,   16,
       20,   20,   20,   20,   23,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   10,    1,    7,   11,
        1,    1,   24,   24,   24
    } ;

static const flex_int16_t yy_base[2026] =
    {   0,
        0,    3,   78,    0,  153,    0,  228,    0,  302,  376,
        6,    8,  350,  356,  451,    0,  525,  599,  673,    0,
      362,  534,  715,  789,  863,  912,  961, 1030,  539,  544,
     5934, 5918, 5917,  235,13320, 5913, 5910,   11,  250,  256,
      261,   12,13320,   24,13320, 5911,13320,  621, 1099, 5896,
       30,   37,13320,  389,    0,13320,    6,13320, 1172,13320,
    13320,13320,13320, 5837, 5836, 5826,  551,  633, 1231,13320,
     1289, 5882,   12,  682,  707,  724,   50,13320, 5823, 5822,
     5821,  572,  731, 5860, 1357,  625,  706,  752,  801,  379,
     5811, 5810, 5809,13320,  343,13320, 5876,13320,13320, 1432,

    13320, 5799, 5796, 5791,13320, 5858,13320,  345,13320, 5857,
    13320, 1505,13320, 5778, 5767, 5766,13320,13320, 5825,    0,
       41, 1552,13320, 5754, 5747, 5746,13320, 5805, 1595, 1660,
    13320,  559,  794,  318,  529,  616, 5799,   61,  366,13320,
     5802,  554,  409,13320,   13,13320, 5798,13320,13320,    0,
      344,13320, 5793,13320,  420,13320,  601,  649,  822, 5749,
     5730, 5732, 5769,13320, 5778,13320,  840,13320,13320,  509,
      584,  678,  690,13320, 5771,  922,    0,13320,  579,  697,
      775,  943,  411,  973,  933,  899,  995,13320,13320,  388,
    13320,13320,13320,  986, 1040,   52,    0,  710, 1681,  832,

      924, 1167,  805, 1205, 1002, 1212,  990, 1225, 1260, 1016,
     1265, 1240, 1093, 1268,  947, 1272, 5703, 5693, 5684,  690,
      917, 1164,  530, 1184,13320, 1047, 1744, 1336,  428, 1372,
        0, 1062,13320,  557,  808,13320, 1074,    0,13320, 5682,
     5678, 1393, 1349, 1188, 1499, 1514, 1569, 1382, 1610, 1352,
     1623, 5674, 5673, 5672, 1397, 1812,13320,13320,13320,13320,
    13320,13320,13320, 1513, 1880,13320, 1948, 1523, 2023,    0,
     1811, 1835, 1840,  703, 1853, 5666, 5665, 5658, 1908, 5705,
     2091,    0, 5650, 5640, 5638,  829, 1916, 5635, 5634, 1655,
     1539, 1872, 1927, 2098, 2109, 1604, 2112, 1555, 2120, 5630,

     5628, 5626, 2134, 1669, 2202,13320, 2270, 1692, 2345,    0,
     2182, 2229, 2236, 1036, 2241, 5620, 5612, 5595, 2413, 1165,
     2481,    0, 5593, 5583, 5582, 2418, 5572, 5571,  627,  541,
    13320,13320,  558,  867,13320,13320, 1303,13320,    0,13320,
     5570, 5568,13320,  983,  546,13320,13320,  585,  893,13320,
     1628,    0,13320, 5561, 5559,13320,    0, 1177, 2538,13320,
     1124,13320, 1673, 1802,    0,13320, 1222,  659, 1830,  786,
     1979, 1965, 1898, 1987, 5577, 1241,  575,13320,  921, 1083,
     1101,13320,    0, 1121,13320, 1995, 1300, 2427, 1991, 2220,
     2433, 5564, 5563, 5553,13320,13320,13320,13320,    7,    0,

     1219,  621,13320,  645, 1254,13320, 2159, 2169, 2448, 2304,
    13320,13320,13320,  716,  747, 1362, 1508,    0, 2574, 1581,
     5544, 5536, 5533,  972, 5538, 1142, 5540, 1538, 5531, 5536,
     5528, 5526,  624, 5511, 1211, 5504, 5517,  259, 5505, 5507,
     2192, 1831, 1899, 2260, 2153, 2207, 2263, 2452, 2436, 2225,
     2455, 2232, 2624, 2399, 2448, 2458, 2461, 2538, 2583, 2569,
     2541, 2524, 2497, 2471, 2587, 5492, 5491, 2081, 2699, 2760,
     2412,    0, 2768,    0, 2655, 2781,13320, 2148,    0, 2664,
     2308, 2556, 2320, 1271, 1817,13320, 5478, 5411, 2633, 2799,
     2823, 2807, 2839, 2840, 2857, 2862, 2865, 5410, 5403, 5397,

     2668, 2899, 2902, 2926, 5396, 5394, 5385, 2828, 5431, 1546,
     5379, 5369, 5368, 5357, 5355,13320,13320, 2938, 2943, 2971,
     5348, 5343, 5341, 3039, 3107, 2988, 2802, 5384, 2937, 2955,
     3175, 1791, 2910, 3019, 5332, 5331, 5329, 3052, 2918, 5376,
     3243, 1798, 3045, 3084, 5327, 5325, 5323, 3060, 3311, 3094,
     3162, 1863, 3202, 5321, 5308, 5303, 1887, 5300, 5297, 5296,
     5295, 5289, 3230, 3270, 3283, 5287, 5275, 5274, 3379, 5268,
     5264, 5262, 2773, 3005, 3447, 3124, 3193, 3319, 3352, 3406,
     3413, 5260, 5259, 5258, 2785, 3420, 3434, 3474, 5249, 5248,
     5244, 3168, 5290, 2049, 5228, 5224, 5223, 5221, 5219, 3496,

     3507, 3510, 5214, 5213, 5210, 3578, 3646, 3541, 2948, 5254,
     3132, 3275, 3714, 2071, 3087, 3345, 5201, 5200, 5198, 3591,
     3011, 5242, 3782, 2075, 3248, 3609, 5193, 5187, 5180, 3626,
     3850, 3673, 3680, 2085, 3685, 5175, 5161, 5155, 2196, 5154,
     5150, 5148, 5147, 5140, 3748, 3753, 3807, 5136, 5129, 5125,
     2409, 3207, 1125, 3918, 5123, 5122, 5118, 1299, 1279, 2418,
    13320, 5160, 5110, 1394, 1406, 2813,13320, 5151, 5102, 3029,
     2588, 2820,    0, 3979,    0, 3361, 3388, 3144, 1418, 1534,
        0,    0, 3545, 3211, 3260, 5106, 5106, 5110,    0, 2874,
    13320, 3762, 3868, 3821, 1686,  799, 1409, 5132, 3269, 3320,

     5130, 4011, 5072, 5070, 5078, 5082, 5071,  775, 5066, 5068,
     5067,  280, 5057, 5061, 1519, 5033,    0, 5030, 5015, 5019,
     5009, 1656, 4994, 4983, 4984, 4975, 4973, 4962, 4964, 3612,
     3874, 3889, 3893, 3906, 3898, 4000, 4041, 4060, 4064, 4079,
     4083, 4095, 4099, 4107,13320, 4119, 4150, 4954, 4952, 4949,
     4212, 4216, 4291, 4248, 2128,13320, 4252, 4265, 4366, 4349,
     4380, 4389, 4393, 4946, 4210, 3798, 3351, 3521, 4468, 4227,
     3832, 3369, 1702, 3938, 3599, 4989, 4529, 4571, 4542, 3617,
     4549, 3961, 4604, 4611, 4931, 4927, 4926, 4923, 4920, 4625,
     4632, 4649, 4911, 4909, 4908, 4844, 4824, 3636, 3942, 2922,

     4823, 4821, 4811, 2990, 4803, 4802, 4798, 4797, 4789, 4780,
     4666, 4674, 4687, 4764, 4763, 4753, 4745, 4744, 4755, 3113,
     3058, 4734, 4726, 4721, 3126, 4823, 3194, 3221, 3705, 3234,
     4587, 4714, 4702, 4697, 3278, 4696, 4694, 4688, 3947, 4687,
     4671, 4666, 3840, 4399, 4663, 4647, 4898, 4735, 4129,    0,
     4562, 4768, 4783, 4810, 4792, 4966, 4973, 3437, 4645, 4644,
     4637, 3338, 4631, 4625, 4623, 4619, 4617, 4616, 4600, 4596,
     4984, 4987, 4995, 4587, 4585, 4582, 4580, 4579, 5063, 4572,
     4844, 5131, 5082, 3730, 5091, 5117, 5155, 5160, 4570, 4561,
     4558, 4555, 4554, 5193, 5200, 5214, 4547, 4540, 4534, 4533,

     4529, 4721, 4728, 3342, 4528, 4518, 4488, 3398, 4484, 4476,
     4414, 4394, 4390, 4389, 5236, 5253, 5274, 4385, 4381, 4376,
     4365, 4361, 5342, 3425, 3410, 4360, 4346, 4342, 3471, 5410,
     3529, 3669, 3747, 3500, 5302, 4340, 4333, 4331, 3504, 4326,
     4325, 4313, 4976, 4309, 4304, 4282, 5014, 5100, 4281, 4273,
     5485, 5283, 4169,    0, 5053, 5321, 5370, 5378, 5389, 5553,
     5560, 3974, 4271, 4270, 4261, 3514, 4253, 4249, 4242, 4236,
     4233, 4229, 4209, 4201, 5571, 5574, 5582, 4198, 4197, 4194,
     4185, 4184,  837,  909, 3651, 3685,    0,    0, 5650, 4181,
     3912, 5711, 4328, 4202, 5760, 5829,    0,    0, 5193, 5591,

     1973, 4108, 5881, 4174, 2478, 2536, 4196, 4191, 4187, 4175,
     4168, 4169, 4170, 4155, 4140, 2537, 4142, 4123, 4127, 4116,
     4125, 4106, 4106, 4088, 4094, 4095, 4081, 4077, 2811, 4067,
     2915,13320, 2942,13320, 3791, 4102, 4163, 4255, 5931, 4646,
     6006, 5019, 4313, 3085,13320, 4282, 4746, 4376, 6081, 4590,
    13320, 4384, 6112, 4522, 4046, 4037, 4034, 5174, 4813, 6175,
    13320, 4658,    0, 5233, 4027, 4019, 4015, 4816, 6250, 3172,
    13320, 4990, 5659, 5441, 4145,    0, 5450, 3955, 4262, 4058,
     6318, 5667, 6386, 5677, 5695, 5772, 4011, 4000, 3999, 3997,
     3996, 3992, 3983, 3974, 3973, 3640, 3967, 3966, 3948, 3947,

     3943, 3940, 3924, 3916, 3912, 3880, 3875, 3665, 3873, 3872,
     3863, 3859, 3857, 3699, 3851, 3849, 3848, 6454, 5790, 3733,
     3838, 3836, 3835, 3833, 3804, 3797, 3778, 5577, 5711, 3773,
     3768, 3762, 3761, 3745, 5427, 3741,    0, 5800, 4423, 5962,
     5835, 5816, 5969, 6044, 6197, 3739, 3727, 3724, 6258, 5361,
     6261, 6342, 6522, 6345, 3714, 3707, 3693, 6353, 6413, 6425,
     3691, 3661, 3659, 5845, 3695, 3977, 3646, 3628, 3627, 3607,
     3593, 3589, 3579, 3571, 3563, 3562, 3555, 3544, 6590, 5945,
     6658, 6488, 6493, 6529, 3536, 3525, 3521, 3520, 3497, 3488,
     3483, 3480, 3460, 4353, 3458, 3445, 3443, 3435, 3434, 3432,

     3431, 3421, 3419, 3418, 3405, 4479, 3404, 3391, 3368, 3364,
     3353, 4500, 3333, 3326, 3306, 6726, 6037, 4638, 3303, 3292,
     3284, 3276, 3266, 3258, 3254, 6121, 6158, 3253, 3244, 3241,
     3230, 3228, 6207, 3214,    0, 6503, 4706, 6562, 6538, 6597,
     6615, 6633, 6686, 3201, 3188, 3183, 6697, 5640, 6750, 6768,
     6836, 6775, 3168, 3149, 3137, 6809, 6843, 6854, 3133, 3132,
     3122, 6304, 3152, 4706, 3100, 3078, 3069, 3064, 3054, 3052,
     3045, 3037, 3028, 3025, 3018, 3007, 6928,13320,13320,    0,
        0, 6706, 6116, 3022, 2996, 3003, 2991, 2994, 2979,    0,
     3429, 2966, 2976, 2953, 2957,    0, 2941, 2944, 3523, 2924,

        0, 2935, 2912,    0, 2909, 6998, 7073, 7148, 4087,13320,
     3689, 7179, 4214, 2879, 2877, 2857, 4261,13320, 3984,    0,
     2853, 2852, 2850, 4001,13320, 4091, 4575, 4307, 4733,13320,
     4668,    0, 2840, 2838, 2833, 4741, 4820, 4850,13320, 5183,
    13320, 4865,    0, 2828, 2820,  251, 5250, 5003,13320, 5095,
        0,  255,  280,  285, 7242, 4956, 5458, 2656, 7310, 6677,
      291,  334,  348,  355,  462,  469,  483,  524,  592,  606,
      625,  634,  651,  658, 7378, 6871, 6571, 6759,  670,  686,
      702,  725,  732,  737,  758, 6879, 6893, 6941, 6961, 7020,
     7093,  774,  780,  806,  817,  828, 7111, 7247, 7281,  873,

      878,  900, 6884, 7344, 7349, 7403,  915,  920,  937,  938,
      948, 7417, 7420, 7431,  965,  976,  977,  986,  987, 6391,
     6459, 4774, 1000, 1007, 1008, 4805, 1025, 1031, 1036, 1043,
     1072, 1100, 1107, 1109, 7499, 7030, 1131, 1145, 1149, 1155,
     1160, 1174, 1176, 1187, 1236, 1248, 1249, 1259, 1265, 1266,
     7567, 7187, 6900, 7256, 1273, 1277, 1279, 1281, 1283, 1288,
     1290, 7103, 7329, 7449, 7458, 7526, 7533, 1301, 1302, 1319,
     1335, 1440, 7538, 7601, 7606, 1442, 1446, 1469, 7272, 7609,
     7630, 7642, 1476, 1481, 1482, 1493, 1495, 7669, 7683, 7691,
     1497, 1504, 1513, 1514, 1519, 6644, 6984, 4980, 1520, 1536,

     1537, 5004, 1542, 1561, 1563, 1565, 1568, 1570, 1574, 1580,
    13320,13320, 1618,    0, 5130,    0, 1624, 1631, 1633, 5197,
     1631, 5281, 1639, 5332, 1647, 1653, 1659, 1674,    0,13320,
     5315, 7722, 1662, 1664, 1690, 5590,13320,13320, 5349,    0,
     1763, 1769, 1774, 7785, 5673, 7860, 5619,13320, 5563, 5663,
    13320, 7935, 5690,13320, 5704, 8010, 8085, 6420,13320, 5803,
        0, 1776, 1782, 1785, 5334, 1788, 1797, 1798, 1804, 8153,
     1810, 1811, 8221, 7807, 7882, 7957, 1813, 1819, 1841, 1850,
     1859, 1861, 8032, 8093, 8161, 1863, 1869, 1870, 1874, 1879,
     8178, 8238, 8246, 1881, 1893, 1895, 1906, 1907, 1924, 1934,

     1947, 1948, 5096, 1969, 2033, 2034, 2036, 2038, 2045, 2048,
     2056, 2060, 2067, 2082, 2083, 8314, 2085, 2091, 8382, 8274,
     8301, 8337, 2104, 2121, 2134, 2135, 2141, 2143, 8342, 8354,
     8415, 2145, 2149, 2161, 2164, 2167, 8418, 8423, 8426, 2172,
     2179, 2183, 2186, 2189, 2190, 2203, 2217, 2224, 5165, 2225,
     2237, 2241, 2246, 2260, 2261, 2291, 2353, 2380,    0, 2389,
        0, 2391,    0, 2400,    0,    0, 5705,13320, 5812,    0,
     2395, 2406, 2414, 8501,13320, 5965,    0, 2425, 2428, 2436,
     7106,13320, 6040,    0, 2445, 2446, 2448, 8576,13320, 6053,
        0, 2480, 2481, 2491,13320, 6067,    0, 2492, 2494, 2503,

     5785,13320, 2508, 2509, 2511, 2519, 2520, 2530, 2546, 2547,
     2562, 2566, 2567, 2569, 2575, 2579, 2588, 2592, 2594, 2608,
     2610, 2611, 2623, 2645, 2705, 2707, 2713, 2715, 2726, 2737,
     2838,    0, 5786,    0,13320, 6072,    0, 2739, 2740, 2744,
     5846,13320,13320, 6161,    0, 2776, 2778, 2781, 2791, 2793,
     2795, 2798, 2807, 2810, 2816, 2819, 5875,    0,    0,13320,
    13320, 8651, 8675, 8699, 8723, 8747, 8771, 8795, 8807, 8830,
     8854, 8873, 8892, 8911, 8930, 8949, 8968, 8992, 9001, 9017,
     9040, 9064, 9088, 9112, 3862, 9131, 9143, 9166, 2890, 9185,
     9204, 9223, 9242, 9261, 9280, 9299, 9318, 9337, 9356, 9375,

     9394, 9413, 9432, 9451, 9470, 9489, 9508, 9527, 9546, 2946,
     3126, 9555, 9563, 3880, 9586, 9598, 9621, 3156, 9645, 9669,
     9693, 9702, 9713, 3200, 9731, 9742, 3428, 9760, 9779, 9798,
     9817, 9836, 9855, 9874, 9893, 9912, 9931, 9950, 9969, 9988,
    10007,10026,10045,10064,10083,10102,10121,10140,10159,10178,
    10197,10216,10235,10254,10273,10292,10311,10330,10349,10368,
    10387,10406,10425,10444,10463, 5238, 3640, 3658,10475, 3218,
    10498,10522, 3230, 3239,10534, 3298,10557,10580,10591,10609,
    10628,10647,10666,10685,10704,10723,10742,10761,10780,10799,
    10818,10837,10856,10875,10894,10913,10932,10951,10970,10989,

    11008,11027,11046,11065,11084,11103,11122,11141,11160,11179,
    11198,11217,11236,11255,11274,11293,11312,11331,11350,11369,
    11388,11407,11426, 3416,11438,11461, 3442, 3443,11470,11493,
    11517,11536,11555,11574,11593,11612,11631,11650,11669,11688,
    11707,11726,11745,11764,11783,11802,11821,11840,11859,11878,
    11897,11916,11935,11954,11973,11992,12011,12030,12049,12068,
    12087,12106,12125,12144,12163,12182,12201,12220,12244, 3510,
     3633,12256,12279,12303,12327,12351,12375,12399,12418,12437,
    12456,12475,12494,12513,12532,12551,12570,12589,12608,12627,
    12646,12665,12684,12703,12722,12741,12760,12779,12798,12817,

    12836,12855,12879,12903,12927,12946,12957,12975,12994,13013,
    13032,13051,13070,13089,13108,13127,13151,13175,13199,13223,
    13247,13271,13295, 3770, 3778
    } ;

static const flex_int16_t yy_def[2026] =
    {   0,
     1762, 1762, 1761,    3, 1761,    5, 1761,    7, 1763, 1763,
       10,   10, 1764, 1764, 1761,   15, 1764, 1764,    3,   19,
     1764, 1764, 1764, 1764, 1765, 1765, 1766, 1766, 1764, 1764,
     1767, 1767, 1761, 1768, 1761, 1761, 1761, 1761, 1768, 1768,
     1768, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1769, 1770, 1761, 1769, 1761, 1771, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1772, 1761, 1761,
     1772, 1761, 1761,   71, 1773, 1774,   71, 1761, 1761, 1761,
     1761, 1761, 1775,   69, 1775, 1761,   85, 1776, 1777,   85,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,

     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1778, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1779,
     1779, 1779, 1761, 1761, 1761, 1761, 1761, 1761, 1780, 1778,
     1761, 1761, 1761, 1761, 1761, 1769, 1761, 1761, 1761, 1761,
     1761,  130,  130, 1761, 1761, 1761, 1761, 1761, 1761, 1781,
     1761, 1761, 1761, 1761, 1781, 1761, 1781, 1781, 1781, 1781,
     1781, 1781, 1761, 1761, 1761, 1761, 1782, 1761, 1761, 1768,
     1768, 1768, 1768, 1761, 1761, 1761, 1783, 1761, 1768, 1768,
     1768, 1761, 1784, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1785,   49, 1786, 1761, 1786,

     1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786,
     1786, 1786, 1786, 1786, 1786, 1786, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1787, 1761, 1761, 1761, 1769, 1769, 1769,
     1788, 1761, 1761, 1761, 1761, 1761, 1761, 1789, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1790, 1791, 1761, 1792, 1793,
     1791, 1761, 1761, 1761, 1761, 1794, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1790, 1761, 1795, 1761, 1761,  265,
      265, 1796, 1797, 1798, 1797, 1761, 1761, 1761, 1799, 1761,
     1799,  281, 1761, 1761, 1761, 1761, 1791, 1761, 1761, 1761,
     1761, 1761, 1761, 1800, 1801, 1761, 1802, 1803, 1801, 1761,

     1761, 1761, 1804, 1761, 1800, 1761, 1805, 1761, 1761,  305,
      305, 1806, 1807, 1808, 1807, 1761, 1761, 1761, 1809, 1761,
     1809,  321, 1761, 1761, 1761, 1801, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1810, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1811, 1761, 1761, 1761, 1761, 1812, 1812, 1812, 1761,
     1761, 1761, 1761, 1813, 1813, 1761, 1761, 1761, 1761, 1814,
     1761, 1761, 1815, 1816, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1817, 1761, 1761, 1817, 1817, 1817, 1817, 1817,
     1817, 1817, 1817, 1817, 1761, 1761, 1761, 1761, 1818, 1819,

     1820, 1821, 1761, 1821, 1761, 1761, 1761, 1822, 1761, 1761,
     1761, 1761, 1761, 1761, 1823, 1761, 1823, 1824, 1823, 1825,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825,
     1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825,
     1825, 1825, 1825, 1825, 1825, 1761, 1761, 1761, 1761, 1761,
     1761, 1822, 1822, 1822, 1822, 1761, 1761,  473, 1822, 1822,
     1761, 1826, 1761, 1761, 1761, 1761, 1827, 1761, 1761, 1761,
     1828, 1761, 1761, 1829, 1829, 1830, 1829, 1761, 1761, 1761,

     1761, 1831, 1832, 1832, 1761, 1761, 1761, 1833, 1761, 1834,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1835, 1836, 1836,
     1761, 1761, 1761, 1828, 1829,  525, 1837, 1761, 1761, 1828,
     1838, 1839, 1840, 1837, 1761, 1761, 1761, 1761, 1837, 1761,
     1838, 1839, 1840, 1837, 1761, 1761, 1761,  525, 1841, 1842,
     1842, 1843, 1842, 1761, 1761, 1761, 1844, 1761, 1761, 1761,
     1761, 1761, 1845, 1846, 1846, 1761, 1761, 1761, 1845, 1761,
     1761, 1761, 1761, 1761, 1847, 1761, 1761, 1848, 1848, 1849,
     1848, 1761, 1761, 1761, 1761, 1850, 1851, 1851, 1761, 1761,
     1761, 1852, 1761, 1853, 1761, 1761, 1761, 1761, 1761, 1854,

     1855, 1855, 1761, 1761, 1761, 1847, 1848,  607, 1856, 1761,
     1761, 1847, 1857, 1858, 1859, 1856, 1761, 1761, 1761, 1761,
     1856, 1761, 1857, 1858, 1859, 1856, 1761, 1761, 1761,  607,
     1860, 1861, 1861, 1862, 1861, 1761, 1761, 1761, 1863, 1761,
     1761, 1761, 1761, 1761, 1864, 1865, 1865, 1761, 1761, 1761,
     1761, 1761, 1866, 1864, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1867, 1761, 1761, 1761, 1761, 1761, 1868, 1761, 1761,
     1761, 1869, 1870, 1869, 1871, 1761, 1761, 1761, 1761, 1761,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1873, 1874,
     1761, 1761, 1875, 1875,  694, 1761, 1869, 1869, 1761, 1869,

     1876,  674, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1877, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1878,
     1878, 1878, 1878, 1878, 1878, 1878, 1878, 1878, 1878, 1878,
     1878, 1878, 1878, 1878, 1761, 1878, 1761, 1761, 1761, 1761,
     1878, 1878, 1878, 1878, 1761, 1761, 1878, 1878, 1878, 1878,
     1878, 1878, 1878, 1761, 1875,  765, 1761, 1875, 1761, 1761,
     1761,  765,  694,  694, 1879, 1879, 1761, 1880, 1881, 1761,
     1882, 1883, 1884, 1884, 1761, 1761, 1761, 1761, 1761, 1885,
     1885, 1885, 1761, 1761, 1761, 1761, 1761, 1886, 1886, 1887,

     1761, 1761, 1761, 1888, 1761, 1761, 1761, 1761, 1761, 1761,
     1889, 1889, 1889, 1761, 1761, 1761, 1761, 1761, 1880, 1881,
     1890, 1761, 1761, 1761, 1891, 1882, 1881, 1881,  819, 1892,
     1881, 1761, 1761, 1761, 1893, 1761, 1761, 1761, 1894, 1761,
     1761, 1761, 1881,  819, 1761, 1761, 1761, 1761, 1761,  819,
     1881,  819, 1895, 1896,  826, 1897, 1898, 1899, 1761, 1761,
     1761, 1900, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1901, 1901, 1901, 1761, 1761, 1761, 1761, 1761, 1901, 1761,
     1761, 1902, 1903, 1761, 1904, 1905, 1906, 1906, 1761, 1761,
     1761, 1761, 1761, 1907, 1907, 1907, 1761, 1761, 1761, 1761,

     1761, 1908, 1908, 1909, 1761, 1761, 1761, 1910, 1761, 1761,
     1761, 1761, 1761, 1761, 1911, 1911, 1911, 1761, 1761, 1761,
     1761, 1761, 1902, 1903, 1912, 1761, 1761, 1761, 1913, 1904,
     1903, 1903,  923, 1914, 1903, 1761, 1761, 1761, 1915, 1761,
     1761, 1761, 1916, 1761, 1761, 1761, 1903,  923, 1761, 1761,
     1761, 1761, 1761,  923, 1903,  923, 1917, 1918,  930, 1919,
     1920, 1921, 1761, 1761, 1761, 1922, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1923, 1923, 1923, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1924, 1924, 1923, 1761,
     1925, 1925, 1761, 1926, 1926, 1926, 1927, 1928, 1929, 1761,

     1925, 1925,  992, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1930, 1761, 1761, 1761, 1931, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1932, 1932, 1932, 1932, 1932, 1932,
     1932, 1932, 1932, 1761, 1761, 1932, 1932, 1932, 1932, 1932,
     1761, 1932, 1761, 1932, 1761, 1761, 1761, 1932, 1932, 1932,
     1761, 1932, 1053, 1932, 1761, 1761, 1761, 1932, 1932, 1761,
     1761, 1932, 1929, 1929, 1929, 1073, 1929, 1761, 1929, 1929,
     1933, 1761, 1934, 1935, 1935, 1935, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1936, 1761, 1761, 1761, 1761,

     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1937, 1761, 1761,
     1761, 1761, 1761, 1938, 1761, 1761, 1761, 1934, 1939, 1940,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1941, 1941, 1761,
     1761, 1761, 1761, 1761, 1118, 1761, 1118, 1939, 1761, 1933,
     1118, 1942, 1942, 1943, 1942, 1761, 1761, 1761, 1944, 1939,
     1942, 1942, 1945, 1946, 1761, 1761, 1761, 1947, 1948, 1948,
     1761, 1761, 1761, 1949, 1761, 1950, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1951, 1761,
     1952, 1953, 1953, 1953, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1954, 1761, 1761, 1761, 1761, 1761, 1761,

     1761, 1761, 1761, 1761, 1761, 1955, 1761, 1761, 1761, 1761,
     1761, 1956, 1761, 1761, 1761, 1952, 1957, 1958, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1959, 1959, 1761, 1761, 1761,
     1761, 1761, 1216, 1761, 1216, 1957, 1761, 1951, 1216, 1960,
     1960, 1961, 1960, 1761, 1761, 1761, 1962, 1957, 1960, 1960,
     1963, 1964, 1761, 1761, 1761, 1965, 1966, 1966, 1761, 1761,
     1761, 1967, 1761, 1968, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1969, 1761, 1761, 1970,
     1971, 1972, 1972, 1761, 1761, 1761, 1761, 1973, 1761, 1974,
     1761, 1761, 1761, 1761, 1761, 1975, 1761, 1761, 1761, 1761,

     1976, 1761, 1761, 1977, 1761, 1978, 1978, 1978, 1307, 1761,
     1307, 1761, 1307, 1761, 1761, 1761, 1307, 1761, 1307, 1312,
     1761, 1761, 1761, 1761, 1761, 1307, 1307, 1307, 1307, 1761,
     1307, 1312, 1761, 1761, 1761, 1307, 1307, 1761, 1761, 1307,
     1761, 1307, 1312, 1761, 1761, 1761, 1307, 1307, 1761, 1307,
     1312, 1761, 1761, 1761, 1307, 1761, 1972, 1283, 1979, 1980,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1979, 1980, 1980, 1375, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1980, 1375, 1375, 1981, 1982,
     1982, 1761, 1761, 1761, 1761, 1761, 1983, 1984, 1984, 1761,

     1761, 1761, 1980, 1985, 1986, 1986, 1761, 1761, 1761, 1761,
     1761, 1987, 1987, 1987, 1761, 1761, 1761, 1761, 1761, 1988,
     1988, 1989, 1761, 1761, 1761, 1990, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1991, 1992, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1991, 1992, 1992, 1451, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1992, 1451, 1451, 1993, 1994, 1994, 1761, 1761, 1761,
     1761, 1761, 1995, 1996, 1996, 1761, 1761, 1761, 1992, 1997,
     1998, 1998, 1761, 1761, 1761, 1761, 1761, 1999, 1999, 1999,
     1761, 1761, 1761, 1761, 1761, 2000, 2000, 2001, 1761, 1761,

     1761, 2002, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 2003, 1761, 2004, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 2005, 1761,
     2006, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 2006, 1532,
     1761, 1761, 1761, 2006, 2006, 2006, 1761, 1761, 2006, 1761,
     1761, 2006, 1761, 1761, 2006, 2006, 2006, 2006, 1761, 2006,
     1532, 1761, 1761, 1761, 2007, 1761, 1761, 1761, 1761, 2008,
     1761, 1761, 2008, 2009, 2009, 2009, 1761, 1761, 1761, 1761,
     1761, 1761, 2010, 2010, 2010, 1761, 1761, 1761, 1761, 1761,
     2011, 2011, 2011, 1761, 1761, 1761, 1761, 1761, 1761, 1761,

     1761, 1761, 2012, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 2013, 1761, 1761, 2013, 2014,
     2014, 2014, 1761, 1761, 1761, 1761, 1761, 1761, 2015, 2015,
     2015, 1761, 1761, 1761, 1761, 1761, 2016, 2016, 2016, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 2001, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 2017, 1761,
     2018, 1761, 2019, 1761, 2020, 2021, 1761, 1761, 2006, 1532,
     1761, 1761, 1761, 2006, 1761, 2006, 1532, 1761, 1761, 1761,
     2006, 1761, 2006, 1532, 1761, 1761, 1761, 2006, 1761, 2006,
     1532, 1761, 1761, 1761, 1761, 2006, 1532, 1761, 1761, 1761,

     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 2022, 1761, 2023, 1761, 2006, 1532, 1761, 1761, 1761,
     1761, 1761, 1761, 2006, 1532, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 2024, 2025, 1761,
        0, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,

     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,

     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,

     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761
    } ;

static const flex_int16_t yy_nxt[13396] =
    {   0,
     1761, 1761,   35,   36,   37,   35,   36,   37,  105,  106,
      105,  106,  176,  182,  381,  176,  182,  381,  177,  183,
     1761, 1761,  232,  178,  178,  184,   38, 1761,  184,   42,
      267,  267,  267,  267,  177,  183,  690,  185,  223,  185,
      186,  223,  187,  187,  187,  187,  221, 1761,  222,  222,
      222,  222,  234,  286,  690,  224,  224,  224,  224,  358,
      358,  358,  225,  234,  286,  418,  248,  418,  246,  246,
      246,  246,   39,   40,   41,   39,   40,   41,   43,   44,
       45,   46,   44,   43,   47,   48,   43,   43,   49,   50,
       43,   51,   43,   51,   52,   53,   54,   54,   54,   54,

       43,   55,   43,   43,   56,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   58,   59,   50,
       43,   60,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   61,   43,   62,   43,   63,   63,
       64,   65,   66,   43,   67,   45,   46,   67,   68,   47,
       69,   68,   70,   58,   43,   68,   71,   72,   71,   73,
       53,   74,   74,   74,   74,   75,   55,   68,   68,   76,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   58,   77,   43,   70,   60,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   43,
       43,   78,   68,   63,   63,   79,   80,   81,   43,   82,
       45,   46,   82,   83,   47,   84,   83,   70,   58,   50,
       83,   85,   72,   85,   86,   83,   87,   87,   87,   87,
       88,   55,   83,   83,   89,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   58,   90,   50,
       70,   60,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   43,   43,   62,   83,   63,   63,

       91,   92,   93,   95,   96,   97,   95,  171,  172,  173,
       98,  726,   98,   98,   98,   98,  727,   98,   98,   99,
      179,  704,  171,  172,  173,  420,  180,   98,  171,  172,
      173,  181, 1013,  171,  172,  173,  371,  371,  371,  371,
     1014,   98,  100,   98,  329,  384,  344,  329,  384,  344,
      703,  108,  109,  110,  108,  704,  111,  108,  109,  110,
      108, 1084,  111,  139,  140,  141,  139,  376,  111,   98,
      376,   98,  101,  101,  102,  103,  104,   95,   96,   97,
       95,  234,  286,  330,   98,  345,   98,   98,   98,   98,
      112,   98,   98,   99,  411,  296,  112,  294,  294,  294,

      294,   98,  142,  226, 1566,  227,  377,  228,  228,  228,
      228,  379,  380,  403,  404,   98,  100,   98,  782,  230,
      113,  113,  114,  115,  116,  790,  113,  113,  114,  115,
      116,  412,  113,  113,  114,  115,  116,  230,  386,  386,
      386,  386, 1761,   98,  232,   98,  101,  101,  102,  103,
      104,  117,  107,  118,  119,  107,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  120,
      120,  120,  120,  117,  117,  117,  117,  117,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      117,  117,  117,  117,  117,  120,  120,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  120,  120,  121,  120,
      120,  120,  120,  120,  120,  122,  120,  117,  117,  117,
      117,  123,  123,  124,  125,  126,  108,  127,  128,  108,
      223,  223, 1096,  223,  223,  139,  140,  141,  139, 1567,
      111,  164,  165,  333,  658,  166,  164,  165,  348,  664,
      166,  129,  242,  798,  225,  242,  379,  380,  484,  659,
      367,  484,  659,  367,  243,  130,  243,  244,  131,  245,
      245,  245,  245,  290,  142,  368,  290,  379,  679,  167,
      347,  171,  172,  173,  167,  291,  665,  291,  292,  665,
      293,  293,  293,  293,  804,  113,  113,  114,  115,  116,

      108,  127,  128,  108,  113,  113,  114,  115,  116,  113,
      113,  114,  115,  116,  113,  113,  114,  115,  116,  387,
      388,  388,  388,  403,  404,  129,  223,  189,  329,  223,
      372,  329,  373,  190,  374,  374,  374,  374,  191,  130,
      247,  306,  131,  307,  307,  307,  307,  691,  404,  248,
      225,  171,  172,  173,  179,  249,  171,  172,  173,  250,
      405,  192,  811,  405,  193,  389,  194,  330,  719,  113,
      113,  114,  115,  116,  132,  251, 1108,  132,  195,  390,
      133,  720,   70,   58,  406,  196,  134,   72,  134,  135,
       43,  136,  136,  136,  136, 1568,  268,  390,  269,  137,

      270,  270,  270,  270,  820,  252,  253,  254,  468,  468,
      468,  468,  271,  138,  273,   70,  139,  140,  141,  139,
      308, 1114,  309,  248,  310,  310,  310,  310, 1569,  274,
      271,  280,  199,  250,  415,  415,  311,  281,  295,  281,
     1120,  129,  282,  282,  282,  282,  256,  296,  180,  275,
      171,  172,  173,  297,  311,  143, 1571,  298,  131,  313,
      181,  696,  171,  172,  173,  697,  697,  179,  296,  171,
      172,  173,  827,  299,  314,  558,  559,  560,  298,  276,
      277,  278,  421,  422,  423,  113,  113,  114,  115,  116,
      139,  140,  141,  139,  315,  835,  283,  284,  285,  673,

      189,  673, 1128,  300,  301,  302,  190, 1572,  320,  484,
      234,  191,  484,  696,  321,  129,  321, 1001, 1001,  322,
      322,  322,  322,  303,  316,  317,  318,  199,  839,  143,
      484,  234,  131,  484,  192, 1008, 1009,  193,  389,  194,
      391,  391,  391,  391, 1389,  401,  398,  171,  172,  173,
     1580,  369,  390,  447,  199,  984,  984,  398,  370,  113,
      113,  114,  115,  116,  145,  146,  147,  145,  659,  333,
      390,  659,  148,  323,  324,  325, 1581,  421,  422,  423,
      398,  149,  149,  149,  149,  398,  441, 1142,  442,  398,
      149,  149,  149,  149,  665,  348,  398,  665, 1582,  398,

      405,  398,  399,  405,  421,  422,  423,  149,  149,  149,
      149,  149,  149,  145,  146,  147,  145,  224,  224,  224,
      224,  148,  680,  176,  406,  680,  176,  984,  984,  177,
      149,  149,  149,  149,  178,  224,  224,  224,  224,  149,
      149,  149,  149, 1397,  182,  177,  199,  182, 1589,  221,
      183,  187,  187,  187,  187,  178,  149,  149,  149,  149,
      149,  149,  151,  152,  153,  151,  183,  154,  155,  199,
     1590,  156,  156,  156,  184,  156,  157,  184,  443,  158,
      159,  159,  159,  156,  344, 1404,  185,  344,  185,  186,
     1597,  187,  187,  187,  187,  413,  421,  422,  423,  414,

      156,  414,  156,  156,  415,  415,  464, 1598, 1151,  407,
      160,  408,  199,  409,  409,  409,  409,  161, 1599,  421,
      422,  423,  162,  345,  199,  410,  705,  156,  706,  156,
      163,  151,  152,  153,  151, 1412,  154,  155,  199,  453,
      156,  156,  156,  410,  156,  157, 1600, 1601,  158,  159,
      159,  159,  156,  416,  451,  416, 1158, 1602,  417,  417,
      417,  226,  421,  422,  423,  476,  476,  476,  476,  156,
     1420,  156,  156,  457,  421,  422,  423, 1607, 1608,  160,
      483,  483,  483,  483,  680,  379,  161,  680,  421,  422,
      423,  162,  485,  485,  485, 1426,  156,  486,  156,  163,

      197, 1609,  381,  197,  198,  381, 1610,  198,  640,  641,
      642,  198,  198, 1164,  198,  199,  198,  198,  198,  198,
      198,  199,  384,  198,  198,  384,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  987,  198,
      987,  461, 1611,  200,  201,  202,  203,  204,  205,  206,
      198,  207,  198,  208,  209,  210,  211,  212,  213,  214,
      215,  216,  198,  198,  198,  421,  422,  423,  198,  651,
      853,  217,  218,  219,  234,  235,  236,  862,  226,  871,
      469,  652,  470,  470,  470,  470,  708,  303,  653,  199,
      237,  237,  237,  709,  410,  358,  358,  358,  471,  710,

      472, 1182,  473,  473,  473,  473,  267,  267,  267,  267,
      651,  444,  410,  406,  475, 1612,  236,  236,  445,  886,
      236,  236,  652,  367,  446,  894,  367,  199,  236,  653,
     1194,  236,  475,  236,  199,  236,  238,  189,  368,  421,
      422,  423,  376,  190, 1613,  376,  902,  199,  191,  255,
      255,  255,  255,  256,  257,  405,  452,  908,  405,  448,
      449,  450,  199,  258,  259,  260,  261,  262,  263,  454,
      722,  192,  484,  723,  193,  484,  194,  421,  422,  423,
      659,  377,  199,  659,  421,  422,  423,  199,  195,  179,
      199,  171,  172,  173,  199,  196,  247,  421,  422,  423,

      659,  333,  460,  659,  455,  264,  915,  265,  265,  265,
      265,  249,  421,  422,  423,  250,  389,  456, 1206, 1614,
      462,  660,  660,  660,  458,  463,  661,  459,  465,  924,
      390,  251,  421,  422,  423, 1212, 1615,  421,  422,  423,
      421,  422,  423, 1218,  421,  422,  423, 1617,  390,  931,
      226,  939,  227, 1226,  228,  228,  228,  228, 1618,  509,
      943,  252,  253,  254,  295,  489,  230,  245,  245,  245,
      245, 1465, 1626,  304,  510,  305,  305,  305,  305,  297,
      417,  417,  417,  298,  230,  481, 1761,  481,  232, 1627,
      482,  482,  482,  482,  242,  665,  348,  242,  665,  299,

      501,  501,  501,  501,  516, 1240,  243,  665,  243,  244,
      665,  245,  245,  245,  245,  255,  255,  255,  255,  680,
      379,  517,  680,  696,  511,  512,  513,  697,  697,  300,
      301,  302,  332,  332,  333,  334,  335,  332,  332,  332,
      336,  332,  336,  336,  336,  336,  332,  336,  336,  336,
      337,  337,  337,  332,  332,  332,  332,  336,  332,  332,
      332,  338,  332,  332,  332,  332,  332,  332,  338,  332,
      338,  336,  335,  336,  332,  332,  335,  335,  332,  338,
      335,  335,  332,  332,  332,  332,  332,  332,  335,  332,
      332,  335,  338,  335,  332,  335,  339,  332,  332,  336,

      332,  336,  332,  332,  332,  332,  332,  348,  349,  350,
     1628,  350, 1473,  490,  350,  491, 1635,  492,  492,  492,
      492,  495,  699,  351,  351,  351,  700,  700,  700,  493,
      248,  524,  524,  524,  524,  680,  496,  268,  680, 1636,
      250,  538,  538,  538,  538,  350, 1480,  493,  350,  350,
      350, 1643, 1644,  350,  350,  573,  497,  293,  293,  293,
      293,  350,  593, 1249,  350, 1645,  350, 1488,  350,  352,
      359,  359,  359,  359, 1646, 1017,  247,  594, 1018,  359,
      359,  359,  359, 1647, 1256,  248,  498,  499,  500, 1648,
     1496,  249,  712,  713,  714,  250,  359,  359,  359,  359,

      359,  359,  361,  199,  362,  362, 1653, 1654,  363,  362,
      363,  251, 1502,  364,  364,  364,  364,  503,  805,  806,
      807,  362,  585,  585,  585,  585,  248,  595,  596,  597,
      247, 1655,  274, 1656,  362, 1262,  250,  362, 1657,  248,
      957,  252,  253,  254,  966,  249,  666,  666,  666,  250,
      975,  667,  504,  421,  422,  423,  290,  755, 1658,  290,
      755,  362,  348,  349,  350,  251,  350,  756,  291,  350,
      291,  292, 1659,  293,  293,  293,  293, 1660,  351,  351,
      351, 1661,  505,  506,  507, 1662,  366,  606,  606,  606,
      606,  670,  670,  670,  670,  252,  253,  254, 1663, 1761,

      350, 1761,  472,  350,  350,  350,  308, 1664,  350,  350,
      620,  620,  620,  620, 1665, 1761,  350, 1761,  472,  350,
     1666,  350, 1667,  350,  352,  424,  425,  426,  427,  428,
      429,  430,  420,  431,  703,  432,  433,  434,  435,  436,
      437,  438,  439,  440,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      704,  477,  478,  478,  478,  478,  477,  477,  477,  477,
      477,  479,  479,  479,  480,  479,  479,  479,  479,  479,
      479,  479,  479,  477,  477,  477,  477,  477,  479,  479,
      479,  479,  480,  479,  479,  479,  479,  479,  479,  479,

      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  519,
      364,  364,  364,  364,  548, 1761,  548,  248,  248,  549,
      549,  549,  549,  420,  274,  485,  485,  485,  250,  703,
      486,  494,  551,  671,  704,  671,  420,  273,  672,  672,
      672,  248,  703,  199,  520,  704,  248,  552, 1084,  494,
      273,  250,  274,  836,  837,  838,  250, 1096, 1108,  248,
      836,  837,  838,  405, 1114,  274,  405,  553,  731,  250,
     1120, 1128,  275, 1574,  521,  522,  523,  495,  306, 1703,
      307,  307,  307,  307,  268,  275,  269,  406,  525,  525,

      525,  525,  496,  421,  422,  423,  250,  554,  555,  556,
      526, 1704,  276,  277,  278,  564,  678,  678,  678,  678,
     1389,  199,  497,  247,  248,  276,  277,  278,  526, 1705,
      249, 1142,  248, 1583,  250,  863,  864,  865,  249, 1706,
     1707,  574,  250,  575, 1397,  576,  576,  576,  576, 1708,
      565, 1591,  498,  499,  500,  528,  732,  577,  251,  558,
      559,  560,  529, 1709,  530, 1710,  531,  531,  531,  531,
      532,  421,  422,  423,  533,  577, 1404, 1711,  534,  372,
      566,  567,  568,  677,  677,  677,  677,  696,  252,  253,
      254,  697,  697,  372, 1151,  675,  534,  676,  676,  676,

      676,  372,  681,  373, 1412,  374,  374,  374,  374,  683,
      683,  683,  683,  386,  386,  386,  386, 1712, 1158,  682,
      535,  536,  537,  477,  477,  477,  477,  477,  539,  477,
      540,  539,  477,  477,  477,  539,  539,  477,  539, 1603,
      477,  541,  541,  541,  541,  542,  477,  539,  539,  543,
      539,  539,  539,  544,  539,  539,  539,  539,  539,  539,
      539,  539,  477,  539,  477,  477,  477,  539,  539,  539,
      539,  544,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  477,
      477,  477,  539,  477,  477,  545,  546,  547,  564,  468,

      468,  468,  468, 1713, 1714,  579, 1420,  248, 1715,  569,
      569,  569,  569,  249,  296, 1426,  295,  250, 1716,  587,
      580,  909,  910,  911,  298,  296, 1164,  295,  296,  755,
     1182,  297,  755,  565,  314,  298,  296, 1194,  298,  756,
      581,  601,  297,  940,  941,  942,  298,  940,  941,  942,
      296,  299, 1206, 1212,  588, 1218,  314,  967,  968,  969,
      298, 1226,  299,  566,  567,  568,  772,  772,  772,  772,
      582,  583,  584,  407, 1620,  199,  602,  692,  692,  692,
      692,  300,  301,  302,  589,  590,  591,  693,  693,  693,
      693, 1717,  300,  301,  302,  630, 1761,  630,  296,  694,

      631,  631,  631,  631, 1718, 1465,  603,  604,  605,  579,
      735, 1719,  578, 1240,  199, 1629,  308,  694,  309, 1720,
      607,  607,  607,  607,  580,  421,  422,  423,  298,  199,
      578, 1721,  608,  684, 1473,  684,  633, 1722,  685,  685,
      685,  685, 1637,  313,  581,  296,  730,  199,  313, 1723,
      608,  634,  296, 1724,  199,  298, 1480,  296,  314, 1725,
     1249,  736,  298,  314,  421,  422,  423,  298,  640,  641,
      642,  635,  741, 1488,  582,  583,  584,  610,  315,  421,
      422,  423,  199,  315,  611,  199,  612, 1726,  613,  613,
      613,  613,  614,  744, 1256, 1649,  615,  421,  422,  423,

      616,  636,  637,  638,  421,  422,  423, 1727,  316,  317,
      318, 1728,  737,  316,  317,  318, 1496,  481,  616,  481,
      733,  734,  695,  695,  695,  695,  695,  695,  695,  695,
     1729, 1502,  421,  422,  423,  421,  422,  423,  483,  483,
      483,  483,  617,  618,  619,  477,  477,  477,  477,  477,
      621,  477,  622,  621,  477,  477,  477,  621,  621,  477,
      621, 1730,  621,  623,  623,  623,  623,  624,  477,  621,
      621,  625,  621,  621,  621,  626,  621,  621,  621,  621,
      621,  621,  621,  621,  477,  621,  477,  477,  477,  621,
      621,  621,  621,  626,  621,  621,  621,  621,  621,  621,

      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  477,  477,  477,  621,  477,  477,  627,  628,  629,
      646,  199,  983, 1262,  983,  295,  471,  984,  984,  296,
      766,  766,  766,  766,  296,  297,  660,  660,  660,  298,
      297,  661, 1731,  389,  298,  391,  391,  391,  391,  389,
     1732,  391,  391,  391,  391,  647, 1733,  390,  199,  751,
      299, 1734,  407,  390,  408,  420,  409,  409,  409,  409,
      199,  421,  422,  423,  199,  390,  703,  199,  410, 1031,
      199,  390, 1031,  199,  704,  648,  649,  650,  646, 1032,
      300,  301,  302,  199,  740,  420,  410,  296,  703,  654,

      654,  654,  654,  297,  738,  753,  704,  298,  421,  422,
      423,  742,  739,  752,  743,  420,  703,  754,  704,  199,
      421,  422,  423,  647,  421,  422,  423,  421,  422,  423,
      421,  422,  423,  421,  422,  423,  762, 1033, 1044,  755,
     1033, 1044,  755,  421,  422,  423,  199, 1034, 1045,  756,
      420,  703,  761,  648,  649,  650,  359,  359,  359,  359,
      199,  704,  420,  199,  703,  359,  359,  359,  359,  421,
      422,  423,  774,  704,  775,  775,  775,  775, 1574, 1749,
      760, 1389,  359,  359,  359,  359,  359,  359,  701, 1583,
     1750,  199,  702,  702,  702,  702,  421,  422,  423,  759,

     1397,  702,  702,  702,  702,  199,  672,  672,  672,  199,
      421,  422,  423,  421,  422,  423, 1591, 1751,  702,  702,
      702,  702,  702,  702,  745,  745,  745,  745,  745,  758,
      745,  746, 1404,  745,  745,  745, 1412, 1603,  745, 1752,
      745,  421,  422,  423,  757, 1420,  747,  745,  763, 1426,
      745,  267,  267,  267,  267,  421,  422,  423, 1620,  421,
      422,  423, 1753,  745, 1465,  745,  746,  745,  767, 1761,
      767, 1761,  472,  768,  768,  768,  768,  481, 1629,  481,
     1754, 1473,  773,  773,  773,  773,  501,  501,  501,  501,
      745,  745,  745, 1637,  745,  745,  748,  749,  750,  477,

      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477, 1755,  477,  765,  765,  765,
      765,  477,  477,  477,  477,  477,  479,  479,  479,  480,
      479,  479,  479,  479,  479,  479,  479,  479,  477,  477,
      477,  477,  477,  479,  479,  479,  479,  480,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  226, 1480,  469, 1488,  470,  470,
      470,  470,  471, 1649,  472, 1756,  473,  473,  473,  473,
      410,  307,  307,  307,  307,  226, 1496,  769,  475,  770,

      770,  770,  770,  585,  585,  585,  585, 1502,  410,  420,
      703,  771, 1070,  490,  704, 1070,  475,  777,  777,  777,
      777,  490, 1071,  491,  821,  492,  492,  492,  492,  771,
      528,  666,  666,  666,  699,  799,  667,  493,  991,  991,
      991,  778,  778,  778,  778,  532,  420,  495,  703,  533,
      800,  704,  780,  779,  780,  493,  248,  781,  781,  781,
      781, 1574,  496, 1583,  495, 1591,  250, 1757, 1603,  783,
      799,  779,  495,  248,  822,  823,  824, 1620,  248,  496,
     1629,  248,  497,  250,  274, 1757, 1637,  496,  250, 1649,
      703,  250,  997,  997,  997,  535,  536,  537,  420,  497,

      801,  802,  803,  704,  784,  487,  791,  497,  703,  503,
      420,  487,  498,  499,  500,  248, 1031,  528,  248, 1031,
      704,  552,  703,  420,  274,  250, 1032,  704,  250,  498,
      499,  500,  825,  503,  785,  786,  787,  498,  499,  500,
      821,  792,  248, 1033,  504,  812, 1033,  703,  274,  420,
      519,  529,  250, 1034,  248,  826,  826,  826,  826,  248,
      552,  662,  528, 1529,  250,  274, 1528,  662,  504,  250,
      925,  793,  794,  795,  505,  506,  507,  532,  519, 1527,
      813,  533,  840,  841,  842,  520, 1526,  248, 1525, 1524,
      822,  823,  824,  274, 1097, 1098, 1099,  250,  505,  506,

      507,  548, 1761,  548,  248, 1523,  549,  549,  549,  549,
      814,  815,  816,  520, 1522,  521,  522,  523,  494,  574,
      926,  927,  928,  881,  881,  881,  881,  535,  536,  537,
     1521, 1520,  843,  925,  843, 1519,  494,  844,  844,  844,
      844,  821, 1518,  521,  522,  523,  528,  670,  670,  670,
      670, 1517,  528,  529, 1516,  530, 1515,  819,  819,  819,
      819,  532,  805,  806,  807,  533,  268,  825,  847,  534,
      848,  848,  848,  848, 1761, 1514,  248,  645,  549,  549,
      549,  549,  849,  926,  927,  928, 1044,  534, 1510, 1044,
      494,  822,  823,  824,  610,  975, 1045,  851,  639,  851,

      849,  551,  852,  852,  852,  852,  821,  632,  494,  929,
      248,  535,  536,  537,  495, 1509,  552,  840,  841,  842,
      250,  268,  966,  269, 1508,  525,  525,  525,  525,  496,
     1109, 1110, 1111,  250,  957,  821,  553,  526,  574, 1507,
      575,  668,  576,  576,  576,  576,  611,  668, 1506,  497,
      930,  930,  930,  930,  577,  526,  822,  823,  824,  944,
      945,  946,  483,  483,  483,  483,  554,  555,  556,  551,
     1262,  689,  577, 1070, 1264,  903, 1070,  689,  248,  498,
      499,  500,  828, 1071,  552,  822,  823,  824,  250,  529,
      904,  530, 1495,  829,  829,  829,  829,  830, 1115, 1116,

     1117,  533, 1494, 1256,  553,  831,  884, 1487,  884,  551,
      903,  885,  885,  885,  885,  419,  821,  820,  248, 1486,
      985,  419,  985,  831,  552,  986,  986,  986,  250,  685,
      685,  685,  685,  674,  554,  555,  556,  872, 1249,  674,
      905,  906,  907,  830,  553,  997,  248,  832,  833,  834,
      828,  997,  496, 1472,  998,  610,  250,  529, 1471,  530,
      998,  850,  850,  850,  850,  830,  822,  823,  824,  533,
      929, 1240,  873,  831,  554,  555,  556,  564,  685,  685,
      685,  685,  610,  699,  609,  820,  248, 1002, 1002, 1002,
      564,  831,  249,  822,  823,  824,  250,  614, 1461,  248,

      943,  615,  874,  875,  876,  249, 1121, 1122, 1123,  250,
     1003, 1460,  565, 1003, 1459,  832,  833,  834,  854, 1003,
      944,  945,  946, 1226, 1458,  565,  579,  855,  939,  856,
      856,  856,  856,  857,  699,  296, 1457,  858,  700,  700,
      700,  580,  566,  567,  568,  298,  931,  617,  618,  619,
      836,  837,  838,  497, 1456,  566,  567,  568,  947,  579,
      947,  581, 1455,  948,  948,  948,  948,  925,  296, 1075,
     1075, 1075, 1075, 1218,  580,  372, 1450,  675,  298,  676,
      676,  676,  676,  859,  860,  861,  872,  772,  772,  772,
      772,  582,  583,  584,  581,  248, 1449,  879,  879,  879,

      879,  496,  372, 1212,  675,  250,  993,  993,  993,  993,
      863,  864,  865,  887, 1195, 1196, 1197,  926,  927,  928,
      579,  873,  296, 1448,  582,  583,  584,  895,  314,  296,
     1324,  988,  298, 1324,  924,  580,  296,  988, 1447,  298,
     1325,  587,  634,  487, 1165,  487,  298,  925,  888,  487,
      296,  874,  875,  876,  610,  581,  314, 1280, 1281, 1166,
      298, 1446,  896, 1280, 1281,  882,  882,  882,  882,  614,
      909,  910,  911,  615, 1206,  600,  588,  883,  889,  890,
      891,  587, 1207, 1208, 1209,  582,  583,  584, 1445,  915,
      296,  592,  897,  898,  899,  883,  314,  926,  927,  928,

      298, 1444,  908,  916, 1443,  902,  589,  590,  591, 1167,
     1168, 1169,  296, 1442,  601, 1441,  588,  601,  634,  617,
      618,  619,  298,  296, 1338, 1512,  296, 1338, 1194,  314,
      586, 1512,  314,  298, 1339, 1761,  298,  472,  917,  768,
      768,  768,  768, 1213, 1214, 1215,  589,  590,  591,  602,
     1440,  925,  602,  894,  630, 1761,  630,  296,  578,  631,
      631,  631,  631,  683,  683,  683,  683, 1439,  918,  919,
      920,  578, 1219, 1220, 1221,  390,  940,  941,  942,  603,
      604,  605,  603,  604,  605,  610,  967,  968,  969,  578,
      886, 1438,  611,  390,  612, 1437,  923,  923,  923,  923,

      614,  926,  927,  928,  615,  308, 1182,  951,  616,  952,
      952,  952,  952, 1031,  563,  774, 1031,  775,  775,  775,
      775,  953,  955, 1032,  955, 1434,  616,  956,  956,  956,
      956,  925,  871,  557,  199,  781,  781,  781,  781,  953,
     1761,  550,  296,  799,  631,  631,  631,  631, 1513, 1433,
      617,  618,  619,  579, 1513,  662,  578,  662,  800,  862,
      308,  662,  309, 1432,  607,  607,  607,  607,  580,  986,
      986,  986,  298,  668,  578,  668,  608,  853,  799,  668,
      633,  926,  927,  928,  421,  422,  423,  633,  581,  296,
     1761,  934,  633, 1761,  608,  634,  296, 1431, 1430,  298,

     1761,  296,  634,  986,  986,  986,  298,  634,  801,  802,
      803,  298, 1097, 1098, 1099,  635, 1164, 1166,  582,  583,
      584,  932,  635,  829,  829,  829,  829,  635,  611, 1419,
      612, 1418,  933,  933,  933,  933,  934, 1109, 1110, 1111,
      615,  926,  927,  928,  935,  636,  637,  638,  885,  885,
      885,  885,  636,  637,  638,  976,  924,  636,  637,  638,
      646, 1158,  935, 1411,  296,  933,  933,  933,  933,  296,
      580, 1115, 1116, 1117,  298,  297,  407, 1410,  999,  298,
     1000, 1000, 1000, 1000, 1151, 1759,  936,  937,  938,  932,
      977, 1759,  771, 1760, 1396,  647,  611, 1395,  612, 1760,

      954,  954,  954,  954,  934, 1121, 1122, 1123,  615, 1142,
      771,  527,  935,  199,  646, 1385, 1073, 1073, 1073, 1073,
      978,  979,  980,  296,  924,  648,  649,  650, 1074,  297,
      935,  839, 1384,  298,  481, 1761,  481, 1761, 1383,  773,
      773,  773,  773, 1128, 1306, 1078, 1074, 1078, 1382,  647,
     1079, 1079, 1079, 1079,  936,  937,  938,  958,  844,  844,
      844,  844,  821,  421,  422,  423,  959,  835,  960,  960,
      960,  960,  961,  419, 1381, 1033,  962,  419, 1033,  648,
      649,  650,  471,  419,  472, 1034,  473,  473,  473,  473,
     1761,  674,  581, 1761, 1761,  674,  199, 1761,  475, 1761,

     1761,  674, 1761,  827, 1761, 1380, 1379, 1761, 1120, 1761,
     1761,  199,  822,  823,  824,  199,  475, 1761, 1374, 1373,
      199, 1114,  963,  964,  965,  976,  699, 1372,  199,  820,
      991,  991,  991, 1371,  296, 1035,  989,  989,  989,  989,
      580, 1036, 1370, 1108,  298,  518,  421,  422,  423,  799,
     1369, 1761, 1037, 1761, 1129, 1038, 1080, 1080, 1080, 1080,
      977,  421,  422,  423,  800,  421,  422,  423, 1085,  821,
      421,  422,  423, 1079, 1079, 1079, 1079,  248,  421,  422,
      423, 1263,  811,  552,  799, 1761,  508,  250, 1761, 1129,
      978,  979,  980,  701, 1368, 1761, 1264,  992,  992,  992,

      992, 1761, 1324, 1086, 1761, 1324,  992,  992,  992,  992,
      804, 1761, 1325, 1367,  801,  802,  803,  798, 1366, 1130,
     1131, 1132,  199,  992,  992,  992,  992,  992,  992,  702,
      702,  702,  702, 1087, 1088, 1089, 1365, 1096,  702,  702,
      702,  702, 1761,  502, 1364, 1761, 1265, 1266, 1267, 1427,
     1428, 1429, 1761,  790, 1039,  702,  702,  702,  702,  702,
      702, 1761,  494,  199, 1761, 1761, 1363,  782, 1761, 1362,
     1361, 1761,  421,  422,  423, 1761, 1080, 1080, 1080, 1080,
     1761, 1084,  199, 1761, 1044,  704,  199, 1044, 1761,  703,
     1761, 1761, 1547, 1040, 1045, 1547, 1761,  420, 1761, 1761,

     1761,  199, 1548, 1761,  704,  199, 1761,  703, 1761, 1041,
     1761, 1761, 1042,  421,  422,  423,  420,  199, 1761, 1305,
     1761,  199,  699, 1761,  199, 1304,  700,  700,  700,  199,
     1761, 1303,  421,  422,  423, 1544,  421,  422,  423, 1046,
     1043,  199, 1139, 1302, 1139, 1301, 1300, 1140, 1140, 1140,
     1140,  421,  422,  423, 1299,  421,  422,  423, 1048, 1047,
     1298,  472, 1307,  768,  768,  768,  768,  421,  422,  423,
     1297,  421,  422,  423,  421,  422,  423, 1296, 1295,  421,
      422,  423, 1237, 1294, 1237,  199, 1293, 1238, 1238, 1238,
     1238,  421,  422,  423,  424,  425,  426,  427,  428,  429,

      430, 1292,  431, 1291,  432,  433,  434,  435,  436,  437,
      438,  439,  440, 1761, 1308, 1761, 1761, 1761, 1761, 1290,
     1761, 1289, 1288, 1761,  471, 1761,  472, 1761,  473,  473,
      473,  473, 1287, 1286,  199,  421,  422,  423,  199, 1285,
      475,  226, 1284,  769,  420,  770,  770,  770,  770, 1761,
     1277,  319, 1761, 1761, 1276,  645, 1761,  771,  475, 1761,
     1545, 1050, 1761, 1761, 1275, 1761, 1761, 1274,  975, 1761,
      199,  312, 1761, 1049,  199,  771, 1761,  199,  472, 1273,
     1358, 1358, 1358, 1358,  421,  422,  423,  199,  421,  422,
      423, 1051, 1051, 1051, 1051, 1051, 1058, 1051, 1052,  639,

     1051, 1051, 1051, 1272,  199, 1051,  632, 1051, 1550, 1546,
     1059, 1550, 1271, 1053, 1051, 1309, 1060, 1051, 1551, 1270,
      421,  422,  423,  966,  421,  422,  423,  421,  422,  423,
     1051, 1269, 1051, 1052, 1051,  199, 1327,  421,  422,  423,
     1268,  957,  372, 1234,  675, 1054,  993,  993,  993,  993,
     1761,  609, 1232, 1761,  421,  422,  423, 1051, 1051, 1051,
     1761, 1051, 1051, 1055, 1056, 1057, 1061, 1061, 1061, 1061,
     1061,  199, 1061, 1062, 1231, 1061, 1061, 1061, 1326,  943,
     1061, 1761, 1061, 1225, 1761,  421,  422,  423, 1063, 1061,
     1070, 1761, 1061, 1070, 1761, 1224,  939, 1761,  199, 1068,

     1071, 1223,  199, 1222, 1761, 1061,  199, 1061, 1062, 1061,
      931,  199, 1211, 1761, 1064,  199, 1210, 1135, 1135, 1135,
     1135,  421,  422,  423, 1329, 1195, 1196, 1197, 1069,  827,
      924, 1205, 1061, 1061, 1061,  600, 1061, 1061, 1065, 1066,
     1067, 1140, 1140, 1140, 1140, 1072, 1204,  827,  421,  422,
      423, 1203,  421,  422,  423,  915,  421,  422,  423,  294,
     1202,  421,  422,  423,  592,  421,  422,  423,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477, 1201,  477, 1076, 1076, 1076, 1076,
      477,  477,  477,  477,  477,  479,  479,  479, 1077,  479,

      479,  479,  479,  479,  479,  479,  479,  477,  477,  477,
      477,  477,  479,  479,  479,  479, 1077,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  490,  199, 1081, 1200, 1082, 1082, 1082,
     1082, 1207, 1208, 1209,  908,  851,  528,  851, 1199,  849,
      852,  852,  852,  852,  821,  530, 1337, 1083, 1083, 1083,
     1083,  532, 1213, 1214, 1215,  533, 1761,  849,  828, 1761,
      852,  852,  852,  852,  821,  529, 1761,  530, 1198,  829,
      829,  829,  829,  830,  421,  422,  423,  533,  902, 1193,

      843,  831,  843,  586, 1192,  844,  844,  844,  844,  821,
     1191,  783,  199,  820,  822,  823,  824,  894,  783,  831,
      248,  535,  536,  537, 1190,  578,  274,  248, 1189, 1549,
      250, 1188,  791,  274,  822,  823,  824,  250, 1336,  791,
      886,  248,  279,  832,  833,  834,  784,  552,  248, 1178,
      563,  250, 1177,  784,  552, 1176,  791,  871,  250,  822,
      823,  824,  421,  422,  423,  248,  272,  792,  199, 1761,
     1175,  552, 1761,  812,  792,  250,  785,  786,  787, 1761,
      199,  812,  248,  785,  786,  787,  557, 1174,  552,  550,
      248,  792,  250, 1173,  812, 1172,  552,  793,  794,  795,

      250,  862, 1317,  248,  793,  794,  795, 1171,  813,  552,
     1219, 1220, 1221,  250, 1170,  853,  813, 1136,  421,  422,
      423,  793,  794,  795, 1238, 1238, 1238, 1238,  903,  813,
      421,  422,  423,  527, 1761,  903, 1134, 1761,  814,  815,
      816, 1133, 1553,  904, 1761, 1553,  814,  815,  816,  268,
      904,  847, 1554,  848,  848,  848,  848,  839, 1127,  814,
      815,  816,  828,  903, 1126,  849,  835, 1125,  199,  529,
      903,  530, 1124,  850,  850,  850,  850,  830, 1503, 1504,
     1505,  533, 1761,  849,  827,  831, 1141, 1141, 1141, 1141,
     1143, 1113, 1552,  905,  906,  907, 1112,  820,  827,  248,

      905,  906,  907,  831,  820, 1144, 1761, 1328, 1761,  250,
     1150, 1150, 1150, 1150, 1107,  518,  827,  495,  421,  422,
      423, 1761,  527, 1106, 1761, 1145,  248,  832,  833,  834,
      528, 1761, 1149, 1105,  811,  199,  250,  529,  199,  530,
      527, 1118, 1118, 1118, 1118,  532, 1604, 1605, 1606,  533,
      246, 1338,  497, 1119, 1338, 1146, 1147, 1148,  574, 1104,
     1179, 1339, 1180, 1180, 1180, 1180, 1761,  508, 1103, 1761,
     1348, 1119, 1102,  804,  953, 1340, 1761, 1427, 1428, 1429,
     1555, 1101,  498,  499,  500,  421,  422,  423,  421,  422,
      423, 1100,  953,  798, 1095,  535,  536,  537,  477,  477,

      477,  477,  477,  539,  477,  540,  539,  477,  477,  477,
      539,  539,  477,  539,  502,  477, 1137, 1137, 1137, 1137,
      542,  477,  539,  539,  543,  539,  539,  539, 1138,  539,
      539,  539,  539,  539,  539,  539,  539,  477,  539,  477,
      477,  477,  539,  539,  539,  539, 1138,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  477,  477,  477,  539,  477,  477,
      545,  546,  547, 1152, 1565, 1565, 1565, 1565, 1094, 1093,
     1159,  790,  855, 1227, 1153, 1153, 1153, 1153, 1154,  248,
     1092,  872,  858,  494,  872,  274, 1091, 1090,  925,  250,

      248,  782,  872,  248, 1761,  232,  496, 1761, 1145,  496,
      250,  248,  199,  250, 1761, 1160,  198,  496, 1227,  704,
     1324,  250,  703, 1324,  420, 1030,  873, 1029, 1028,  873,
     1325, 1027,  948,  948,  948,  948,  925,  873, 1155, 1156,
     1157,  199, 1026, 1025, 1355, 1161, 1162, 1163, 1228, 1229,
     1230, 1558, 1650, 1651, 1652, 1024,  874,  875,  876,  874,
      875,  876,  421,  422,  423, 1023, 1022,  874,  875,  876,
      872,  956,  956,  956,  956,  925, 1503, 1504, 1505,  248,
     1021,  879,  879,  879,  879,  496,  926,  927,  928,  250,
     1020,  421,  422,  423, 1019,  955, 1761,  955,  610, 1761,

      956,  956,  956,  956,  925,  873, 1761,  612, 1016, 1181,
     1181, 1181, 1181,  614, 1761, 1015, 1012,  615, 1233, 1233,
     1233, 1233, 1011, 1010, 1183,  926,  927,  928, 1007, 1006,
      931, 1536, 1005,  296, 1536,  874,  875,  876,  932,  634,
     1004, 1537,  420,  298,  701,  611, 1761,  612,  931,  933,
      933,  933,  933,  934,  926,  927,  928,  615,  996, 1184,
      995,  935,  887,  617,  618,  619,  994,  887, 1604, 1605,
     1606,  296,  353,  924,  667, 1338,  296,  314, 1338,  935,
      340,  298,  314,  661, 1761, 1339,  298, 1761,  326, 1185,
     1186, 1187,  990,  319, 1761,  982,  199,  888, 1547,  981,

      895, 1547,  888,  936,  937,  938,  645,  895, 1548,  296,
      974, 1282, 1282, 1282, 1282,  634,  296,  312,  973,  298,
      972,  895,  634, 1283,  639,  971,  298,  889,  890,  891,
      296,  970,  889,  890,  891,  896,  634, 1650, 1651, 1652,
      298, 1283,  896,  916, 1556,  632,  421,  422,  423,  988,
      950, 1761,  296,  988, 1761,  199,  896,  949,  634,  988,
      916, 1761,  298,  609,  929,  897,  898,  899,  950,  296,
      949,  609,  897,  898,  899,  634,  929, 1347,  917,  298,
      922,  916, 1550,  921,  600, 1550,  897,  898,  899,  914,
      296,  294, 1551,  913,  912,  917,  634,  308,  592,  951,

      298,  952,  952,  952,  952,  421,  422,  423,  918,  919,
      920, 1557,  594,  953,  901,  947,  917,  947,  900,  586,
      948,  948,  948,  948,  925,  918,  919,  920,  893,  892,
      578,  953,  287, 1553,  880, 1761, 1553,  199,  279, 1239,
     1239, 1239, 1239, 1554,  878,  877,  918,  919,  920,  932,
      472,  931, 1357, 1357, 1357, 1357,  611,  563,  612,  870,
      954,  954,  954,  954,  934,  272,  869,  868,  615,  931,
      557,  199,  935,  867,  926,  927,  928, 1241,  866, 1403,
     1403, 1403, 1403,  821,  924,  579,  296,  421,  422,  423,
      935,  550, 1242,  846,  296,  845,  298,  527,  825,  846,

     1247,  845,  527, 1761,  298, 1761,  825, 1248, 1248, 1248,
     1248,  818, 1243,  817,  936,  937,  938,  610,  518,  609,
      581,  421,  422,  423,  611,  810,  612,  246, 1216, 1216,
     1216, 1216,  614,  822,  823,  824,  615,  609,  809,  808,
     1217, 1761, 1244, 1245, 1246, 1135, 1135, 1135, 1135,  508,
      582,  583,  584,  510, 1356,  797, 1356,  827, 1217, 1357,
     1357, 1357, 1357, 1078,  796, 1078,  502,  789, 1358, 1358,
     1358, 1358, 1761,  788,  472,  827, 1357, 1357, 1357, 1357,
      494,  239,  617,  618,  619,  477,  477,  477,  477,  477,
      621,  477,  622,  621,  477,  477,  477,  621,  621,  477,

      621,  486,  621, 1235, 1235, 1235, 1235,  624,  477,  621,
      621,  625,  621,  621,  621, 1236,  621,  621,  621,  621,
      621,  621,  621,  621,  477,  621,  477,  477,  477,  621,
      621,  621,  621, 1236,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  477,  477,  477,  621,  477,  477,  627,  628,  629,
     1250,  764,  198,  729,  728,  725,  724, 1257,  721,  959,
      718, 1251, 1251, 1251, 1251, 1252,  296,  717,  976,  962,
      716,  976,  314,  715, 1129,  199,  298,  296,  711,  976,
      296, 1536,  707,  580, 1536, 1243,  580,  298,  296,  821,

      298, 1537, 1258,  704,  580,  407,  703,  999,  298, 1000,
     1000, 1000, 1000,  977,  420,  688,  977,  687,  686, 1129,
     1547,  771,  651, 1547,  977, 1253, 1254, 1255, 1681,  669,
     1548,  353, 1259, 1260, 1261,  421,  422,  423,  663,  771,
      340,  657,  326,  978,  979,  980,  978,  979,  980, 1130,
     1131, 1132,  656,  655,  978,  979,  980,  976, 1479, 1479,
     1479, 1479,  925,  319, 1550,  644,  296, 1550,  989,  989,
      989,  989,  580,  471, 1551,  472,  298, 1073, 1073, 1073,
     1073,  490,  643, 1081, 1085, 1082, 1082, 1082, 1082, 1074,
      312, 1553,  977,  248, 1553,  199,  599,  849,  598,  552,

      294, 1554, 1085,  250,  572,  287, 1701, 1074,  571, 1701,
      570,  248,  926,  927,  928,  849, 1702,  552, 1129, 1086,
      279,  250,  978,  979,  980,  701,  199,  256,  562,  992,
      992,  992,  992,  821, 1674,  561,  272, 1086,  992,  992,
      992,  992,  515,  514,  246,  421,  422,  423,  488, 1087,
     1088, 1089,  239, 1129,  467,  992,  992,  992,  992,  992,
      992, 1278, 1278,  466, 1278, 1688, 1278, 1087, 1088, 1089,
     1278, 1278, 1278,  198, 1278,  175,  421,  422,  423, 1085,
      396,  395, 1278, 1130, 1131, 1132, 1701, 1741,  248, 1701,
     1741,  394,  393,  392,  552,  385, 1702, 1742,  250, 1278,

      382, 1278, 1278, 1377,  378, 1377,  375,  360, 1378, 1378,
     1378, 1378,  821, 1386, 1086, 1386,  355,  354, 1387, 1387,
     1387, 1387,  821, 1143,  353,  199, 1278,  356, 1278, 1278,
     1279, 1279,  248, 1279,  199, 1279,  355,  354, 1144, 1279,
     1279, 1279,  250, 1279, 1087, 1088, 1089, 1741,  353, 1761,
     1741, 1279, 1421, 1141, 1141, 1141, 1141, 1742, 1145,  346,
      343,  342,  822,  823,  824,  827,  341, 1422, 1279,  340,
     1279, 1279,  822,  823,  824,  421,  422,  423,  331,  328,
      327,  326,  303,  827,  421,  422,  423, 1421, 1146, 1147,
     1148,  289,  288,  287,  266, 1279,  241, 1279, 1279,  702,

      702,  702,  702, 1758, 1758, 1758,  240,  239,  702,  702,
      702,  702,  220,  188,  175,  174, 1761, 1423, 1424, 1425,
      169, 1758, 1758, 1758, 1758,  702,  702,  702,  702,  702,
      702, 1310, 1310, 1310, 1310, 1310,  169, 1310, 1311, 1761,
     1310, 1310, 1310, 1761, 1761, 1310, 1761, 1310, 1761, 1761,
     1761, 1761, 1761, 1312, 1310, 1761, 1761, 1310, 1761,  574,
     1761, 1179, 1761, 1180, 1180, 1180, 1180, 1761, 1761,  528,
     1310, 1761, 1310, 1311, 1310,  953, 1143, 1761,  530, 1313,
     1388, 1388, 1388, 1388,  532,  248, 1761,  199,  533, 1761,
     1761, 1144, 1761,  953, 1761,  250, 1761, 1310, 1310, 1310,

     1761, 1310, 1310, 1314, 1315, 1316, 1318, 1318, 1318, 1318,
     1318, 1145, 1318, 1319, 1761, 1318, 1318, 1318, 1761, 1761,
     1318, 1761, 1318, 1761, 1761, 1761, 1761, 1761, 1320, 1318,
     1761, 1761, 1318, 1761,  535,  536,  537,  421,  422,  423,
     1761, 1146, 1147, 1148, 1761, 1318, 1761, 1318, 1319, 1318,
     1453, 1390, 1453, 1761, 1761, 1454, 1454, 1454, 1454,  925,
      248, 1761,  199, 1761, 1761, 1761,  274, 1761, 1761, 1761,
      250, 1761, 1318, 1318, 1318,  199, 1318, 1318, 1321, 1322,
     1323, 1330, 1330, 1330, 1330, 1330, 1391, 1330, 1331,  199,
     1330, 1330, 1330, 1761,  199, 1330, 1761, 1330, 1761, 1761,

     1761, 1761, 1761, 1332, 1330, 1761, 1761, 1330, 1761,  926,
      927,  928,  421,  422,  423, 1761, 1392, 1393, 1394, 1761,
     1330, 1761, 1330, 1331, 1330,  421,  422,  423, 1227, 1078,
     1761, 1078, 1761, 1761, 1358, 1358, 1358, 1358, 1761,  421,
      422,  423, 1761,  925,  421,  422,  423, 1330, 1330, 1330,
     1761, 1330, 1330, 1333, 1334, 1335,  424,  425,  426,  427,
      428,  429,  430, 1227,  431, 1227,  432,  433,  434,  435,
      436,  437,  438,  439,  440, 1341, 1341, 1341, 1341, 1341,
      925, 1341, 1342,  199, 1341, 1341, 1341, 1761, 1761, 1341,
     1761, 1341, 1761, 1228, 1229, 1230, 1761, 1343, 1341, 1761,

     1227, 1341, 1761, 1761, 1143, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761,  248, 1341, 1761, 1341, 1342, 1341, 1144,
     1761, 1761, 1761,  250, 1761, 1233, 1233, 1233, 1233, 1761,
     1228, 1229, 1230,  421,  422,  423, 1761,  931, 1761, 1145,
     1761, 1341, 1341, 1341, 1761, 1341, 1341, 1344, 1345, 1346,
     1349, 1349, 1349, 1349, 1349,  931, 1349, 1350, 1761, 1349,
     1349, 1349, 1761, 1761, 1349, 1398, 1349, 1761, 1143, 1146,
     1147, 1148, 1351, 1349,  248, 1761, 1349,  248, 1761, 1761,
      274, 1761, 1761, 1144,  250, 1761, 1761,  250, 1761, 1349,
     1761, 1349, 1350, 1349, 1761, 1761, 1761, 1761, 1761, 1761,

     1399, 1761, 1761, 1145, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1497, 1761, 1761, 1761, 1761, 1349, 1349, 1349, 1761,
     1349, 1349, 1352, 1353, 1354,  528, 1498, 1761, 1761, 1761,
     1400, 1401, 1402, 1146, 1147, 1148, 1359, 1359, 1359, 1359,
      532, 1761, 1761, 1761,  533, 1761, 1497, 1761, 1360, 1143,
     1761, 1761, 1405, 1761, 1761, 1761, 1761, 1761,  248, 1761,
     1413,  248, 1761, 1761, 1154, 1761, 1360,  274,  250,  248,
     1761,  250, 1761, 1761, 1761,  552, 1499, 1500, 1501,  250,
     1761, 1761, 1761, 1761, 1145, 1761, 1761, 1406, 1761, 1761,
      535,  536,  537,  828, 1761, 1414, 1761, 1761, 1421, 1761,

     1761, 1761,  530, 1761, 1141, 1141, 1141, 1141,  830, 1761,
     1761, 1761,  533, 1422, 1146, 1147, 1148, 1407, 1408, 1409,
     1159, 1701, 1761, 1761, 1701, 1415, 1416, 1417,  820,  248,
     1761, 1702, 1159, 1421, 1761,  274, 1761, 1761, 1761,  250,
     1761,  248,  199, 1761, 1761, 1761, 1761,  274, 1761, 1761,
     1761,  250, 1761, 1761, 1761, 1160, 1761, 1761,  832,  833,
      834,  828, 1761, 1423, 1424, 1425, 1421, 1160,  529, 1761,
      530, 1761, 1375, 1375, 1375, 1375,  830, 1761, 1761, 1761,
      533, 1422, 1761, 1761, 1376, 1161, 1162, 1163, 1761, 1761,
     1761, 1761,  421,  422,  423, 1183,  820, 1161, 1162, 1163,

     1183, 1421, 1376, 1761,  296, 1761, 1761, 1761, 1761,  296,
      634, 1761, 1761, 1761,  298,  634, 1462, 1761, 1462,  298,
     1761, 1463, 1463, 1463, 1463,  925,  832,  833,  834, 1152,
     1184, 1423, 1424, 1425, 1761, 1184, 1183, 1761,  855, 1761,
     1153, 1153, 1153, 1153, 1154,  296, 1761, 1761,  858, 1761,
     1761,  634, 1761, 1761, 1761,  298, 1239, 1239, 1239, 1239,
     1185, 1186, 1187, 1761, 1145, 1185, 1186, 1187,  931,  610,
     1761, 1184, 1761, 1761, 1761,  926,  927,  928,  612, 1761,
     1464, 1464, 1464, 1464,  614, 1761,  931, 1761,  615, 1378,
     1378, 1378, 1378,  821, 1155, 1156, 1157,  610, 1761, 1761,

     1761, 1185, 1186, 1187, 1241, 1761, 1761, 1761, 1435, 1435,
     1435, 1435,  614,  296, 1761, 1761,  615, 1761, 1761, 1242,
     1436, 1761, 1241,  298, 1761, 1761, 1761, 1761, 1761, 1761,
     1761,  296, 1761, 1761,  617,  618,  619, 1242, 1436, 1243,
     1466,  298, 1761,  822,  823,  824, 1761, 1761, 1761,  296,
     1761, 1497, 1761, 1761, 1761,  314, 1761, 1243, 1761,  298,
     1761, 1761,  617,  618,  619,  932, 1498, 1761, 1761, 1244,
     1245, 1246, 1761, 1761,  612, 1467, 1239, 1239, 1239, 1239,
      934, 1761, 1761, 1761,  615, 1761, 1497, 1244, 1245, 1246,
     1386, 1761, 1386, 1241, 1761, 1387, 1387, 1387, 1387,  821,

      924, 1761,  296, 1761, 1474, 1468, 1469, 1470, 1242, 1761,
     1761, 1761,  298,  296, 1761, 1761, 1499, 1500, 1501,  314,
      471, 1761,  472,  298, 1073, 1073, 1073, 1073, 1243, 1761,
      936,  937,  938,  932, 1761, 1761, 1074, 1761, 1761, 1475,
      611, 1761,  612, 1761, 1451, 1451, 1451, 1451,  934,  822,
      823,  824,  615, 1761, 1074, 1761, 1452, 1241, 1244, 1245,
     1246, 1761, 1761, 1761, 1761, 1761,  296, 1761,  924, 1476,
     1477, 1478, 1242, 1761, 1452, 1241,  298, 1570, 1570, 1570,
     1570, 1761, 1481, 1761,  296, 1761, 1761, 1761, 1761,  827,
     1252,  296, 1243, 1761,  298, 1761, 1761,  314,  936,  937,

      938,  298, 1761, 1761, 1761, 1761, 1761,  827, 1761, 1761,
     1243, 1761, 1761, 1761, 1761, 1761, 1489, 1482, 1761, 1761,
     1761, 1761, 1244, 1245, 1246,  296, 1761, 1761, 1761, 1761,
     1761,  634, 1761, 1761, 1761,  298, 1761, 1761, 1761, 1761,
     1244, 1245, 1246, 1250, 1761, 1761, 1761, 1483, 1484, 1485,
     1257, 1490,  959, 1761, 1251, 1251, 1251, 1251, 1252,  296,
     1761, 1257,  962, 1761, 1761,  314, 1761, 1761, 1761,  298,
      296, 1761, 1761, 1761, 1761, 1761,  314, 1761, 1243, 1761,
      298, 1491, 1492, 1493, 1377, 1258, 1377, 1761, 1761, 1378,
     1378, 1378, 1378,  821, 1761, 1761, 1258, 1387, 1387, 1387,

     1387,  821, 1403, 1403, 1403, 1403,  821, 1761, 1253, 1254,
     1255, 1573, 1573, 1573, 1573, 1259, 1260, 1261, 1454, 1454,
     1454, 1454,  925,  827, 1761, 1761, 1259, 1260, 1261, 1511,
     1511, 1761, 1511, 1761, 1511, 1761, 1761, 1761, 1511, 1511,
     1511,  827, 1511,  822,  823,  824, 1761, 1761, 1761, 1761,
     1511,  822,  823,  824, 1761, 1761,  822,  823,  824, 1573,
     1573, 1573, 1573, 1761, 1761, 1761, 1761, 1511, 1575, 1511,
     1511,  827,  926,  927,  928, 1761, 1761,  248, 1761, 1761,
     1761, 1761, 1761,  552, 1761, 1761, 1761,  250, 1761,  827,
     1761, 1497, 1761, 1761, 1511, 1761, 1511, 1511, 1530, 1530,

     1530, 1530, 1530, 1576, 1530, 1531, 1498, 1530, 1530, 1530,
     1761, 1761, 1530, 1761, 1530, 1761, 1761, 1761, 1761, 1761,
     1532, 1530, 1761, 1761, 1530, 1761, 1497, 1390, 1761, 1761,
     1761, 1761, 1761, 1577, 1578, 1579,  248, 1530, 1761, 1530,
     1531, 1530,  274, 1462, 1761, 1462,  250, 1761, 1463, 1463,
     1463, 1463,  925, 1761, 1761, 1761, 1499, 1500, 1501, 1761,
     1761, 1761, 1391, 1761, 1530, 1530, 1530, 1761, 1530, 1530,
     1533, 1534, 1535, 1761, 1536, 1761, 1761, 1536, 1761, 1761,
     1761, 1761, 1761, 1761, 1537, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1392, 1393, 1394,  199, 1761, 1761, 1761, 1761,

     1390, 1761,  926,  927,  928, 1761, 1761, 1741, 1761,  248,
     1741, 1761, 1761, 1761, 1761,  274, 1761, 1742, 1584,  250,
     1761, 1463, 1463, 1463, 1463,  925, 1761,  248,  199, 1761,
     1761, 1761, 1761,  552, 1761, 1391, 1761,  250, 1761, 1761,
     1761, 1761, 1761, 1761, 1761,  421,  422,  423, 1538, 1538,
     1538, 1538, 1538, 1585, 1538, 1539, 1761, 1538, 1538, 1538,
     1761, 1761, 1538, 1761, 1538, 1392, 1393, 1394, 1761, 1761,
     1540, 1538, 1761, 1761, 1538,  926,  927,  928,  421,  422,
      423, 1761, 1761, 1586, 1587, 1588, 1761, 1538, 1761, 1538,
     1539, 1538, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,

     1453, 1761, 1453, 1761, 1761, 1454, 1454, 1454, 1454,  925,
     1761, 1761, 1761, 1761, 1538, 1538, 1538, 1761, 1538, 1538,
     1541, 1542, 1543,  424,  425,  426,  427,  428,  429,  430,
     1761,  431, 1761,  432,  433,  434,  435,  436,  437,  438,
      439,  440, 1559, 1559, 1559, 1559, 1559, 1761, 1559, 1560,
     1761, 1559, 1559, 1559, 1398, 1761, 1559, 1761, 1559,  926,
      927,  928, 1761,  248, 1561, 1559, 1761, 1761, 1559,  274,
     1761, 1761, 1761,  250, 1616, 1616, 1616, 1616, 1761, 1761,
     1761, 1559, 1761, 1559, 1560, 1559,  931, 1761, 1398, 1399,
     1479, 1479, 1479, 1479,  925, 1761, 1761,  248, 1761, 1761,

     1761, 1761, 1761,  274,  931, 1761, 1761,  250, 1559, 1559,
     1559, 1761, 1559, 1559, 1562, 1563, 1564,  828, 1761, 1400,
     1401, 1402, 1761, 1399,  529, 1761,  530, 1761, 1375, 1375,
     1375, 1375,  830, 1761, 1761, 1761,  533, 1761, 1761, 1761,
     1376, 1761, 1761, 1761,  926,  927,  928, 1619, 1619, 1619,
     1619, 1592,  820, 1400, 1401, 1402, 1405, 1761, 1376,  931,
      248, 1761, 1761, 1761, 1761,  248,  552, 1761, 1761, 1761,
      250,  274, 1761, 1761, 1761,  250, 1761,  931, 1761, 1761,
     1761, 1761,  832,  833,  834,  828, 1593, 1761, 1761, 1761,
     1761, 1406,  529, 1761,  530, 1761, 1375, 1375, 1375, 1375,

      830, 1761, 1761, 1761,  533, 1761, 1761, 1761, 1376, 1761,
     1405, 1761, 1761, 1761, 1761, 1761, 1594, 1595, 1596,  248,
      820, 1407, 1408, 1409, 1413,  274, 1376, 1413, 1761,  250,
     1761, 1761, 1761,  248, 1761, 1761,  248, 1761, 1413,  552,
     1761, 1761,  552,  250, 1761, 1406,  250,  248, 1761, 1761,
      832,  833,  834,  552, 1761, 1761, 1761,  250, 1761, 1414,
     1761, 1761, 1414, 1761, 1761, 1621, 1761, 1619, 1619, 1619,
     1619, 1761, 1761, 1414,  296, 1407, 1408, 1409, 1761,  931,
      634, 1761, 1761, 1761,  298, 1761, 1761, 1761, 1761, 1415,
     1416, 1417, 1415, 1416, 1417, 1761, 1761,  931, 1761, 1761,

     1622, 1761, 1761, 1415, 1416, 1417,  932, 1761, 1761, 1761,
     1761, 1761, 1761,  611, 1761,  612, 1761, 1451, 1451, 1451,
     1451,  934, 1761, 1761, 1761,  615, 1761, 1761, 1761, 1452,
     1623, 1624, 1625, 1466, 1761, 1761, 1761, 1761, 1761, 1761,
     1466,  924,  296, 1761, 1761, 1630, 1761, 1452,  314,  296,
     1761, 1761,  298, 1761,  296,  314, 1761, 1761, 1761,  298,
      634, 1761, 1761, 1761,  298, 1761, 1761, 1761, 1467, 1761,
     1761,  936,  937,  938,  932, 1467, 1761, 1761, 1761, 1761,
     1631,  611, 1761,  612, 1761, 1451, 1451, 1451, 1451,  934,
     1761, 1761, 1761,  615, 1761, 1761, 1761, 1452, 1468, 1469,

     1470, 1761, 1761, 1761, 1761, 1468, 1469, 1470, 1474,  924,
     1632, 1633, 1634, 1474, 1761, 1452, 1638,  296, 1761, 1761,
     1761, 1761,  296,  314, 1761,  296, 1761,  298,  314, 1761,
     1761,  634,  298, 1761, 1761,  298, 1761, 1481, 1761,  936,
      937,  938, 1761, 1475, 1761, 1761,  296, 1761, 1475, 1481,
     1761, 1639,  314, 1761, 1761, 1761,  298, 1761,  296, 1761,
     1761, 1761, 1761, 1761,  314, 1761, 1761, 1761,  298, 1761,
     1761, 1761, 1482, 1476, 1477, 1478, 1489, 1761, 1476, 1477,
     1478, 1640, 1641, 1642, 1482,  296, 1761, 1761, 1761, 1761,
     1489,  634, 1761, 1761, 1761,  298, 1761, 1761, 1489,  296,

     1761, 1761, 1483, 1484, 1485,  634, 1761,  296, 1761,  298,
     1761, 1490, 1761,  634, 1483, 1484, 1485,  298, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1490, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1490, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1491, 1492, 1493, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1491, 1492, 1493, 1761, 1761,
     1761, 1761, 1761, 1491, 1492, 1493,  424,  425,  426,  427,
      428,  429,  430, 1761,  431, 1761,  432,  433,  434,  435,
      436,  437,  438,  439,  440, 1668, 1668, 1668, 1668, 1668,
     1761, 1668, 1669, 1761, 1668, 1668, 1668, 1761, 1761, 1668,

     1761, 1668, 1761, 1761, 1761, 1761, 1761, 1670, 1668, 1761,
     1761, 1668, 1761, 1761, 1575, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761,  248, 1668, 1761, 1668, 1669, 1668,  552,
     1761, 1761, 1761,  250, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1576,
     1761, 1668, 1668, 1668, 1761, 1668, 1668, 1671, 1672, 1673,
     1675, 1675, 1675, 1675, 1675, 1761, 1675, 1676, 1761, 1675,
     1675, 1675, 1761, 1761, 1675, 1761, 1675, 1761, 1761, 1577,
     1578, 1579, 1677, 1675, 1761, 1761, 1675, 1761, 1761, 1575,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,  248, 1675,

     1761, 1675, 1676, 1675,  552, 1761, 1761, 1761,  250, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1576, 1761, 1675, 1675, 1675, 1761,
     1675, 1675, 1678, 1679, 1680, 1682, 1682, 1682, 1682, 1682,
     1761, 1682, 1683, 1761, 1682, 1682, 1682, 1761, 1761, 1682,
     1761, 1682, 1761, 1761, 1577, 1578, 1579, 1684, 1682, 1761,
     1761, 1682, 1761, 1761, 1575, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761,  248, 1682, 1761, 1682, 1683, 1682,  552,
     1761, 1761, 1761,  250, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1576,

     1761, 1682, 1682, 1682, 1761, 1682, 1682, 1685, 1686, 1687,
     1689, 1689, 1689, 1689, 1689, 1761, 1689, 1690, 1761, 1689,
     1689, 1689, 1761, 1761, 1689, 1761, 1689, 1761, 1761, 1577,
     1578, 1579, 1691, 1689, 1761, 1761, 1689, 1761, 1761, 1584,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,  248, 1689,
     1761, 1689, 1690, 1689,  552, 1761, 1761, 1761,  250, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1585, 1761, 1689, 1689, 1689, 1761,
     1689, 1689, 1692, 1693, 1694, 1695, 1695, 1695, 1695, 1695,
     1761, 1695, 1696, 1761, 1695, 1695, 1695, 1761, 1761, 1695,

     1584, 1695, 1761, 1761, 1586, 1587, 1588, 1697, 1695,  248,
     1761, 1695, 1761, 1761, 1761,  552, 1761, 1761, 1761,  250,
     1761, 1761, 1761, 1761, 1695, 1761, 1695, 1696, 1695, 1761,
     1761, 1761, 1761, 1761, 1761, 1585, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1695, 1695, 1695, 1761, 1695, 1695, 1698, 1699, 1700,
      828, 1761, 1761, 1761, 1761, 1586, 1587, 1588, 1584,  530,
     1761, 1570, 1570, 1570, 1570,  830, 1761,  248, 1761,  533,
     1761, 1761, 1761,  552, 1761, 1592, 1761,  250, 1761, 1761,
     1761, 1761, 1761, 1761,  248,  820, 1761, 1761, 1761, 1761,

      552, 1761, 1761, 1585,  250, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1593, 1761, 1761, 1761, 1761,  832,  833,  834,  828, 1761,
     1761, 1761, 1761, 1586, 1587, 1588, 1761,  530, 1761, 1573,
     1573, 1573, 1573,  830, 1761, 1592, 1761,  533, 1761, 1761,
     1594, 1595, 1596, 1592,  248, 1761, 1761, 1761, 1761, 1761,
      552, 1761,  248,  820,  250, 1761, 1761, 1761,  552, 1761,
     1761, 1761,  250, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1593, 1621, 1761, 1761, 1761, 1761, 1761, 1761, 1593, 1761,
      296, 1761, 1761,  832,  833,  834,  634, 1761, 1761, 1761,

      298, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1621, 1761,
     1594, 1595, 1596, 1761, 1761, 1761, 1622,  296, 1594, 1595,
     1596,  932, 1761,  634, 1761, 1761, 1761,  298, 1761, 1761,
      612, 1761, 1616, 1616, 1616, 1616,  934, 1761, 1761, 1761,
      615, 1761, 1761, 1622, 1621, 1761, 1623, 1624, 1625, 1630,
     1761, 1761, 1761,  296, 1761, 1761,  924, 1761,  296,  634,
     1761, 1630, 1761,  298,  634, 1761, 1761, 1761,  298, 1761,
      296, 1761, 1761, 1623, 1624, 1625,  634, 1761, 1761, 1622,
      298, 1761, 1761, 1761, 1631, 1761,  936,  937,  938,  932,
     1761, 1761, 1761, 1761, 1761, 1761, 1631, 1761,  612, 1761,

     1619, 1619, 1619, 1619,  934, 1761, 1761, 1761,  615, 1623,
     1624, 1625, 1761, 1761, 1632, 1633, 1634, 1761, 1761, 1761,
     1761, 1761, 1630, 1761,  924, 1638, 1632, 1633, 1634, 1761,
     1638,  296, 1761, 1638,  296, 1761, 1761,  634, 1761,  296,
      634,  298,  296, 1761,  298,  634, 1761, 1761,  634,  298,
     1761, 1761,  298, 1761,  936,  937,  938, 1631, 1761, 1761,
     1639, 1761, 1761, 1761, 1761, 1639, 1761, 1761, 1639, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1632, 1633, 1634,
     1640, 1641, 1642, 1761, 1761, 1640, 1641, 1642, 1640, 1641,

     1642, 1735, 1735, 1735, 1735, 1735, 1761, 1735, 1736, 1761,
     1735, 1735, 1735, 1761, 1761, 1735, 1761, 1735, 1761, 1761,
     1761, 1761, 1761, 1737, 1735, 1761, 1761, 1735, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1735, 1761, 1735, 1736, 1735, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1735, 1735, 1735,
     1761, 1735, 1735, 1738, 1739, 1740, 1743, 1743, 1743, 1743,
     1743, 1761, 1743, 1744, 1761, 1743, 1743, 1743, 1761, 1761,
     1743, 1761, 1743, 1761, 1761, 1761, 1761, 1761, 1745, 1743,

     1761, 1761, 1743, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1743, 1761, 1743, 1744, 1743,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1743, 1743, 1743, 1761, 1743, 1743, 1746, 1747,
     1748,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,  107,

      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  170,  170, 1761, 1761, 1761,

      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170, 1761,  170,  170,  170,  170,  170,  229,
      229, 1761,  229, 1761, 1761, 1761,  229, 1761,  229,  229,
      231,  231, 1761, 1761,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  246, 1761,
      246, 1761, 1761,  246,  246, 1761,  246, 1761,  246,  246,
     1761,  246,  246,  246,  246,  246,  246,  272, 1761,  272,

     1761, 1761,  272,  272, 1761,  272, 1761,  272,  272, 1761,
      272,  272,  272,  272,  272,  272,  279, 1761,  279, 1761,
     1761,  279,  279, 1761, 1761, 1761,  279,  279, 1761, 1761,
      279, 1761,  279,  279,  279,  294, 1761,  294, 1761, 1761,
      294,  294, 1761,  294,  294,  294,  294, 1761,  294,  294,
      294,  294,  294,  294,  312, 1761,  312, 1761, 1761,  312,
      312, 1761,  312,  312,  312,  312, 1761,  312,  312,  312,
      312,  312,  312,  319, 1761,  319, 1761, 1761,  319,  319,
     1761, 1761,  319,  319,  319, 1761, 1761,  319, 1761,  319,
      319,  319,  347,  347,  347,  347,  347,  347,  347,  347,

      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  357, 1761, 1761, 1761,
      357, 1761,  357,  357,  365,  365,  365, 1761,  365,  365,
     1761, 1761,  365, 1761, 1761,  365,  365,  365,  365,  365,
      383, 1761, 1761, 1761, 1761,  383, 1761,  383,  383, 1761,
     1761,  383, 1761,  383,  383,  383, 1761,  383,  383,  383,
     1761,  383,  383,  383,  397,  397, 1761,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  400,  400,
     1761,  400,  400,  400,  400,  400,  400,  400,  400,  400,

      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  420, 1761,  420, 1761,
     1761,  420,  420, 1761, 1761,  420,  420,  420, 1761, 1761,
      420,  420,  420,  420,  420,  474,  474, 1761,  474, 1761,
     1761, 1761,  474, 1761,  474,  474,  231,  231, 1761, 1761,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      494, 1761,  494, 1761, 1761,  494,  494, 1761,  494, 1761,

      494,  494, 1761,  494,  494,  494,  494,  494,  494,  246,
     1761,  246, 1761, 1761,  246,  246, 1761,  246, 1761,  246,
      246, 1761,  246,  246,  246,  246,  246,  246,  502, 1761,
      502, 1761, 1761,  502,  502, 1761,  502, 1761,  502,  502,
     1761,  502,  502,  502,  502,  502,  502,  508, 1761,  508,
     1761, 1761,  508,  508, 1761, 1761, 1761,  508,  508, 1761,
     1761,  508, 1761,  508,  508,  508,  518, 1761,  518, 1761,
     1761,  518,  518, 1761,  518, 1761,  518,  518, 1761,  518,
      518,  518,  518,  518,  518,  527, 1761,  527, 1761, 1761,
      527,  527,  527,  527, 1761,  527,  527, 1761,  527,  527,

     1761,  527,  527,  527,  550, 1761,  550, 1761, 1761,  550,
      550, 1761,  550, 1761,  550,  550, 1761,  550,  550,  550,
      550,  550,  550,  272, 1761,  272, 1761, 1761,  272,  272,
     1761,  272, 1761,  272,  272, 1761,  272,  272,  272,  272,
      272,  272,  557, 1761,  557, 1761, 1761,  557,  557, 1761,
     1761, 1761,  557, 1761, 1761, 1761,  557,  557,  557,  557,
      557,  563, 1761,  563, 1761, 1761,  563,  563, 1761,  563,
     1761,  563,  563, 1761,  563,  563,  563,  563,  563,  563,
      578, 1761,  578, 1761, 1761,  578,  578, 1761,  578,  578,
      578,  578, 1761,  578,  578,  578,  578,  578,  578,  294,

     1761,  294, 1761, 1761,  294,  294, 1761,  294,  294,  294,
      294, 1761,  294,  294,  294,  294,  294,  294,  586, 1761,
      586, 1761, 1761,  586,  586, 1761,  586,  586,  586,  586,
     1761,  586,  586,  586,  586,  586,  586,  592, 1761,  592,
     1761, 1761,  592,  592, 1761, 1761,  592,  592,  592, 1761,
     1761,  592, 1761,  592,  592,  592,  600, 1761,  600, 1761,
     1761,  600,  600, 1761,  600,  600,  600,  600, 1761,  600,
      600,  600,  600,  600,  600,  609, 1761,  609, 1761, 1761,
      609,  609,  609,  609,  609,  609,  609, 1761,  609,  609,
     1761,  609,  609,  609,  632, 1761,  632, 1761, 1761,  632,

      632, 1761,  632,  632,  632,  632, 1761,  632,  632,  632,
      632,  632,  632,  312, 1761,  312, 1761, 1761,  312,  312,
     1761,  312,  312,  312,  312, 1761,  312,  312,  312,  312,
      312,  312,  639, 1761,  639, 1761, 1761,  639,  639, 1761,
     1761,  639,  639, 1761, 1761, 1761,  639,  639,  639,  639,
      639,  645, 1761,  645, 1761, 1761,  645,  645, 1761,  645,
      645,  645,  645, 1761,  645,  645,  645,  645,  645,  645,
      357, 1761, 1761, 1761,  357, 1761,  357,  357,  365, 1761,
     1761, 1761,  365, 1761,  365,  365,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477, 1761,

      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      229,  229, 1761,  229, 1761, 1761, 1761,  229, 1761,  229,
      229,  383, 1761, 1761, 1761, 1761,  383, 1761,  383,  383,
     1761, 1761,  383, 1761,  383,  383,  383, 1761,  383,  383,
      383, 1761,  383,  383,  383,  400,  400, 1761,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  170,
      170, 1761, 1761, 1761,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170, 1761,  170,  170,
      170,  170,  170,  402,  402,  402,  402,  402,  402,  402,

      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  474, 1761, 1761,
     1761,  474, 1761,  474,  474,  698, 1761, 1761,  698, 1761,
     1761, 1761,  698, 1761,  698,  698,  420, 1761,  420, 1761,
     1761,  420,  420, 1761, 1761,  420,  420,  420, 1761, 1761,
      420,  420,  420,  420,  420,  776, 1761,  776, 1761, 1761,
     1761,  776, 1761,  776,  776,  527, 1761,  527, 1761, 1761,
      527,  527, 1761, 1761, 1761,  527,  527, 1761,  527,  527,
     1761,  527,  527,  527,  494, 1761,  494, 1761, 1761,  494,
      494, 1761,  494, 1761,  494,  494, 1761,  494,  494,  494,

      494,  494,  494,  782, 1761,  782, 1761, 1761,  782,  782,
     1761,  782, 1761,  782,  782, 1761,  782,  782,  782,  782,
      782,  782,  790, 1761,  790, 1761, 1761,  790,  790, 1761,
      790, 1761,  790,  790, 1761,  790,  790,  790,  790,  790,
      790,  502, 1761,  502, 1761, 1761,  502,  502, 1761,  502,
     1761,  502,  502, 1761,  502,  502,  502,  502,  502,  502,
      798, 1761,  798, 1761, 1761,  798,  798, 1761, 1761, 1761,
      798,  798, 1761, 1761,  798,  798,  798,  798,  798,  804,
     1761,  804, 1761, 1761,  804,  804, 1761, 1761, 1761,  804,
     1761, 1761, 1761,  804,  804,  804,  804,  804,  811, 1761,

      811, 1761, 1761,  811,  811, 1761,  811, 1761,  811,  811,
     1761,  811,  811,  811,  811,  811,  811,  518, 1761,  518,
     1761, 1761,  518,  518, 1761,  518, 1761,  518,  518, 1761,
      518,  518,  518,  518,  518,  518,  820, 1761,  820, 1761,
     1761,  820,  820, 1761, 1761, 1761,  820,  820, 1761, 1761,
      820,  820,  820,  820,  820,  827, 1761,  827, 1761, 1761,
      827,  827,  827,  827, 1761,  827,  827, 1761,  827,  827,
      827,  827,  827,  827,  835, 1761,  835, 1761, 1761,  835,
      835, 1761, 1761, 1761,  835, 1761, 1761, 1761,  835,  835,
      835,  835,  835,  839, 1761,  839, 1761, 1761,  839,  839,

     1761, 1761, 1761,  839,  839, 1761, 1761,  839, 1761,  839,
      839,  839,  853, 1761,  853, 1761, 1761,  853,  853, 1761,
      853, 1761,  853,  853, 1761,  853,  853,  853,  853,  853,
      853,  550, 1761,  550, 1761, 1761,  550,  550, 1761,  550,
     1761,  550,  550, 1761,  550,  550,  550,  550,  550,  550,
      862, 1761,  862, 1761, 1761,  862,  862, 1761, 1761, 1761,
      862, 1761, 1761, 1761,  862,  862,  862,  862,  862,  557,
     1761,  557, 1761, 1761,  557,  557, 1761, 1761, 1761,  557,
     1761, 1761, 1761,  557,  557,  557,  557,  557,  871, 1761,
      871, 1761, 1761,  871,  871, 1761,  871, 1761,  871,  871,

     1761,  871,  871,  871,  871,  871,  871,  563, 1761,  563,
     1761, 1761,  563,  563, 1761,  563, 1761,  563,  563, 1761,
      563,  563,  563,  563,  563,  563,  609, 1761,  609, 1761,
     1761,  609,  609, 1761, 1761,  609,  609,  609, 1761,  609,
      609, 1761,  609,  609,  609,  578, 1761,  578, 1761, 1761,
      578,  578, 1761,  578,  578,  578,  578, 1761,  578,  578,
      578,  578,  578,  578,  886, 1761,  886, 1761, 1761,  886,
      886, 1761,  886,  886,  886,  886, 1761,  886,  886,  886,
      886,  886,  886,  894, 1761,  894, 1761, 1761,  894,  894,
     1761,  894,  894,  894,  894, 1761,  894,  894,  894,  894,

      894,  894,  586, 1761,  586, 1761, 1761,  586,  586, 1761,
      586,  586,  586,  586, 1761,  586,  586,  586,  586,  586,
      586,  902, 1761,  902, 1761, 1761,  902,  902, 1761, 1761,
      902,  902,  902, 1761, 1761,  902,  902,  902,  902,  902,
      908, 1761,  908, 1761, 1761,  908,  908, 1761, 1761,  908,
      908, 1761, 1761, 1761,  908,  908,  908,  908,  908,  915,
     1761,  915, 1761, 1761,  915,  915, 1761,  915,  915,  915,
      915, 1761,  915,  915,  915,  915,  915,  915,  600, 1761,
      600, 1761, 1761,  600,  600, 1761,  600,  600,  600,  600,
     1761,  600,  600,  600,  600,  600,  600,  924, 1761,  924,

     1761, 1761,  924,  924, 1761, 1761,  924,  924,  924, 1761,
     1761,  924,  924,  924,  924,  924,  931, 1761,  931, 1761,
     1761,  931,  931,  931,  931,  931,  931,  931, 1761,  931,
      931,  931,  931,  931,  931,  939, 1761,  939, 1761, 1761,
      939,  939, 1761, 1761,  939,  939, 1761, 1761, 1761,  939,
      939,  939,  939,  939,  943, 1761,  943, 1761, 1761,  943,
      943, 1761, 1761,  943,  943,  943, 1761, 1761,  943, 1761,
      943,  943,  943,  957, 1761,  957, 1761, 1761,  957,  957,
     1761,  957,  957,  957,  957, 1761,  957,  957,  957,  957,
      957,  957,  632, 1761,  632, 1761, 1761,  632,  632, 1761,

      632,  632,  632,  632, 1761,  632,  632,  632,  632,  632,
      632,  966, 1761,  966, 1761, 1761,  966,  966, 1761, 1761,
      966,  966, 1761, 1761, 1761,  966,  966,  966,  966,  966,
      639, 1761,  639, 1761, 1761,  639,  639, 1761, 1761,  639,
      639, 1761, 1761, 1761,  639,  639,  639,  639,  639,  975,
     1761,  975, 1761, 1761,  975,  975, 1761,  975,  975,  975,
      975, 1761,  975,  975,  975,  975,  975,  975,  645, 1761,
      645, 1761, 1761,  645,  645, 1761,  645,  645,  645,  645,
     1761,  645,  645,  645,  645,  645,  645,  698, 1761, 1761,
      698, 1761, 1761, 1761,  698, 1761,  698,  698,  477,  477,

      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477, 1761,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  383, 1761, 1761, 1761, 1761,  383, 1761,  383,
      383, 1761, 1761,  383, 1761,  383,  383,  383, 1761,  383,
      383,  383, 1761,  383,  383,  383,  474,  474, 1761,  474,
     1761, 1761, 1761,  474, 1761,  474,  474,  745,  745,  745,
      745,  745, 1761,  745,  745,  745,  745, 1761, 1761,  745,
      745, 1761, 1761,  745,  745,  745, 1761,  745, 1761, 1761,
      745,  420, 1761, 1761,  420,  420, 1761,  420, 1761, 1761,
      420,  420, 1761, 1761,  420,  420,  420, 1761, 1761,  420,

      420,  420,  420,  420,  776, 1761,  776, 1761, 1761, 1761,
      776, 1761,  776,  776,  827, 1761,  827, 1761, 1761,  827,
      827,  827,  827, 1761,  827,  827, 1761,  827,  827,  827,
      827,  827,  827,  820, 1761,  820, 1761, 1761,  820,  820,
     1761, 1761, 1761,  820,  820, 1761, 1761,  820,  820,  820,
      820,  820,  527, 1761,  527, 1761, 1761,  527,  527, 1761,
      527, 1761,  527,  527, 1761,  527,  527, 1761,  527,  527,
      527, 1084, 1761, 1084, 1761, 1761, 1084, 1084, 1761, 1084,
     1761, 1084, 1084, 1761, 1084, 1084, 1084, 1084, 1084, 1084,
      782, 1761,  782, 1761, 1761,  782,  782, 1761,  782, 1761,

      782,  782, 1761,  782,  782,  782,  782,  782,  782,  790,
     1761,  790, 1761, 1761,  790,  790, 1761,  790, 1761,  790,
      790, 1761,  790,  790,  790,  790,  790,  790,  798, 1761,
      798, 1761, 1761,  798,  798, 1761, 1761, 1761,  798,  798,
     1761, 1761,  798,  798,  798,  798,  798, 1096, 1761, 1096,
     1761, 1761, 1096, 1096, 1761, 1761, 1761, 1096, 1761, 1761,
     1761, 1096, 1096, 1096, 1096, 1096,  804, 1761,  804, 1761,
     1761,  804,  804, 1761, 1761, 1761,  804, 1761, 1761, 1761,
      804,  804,  804,  804,  804,  811, 1761,  811, 1761, 1761,
      811,  811, 1761,  811, 1761,  811,  811, 1761,  811,  811,

      811,  811,  811,  811, 1108, 1761, 1108, 1761, 1761, 1108,
     1108, 1761, 1761, 1761, 1108, 1761, 1761, 1761, 1108, 1108,
     1108, 1108, 1108, 1114, 1761, 1114, 1761, 1761, 1114, 1114,
     1761, 1761, 1761, 1114, 1761, 1761, 1761, 1114, 1114, 1114,
     1114, 1114, 1120, 1761, 1120, 1761, 1761, 1120, 1120, 1761,
     1761, 1761, 1120, 1761, 1761, 1761, 1120, 1120, 1120, 1120,
     1120,  835, 1761,  835, 1761, 1761,  835,  835, 1761, 1761,
     1761,  835, 1761, 1761, 1761,  835,  835,  835,  835,  835,
     1128, 1761, 1128, 1761, 1761, 1128, 1128, 1761, 1761, 1761,
     1128, 1128, 1761, 1761, 1128, 1128, 1128, 1128, 1128, 1142,

     1761, 1142, 1761, 1761, 1142, 1142, 1761, 1142, 1761, 1142,
     1142, 1761, 1142, 1142, 1142, 1142, 1142, 1142,  494, 1761,
      494, 1761, 1761,  494,  494, 1761,  494, 1761,  494,  494,
     1761,  494,  494,  494,  494,  494,  494, 1151, 1761, 1151,
     1761, 1761, 1151, 1151, 1761, 1151, 1761, 1151, 1151, 1761,
     1151, 1151, 1151, 1151, 1151, 1151, 1158, 1761, 1158, 1761,
     1761, 1158, 1158, 1761, 1158, 1761, 1158, 1158, 1761, 1158,
     1158, 1158, 1158, 1158, 1158, 1164, 1761, 1164, 1761, 1761,
     1164, 1164, 1761, 1761, 1761, 1164, 1164, 1761, 1761, 1164,
     1761, 1164, 1164, 1164,  862, 1761,  862, 1761, 1761,  862,

      862, 1761, 1761, 1761,  862, 1761, 1761, 1761,  862,  862,
      862,  862,  862,  871, 1761,  871, 1761, 1761,  871,  871,
     1761,  871, 1761,  871,  871, 1761,  871,  871,  871,  871,
      871,  871,  931, 1761,  931, 1761, 1761,  931,  931,  931,
      931,  931,  931,  931, 1761,  931,  931,  931,  931,  931,
      931,  924, 1761,  924, 1761, 1761,  924,  924, 1761, 1761,
      924,  924,  924, 1761, 1761,  924,  924,  924,  924,  924,
      609, 1761,  609, 1761, 1761,  609,  609, 1761,  609,  609,
      609,  609, 1761,  609,  609, 1761,  609,  609,  609, 1182,
     1761, 1182, 1761, 1761, 1182, 1182, 1761, 1182, 1182, 1182,

     1182, 1761, 1182, 1182, 1182, 1182, 1182, 1182,  886, 1761,
      886, 1761, 1761,  886,  886, 1761,  886,  886,  886,  886,
     1761,  886,  886,  886,  886,  886,  886,  894, 1761,  894,
     1761, 1761,  894,  894, 1761,  894,  894,  894,  894, 1761,
      894,  894,  894,  894,  894,  894,  902, 1761,  902, 1761,
     1761,  902,  902, 1761, 1761,  902,  902,  902, 1761, 1761,
      902,  902,  902,  902,  902, 1194, 1761, 1194, 1761, 1761,
     1194, 1194, 1761, 1761, 1194, 1194, 1761, 1761, 1761, 1194,
     1194, 1194, 1194, 1194,  908, 1761,  908, 1761, 1761,  908,
      908, 1761, 1761,  908,  908, 1761, 1761, 1761,  908,  908,

      908,  908,  908,  915, 1761,  915, 1761, 1761,  915,  915,
     1761,  915,  915,  915,  915, 1761,  915,  915,  915,  915,
      915,  915, 1206, 1761, 1206, 1761, 1761, 1206, 1206, 1761,
     1761, 1206, 1206, 1761, 1761, 1761, 1206, 1206, 1206, 1206,
     1206, 1212, 1761, 1212, 1761, 1761, 1212, 1212, 1761, 1761,
     1212, 1212, 1761, 1761, 1761, 1212, 1212, 1212, 1212, 1212,
     1218, 1761, 1218, 1761, 1761, 1218, 1218, 1761, 1761, 1218,
     1218, 1761, 1761, 1761, 1218, 1218, 1218, 1218, 1218,  939,
     1761,  939, 1761, 1761,  939,  939, 1761, 1761,  939,  939,
     1761, 1761, 1761,  939,  939,  939,  939,  939, 1226, 1761,

     1226, 1761, 1761, 1226, 1226, 1761, 1761, 1226, 1226, 1226,
     1761, 1761, 1226, 1226, 1226, 1226, 1226, 1240, 1761, 1240,
     1761, 1761, 1240, 1240, 1761, 1240, 1240, 1240, 1240, 1761,
     1240, 1240, 1240, 1240, 1240, 1240,  578, 1761,  578, 1761,
     1761,  578,  578, 1761,  578,  578,  578,  578, 1761,  578,
      578,  578,  578,  578,  578, 1249, 1761, 1249, 1761, 1761,
     1249, 1249, 1761, 1249, 1249, 1249, 1249, 1761, 1249, 1249,
     1249, 1249, 1249, 1249, 1256, 1761, 1256, 1761, 1761, 1256,
     1256, 1761, 1256, 1256, 1256, 1256, 1761, 1256, 1256, 1256,
     1256, 1256, 1256, 1262, 1761, 1262, 1761, 1761, 1262, 1262,

     1761, 1761, 1262, 1262, 1262, 1761, 1761, 1262, 1761, 1262,
     1262, 1262,  966, 1761,  966, 1761, 1761,  966,  966, 1761,
     1761,  966,  966, 1761, 1761, 1761,  966,  966,  966,  966,
      966,  975, 1761,  975, 1761, 1761,  975,  975, 1761,  975,
      975,  975,  975, 1761,  975,  975,  975,  975,  975,  975,
      698, 1761, 1761,  698, 1761, 1761, 1761,  698, 1761,  698,
      698,  383, 1761, 1761, 1761, 1761,  383, 1761,  383,  383,
     1761, 1761,  383, 1761,  383,  383,  383, 1761,  383,  383,
      383, 1761,  383,  383,  383,  474, 1761, 1761, 1761,  474,
     1761,  474,  474, 1051, 1051, 1051, 1051, 1051, 1761, 1051,

     1051, 1051, 1051, 1761, 1761, 1051, 1051, 1761, 1761, 1051,
     1051, 1051, 1761, 1051, 1761, 1051, 1051, 1061, 1061, 1061,
     1061, 1061, 1761, 1061, 1061, 1061, 1061, 1761, 1761, 1061,
     1061, 1761, 1761, 1061, 1061, 1061, 1761, 1061, 1061, 1761,
     1061,  420, 1761,  420, 1761, 1761,  420,  420, 1761, 1761,
      420,  420,  420, 1761, 1761,  420,  420,  420,  420,  420,
      527, 1761,  527, 1761, 1761,  527,  527, 1761, 1761, 1761,
      527,  527, 1761,  527,  527, 1761,  527,  527,  527,  827,
     1761,  827, 1761, 1761,  827,  827, 1761,  827, 1761,  827,
      827, 1761,  827,  827,  827,  827,  827,  827, 1084, 1761,

     1084, 1761, 1761, 1084, 1084, 1761, 1084, 1761, 1084, 1084,
     1761, 1084, 1084, 1084, 1084, 1084, 1084, 1096, 1761, 1096,
     1761, 1761, 1096, 1096, 1761, 1761, 1761, 1096, 1761, 1761,
     1761, 1096, 1096, 1096, 1096, 1096, 1108, 1761, 1108, 1761,
     1761, 1108, 1108, 1761, 1761, 1761, 1108, 1761, 1761, 1761,
     1108, 1108, 1108, 1108, 1108, 1114, 1761, 1114, 1761, 1761,
     1114, 1114, 1761, 1761, 1761, 1114, 1761, 1761, 1761, 1114,
     1114, 1114, 1114, 1114,  820, 1761,  820, 1761, 1761,  820,
      820, 1761, 1761, 1761,  820,  820, 1761, 1761,  820,  820,
      820,  820,  820, 1120, 1761, 1120, 1761, 1761, 1120, 1120,

     1761, 1761, 1761, 1120, 1761, 1761, 1761, 1120, 1120, 1120,
     1120, 1120, 1128, 1761, 1128, 1761, 1761, 1128, 1128, 1761,
     1761, 1761, 1128, 1128, 1761, 1761, 1128, 1128, 1128, 1128,
     1128, 1142, 1761, 1142, 1761, 1761, 1142, 1142, 1761, 1142,
     1761, 1142, 1142, 1761, 1142, 1142, 1142, 1142, 1142, 1142,
     1389, 1761, 1389, 1761, 1761, 1389, 1389, 1761, 1389, 1761,
     1389, 1389, 1761, 1389, 1389, 1389, 1389, 1389, 1389, 1397,
     1761, 1397, 1761, 1761, 1397, 1397, 1761, 1397, 1761, 1397,
     1397, 1761, 1397, 1397, 1397, 1397, 1397, 1397, 1151, 1761,
     1151, 1761, 1761, 1151, 1151, 1761, 1151, 1761, 1151, 1151,

     1761, 1151, 1151, 1151, 1151, 1151, 1151, 1404, 1761, 1404,
     1761, 1761, 1404, 1404, 1761, 1404, 1761, 1404, 1404, 1761,
     1404, 1404, 1404, 1404, 1404, 1404, 1412, 1761, 1412, 1761,
     1761, 1412, 1412, 1761, 1412, 1761, 1412, 1412, 1761, 1412,
     1412, 1412, 1412, 1412, 1412, 1158, 1761, 1158, 1761, 1761,
     1158, 1158, 1761, 1158, 1761, 1158, 1158, 1761, 1158, 1158,
     1158, 1158, 1158, 1158, 1420, 1761, 1420, 1761, 1761, 1420,
     1420, 1761, 1761, 1761, 1420, 1420, 1761, 1761, 1420, 1420,
     1420, 1420, 1420, 1426, 1761, 1426, 1761, 1761, 1426, 1426,
     1761, 1761, 1761, 1426, 1761, 1761, 1761, 1426, 1426, 1426,

     1426, 1426,  609, 1761,  609, 1761, 1761,  609,  609, 1761,
     1761,  609,  609,  609, 1761,  609,  609, 1761,  609,  609,
      609,  931, 1761,  931, 1761, 1761,  931,  931, 1761,  931,
      931,  931,  931, 1761,  931,  931,  931,  931,  931,  931,
     1182, 1761, 1182, 1761, 1761, 1182, 1182, 1761, 1182, 1182,
     1182, 1182, 1761, 1182, 1182, 1182, 1182, 1182, 1182, 1194,
     1761, 1194, 1761, 1761, 1194, 1194, 1761, 1761, 1194, 1194,
     1761, 1761, 1761, 1194, 1194, 1194, 1194, 1194, 1206, 1761,
     1206, 1761, 1761, 1206, 1206, 1761, 1761, 1206, 1206, 1761,
     1761, 1761, 1206, 1206, 1206, 1206, 1206, 1212, 1761, 1212,

     1761, 1761, 1212, 1212, 1761, 1761, 1212, 1212, 1761, 1761,
     1761, 1212, 1212, 1212, 1212, 1212,  924, 1761,  924, 1761,
     1761,  924,  924, 1761, 1761,  924,  924,  924, 1761, 1761,
      924,  924,  924,  924,  924, 1218, 1761, 1218, 1761, 1761,
     1218, 1218, 1761, 1761, 1218, 1218, 1761, 1761, 1761, 1218,
     1218, 1218, 1218, 1218, 1226, 1761, 1226, 1761, 1761, 1226,
     1226, 1761, 1761, 1226, 1226, 1226, 1761, 1761, 1226, 1226,
     1226, 1226, 1226, 1240, 1761, 1240, 1761, 1761, 1240, 1240,
     1761, 1240, 1240, 1240, 1240, 1761, 1240, 1240, 1240, 1240,
     1240, 1240, 1465, 1761, 1465, 1761, 1761, 1465, 1465, 1761,

     1465, 1465, 1465, 1465, 1761, 1465, 1465, 1465, 1465, 1465,
     1465, 1473, 1761, 1473, 1761, 1761, 1473, 1473, 1761, 1473,
     1473, 1473, 1473, 1761, 1473, 1473, 1473, 1473, 1473, 1473,
     1249, 1761, 1249, 1761, 1761, 1249, 1249, 1761, 1249, 1249,
     1249, 1249, 1761, 1249, 1249, 1249, 1249, 1249, 1249, 1480,
     1761, 1480, 1761, 1761, 1480, 1480, 1761, 1480, 1480, 1480,
     1480, 1761, 1480, 1480, 1480, 1480, 1480, 1480, 1488, 1761,
     1488, 1761, 1761, 1488, 1488, 1761, 1488, 1488, 1488, 1488,
     1761, 1488, 1488, 1488, 1488, 1488, 1488, 1256, 1761, 1256,
     1761, 1761, 1256, 1256, 1761, 1256, 1256, 1256, 1256, 1761,

     1256, 1256, 1256, 1256, 1256, 1256, 1496, 1761, 1496, 1761,
     1761, 1496, 1496, 1761, 1761, 1496, 1496, 1496, 1761, 1761,
     1496, 1496, 1496, 1496, 1496, 1502, 1761, 1502, 1761, 1761,
     1502, 1502, 1761, 1761, 1502, 1502, 1761, 1761, 1761, 1502,
     1502, 1502, 1502, 1502,  383,  383,  383, 1761,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  474,  474,
     1761,  474, 1761, 1761, 1761,  474, 1761,  474,  474, 1310,
     1310, 1310, 1310, 1310, 1761, 1310, 1310, 1310, 1310, 1761,
     1761, 1310, 1310, 1761, 1761, 1310, 1310, 1310, 1761, 1310,

     1310, 1761, 1310, 1318, 1318, 1318, 1318, 1318, 1761, 1318,
     1318, 1318, 1318, 1761, 1761, 1318, 1318, 1761, 1761, 1318,
     1318, 1318, 1761, 1318, 1761, 1761, 1318, 1330, 1330, 1330,
     1330, 1330, 1761, 1330, 1330, 1330, 1330, 1761, 1761, 1330,
     1330, 1761, 1761, 1330, 1330, 1330, 1761, 1330, 1761, 1761,
     1330, 1341, 1341, 1341, 1341, 1341, 1761, 1341, 1341, 1341,
     1341, 1761, 1761, 1341, 1341, 1761, 1761, 1341, 1341, 1341,
     1761, 1341, 1761, 1761, 1341, 1349, 1349, 1349, 1349, 1349,
     1761, 1349, 1349, 1349, 1349, 1761, 1761, 1349, 1349, 1761,
     1761, 1349, 1349, 1349, 1761, 1349, 1761, 1761, 1349,  420,

      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  827, 1761,  827, 1761, 1761,  827,  827,
      827,  827, 1761,  827,  827, 1761,  827,  827,  827,  827,
      827,  827,  820, 1761,  820, 1761, 1761,  820,  820, 1761,
     1761, 1761,  820,  820, 1761, 1761,  820,  820,  820,  820,
      820, 1574, 1761, 1574, 1761, 1761, 1574, 1574, 1761, 1574,
     1761, 1574, 1574, 1761, 1574, 1574, 1574, 1574, 1574, 1574,
     1389, 1761, 1389, 1761, 1761, 1389, 1389, 1761, 1389, 1761,
     1389, 1389, 1761, 1389, 1389, 1389, 1389, 1389, 1389, 1583,

     1761, 1583, 1761, 1761, 1583, 1583, 1761, 1583, 1761, 1583,
     1583, 1761, 1583, 1583, 1583, 1583, 1583, 1583, 1397, 1761,
     1397, 1761, 1761, 1397, 1397, 1761, 1397, 1761, 1397, 1397,
     1761, 1397, 1397, 1397, 1397, 1397, 1397, 1591, 1761, 1591,
     1761, 1761, 1591, 1591, 1761, 1591, 1761, 1591, 1591, 1761,
     1591, 1591, 1591, 1591, 1591, 1591, 1404, 1761, 1404, 1761,
     1761, 1404, 1404, 1761, 1404, 1761, 1404, 1404, 1761, 1404,
     1404, 1404, 1404, 1404, 1404, 1412, 1761, 1412, 1761, 1761,
     1412, 1412, 1761, 1412, 1761, 1412, 1412, 1761, 1412, 1412,
     1412, 1412, 1412, 1412, 1420, 1761, 1420, 1761, 1761, 1420,

     1420, 1761, 1761, 1761, 1420, 1420, 1761, 1761, 1420, 1420,
     1420, 1420, 1420, 1603, 1761, 1603, 1761, 1761, 1603, 1603,
     1761, 1761, 1761, 1603, 1761, 1761, 1761, 1603, 1603, 1603,
     1603, 1603, 1426, 1761, 1426, 1761, 1761, 1426, 1426, 1761,
     1761, 1761, 1426, 1761, 1761, 1761, 1426, 1426, 1426, 1426,
     1426,  931, 1761,  931, 1761, 1761,  931,  931,  931,  931,
      931,  931,  931, 1761,  931,  931,  931,  931,  931,  931,
      924, 1761,  924, 1761, 1761,  924,  924, 1761, 1761,  924,
      924,  924, 1761, 1761,  924,  924,  924,  924,  924, 1620,
     1761, 1620, 1761, 1761, 1620, 1620, 1761, 1620, 1620, 1620,

     1620, 1761, 1620, 1620, 1620, 1620, 1620, 1620, 1465, 1761,
     1465, 1761, 1761, 1465, 1465, 1761, 1465, 1465, 1465, 1465,
     1761, 1465, 1465, 1465, 1465, 1465, 1465, 1629, 1761, 1629,
     1761, 1761, 1629, 1629, 1761, 1629, 1629, 1629, 1629, 1761,
     1629, 1629, 1629, 1629, 1629, 1629, 1473, 1761, 1473, 1761,
     1761, 1473, 1473, 1761, 1473, 1473, 1473, 1473, 1761, 1473,
     1473, 1473, 1473, 1473, 1473, 1637, 1761, 1637, 1761, 1761,
     1637, 1637, 1761, 1637, 1637, 1637, 1637, 1761, 1637, 1637,
     1637, 1637, 1637, 1637, 1480, 1761, 1480, 1761, 1761, 1480,
     1480, 1761, 1480, 1480, 1480, 1480, 1761, 1480, 1480, 1480,

     1480, 1480, 1480, 1488, 1761, 1488, 1761, 1761, 1488, 1488,
     1761, 1488, 1488, 1488, 1488, 1761, 1488, 1488, 1488, 1488,
     1488, 1488, 1496, 1761, 1496, 1761, 1761, 1496, 1496, 1761,
     1761, 1496, 1496, 1496, 1761, 1761, 1496, 1496, 1496, 1496,
     1496, 1649, 1761, 1649, 1761, 1761, 1649, 1649, 1761, 1761,
     1649, 1649, 1761, 1761, 1761, 1649, 1649, 1649, 1649, 1649,
     1502, 1761, 1502, 1761, 1761, 1502, 1502, 1761, 1761, 1502,
     1502, 1761, 1761, 1761, 1502, 1502, 1502, 1502, 1502, 1530,
     1530, 1530, 1530, 1530, 1761, 1530, 1530, 1530, 1530, 1761,
     1761, 1530, 1530, 1761, 1761, 1530, 1530, 1530, 1761, 1530,

     1761, 1761, 1530, 1538, 1538, 1538, 1538, 1538, 1761, 1538,
     1538, 1538, 1538, 1761, 1761, 1538, 1538, 1761, 1761, 1538,
     1538, 1538, 1761, 1538, 1761, 1761, 1538, 1559, 1559, 1559,
     1559, 1559, 1761, 1559, 1559, 1559, 1559, 1761, 1761, 1559,
     1559, 1761, 1761, 1559, 1559, 1559, 1761, 1559, 1761, 1761,
     1559,  420, 1761,  420, 1761, 1761,  420,  420, 1761, 1761,
      420,  420,  420, 1761, 1761,  420,  420,  420,  420,  420,
      474, 1761,  474, 1761, 1761, 1761,  474, 1761,  474,  474,
      827, 1761,  827, 1761, 1761,  827,  827, 1761,  827, 1761,
      827,  827, 1761,  827,  827,  827,  827,  827,  827, 1574,

     1761, 1574, 1761, 1761, 1574, 1574, 1761, 1574, 1761, 1574,
     1574, 1761, 1574, 1574, 1574, 1574, 1574, 1574, 1583, 1761,
     1583, 1761, 1761, 1583, 1583, 1761, 1583, 1761, 1583, 1583,
     1761, 1583, 1583, 1583, 1583, 1583, 1583, 1591, 1761, 1591,
     1761, 1761, 1591, 1591, 1761, 1591, 1761, 1591, 1591, 1761,
     1591, 1591, 1591, 1591, 1591, 1591, 1603, 1761, 1603, 1761,
     1761, 1603, 1603, 1761, 1761, 1761, 1603, 1761, 1761, 1761,
     1603, 1603, 1603, 1603, 1603,  931, 1761,  931, 1761, 1761,
      931,  931, 1761,  931,  931,  931,  931, 1761,  931,  931,
      931,  931,  931,  931, 1620, 1761, 1620, 1761, 1761, 1620,

     1620, 1761, 1620, 1620, 1620, 1620, 1761, 1620, 1620, 1620,
     1620, 1620, 1620, 1629, 1761, 1629, 1761, 1761, 1629, 1629,
     1761, 1629, 1629, 1629, 1629, 1761, 1629, 1629, 1629, 1629,
     1629, 1629, 1637, 1761, 1637, 1761, 1761, 1637, 1637, 1761,
     1637, 1637, 1637, 1637, 1761, 1637, 1637, 1637, 1637, 1637,
     1637, 1668, 1668, 1668, 1668, 1668, 1761, 1668, 1668, 1668,
     1668, 1761, 1761, 1668, 1668, 1761, 1761, 1668, 1668, 1668,
     1761, 1668, 1761, 1761, 1668, 1675, 1675, 1675, 1675, 1675,
     1761, 1675, 1675, 1675, 1675, 1761, 1761, 1675, 1675, 1761,
     1761, 1675, 1675, 1675, 1761, 1675, 1761, 1761, 1675, 1682,

     1682, 1682, 1682, 1682, 1761, 1682, 1682, 1682, 1682, 1761,
     1761, 1682, 1682, 1761, 1761, 1682, 1682, 1682, 1761, 1682,
     1761, 1761, 1682, 1689, 1689, 1689, 1689, 1689, 1761, 1689,
     1689, 1689, 1689, 1761, 1761, 1689, 1689, 1761, 1761, 1689,
     1689, 1689, 1761, 1689, 1761, 1761, 1689, 1695, 1695, 1695,
     1695, 1695, 1761, 1695, 1695, 1695, 1695, 1761, 1761, 1695,
     1695, 1761, 1761, 1695, 1695, 1695, 1761, 1695, 1761, 1761,
     1695, 1735, 1735, 1735, 1735, 1735, 1761, 1735, 1735, 1735,
     1735, 1761, 1761, 1735, 1735, 1761, 1761, 1735, 1735, 1735,
     1761, 1735, 1761, 1761, 1735, 1743, 1743, 1743, 1743, 1743,

     1761, 1743, 1743, 1743, 1743, 1761, 1761, 1743, 1743, 1761,
     1761, 1743, 1743, 1743, 1761, 1743, 1761, 1761, 1743,   33,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761

    } ;

static const flex_int16_t yy_chk[13396] =
    {   0,
        0,    0,    1,    1,    1,    2,    2,    2,   11,   11,
       12,   12,   38,   42,  145,   38,   42,  145,   38,   42,
       57,    0,   57,   38,   42,   44,    1,    0,   44,    2,
       73,   73,   73,   73,   38,   42,  399,   44,   52,   44,
       44,   52,   44,   44,   44,   44,   51,    0,   51,   51,
       51,   51,   77,   77,  399,   52,   52,   52,   52,  121,
      121,  121,   52,  138,  138,  196,   77,  196,   77,   77,
       77,   77,    1,    1,    1,    2,    2,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    9,    9,    9,    9,   34,   34,   34,
        9,  438,    9,    9,    9,    9,  438,    9,    9,    9,
       39, 1346,   39,   39,   39, 1352,   40,    9,   40,   40,
       40,   41,  712,   41,   41,   41,  134,  134,  134,  134,
      712,    9,    9,    9,   95,  151,  108,   95,  151,  108,
     1353,   13,   13,   13,   13, 1354,   13,   14,   14,   14,
       14, 1361,   14,   21,   21,   21,   21,  139,   21,    9,
      139,    9,    9,    9,    9,    9,    9,   10,   10,   10,
       10,   90,   90,   95,   10,  108,   10,   10,   10,   10,
       13,   10,   10,   10,  190,   90,   14,   90,   90,   90,

       90,   10,   21,   54, 1362,   54,  139,   54,   54,   54,
       54,  143,  143,  183,  183,   10,   10,   10, 1363,   54,
       13,   13,   13,   13,   13, 1364,   14,   14,   14,   14,
       14,  190,   21,   21,   21,   21,   21,   54,  155,  155,
      155,  155,  229,   10,  229,   10,   10,   10,   10,   10,
       10,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   17,   17,   17,   17,
      135,  223, 1365,  135,  223,   22,   22,   22,   22, 1366,
       22,   29,   29,  330,  330,   29,   30,   30,  345,  345,
       30,   17,   67, 1367,  135,   67,  142,  142,  234,  333,
      132,  234,  333,  132,   67,   17,   67,   67,   17,   67,
       67,   67,   67,   82,   22,  132,   82,  377,  377,   29,
      142,  170,  170,  170,   30,   82,  348,   82,   82,  348,
       82,   82,   82,   82, 1368,   17,   17,   17,   17,   17,

       18,   18,   18,   18,   22,   22,   22,   22,   22,   29,
       29,   29,   29,   29,   30,   30,   30,   30,   30,  157,
      157,  157,  157,  402,  402,   18,   86,   48,  329,   86,
      136,  329,  136,   48,  136,  136,  136,  136,   48,   18,
       68,   86,   18,   86,   86,   86,   86,  404,  404,   68,
       86,  179,  179,  179,  171,   68,  171,  171,  171,   68,
      368,   48, 1369,  368,   48,  158,   48,  329,  433,   18,
       18,   18,   18,   18,   19,   68, 1370,   19,   48,  158,
       19,  433,   19,   19,  368,   48,   19,   19,   19,   19,
       19,   19,   19,   19,   19, 1371,   74,  158,   74,   19,

       74,   74,   74,   74, 1372,   68,   68,   68,  220,  220,
      220,  220,   74,   19,   75,   19,   23,   23,   23,   23,
       87, 1373,   87,   75,   87,   87,   87,   87, 1374,   75,
       74,   76,  198,   75,  414,  414,   87,   76,   83,   76,
     1379,   23,   76,   76,   76,   76,   76,   83,  172,   75,
      172,  172,  172,   83,   87,   23, 1380,   83,   23,   88,
      173,  415,  173,  173,  173,  415,  415,  180,   88,  180,
      180,  180, 1381,   83,   88,  274,  274,  274,   88,   75,
       75,   75,  198,  198,  198,   23,   23,   23,   23,   23,
       24,   24,   24,   24,   88, 1382,   76,   76,   76,  370,

      133,  370, 1383,   83,   83,   83,  133, 1384,   89,  235,
      235,  133,  235,  696,   89,   24,   89,  696,  696,   89,
       89,   89,   89,   89,   88,   88,   88,  203, 1385,   24,
      286,  286,   24,  286,  133,  708,  708,  133,  159,  133,
      159,  159,  159,  159, 1392,  181,  167,  181,  181,  181,
     1393,  133,  159,  203,  200,  983,  983,  167,  133,   24,
       24,   24,   24,   24,   25,   25,   25,   25,  334,  334,
      159,  334,   25,   89,   89,   89, 1394,  203,  203,  203,
      167,   25,   25,   25,   25,  167,  200, 1395,  200,  167,
       25,   25,   25,   25,  349,  349,  167,  349, 1396,  167,

      186,  167,  167,  186,  200,  200,  200,   25,   25,   25,
       25,   25,   25,   26,   26,   26,   26,  186,  186,  186,
      186,   26,  379,  176,  186,  379,  176,  984,  984,  176,
       26,   26,   26,   26,  176,  221,  221,  221,  221,   26,
       26,   26,   26, 1400,  182,  176,  201,  182, 1401,  185,
      182,  185,  185,  185,  185,  182,   26,   26,   26,   26,
       26,   26,   27,   27,   27,   27,  182,   27,   27,  215,
     1402,   27,   27,   27,  184,   27,   27,  184,  201,   27,
       27,   27,   27,   27,  344, 1407,  184,  344,  184,  184,
     1408,  184,  184,  184,  184,  194,  201,  201,  201,  194,

       27,  194,   27,   27,  194,  194,  215, 1409, 1410,  187,
       27,  187,  207,  187,  187,  187,  187,   27, 1411,  215,
      215,  215,   27,  344,  205,  187,  424,   27,  424,   27,
       27,   28,   28,   28,   28, 1415,   28,   28,  210,  207,
       28,   28,   28,  187,   28,   28, 1416, 1417,   28,   28,
       28,   28,   28,  195,  205,  195, 1418, 1419,  195,  195,
      195,  226,  207,  207,  207,  226,  226,  226,  226,   28,
     1423,   28,   28,  210,  205,  205,  205, 1424, 1425,   28,
      232,  232,  232,  232,  380,  380,   28,  380,  210,  210,
      210,   28,  237,  237,  237, 1427,   28,  237,   28,   28,

       49, 1428,  381,   49,   49,  381, 1429,   49,  314,  314,
      314,   49,   49, 1430,   49,  213,   49,   49,   49,   49,
       49,   49,  384,   49,   49,  384,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,  653,   49,
      653,  213, 1431,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,  213,  213,  213,   49,  361,
     1432,   49,   49,   49,   59,   59,   59, 1433,  222, 1434,
      222,  361,  222,  222,  222,  222,  426,  320,  361,  202,
       59,   59,   59,  426,  222,  358,  358,  358,  224,  426,

      224, 1437,  224,  224,  224,  224,  244,  244,  244,  244,
      320,  202,  222,  244,  224, 1438,   59,   59,  202, 1439,
       59,   59,  320,  367,  202, 1440,  367,  204,   59,  320,
     1441,   59,  224,   59,  206,   59,   59,   69,  367,  202,
      202,  202,  376,   69, 1442,  376, 1443,  208,   69,   69,
       69,   69,   69,   69,   69,  405,  206, 1444,  405,  204,
      204,  204,  212,   69,   69,   69,   69,   69,   69,  208,
      435,   69,  484,  435,   69,  484,   69,  204,  204,  204,
      659,  376,  209,  659,  206,  206,  206,  211,   69,  401,
      214,  401,  401,  401,  216,   69,   71,  208,  208,  208,

      658,  658,  212,  658,  209,   71, 1445,   71,   71,   71,
       71,   71,  212,  212,  212,   71,  387,  209, 1446, 1447,
      214,  337,  337,  337,  211,  214,  337,  211,  216, 1448,
      387,   71,  209,  209,  209, 1449, 1450,  211,  211,  211,
      214,  214,  214, 1455,  216,  216,  216, 1456,  387, 1457,
      228, 1458,  228, 1459,  228,  228,  228,  228, 1460,  250,
     1461,   71,   71,   71,   85,  243,  228,  243,  243,  243,
      243, 1468, 1469,   85,  250,   85,   85,   85,   85,   85,
      416,  416,  416,   85,  228,  230,  230,  230,  230, 1470,
      230,  230,  230,  230,  242,  664,  664,  242,  664,   85,

      248,  248,  248,  248,  255, 1471,  242,  665,  242,  242,
      665,  242,  242,  242,  242,  255,  255,  255,  255,  679,
      679,  255,  679,  697,  250,  250,  250,  697,  697,   85,
       85,   85,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  112,  112,  112,
     1472,  112, 1476,  245,  112,  245, 1477,  245,  245,  245,
      245,  246,  417,  112,  112,  112,  417,  417,  417,  245,
      246,  264,  264,  264,  264,  680,  246,  268,  680, 1478,
      246,  268,  268,  268,  268,  112, 1483,  245,  112,  112,
      112, 1484, 1485,  112,  112,  291,  246,  291,  291,  291,
      291,  112,  298, 1486,  112, 1487,  112, 1491,  112,  112,
      122,  122,  122,  122, 1492,  715,  247,  298,  715,  122,
      122,  122,  122, 1493, 1494,  247,  246,  246,  246, 1495,
     1499,  247,  428,  428,  428,  247,  122,  122,  122,  122,

      122,  122,  129,  420,  129,  129, 1500, 1501,  129,  129,
      129,  247, 1503,  129,  129,  129,  129,  249,  510,  510,
      510,  129,  296,  296,  296,  296,  249,  298,  298,  298,
      251, 1504,  249, 1505,  129, 1506,  249,  129, 1507,  251,
     1508,  247,  247,  247, 1509,  251,  351,  351,  351,  251,
     1510,  351,  249,  420,  420,  420,  290,  722, 1513,  290,
      722,  129,  130,  130,  130,  251,  130,  722,  290,  130,
      290,  290, 1517,  290,  290,  290,  290, 1518,  130,  130,
      130, 1519,  249,  249,  249, 1521,  130,  304,  304,  304,
      304,  363,  363,  363,  363,  251,  251,  251, 1523,  695,

      130,  695,  695,  130,  130,  130,  308, 1525,  130,  130,
      308,  308,  308,  308, 1526,  773,  130,  773,  773,  130,
     1527,  130, 1528,  130,  130,  199,  199,  199,  199,  199,
      199,  199, 1533,  199, 1534,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
     1535,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,

      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  256,
      364,  364,  364,  364,  271,  271,  271,  271,  256,  271,
      271,  271,  271, 1541,  256,  485,  485,  485,  256, 1542,
      485,  271,  272,  369, 1543,  369, 1562,  273,  369,  369,
      369,  272, 1563,  442,  256, 1564,  273,  272, 1566,  271,
      275,  272,  273,  532,  532,  532,  273, 1567, 1568,  275,
      542,  542,  542,  292, 1569,  275,  292,  272,  442,  275,
     1571, 1572,  273, 1577,  256,  256,  256,  265,  292, 1578,
      292,  292,  292,  292,  265,  275,  265,  292,  265,  265,

      265,  265,  265,  442,  442,  442,  265,  272,  272,  272,
      265, 1579,  273,  273,  273,  279,  373,  373,  373,  373,
     1580,  443,  265,  287,  279,  275,  275,  275,  265, 1581,
      279, 1582,  287, 1586,  279,  552,  552,  552,  287, 1587,
     1588,  293,  287,  293, 1589,  293,  293,  293,  293, 1590,
      279, 1594,  265,  265,  265,  267,  443,  293,  287,  557,
      557,  557,  267, 1595,  267, 1596,  267,  267,  267,  267,
      267,  443,  443,  443,  267,  293, 1597, 1598,  267,  372,
      279,  279,  279,  372,  372,  372,  372, 1001,  287,  287,
      287, 1001, 1001,  371, 1599,  371,  267,  371,  371,  371,

      371,  374,  386,  374, 1600,  374,  374,  374,  374,  389,
      389,  389,  389,  386,  386,  386,  386, 1601, 1602,  386,
      267,  267,  267,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269, 1604,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  281,  468,

      468,  468,  468, 1605, 1606,  294, 1607,  281, 1608,  281,
      281,  281,  281,  281,  294, 1609,  295,  281, 1610,  297,
      294,  594,  594,  594,  294,  295, 1611,  299,  297,  755,
     1612,  295,  755,  281,  297,  295,  299, 1613,  297,  755,
      294,  303,  299,  614,  614,  614,  299,  624,  624,  624,
      303,  295, 1614, 1615,  297, 1617,  303,  634,  634,  634,
      303, 1618,  299,  281,  281,  281,  478,  478,  478,  478,
      294,  294,  294,  407, 1623,  445,  303,  407,  407,  407,
      407,  295,  295,  295,  297,  297,  297,  408,  408,  408,
      408, 1624,  299,  299,  299,  311,  311,  311,  311,  408,

      311,  311,  311,  311, 1625, 1626,  303,  303,  303,  305,
      445, 1627,  311, 1628,  441, 1632,  305,  408,  305, 1633,
      305,  305,  305,  305,  305,  445,  445,  445,  305,  446,
      311, 1634,  305,  390, 1635,  390,  312, 1636,  390,  390,
      390,  390, 1640,  313,  305,  312,  441,  450,  315, 1641,
      305,  312,  313, 1642,  452,  312, 1643,  315,  313, 1644,
     1645,  446,  313,  315,  441,  441,  441,  315,  639,  639,
      639,  312,  450, 1646,  305,  305,  305,  307,  313,  446,
      446,  446,  444,  315,  307,  447,  307, 1647,  307,  307,
      307,  307,  307,  452, 1648, 1650,  307,  450,  450,  450,

      307,  312,  312,  312,  452,  452,  452, 1651,  313,  313,
      313, 1652,  447,  315,  315,  315, 1653,  410,  307,  410,
      444,  444,  410,  410,  410,  410,  481,  481,  481,  481,
     1654, 1655,  444,  444,  444,  447,  447,  447,  483,  483,
      483,  483,  307,  307,  307,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309, 1656,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,

      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      319,  454,  651, 1657,  651,  326,  471,  651,  651,  319,
      471,  471,  471,  471,  326,  319,  660,  660,  660,  319,
      326,  660, 1658,  388,  326,  388,  388,  388,  388,  391,
     1660,  391,  391,  391,  391,  319, 1662,  388,  449,  454,
      326, 1664,  409,  391,  409, 1671,  409,  409,  409,  409,
      455,  454,  454,  454,  448,  388, 1672,  451,  409, 1005,
      456,  391, 1005,  457, 1673,  319,  319,  319,  321, 1005,
      326,  326,  326,  464,  449, 1678,  409,  321, 1679,  321,

      321,  321,  321,  321,  448,  456, 1680,  321,  449,  449,
      449,  451,  448,  455,  451, 1685, 1686,  457, 1687,  463,
      455,  455,  455,  321,  448,  448,  448,  451,  451,  451,
      456,  456,  456,  457,  457,  457,  464, 1006, 1016,  458,
     1006, 1016,  458,  464,  464,  464,  462, 1006, 1016,  458,
     1692, 1693,  463,  321,  321,  321,  359,  359,  359,  359,
      458, 1694, 1698,  461, 1699,  359,  359,  359,  359,  463,
      463,  463,  482, 1700,  482,  482,  482,  482, 1703, 1704,
      462, 1705,  359,  359,  359,  359,  359,  359,  419, 1706,
     1707,  460,  419,  419,  419,  419,  462,  462,  462,  461,

     1708,  419,  419,  419,  419,  459,  671,  671,  671,  465,
      458,  458,  458,  461,  461,  461, 1709, 1710,  419,  419,
      419,  419,  419,  419,  453,  453,  453,  453,  453,  460,
      453,  453, 1711,  453,  453,  453, 1712, 1713,  453, 1714,
      453,  460,  460,  460,  459, 1715,  453,  453,  465, 1716,
      453,  489,  489,  489,  489,  459,  459,  459, 1717,  465,
      465,  465, 1718,  453, 1719,  453,  453,  453,  475, 1358,
      475, 1358, 1358,  475,  475,  475,  475,  480, 1720,  480,
     1721, 1722,  480,  480,  480,  480,  501,  501,  501,  501,
      453,  453,  453, 1723,  453,  453,  453,  453,  453,  469,

      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469, 1724,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  470, 1725,  470, 1726,  470,  470,
      470,  470,  473, 1727,  473, 1728,  473,  473,  473,  473,
      470,  573,  573,  573,  573,  476, 1729,  476,  473,  476,

      476,  476,  476,  585,  585,  585,  585, 1730,  470, 1738,
     1739,  476, 1029,  490, 1740, 1029,  473,  490,  490,  490,
      490,  492, 1029,  492,  527,  492,  492,  492,  492,  476,
      491,  666,  666,  666,  672,  508,  666,  492,  672,  672,
      672,  491,  491,  491,  491,  491, 1746,  494, 1747,  491,
      508, 1748,  493,  491,  493,  492,  494,  493,  493,  493,
      493, 1749,  494, 1750,  495, 1751,  494, 1731, 1752,  496,
      508,  491,  497,  495,  527,  527,  527, 1753,  496,  495,
     1754,  497,  494,  495,  496, 1731, 1755,  497,  496, 1756,
     1345,  497,  690,  690,  690,  491,  491,  491, 1344,  495,

      508,  508,  508, 1335,  496, 1789,  502,  497, 1334,  503,
     1333, 1789,  494,  494,  494,  502, 1031,  533,  503, 1031,
     1323,  502, 1322, 1321,  503,  502, 1031, 1316,  503,  495,
      495,  495,  533,  504,  496,  496,  496,  497,  497,  497,
      539,  502,  504, 1033,  503,  518, 1033, 1315,  504, 1314,
      519,  529,  504, 1033,  518,  529,  529,  529,  529,  519,
      518, 1810,  530, 1305,  518,  519, 1303, 1810,  504,  519,
      609,  502,  502,  502,  503,  503,  503,  530,  520, 1302,
      518,  530,  533,  533,  533,  519, 1300,  520, 1298, 1297,
      539,  539,  539,  520,  800,  800,  800,  520,  504,  504,

      504,  526,  526,  526,  526, 1295,  526,  526,  526,  526,
      518,  518,  518,  520, 1294,  519,  519,  519,  526,  574,
      609,  609,  609,  574,  574,  574,  574,  530,  530,  530,
     1293, 1292,  534,  621,  534, 1289,  526,  534,  534,  534,
      534,  534, 1288,  520,  520,  520,  524,  670,  670,  670,
      670, 1287,  543,  524, 1286,  524, 1285,  524,  524,  524,
      524,  524,  804,  804,  804,  524,  538,  543,  538,  524,
      538,  538,  538,  538,  548, 1284,  548, 1276,  548,  548,
      548,  548,  538,  621,  621,  621, 1044,  524, 1275, 1044,
      548,  534,  534,  534,  615, 1274, 1044,  544, 1273,  544,

      538,  550,  544,  544,  544,  544,  544, 1272,  548,  615,
      550,  524,  524,  524,  525, 1271,  550,  543,  543,  543,
      550,  525, 1270,  525, 1269,  525,  525,  525,  525,  525,
      821,  821,  821,  525, 1268,  820,  550,  525,  576, 1267,
      576, 1811,  576,  576,  576,  576,  611, 1811, 1266,  525,
      611,  611,  611,  611,  576,  525,  544,  544,  544,  615,
      615,  615,  678,  678,  678,  678,  550,  550,  550,  551,
     1265, 1818,  576, 1070, 1263,  592, 1070, 1818,  551,  525,
      525,  525,  531, 1070,  551,  820,  820,  820,  551,  531,
      592,  531, 1261,  531,  531,  531,  531,  531,  825,  825,

      825,  531, 1260, 1259,  551,  531,  577, 1255,  577,  553,
      592,  577,  577,  577,  577, 1824,  827,  531,  553, 1254,
      652, 1824,  652,  531,  553,  652,  652,  652,  553,  684,
      684,  684,  684, 1870,  551,  551,  551,  563, 1253, 1870,
      592,  592,  592,  828,  553, 1873,  563,  531,  531,  531,
      541, 1873,  563, 1246, 1874,  625,  563,  541, 1245,  541,
     1874,  541,  541,  541,  541,  541,  827,  827,  827,  541,
      625, 1244,  563,  541,  553,  553,  553,  564,  685,  685,
      685,  685,  612,  699, 1234,  541,  564,  699,  699,  699,
      565,  541,  564,  828,  828,  828,  564,  612, 1232,  565,

     1231,  612,  563,  563,  563,  565,  830,  830,  830,  565,
     1876, 1230,  564, 1876, 1229,  541,  541,  541,  549, 1876,
      625,  625,  625, 1228, 1225,  565,  578,  549, 1224,  549,
      549,  549,  549,  549,  700,  578, 1223,  549,  700,  700,
      700,  578,  564,  564,  564,  578, 1222,  612,  612,  612,
      835,  835,  835,  549, 1221,  565,  565,  565,  616,  579,
      616,  578, 1220,  616,  616,  616,  616,  616,  579,  767,
      767,  767,  767, 1219,  579,  676, 1215,  676,  579,  676,
      676,  676,  676,  549,  549,  549,  569,  772,  772,  772,
      772,  578,  578,  578,  579,  569, 1214,  569,  569,  569,

      569,  569,  677, 1213,  677,  569,  677,  677,  677,  677,
      862,  862,  862,  580,  904,  904,  904,  616,  616,  616,
      581,  569,  580, 1211,  579,  579,  579,  586,  580,  581,
     1291, 1924,  580, 1291, 1210,  581,  586, 1924, 1209,  581,
     1291,  587,  586, 1827,  858, 1827,  586,  924,  580, 1827,
      587,  569,  569,  569,  575,  581,  587, 1927, 1928,  858,
      587, 1208,  586, 1927, 1928,  575,  575,  575,  575,  575,
      908,  908,  908,  575, 1207, 1205,  587,  575,  580,  580,
      580,  588,  925,  925,  925,  581,  581,  581, 1204, 1203,
      588, 1202,  586,  586,  586,  575,  588,  924,  924,  924,

      588, 1201, 1200,  600, 1199, 1198,  587,  587,  587,  858,
      858,  858,  600, 1197,  601, 1196,  588,  602,  600,  575,
      575,  575,  600,  601, 1299, 1970,  602, 1299, 1195,  601,
     1193, 1970,  602,  601, 1299,  768,  602,  768,  600,  768,
      768,  768,  768,  929,  929,  929,  588,  588,  588,  601,
     1192,  931,  602, 1191,  608,  608,  608,  608, 1190,  608,
      608,  608,  608,  683,  683,  683,  683, 1189,  600,  600,
      600,  608,  934,  934,  934,  683,  939,  939,  939,  601,
      601,  601,  602,  602,  602,  606,  966,  966,  966,  608,
     1188, 1187,  606,  683,  606, 1186,  606,  606,  606,  606,

      606,  931,  931,  931,  606,  620, 1185,  620,  606,  620,
      620,  620,  620,  730, 1178,  775,  730,  775,  775,  775,
      775,  620,  626,  730,  626, 1177,  606,  626,  626,  626,
      626,  626, 1176, 1175,  730,  780,  780,  780,  780,  620,
      630, 1174,  630,  798,  630,  630,  630,  630, 1971, 1173,
      606,  606,  606,  607, 1971, 1867,  630, 1867,  798, 1172,
      607, 1867,  607, 1171,  607,  607,  607,  607,  607,  985,
      985,  985,  607, 1868,  630, 1868,  607, 1170,  798, 1868,
      632,  626,  626,  626,  730,  730,  730,  633,  607,  632,
     1311,  932,  635, 1311,  607,  632,  633, 1169, 1168,  632,

     1311,  635,  633,  986,  986,  986,  633,  635,  798,  798,
      798,  635, 1096, 1096, 1096,  632, 1167, 1165,  607,  607,
      607,  613,  633,  829,  829,  829,  829,  635,  613, 1163,
      613, 1162,  613,  613,  613,  613,  613, 1108, 1108, 1108,
      613,  932,  932,  932,  613,  632,  632,  632,  884,  884,
      884,  884,  633,  633,  633,  645,  613,  635,  635,  635,
      646, 1161,  613, 1157,  645,  933,  933,  933,  933,  646,
      645, 1114, 1114, 1114,  645,  646,  692, 1156,  692,  646,
      692,  692,  692,  692, 1155, 2024,  613,  613,  613,  623,
      645, 2024,  692, 2025, 1148,  646,  623, 1147,  623, 2025,

      623,  623,  623,  623,  623, 1120, 1120, 1120,  623, 1146,
      692, 1136,  623, 1035,  647, 1134,  766,  766,  766,  766,
      645,  645,  645,  647,  623,  646,  646,  646,  766,  647,
      623, 1133, 1132,  647,  694,  694,  694,  694, 1131,  694,
      694,  694,  694, 1130, 1035,  771,  766,  771, 1127,  647,
      771,  771,  771,  771,  623,  623,  623,  631,  843,  843,
      843,  843,  843, 1035, 1035, 1035,  631, 1126,  631,  631,
      631,  631,  631, 1785, 1125,  731,  631, 1785,  731,  647,
      647,  647,  693, 1785,  693,  731,  693,  693,  693,  693,
      732, 1814,  631,  732,  733, 1814,  731,  733,  693,  735,

      732, 1814,  735, 1124,  733, 1123, 1122,  734, 1121,  735,
      734,  732,  843,  843,  843,  733,  693,  734, 1117, 1116,
      735, 1115,  631,  631,  631,  654,  991, 1113,  734, 1112,
      991,  991,  991, 1111,  654,  732,  654,  654,  654,  654,
      654,  733, 1110, 1109,  654, 1107,  731,  731,  731,  799,
     1106,  774,  734,  774,  839,  735,  774,  774,  774,  774,
      654,  732,  732,  732,  799,  733,  733,  733,  782,  839,
      735,  735,  735, 1078, 1078, 1078, 1078,  782,  734,  734,
      734,  962, 1105,  782,  799, 1319, 1104,  782, 1319,  839,
      654,  654,  654,  674, 1103, 1319,  962,  674,  674,  674,

      674,  736, 1324,  782,  736, 1324,  674,  674,  674,  674,
     1102,  736, 1324, 1101,  799,  799,  799, 1100, 1099,  839,
      839,  839,  736,  674,  674,  674,  674,  674,  674,  702,
      702,  702,  702,  782,  782,  782, 1098, 1097,  702,  702,
      702,  702,  737, 1095, 1094,  737,  962,  962,  962, 1166,
     1166, 1166,  737, 1093,  736,  702,  702,  702,  702,  702,
      702,  738, 1092,  737,  738,  739, 1091, 1090,  739, 1089,
     1088,  738,  736,  736,  736,  739, 1080, 1080, 1080, 1080,
      740, 1087,  738,  740,  741, 1067,  739,  741, 1309, 1066,
      740, 1309, 1326,  737,  741, 1326,  742, 1065, 1309,  742,

      743,  740, 1326,  743, 1057,  741,  742, 1056,  744,  738,
      743,  744,  739,  737,  737,  737, 1055,  742,  744, 1030,
      746,  743, 1002,  746, 1036, 1028, 1002, 1002, 1002,  744,
      746, 1027,  738,  738,  738, 1309,  739,  739,  739,  742,
      740,  746,  849, 1026,  849, 1025, 1024,  849,  849,  849,
      849,  740,  740,  740, 1023,  741,  741,  741,  744,  743,
     1022, 1075, 1036, 1075, 1075, 1075, 1075,  742,  742,  742,
     1021,  743,  743,  743, 1036, 1036, 1036, 1020, 1019,  744,
      744,  744,  953, 1018,  953, 1037, 1017,  953,  953,  953,
      953,  746,  746,  746,  747,  747,  747,  747,  747,  747,

      747, 1015,  747, 1014,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  751, 1037, 1313,  751,  752, 1313, 1013,
      752, 1012, 1011,  751,  765, 1313,  765,  752,  765,  765,
      765,  765, 1010, 1009,  751, 1037, 1037, 1037,  752, 1008,
      765,  770, 1007,  770, 1004,  770,  770,  770,  770,  754,
      994,  990,  754,  757,  982,  981,  757,  770,  765,  754,
     1313,  752, 1317,  757,  980, 1317,  758,  979,  978,  758,
      754,  974, 1317,  751,  757,  770,  758, 1038, 1079,  973,
     1079, 1079, 1079, 1079,  751,  751,  751,  758,  752,  752,
      752,  753,  753,  753,  753,  753,  754,  753,  753,  972,

      753,  753,  753,  971, 1046,  753,  970,  753, 1328, 1317,
      757, 1328,  969,  753,  753, 1038,  758,  753, 1328,  968,
      754,  754,  754,  967,  757,  757,  757, 1038, 1038, 1038,
      753,  965,  753,  753,  753, 1043, 1046,  758,  758,  758,
      964,  963,  993,  950,  993,  753,  993,  993,  993,  993,
      760,  949,  946,  760, 1046, 1046, 1046,  753,  753,  753,
      760,  753,  753,  753,  753,  753,  759,  759,  759,  759,
      759,  760,  759,  759,  945,  759,  759,  759, 1043,  944,
      759,  761,  759,  942,  761, 1043, 1043, 1043,  759,  759,
      762,  761,  759,  762,  763,  941,  940,  763, 1048,  760,

      762,  938,  761,  937,  763,  759, 1052,  759,  759,  759,
      936,  762,  928,  844,  759,  763,  927,  844,  844,  844,
      844,  760,  760,  760, 1048, 1194, 1194, 1194,  761,  844,
      926,  922,  759,  759,  759,  921,  759,  759,  759,  759,
      759, 1139, 1139, 1139, 1139,  763,  920,  844, 1048, 1048,
     1048,  919,  761,  761,  761,  918, 1052, 1052, 1052,  914,
      913,  762,  762,  762,  912,  763,  763,  763,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  911,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,

      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  777, 1054,  777,  910,  777,  777,  777,
      777, 1206, 1206, 1206,  909,  779,  781,  779,  907,  777,
      779,  779,  779,  779,  779,  781, 1054,  781,  781,  781,
      781,  781, 1212, 1212, 1212,  781, 1327,  777,  778, 1327,
      851,  851,  851,  851,  851,  778, 1327,  778,  906,  778,
      778,  778,  778,  778, 1054, 1054, 1054,  778,  905,  901,

      831,  778,  831,  900,  899,  831,  831,  831,  831,  831,
      898,  783, 1050,  778,  779,  779,  779,  897,  784,  778,
      783,  781,  781,  781,  893,  892,  783,  784,  891, 1327,
      783,  890,  790,  784,  851,  851,  851,  784, 1050,  791,
      889,  790,  880,  778,  778,  778,  783,  790,  791,  878,
      877,  790,  876,  784,  791,  875,  792,  874,  791,  831,
      831,  831, 1050, 1050, 1050,  792,  870,  790, 1040, 1331,
      869,  792, 1331,  811,  791,  792,  783,  783,  783, 1331,
     1062,  812,  811,  784,  784,  784,  868,  867,  811,  866,
      812,  792,  811,  865,  813,  864,  812,  790,  790,  790,

      812,  863, 1040,  813,  791,  791,  791,  861,  811,  813,
     1218, 1218, 1218,  813,  860,  859,  812,  846, 1040, 1040,
     1040,  792,  792,  792, 1237, 1237, 1237, 1237,  902,  813,
     1062, 1062, 1062,  845, 1329,  903,  842, 1329,  811,  811,
      811,  841, 1336,  902, 1329, 1336,  812,  812,  812,  848,
      903,  848, 1336,  848,  848,  848,  848,  840,  838,  813,
      813,  813,  819,  902,  837,  848,  836,  834, 1047,  819,
      903,  819,  833,  819,  819,  819,  819,  819, 1264, 1264,
     1264,  819,  852,  848,  832,  819,  852,  852,  852,  852,
      853,  824, 1329,  902,  902,  902,  823,  819,  852,  853,

      903,  903,  903,  819,  822,  853,  855, 1047,  855,  853,
      855,  855,  855,  855,  818,  817,  852,  854, 1047, 1047,
     1047, 1337,  855,  816, 1337,  853,  854,  819,  819,  819,
      826, 1337,  854,  815,  814, 1059,  854,  826, 1068,  826,
      855,  826,  826,  826,  826,  826, 1422, 1422, 1422,  826,
      810, 1338,  854,  826, 1338,  853,  853,  853,  881,  809,
      881, 1338,  881,  881,  881,  881, 1342,  808,  807, 1342,
     1068,  826,  806,  805,  881, 1059, 1342, 1426, 1426, 1426,
     1337,  803,  854,  854,  854, 1059, 1059, 1059, 1068, 1068,
     1068,  802,  881,  801,  797,  826,  826,  826,  847,  847,

      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  796,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  856, 1356, 1356, 1356, 1356,  795,  794,
      857,  793,  856,  943,  856,  856,  856,  856,  856,  857,
      789,  871,  856,  788,  872,  857,  787,  786,  943,  857,

      871,  785,  873,  872, 1348,  776,  871, 1348,  856,  872,
      871,  873, 1072,  872, 1348,  857,  764,  873,  943,  750,
     1042,  873,  749, 1042,  748,  729,  871,  728,  727,  872,
     1042,  726,  947,  947,  947,  947,  947,  873,  856,  856,
      856, 1042,  725,  724, 1072,  857,  857,  857,  943,  943,
      943, 1348, 1498, 1498, 1498,  723,  871,  871,  871,  872,
      872,  872, 1072, 1072, 1072,  721,  720,  873,  873,  873,
      879,  955,  955,  955,  955,  955, 1502, 1502, 1502,  879,
      719,  879,  879,  879,  879,  879,  947,  947,  947,  879,
      718, 1042, 1042, 1042,  716,  883, 1350,  883,  885, 1350,

      883,  883,  883,  883,  883,  879, 1350,  885,  714,  885,
      885,  885,  885,  885,  948,  713,  711,  885,  948,  948,
      948,  948,  710,  709,  886,  955,  955,  955,  707,  706,
      948, 1515,  705,  886, 1515,  879,  879,  879,  882,  886,
      704, 1515,  703,  886,  701,  882,  698,  882,  948,  882,
      882,  882,  882,  882,  883,  883,  883,  882,  688,  886,
      687,  882,  887,  885,  885,  885,  686,  888, 1603, 1603,
     1603,  887,  669,  882,  668, 1058,  888,  887, 1058,  882,
      663,  887,  888,  662, 1340, 1058,  888, 1340,  657,  886,
      886,  886,  656,  655, 1340,  650, 1058,  887, 1520,  649,

      894, 1520,  888,  882,  882,  882,  648,  895, 1520,  894,
      644,  999,  999,  999,  999,  894,  895,  643,  642,  894,
      641,  896,  895,  999,  640,  638,  895,  887,  887,  887,
      896,  637,  888,  888,  888,  894,  896, 1649, 1649, 1649,
      896,  999,  895,  915, 1340,  636, 1058, 1058, 1058, 1866,
      629, 1347,  915, 1866, 1347, 1064,  896,  628,  915, 1866,
      916, 1347,  915,  627,  622,  894,  894,  894,  619,  916,
      618,  617,  895,  895,  895,  916,  610, 1064,  915,  916,
      605,  917, 1522,  604,  603, 1522,  896,  896,  896,  599,
      917,  598, 1522,  597,  596,  916,  917,  952,  595,  952,

      917,  952,  952,  952,  952, 1064, 1064, 1064,  915,  915,
      915, 1347,  593,  952,  591,  935,  917,  935,  590,  589,
      935,  935,  935,  935,  935,  916,  916,  916,  584,  583,
      582,  952,  572, 1524,  571,  956, 1524, 1531,  570,  956,
      956,  956,  956, 1524,  568,  567,  917,  917,  917,  923,
     1565,  956, 1565, 1565, 1565, 1565,  923,  566,  923,  562,
      923,  923,  923,  923,  923,  561,  560,  559,  923,  956,
      558, 1539,  923,  556,  935,  935,  935,  957,  555, 1150,
     1150, 1150, 1150, 1150,  923,  958,  957, 1531, 1531, 1531,
      923,  554,  957,  547,  958,  546,  957,  545,  540,  537,

      958,  536,  535,  959,  958,  959,  528,  959,  959,  959,
      959,  523,  957,  522,  923,  923,  923,  930,  521,  959,
      958, 1539, 1539, 1539,  930,  515,  930,  514,  930,  930,
      930,  930,  930, 1150, 1150, 1150,  930,  959,  513,  512,
      930, 1135,  957,  957,  957, 1135, 1135, 1135, 1135,  511,
      958,  958,  958,  509, 1074,  507, 1074, 1135,  930, 1074,
     1074, 1074, 1074, 1077,  506, 1077,  505,  500, 1077, 1077,
     1077, 1077, 1357,  499, 1357, 1135, 1357, 1357, 1357, 1357,
      498,  488,  930,  930,  930,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,

      951,  487,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      960,  467,  466,  440,  439,  437,  436,  961,  434,  960,
      432,  960,  960,  960,  960,  960,  961,  431,  975,  960,
      430,  976,  961,  429, 1128, 1549,  961,  975,  427,  977,
      976, 1536,  425,  975, 1536,  960,  976,  975,  977, 1128,

      976, 1536,  961,  423,  977, 1000,  422, 1000,  977, 1000,
     1000, 1000, 1000,  975,  421,  394,  976,  393,  392, 1128,
     1547, 1000,  375, 1547,  977,  960,  960,  960, 1549,  355,
     1547,  354,  961,  961,  961, 1549, 1549, 1549,  342, 1000,
      341,  328,  327,  975,  975,  975,  976,  976,  976, 1128,
     1128, 1128,  325,  324,  977,  977,  977,  989, 1248, 1248,
     1248, 1248, 1248,  323, 1550,  318,  989, 1550,  989,  989,
      989,  989,  989, 1073, 1550, 1073,  989, 1073, 1073, 1073,
     1073, 1082,  317, 1082, 1084, 1082, 1082, 1082, 1082, 1073,
      316, 1553,  989, 1084, 1553, 1545,  302, 1082,  301, 1084,

      300, 1553, 1085, 1084,  289,  288, 1667, 1073,  285, 1667,
      284, 1085, 1248, 1248, 1248, 1082, 1667, 1085, 1129, 1084,
      283, 1085,  989,  989,  989,  992, 1555,  280,  278,  992,
      992,  992,  992, 1129, 1545,  277,  276, 1085,  992,  992,
      992,  992,  254,  253,  252, 1545, 1545, 1545,  241, 1084,
     1084, 1084,  240, 1129,  219,  992,  992,  992,  992,  992,
      992,  995,  995,  218,  995, 1555,  995, 1085, 1085, 1085,
      995,  995,  995,  217,  995,  175, 1555, 1555, 1555, 1086,
      165,  163,  995, 1129, 1129, 1129, 1701, 1733, 1086, 1701,
     1733,  162,  161,  160, 1086,  153, 1701, 1733, 1086,  995,

      147,  995,  995, 1119,  141, 1119,  137,  128, 1119, 1119,
     1119, 1119, 1119, 1138, 1086, 1138,  126,  125, 1138, 1138,
     1138, 1138, 1138, 1142,  124, 1560,  995,  119,  995,  995,
      996,  996, 1142,  996, 1669,  996,  116,  115, 1142,  996,
      996,  996, 1142,  996, 1086, 1086, 1086, 1741,  114, 1141,
     1741,  996, 1164, 1141, 1141, 1141, 1141, 1741, 1142,  110,
      106,  104, 1119, 1119, 1119, 1141,  103, 1164,  996,  102,
      996,  996, 1138, 1138, 1138, 1560, 1560, 1560,   97,   93,
       92,   91,   84, 1141, 1669, 1669, 1669, 1164, 1142, 1142,
     1142,   81,   80,   79,   72,  996,   66,  996,  996, 1003,

     1003, 1003, 1003, 1757, 1757, 1757,   65,   64, 1003, 1003,
     1003, 1003,   50,   46,   37,   36,   33, 1164, 1164, 1164,
       32, 1757, 1757, 1757, 1757, 1003, 1003, 1003, 1003, 1003,
     1003, 1039, 1039, 1039, 1039, 1039,   31, 1039, 1039,    0,
     1039, 1039, 1039,    0,    0, 1039,    0, 1039,    0,    0,
        0,    0,    0, 1039, 1039,    0,    0, 1039,    0, 1180,
        0, 1180,    0, 1180, 1180, 1180, 1180,    0,    0, 1140,
     1039,    0, 1039, 1039, 1039, 1180, 1143,    0, 1140, 1039,
     1140, 1140, 1140, 1140, 1140, 1143,    0, 1676, 1140,    0,
        0, 1143,    0, 1180,    0, 1143,    0, 1039, 1039, 1039,

        0, 1039, 1039, 1039, 1039, 1039, 1041, 1041, 1041, 1041,
     1041, 1143, 1041, 1041,    0, 1041, 1041, 1041,    0,    0,
     1041,    0, 1041,    0,    0,    0,    0,    0, 1041, 1041,
        0,    0, 1041,    0, 1140, 1140, 1140, 1676, 1676, 1676,
        0, 1143, 1143, 1143,    0, 1041,    0, 1041, 1041, 1041,
     1217, 1144, 1217,    0,    0, 1217, 1217, 1217, 1217, 1217,
     1144,    0, 1683,    0,    0,    0, 1144,    0,    0,    0,
     1144,    0, 1041, 1041, 1041, 1690, 1041, 1041, 1041, 1041,
     1041, 1049, 1049, 1049, 1049, 1049, 1144, 1049, 1049, 1696,
     1049, 1049, 1049,    0, 1736, 1049,    0, 1049,    0,    0,

        0,    0,    0, 1049, 1049,    0,    0, 1049,    0, 1217,
     1217, 1217, 1683, 1683, 1683,    0, 1144, 1144, 1144,    0,
     1049,    0, 1049, 1049, 1049, 1690, 1690, 1690, 1226, 1283,
     1283, 1283, 1283,    0, 1283, 1283, 1283, 1283,    0, 1696,
     1696, 1696,    0, 1226, 1736, 1736, 1736, 1049, 1049, 1049,
        0, 1049, 1049, 1049, 1049, 1049, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1226, 1053, 1227, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1060, 1060, 1060, 1060, 1060,
     1227, 1060, 1060, 1744, 1060, 1060, 1060,    0,    0, 1060,
        0, 1060,    0, 1226, 1226, 1226,    0, 1060, 1060,    0,

     1227, 1060,    0,    0, 1145,    0,    0,    0,    0,    0,
        0,    0,    0, 1145, 1060,    0, 1060, 1060, 1060, 1145,
        0, 1233,    0, 1145,    0, 1233, 1233, 1233, 1233,    0,
     1227, 1227, 1227, 1744, 1744, 1744,    0, 1233,    0, 1145,
        0, 1060, 1060, 1060,    0, 1060, 1060, 1060, 1060, 1060,
     1069, 1069, 1069, 1069, 1069, 1233, 1069, 1069,    0, 1069,
     1069, 1069,    0,    0, 1069, 1149, 1069,    0, 1151, 1145,
     1145, 1145, 1069, 1069, 1149,    0, 1069, 1151,    0,    0,
     1149,    0,    0, 1151, 1149,    0,    0, 1151,    0, 1069,
        0, 1069, 1069, 1069,    0,    0,    0,    0,    0,    0,

     1149,    0,    0, 1151,    0,    0,    0,    0,    0,    0,
        0, 1262,    0,    0,    0,    0, 1069, 1069, 1069,    0,
     1069, 1069, 1069, 1069, 1069, 1081, 1262,    0,    0,    0,
     1149, 1149, 1149, 1151, 1151, 1151, 1081, 1081, 1081, 1081,
     1081,    0,    0,    0, 1081,    0, 1262,    0, 1081, 1152,
        0,    0, 1154,    0,    0,    0,    0,    0, 1152,    0,
     1158, 1154,    0,    0, 1152,    0, 1081, 1154, 1152, 1158,
        0, 1154,    0,    0,    0, 1158, 1262, 1262, 1262, 1158,
        0,    0,    0,    0, 1152,    0,    0, 1154,    0,    0,
     1081, 1081, 1081, 1083,    0, 1158,    0,    0, 1420,    0,

        0,    0, 1083,    0, 1083, 1083, 1083, 1083, 1083,    0,
        0,    0, 1083, 1420, 1152, 1152, 1152, 1154, 1154, 1154,
     1159, 1558,    0,    0, 1558, 1158, 1158, 1158, 1083, 1159,
        0, 1558, 1160, 1420,    0, 1159,    0,    0,    0, 1159,
        0, 1160, 1558,    0,    0,    0,    0, 1160,    0,    0,
        0, 1160,    0,    0,    0, 1159,    0,    0, 1083, 1083,
     1083, 1118,    0, 1420, 1420, 1420, 1421, 1160, 1118,    0,
     1118,    0, 1118, 1118, 1118, 1118, 1118,    0,    0,    0,
     1118, 1421,    0,    0, 1118, 1159, 1159, 1159,    0,    0,
        0,    0, 1558, 1558, 1558, 1182, 1118, 1160, 1160, 1160,

     1183, 1421, 1118,    0, 1182,    0,    0,    0,    0, 1183,
     1182,    0,    0,    0, 1182, 1183, 1236,    0, 1236, 1183,
        0, 1236, 1236, 1236, 1236, 1236, 1118, 1118, 1118, 1153,
     1182, 1421, 1421, 1421,    0, 1183, 1184,    0, 1153,    0,
     1153, 1153, 1153, 1153, 1153, 1184,    0,    0, 1153,    0,
        0, 1184, 1239,    0,    0, 1184, 1239, 1239, 1239, 1239,
     1182, 1182, 1182,    0, 1153, 1183, 1183, 1183, 1239, 1238,
        0, 1184,    0,    0,    0, 1236, 1236, 1236, 1238,    0,
     1238, 1238, 1238, 1238, 1238,    0, 1239,    0, 1238, 1377,
     1377, 1377, 1377, 1377, 1153, 1153, 1153, 1179,    0,    0,

        0, 1184, 1184, 1184, 1240,    0,    0,    0, 1179, 1179,
     1179, 1179, 1179, 1240,    0,    0, 1179,    0,    0, 1240,
     1179,    0, 1241, 1240,    0,    0,    0,    0,    0,    0,
        0, 1241,    0,    0, 1238, 1238, 1238, 1241, 1179, 1240,
     1242, 1241,    0, 1377, 1377, 1377,    0,    0,    0, 1242,
        0, 1496,    0,    0,    0, 1242,    0, 1241,    0, 1242,
        0,    0, 1179, 1179, 1179, 1181, 1496,    0,    0, 1240,
     1240, 1240,    0,    0, 1181, 1242, 1181, 1181, 1181, 1181,
     1181,    0,    0,    0, 1181,    0, 1496, 1241, 1241, 1241,
     1360,    0, 1360, 1243,    0, 1360, 1360, 1360, 1360, 1360,

     1181,    0, 1243,    0, 1247, 1242, 1242, 1242, 1243,    0,
        0,    0, 1243, 1247,    0,    0, 1496, 1496, 1496, 1247,
     1282,    0, 1282, 1247, 1282, 1282, 1282, 1282, 1243,    0,
     1181, 1181, 1181, 1216,    0,    0, 1282,    0,    0, 1247,
     1216,    0, 1216,    0, 1216, 1216, 1216, 1216, 1216, 1360,
     1360, 1360, 1216,    0, 1282,    0, 1216, 1249, 1243, 1243,
     1243,    0,    0,    0,    0,    0, 1249,    0, 1216, 1247,
     1247, 1247, 1249, 1378, 1216, 1250, 1249, 1378, 1378, 1378,
     1378,    0, 1252,    0, 1250,    0,    0,    0,    0, 1378,
     1250, 1252, 1249,    0, 1250,    0,    0, 1252, 1216, 1216,

     1216, 1252,    0,    0,    0,    0,    0, 1378,    0,    0,
     1250,    0,    0,    0,    0,    0, 1256, 1252,    0,    0,
        0,    0, 1249, 1249, 1249, 1256,    0,    0,    0,    0,
        0, 1256,    0,    0,    0, 1256,    0,    0,    0,    0,
     1250, 1250, 1250, 1251,    0,    0,    0, 1252, 1252, 1252,
     1257, 1256, 1251,    0, 1251, 1251, 1251, 1251, 1251, 1257,
        0, 1258, 1251,    0,    0, 1257,    0,    0,    0, 1257,
     1258,    0,    0,    0,    0,    0, 1258,    0, 1251,    0,
     1258, 1256, 1256, 1256, 1376, 1257, 1376,    0,    0, 1376,
     1376, 1376, 1376, 1376,    0,    0, 1258, 1386, 1386, 1386,

     1386, 1386, 1403, 1403, 1403, 1403, 1403, 1387, 1251, 1251,
     1251, 1387, 1387, 1387, 1387, 1257, 1257, 1257, 1453, 1453,
     1453, 1453, 1453, 1387,    0,    0, 1258, 1258, 1258, 1277,
     1277,    0, 1277,    0, 1277,    0,    0,    0, 1277, 1277,
     1277, 1387, 1277, 1376, 1376, 1376,    0,    0,    0,    0,
     1277, 1386, 1386, 1386,    0, 1388, 1403, 1403, 1403, 1388,
     1388, 1388, 1388,    0,    0,    0,    0, 1277, 1389, 1277,
     1277, 1388, 1453, 1453, 1453,    0,    0, 1389,    0,    0,
        0,    0,    0, 1389,    0,    0,    0, 1389,    0, 1388,
        0, 1497,    0,    0, 1277,    0, 1277, 1277, 1306, 1306,

     1306, 1306, 1306, 1389, 1306, 1306, 1497, 1306, 1306, 1306,
        0,    0, 1306,    0, 1306,    0,    0,    0,    0,    0,
     1306, 1306,    0,    0, 1306,    0, 1497, 1390,    0,    0,
        0,    0,    0, 1389, 1389, 1389, 1390, 1306,    0, 1306,
     1306, 1306, 1390, 1436,    0, 1436, 1390,    0, 1436, 1436,
     1436, 1436, 1436,    0,    0,    0, 1497, 1497, 1497,    0,
        0,    0, 1390,    0, 1306, 1306, 1306,    0, 1306, 1306,
     1306, 1306, 1306, 1307, 1307, 1307, 1307, 1307,    0, 1307,
        0,    0, 1307, 1307, 1307,    0,    0, 1307,    0, 1307,
        0,    0, 1390, 1390, 1390, 1307, 1307,    0,    0, 1307,

     1391,    0, 1436, 1436, 1436,    0,    0, 1681,    0, 1391,
     1681,    0, 1307,    0, 1307, 1391, 1307, 1681, 1397, 1391,
        0, 1462, 1462, 1462, 1462, 1462,    0, 1397, 1681,    0,
        0,    0,    0, 1397,    0, 1391,    0, 1397,    0, 1307,
     1307, 1307,    0, 1307, 1307, 1307, 1307, 1307, 1308, 1308,
     1308, 1308, 1308, 1397, 1308, 1308,    0, 1308, 1308, 1308,
        0,    0, 1308,    0, 1308, 1391, 1391, 1391,    0,    0,
     1308, 1308,    0,    0, 1308, 1462, 1462, 1462, 1681, 1681,
     1681,    0,    0, 1397, 1397, 1397,    0, 1308,    0, 1308,
     1308, 1308,    0,    0,    0,    0,    0,    0,    0,    0,

     1452,    0, 1452,    0,    0, 1452, 1452, 1452, 1452, 1452,
        0,    0,    0,    0, 1308, 1308, 1308,    0, 1308, 1308,
     1308, 1308, 1308, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
        0, 1312,    0, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1355, 1355, 1355, 1355, 1355,    0, 1355, 1355,
        0, 1355, 1355, 1355, 1398,    0, 1355,    0, 1355, 1452,
     1452, 1452,    0, 1398, 1355, 1355,    0,    0, 1355, 1398,
     1454,    0,    0, 1398, 1454, 1454, 1454, 1454,    0,    0,
        0, 1355,    0, 1355, 1355, 1355, 1454,    0, 1399, 1398,
     1479, 1479, 1479, 1479, 1479,    0,    0, 1399,    0,    0,

        0,    0,    0, 1399, 1454,    0,    0, 1399, 1355, 1355,
     1355,    0, 1355, 1355, 1355, 1355, 1355, 1359,    0, 1398,
     1398, 1398,    0, 1399, 1359,    0, 1359,    0, 1359, 1359,
     1359, 1359, 1359,    0,    0,    0, 1359,    0,    0,    0,
     1359,    0,    0, 1463, 1479, 1479, 1479, 1463, 1463, 1463,
     1463, 1404, 1359, 1399, 1399, 1399, 1405,    0, 1359, 1463,
     1404,    0,    0,    0,    0, 1405, 1404,    0,    0,    0,
     1404, 1405,    0,    0,    0, 1405,    0, 1463,    0,    0,
        0,    0, 1359, 1359, 1359, 1375, 1404,    0,    0,    0,
        0, 1405, 1375,    0, 1375,    0, 1375, 1375, 1375, 1375,

     1375,    0,    0,    0, 1375,    0,    0,    0, 1375,    0,
     1406,    0,    0,    0,    0,    0, 1404, 1404, 1404, 1406,
     1375, 1405, 1405, 1405, 1412, 1406, 1375, 1413,    0, 1406,
        0,    0,    0, 1412,    0,    0, 1413,    0, 1414, 1412,
        0,    0, 1413, 1412,    0, 1406, 1413, 1414,    0,    0,
     1375, 1375, 1375, 1414,    0,    0,    0, 1414,    0, 1412,
        0,    0, 1413, 1464,    0, 1465,    0, 1464, 1464, 1464,
     1464,    0,    0, 1414, 1465, 1406, 1406, 1406,    0, 1464,
     1465,    0,    0,    0, 1465,    0,    0,    0,    0, 1412,
     1412, 1412, 1413, 1413, 1413,    0,    0, 1464,    0,    0,

     1465,    0,    0, 1414, 1414, 1414, 1435,    0,    0,    0,
        0,    0,    0, 1435,    0, 1435,    0, 1435, 1435, 1435,
     1435, 1435,    0,    0,    0, 1435,    0,    0,    0, 1435,
     1465, 1465, 1465, 1466,    0,    0,    0,    0,    0,    0,
     1467, 1435, 1466,    0,    0, 1473,    0, 1435, 1466, 1467,
        0,    0, 1466,    0, 1473, 1467,    0,    0,    0, 1467,
     1473,    0,    0,    0, 1473,    0,    0,    0, 1466,    0,
        0, 1435, 1435, 1435, 1451, 1467,    0,    0,    0,    0,
     1473, 1451,    0, 1451,    0, 1451, 1451, 1451, 1451, 1451,
        0,    0,    0, 1451,    0,    0,    0, 1451, 1466, 1466,

     1466,    0,    0,    0,    0, 1467, 1467, 1467, 1474, 1451,
     1473, 1473, 1473, 1475,    0, 1451, 1480, 1474,    0,    0,
        0,    0, 1475, 1474,    0, 1480,    0, 1474, 1475,    0,
        0, 1480, 1475,    0,    0, 1480,    0, 1481,    0, 1451,
     1451, 1451,    0, 1474,    0,    0, 1481,    0, 1475, 1482,
        0, 1480, 1481,    0,    0,    0, 1481,    0, 1482,    0,
        0,    0,    0,    0, 1482,    0,    0,    0, 1482,    0,
        0,    0, 1481, 1474, 1474, 1474, 1488,    0, 1475, 1475,
     1475, 1480, 1480, 1480, 1482, 1488,    0,    0,    0,    0,
     1489, 1488,    0,    0,    0, 1488,    0,    0, 1490, 1489,

        0,    0, 1481, 1481, 1481, 1489,    0, 1490,    0, 1489,
        0, 1488,    0, 1490, 1482, 1482, 1482, 1490,    0,    0,
        0,    0,    0,    0,    0, 1489,    0,    0,    0,    0,
        0,    0,    0, 1490,    0,    0,    0,    0,    0,    0,
        0, 1488, 1488, 1488,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1489, 1489, 1489,    0,    0,
        0,    0,    0, 1490, 1490, 1490, 1532, 1532, 1532, 1532,
     1532, 1532, 1532,    0, 1532,    0, 1532, 1532, 1532, 1532,
     1532, 1532, 1532, 1532, 1532, 1544, 1544, 1544, 1544, 1544,
        0, 1544, 1544,    0, 1544, 1544, 1544,    0,    0, 1544,

        0, 1544,    0,    0,    0,    0,    0, 1544, 1544,    0,
        0, 1544,    0,    0, 1574,    0,    0,    0,    0,    0,
        0,    0,    0, 1574, 1544,    0, 1544, 1544, 1544, 1574,
        0,    0,    0, 1574,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1574,
        0, 1544, 1544, 1544,    0, 1544, 1544, 1544, 1544, 1544,
     1546, 1546, 1546, 1546, 1546,    0, 1546, 1546,    0, 1546,
     1546, 1546,    0,    0, 1546,    0, 1546,    0,    0, 1574,
     1574, 1574, 1546, 1546,    0,    0, 1546,    0,    0, 1575,
        0,    0,    0,    0,    0,    0,    0,    0, 1575, 1546,

        0, 1546, 1546, 1546, 1575,    0,    0,    0, 1575,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1575,    0, 1546, 1546, 1546,    0,
     1546, 1546, 1546, 1546, 1546, 1552, 1552, 1552, 1552, 1552,
        0, 1552, 1552,    0, 1552, 1552, 1552,    0,    0, 1552,
        0, 1552,    0,    0, 1575, 1575, 1575, 1552, 1552,    0,
        0, 1552,    0,    0, 1576,    0,    0,    0,    0,    0,
        0,    0,    0, 1576, 1552,    0, 1552, 1552, 1552, 1576,
        0,    0,    0, 1576,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1576,

        0, 1552, 1552, 1552,    0, 1552, 1552, 1552, 1552, 1552,
     1556, 1556, 1556, 1556, 1556,    0, 1556, 1556,    0, 1556,
     1556, 1556,    0,    0, 1556,    0, 1556,    0,    0, 1576,
     1576, 1576, 1556, 1556,    0,    0, 1556,    0,    0, 1583,
        0,    0,    0,    0,    0,    0,    0,    0, 1583, 1556,
        0, 1556, 1556, 1556, 1583,    0,    0,    0, 1583,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1583,    0, 1556, 1556, 1556,    0,
     1556, 1556, 1556, 1556, 1556, 1557, 1557, 1557, 1557, 1557,
        0, 1557, 1557,    0, 1557, 1557, 1557,    0,    0, 1557,

     1584, 1557,    0,    0, 1583, 1583, 1583, 1557, 1557, 1584,
        0, 1557,    0,    0,    0, 1584,    0,    0,    0, 1584,
        0,    0,    0,    0, 1557,    0, 1557, 1557, 1557,    0,
        0,    0,    0,    0,    0, 1584,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1557, 1557, 1557,    0, 1557, 1557, 1557, 1557, 1557,
     1570,    0,    0,    0,    0, 1584, 1584, 1584, 1585, 1570,
        0, 1570, 1570, 1570, 1570, 1570,    0, 1585,    0, 1570,
        0,    0,    0, 1585,    0, 1591,    0, 1585,    0,    0,
        0,    0,    0,    0, 1591, 1570,    0,    0,    0,    0,

     1591,    0,    0, 1585, 1591,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1591,    0,    0,    0,    0, 1570, 1570, 1570, 1573,    0,
        0,    0,    0, 1585, 1585, 1585,    0, 1573,    0, 1573,
     1573, 1573, 1573, 1573,    0, 1592,    0, 1573,    0,    0,
     1591, 1591, 1591, 1593, 1592,    0,    0,    0,    0,    0,
     1592,    0, 1593, 1573, 1592,    0,    0,    0, 1593,    0,
        0,    0, 1593,    0,    0,    0,    0,    0,    0,    0,
     1592, 1620,    0,    0,    0,    0,    0,    0, 1593,    0,
     1620,    0,    0, 1573, 1573, 1573, 1620,    0,    0,    0,

     1620,    0,    0,    0,    0,    0,    0,    0, 1621,    0,
     1592, 1592, 1592,    0,    0,    0, 1620, 1621, 1593, 1593,
     1593, 1616,    0, 1621,    0,    0,    0, 1621,    0,    0,
     1616,    0, 1616, 1616, 1616, 1616, 1616,    0,    0,    0,
     1616,    0,    0, 1621, 1622,    0, 1620, 1620, 1620, 1629,
        0,    0,    0, 1622,    0,    0, 1616,    0, 1629, 1622,
        0, 1630,    0, 1622, 1629,    0,    0,    0, 1629,    0,
     1630,    0,    0, 1621, 1621, 1621, 1630,    0,    0, 1622,
     1630,    0,    0,    0, 1629,    0, 1616, 1616, 1616, 1619,
        0,    0,    0,    0,    0,    0, 1630,    0, 1619,    0,

     1619, 1619, 1619, 1619, 1619,    0,    0,    0, 1619, 1622,
     1622, 1622,    0,    0, 1629, 1629, 1629,    0,    0,    0,
        0,    0, 1631,    0, 1619, 1637, 1630, 1630, 1630,    0,
     1638, 1631,    0, 1639, 1637,    0,    0, 1631,    0, 1638,
     1637, 1631, 1639,    0, 1637, 1638,    0,    0, 1639, 1638,
        0,    0, 1639,    0, 1619, 1619, 1619, 1631,    0,    0,
     1637,    0,    0,    0,    0, 1638,    0,    0, 1639,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1631, 1631, 1631,
     1637, 1637, 1637,    0,    0, 1638, 1638, 1638, 1639, 1639,

     1639, 1674, 1674, 1674, 1674, 1674,    0, 1674, 1674,    0,
     1674, 1674, 1674,    0,    0, 1674,    0, 1674,    0,    0,
        0,    0,    0, 1674, 1674,    0,    0, 1674,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1674,    0, 1674, 1674, 1674,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1674, 1674, 1674,
        0, 1674, 1674, 1674, 1674, 1674, 1688, 1688, 1688, 1688,
     1688,    0, 1688, 1688,    0, 1688, 1688, 1688,    0,    0,
     1688,    0, 1688,    0,    0,    0,    0,    0, 1688, 1688,

        0,    0, 1688,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1688,    0, 1688, 1688, 1688,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1688, 1688, 1688,    0, 1688, 1688, 1688, 1688,
     1688, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762,
     1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762,
     1762, 1762, 1762, 1762, 1762, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1764,

     1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764,
     1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764,
     1764, 1764, 1764, 1765, 1765, 1765, 1765, 1765, 1765, 1765,
     1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765,
     1765, 1765, 1765, 1765, 1765, 1765, 1765, 1766, 1766, 1766,
     1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766,
     1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766,
     1766, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767,
     1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767,
     1767, 1767, 1767, 1767, 1767, 1768, 1768,    0,    0,    0,

     1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768,
     1768, 1768, 1768,    0, 1768, 1768, 1768, 1768, 1768, 1769,
     1769,    0, 1769,    0,    0,    0, 1769,    0, 1769, 1769,
     1770, 1770,    0,    0, 1770, 1770, 1770, 1770, 1770, 1770,
     1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770,
     1770, 1770, 1770, 1770, 1771, 1771, 1771, 1771, 1771, 1771,
     1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771,
     1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1772,    0,
     1772,    0,    0, 1772, 1772,    0, 1772,    0, 1772, 1772,
        0, 1772, 1772, 1772, 1772, 1772, 1772, 1773,    0, 1773,

        0,    0, 1773, 1773,    0, 1773,    0, 1773, 1773,    0,
     1773, 1773, 1773, 1773, 1773, 1773, 1774,    0, 1774,    0,
        0, 1774, 1774,    0,    0,    0, 1774, 1774,    0,    0,
     1774,    0, 1774, 1774, 1774, 1775,    0, 1775,    0,    0,
     1775, 1775,    0, 1775, 1775, 1775, 1775,    0, 1775, 1775,
     1775, 1775, 1775, 1775, 1776,    0, 1776,    0,    0, 1776,
     1776,    0, 1776, 1776, 1776, 1776,    0, 1776, 1776, 1776,
     1776, 1776, 1776, 1777,    0, 1777,    0,    0, 1777, 1777,
        0,    0, 1777, 1777, 1777,    0,    0, 1777,    0, 1777,
     1777, 1777, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,

     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1779,    0,    0,    0,
     1779,    0, 1779, 1779, 1780, 1780, 1780,    0, 1780, 1780,
        0,    0, 1780,    0,    0, 1780, 1780, 1780, 1780, 1780,
     1781,    0,    0,    0,    0, 1781,    0, 1781, 1781,    0,
        0, 1781,    0, 1781, 1781, 1781,    0, 1781, 1781, 1781,
        0, 1781, 1781, 1781, 1782, 1782,    0, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1783, 1783,
        0, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783,

     1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783,
     1783, 1783, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1786,    0, 1786,    0,
        0, 1786, 1786,    0,    0, 1786, 1786, 1786,    0,    0,
     1786, 1786, 1786, 1786, 1786, 1787, 1787,    0, 1787,    0,
        0,    0, 1787,    0, 1787, 1787, 1788, 1788,    0,    0,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1790,    0, 1790,    0,    0, 1790, 1790,    0, 1790,    0,

     1790, 1790,    0, 1790, 1790, 1790, 1790, 1790, 1790, 1791,
        0, 1791,    0,    0, 1791, 1791,    0, 1791,    0, 1791,
     1791,    0, 1791, 1791, 1791, 1791, 1791, 1791, 1792,    0,
     1792,    0,    0, 1792, 1792,    0, 1792,    0, 1792, 1792,
        0, 1792, 1792, 1792, 1792, 1792, 1792, 1793,    0, 1793,
        0,    0, 1793, 1793,    0,    0,    0, 1793, 1793,    0,
        0, 1793,    0, 1793, 1793, 1793, 1794,    0, 1794,    0,
        0, 1794, 1794,    0, 1794,    0, 1794, 1794,    0, 1794,
     1794, 1794, 1794, 1794, 1794, 1795,    0, 1795,    0,    0,
     1795, 1795, 1795, 1795,    0, 1795, 1795,    0, 1795, 1795,

        0, 1795, 1795, 1795, 1796,    0, 1796,    0,    0, 1796,
     1796,    0, 1796,    0, 1796, 1796,    0, 1796, 1796, 1796,
     1796, 1796, 1796, 1797,    0, 1797,    0,    0, 1797, 1797,
        0, 1797,    0, 1797, 1797,    0, 1797, 1797, 1797, 1797,
     1797, 1797, 1798,    0, 1798,    0,    0, 1798, 1798,    0,
        0,    0, 1798,    0,    0,    0, 1798, 1798, 1798, 1798,
     1798, 1799,    0, 1799,    0,    0, 1799, 1799,    0, 1799,
        0, 1799, 1799,    0, 1799, 1799, 1799, 1799, 1799, 1799,
     1800,    0, 1800,    0,    0, 1800, 1800,    0, 1800, 1800,
     1800, 1800,    0, 1800, 1800, 1800, 1800, 1800, 1800, 1801,

        0, 1801,    0,    0, 1801, 1801,    0, 1801, 1801, 1801,
     1801,    0, 1801, 1801, 1801, 1801, 1801, 1801, 1802,    0,
     1802,    0,    0, 1802, 1802,    0, 1802, 1802, 1802, 1802,
        0, 1802, 1802, 1802, 1802, 1802, 1802, 1803,    0, 1803,
        0,    0, 1803, 1803,    0,    0, 1803, 1803, 1803,    0,
        0, 1803,    0, 1803, 1803, 1803, 1804,    0, 1804,    0,
        0, 1804, 1804,    0, 1804, 1804, 1804, 1804,    0, 1804,
     1804, 1804, 1804, 1804, 1804, 1805,    0, 1805,    0,    0,
     1805, 1805, 1805, 1805, 1805, 1805, 1805,    0, 1805, 1805,
        0, 1805, 1805, 1805, 1806,    0, 1806,    0,    0, 1806,

     1806,    0, 1806, 1806, 1806, 1806,    0, 1806, 1806, 1806,
     1806, 1806, 1806, 1807,    0, 1807,    0,    0, 1807, 1807,
        0, 1807, 1807, 1807, 1807,    0, 1807, 1807, 1807, 1807,
     1807, 1807, 1808,    0, 1808,    0,    0, 1808, 1808,    0,
        0, 1808, 1808,    0,    0,    0, 1808, 1808, 1808, 1808,
     1808, 1809,    0, 1809,    0,    0, 1809, 1809,    0, 1809,
     1809, 1809, 1809,    0, 1809, 1809, 1809, 1809, 1809, 1809,
     1812,    0,    0,    0, 1812,    0, 1812, 1812, 1813,    0,
        0,    0, 1813,    0, 1813, 1813, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,    0,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1816, 1816,    0, 1816,    0,    0,    0, 1816,    0, 1816,
     1816, 1817,    0,    0,    0,    0, 1817,    0, 1817, 1817,
        0,    0, 1817,    0, 1817, 1817, 1817,    0, 1817, 1817,
     1817,    0, 1817, 1817, 1817, 1819, 1819,    0, 1819, 1819,
     1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819,
     1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1820,
     1820,    0,    0,    0, 1820, 1820, 1820, 1820, 1820, 1820,
     1820, 1820, 1820, 1820, 1820, 1820, 1820,    0, 1820, 1820,
     1820, 1820, 1820, 1821, 1821, 1821, 1821, 1821, 1821, 1821,

     1821, 1821, 1821, 1821, 1821, 1821, 1821, 1821, 1821, 1821,
     1821, 1821, 1821, 1821, 1821, 1821, 1821, 1822,    0,    0,
        0, 1822,    0, 1822, 1822, 1823,    0,    0, 1823,    0,
        0,    0, 1823,    0, 1823, 1823, 1825,    0, 1825,    0,
        0, 1825, 1825,    0,    0, 1825, 1825, 1825,    0,    0,
     1825, 1825, 1825, 1825, 1825, 1826,    0, 1826,    0,    0,
        0, 1826,    0, 1826, 1826, 1828,    0, 1828,    0,    0,
     1828, 1828,    0,    0,    0, 1828, 1828,    0, 1828, 1828,
        0, 1828, 1828, 1828, 1829,    0, 1829,    0,    0, 1829,
     1829,    0, 1829,    0, 1829, 1829,    0, 1829, 1829, 1829,

     1829, 1829, 1829, 1830,    0, 1830,    0,    0, 1830, 1830,
        0, 1830,    0, 1830, 1830,    0, 1830, 1830, 1830, 1830,
     1830, 1830, 1831,    0, 1831,    0,    0, 1831, 1831,    0,
     1831,    0, 1831, 1831,    0, 1831, 1831, 1831, 1831, 1831,
     1831, 1832,    0, 1832,    0,    0, 1832, 1832,    0, 1832,
        0, 1832, 1832,    0, 1832, 1832, 1832, 1832, 1832, 1832,
     1833,    0, 1833,    0,    0, 1833, 1833,    0,    0,    0,
     1833, 1833,    0,    0, 1833, 1833, 1833, 1833, 1833, 1834,
        0, 1834,    0,    0, 1834, 1834,    0,    0,    0, 1834,
        0,    0,    0, 1834, 1834, 1834, 1834, 1834, 1835,    0,

     1835,    0,    0, 1835, 1835,    0, 1835,    0, 1835, 1835,
        0, 1835, 1835, 1835, 1835, 1835, 1835, 1836,    0, 1836,
        0,    0, 1836, 1836,    0, 1836,    0, 1836, 1836,    0,
     1836, 1836, 1836, 1836, 1836, 1836, 1837,    0, 1837,    0,
        0, 1837, 1837,    0,    0,    0, 1837, 1837,    0,    0,
     1837, 1837, 1837, 1837, 1837, 1838,    0, 1838,    0,    0,
     1838, 1838, 1838, 1838,    0, 1838, 1838,    0, 1838, 1838,
     1838, 1838, 1838, 1838, 1839,    0, 1839,    0,    0, 1839,
     1839,    0,    0,    0, 1839,    0,    0,    0, 1839, 1839,
     1839, 1839, 1839, 1840,    0, 1840,    0,    0, 1840, 1840,

        0,    0,    0, 1840, 1840,    0,    0, 1840,    0, 1840,
     1840, 1840, 1841,    0, 1841,    0,    0, 1841, 1841,    0,
     1841,    0, 1841, 1841,    0, 1841, 1841, 1841, 1841, 1841,
     1841, 1842,    0, 1842,    0,    0, 1842, 1842,    0, 1842,
        0, 1842, 1842,    0, 1842, 1842, 1842, 1842, 1842, 1842,
     1843,    0, 1843,    0,    0, 1843, 1843,    0,    0,    0,
     1843,    0,    0,    0, 1843, 1843, 1843, 1843, 1843, 1844,
        0, 1844,    0,    0, 1844, 1844,    0,    0,    0, 1844,
        0,    0,    0, 1844, 1844, 1844, 1844, 1844, 1845,    0,
     1845,    0,    0, 1845, 1845,    0, 1845,    0, 1845, 1845,

        0, 1845, 1845, 1845, 1845, 1845, 1845, 1846,    0, 1846,
        0,    0, 1846, 1846,    0, 1846,    0, 1846, 1846,    0,
     1846, 1846, 1846, 1846, 1846, 1846, 1847,    0, 1847,    0,
        0, 1847, 1847,    0,    0, 1847, 1847, 1847,    0, 1847,
     1847,    0, 1847, 1847, 1847, 1848,    0, 1848,    0,    0,
     1848, 1848,    0, 1848, 1848, 1848, 1848,    0, 1848, 1848,
     1848, 1848, 1848, 1848, 1849,    0, 1849,    0,    0, 1849,
     1849,    0, 1849, 1849, 1849, 1849,    0, 1849, 1849, 1849,
     1849, 1849, 1849, 1850,    0, 1850,    0,    0, 1850, 1850,
        0, 1850, 1850, 1850, 1850,    0, 1850, 1850, 1850, 1850,

     1850, 1850, 1851,    0, 1851,    0,    0, 1851, 1851,    0,
     1851, 1851, 1851, 1851,    0, 1851, 1851, 1851, 1851, 1851,
     1851, 1852,    0, 1852,    0,    0, 1852, 1852,    0,    0,
     1852, 1852, 1852,    0,    0, 1852, 1852, 1852, 1852, 1852,
     1853,    0, 1853,    0,    0, 1853, 1853,    0,    0, 1853,
     1853,    0,    0,    0, 1853, 1853, 1853, 1853, 1853, 1854,
        0, 1854,    0,    0, 1854, 1854,    0, 1854, 1854, 1854,
     1854,    0, 1854, 1854, 1854, 1854, 1854, 1854, 1855,    0,
     1855,    0,    0, 1855, 1855,    0, 1855, 1855, 1855, 1855,
        0, 1855, 1855, 1855, 1855, 1855, 1855, 1856,    0, 1856,

        0,    0, 1856, 1856,    0,    0, 1856, 1856, 1856,    0,
        0, 1856, 1856, 1856, 1856, 1856, 1857,    0, 1857,    0,
        0, 1857, 1857, 1857, 1857, 1857, 1857, 1857,    0, 1857,
     1857, 1857, 1857, 1857, 1857, 1858,    0, 1858,    0,    0,
     1858, 1858,    0,    0, 1858, 1858,    0,    0,    0, 1858,
     1858, 1858, 1858, 1858, 1859,    0, 1859,    0,    0, 1859,
     1859,    0,    0, 1859, 1859, 1859,    0,    0, 1859,    0,
     1859, 1859, 1859, 1860,    0, 1860,    0,    0, 1860, 1860,
        0, 1860, 1860, 1860, 1860,    0, 1860, 1860, 1860, 1860,
     1860, 1860, 1861,    0, 1861,    0,    0, 1861, 1861,    0,

     1861, 1861, 1861, 1861,    0, 1861, 1861, 1861, 1861, 1861,
     1861, 1862,    0, 1862,    0,    0, 1862, 1862,    0,    0,
     1862, 1862,    0,    0,    0, 1862, 1862, 1862, 1862, 1862,
     1863,    0, 1863,    0,    0, 1863, 1863,    0,    0, 1863,
     1863,    0,    0,    0, 1863, 1863, 1863, 1863, 1863, 1864,
        0, 1864,    0,    0, 1864, 1864,    0, 1864, 1864, 1864,
     1864,    0, 1864, 1864, 1864, 1864, 1864, 1864, 1865,    0,
     1865,    0,    0, 1865, 1865,    0, 1865, 1865, 1865, 1865,
        0, 1865, 1865, 1865, 1865, 1865, 1865, 1869,    0,    0,
     1869,    0,    0,    0, 1869,    0, 1869, 1869, 1871, 1871,

     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871,    0, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1872,    0,    0,    0,    0, 1872,    0, 1872,
     1872,    0,    0, 1872,    0, 1872, 1872, 1872,    0, 1872,
     1872, 1872,    0, 1872, 1872, 1872, 1875, 1875,    0, 1875,
        0,    0,    0, 1875,    0, 1875, 1875, 1877, 1877, 1877,
     1877, 1877,    0, 1877, 1877, 1877, 1877,    0,    0, 1877,
     1877,    0,    0, 1877, 1877, 1877,    0, 1877,    0,    0,
     1877, 1878,    0,    0, 1878, 1878,    0, 1878,    0,    0,
     1878, 1878,    0,    0, 1878, 1878, 1878,    0,    0, 1878,

     1878, 1878, 1878, 1878, 1879,    0, 1879,    0,    0,    0,
     1879,    0, 1879, 1879, 1880,    0, 1880,    0,    0, 1880,
     1880, 1880, 1880,    0, 1880, 1880,    0, 1880, 1880, 1880,
     1880, 1880, 1880, 1881,    0, 1881,    0,    0, 1881, 1881,
        0,    0,    0, 1881, 1881,    0,    0, 1881, 1881, 1881,
     1881, 1881, 1882,    0, 1882,    0,    0, 1882, 1882,    0,
     1882,    0, 1882, 1882,    0, 1882, 1882,    0, 1882, 1882,
     1882, 1883,    0, 1883,    0,    0, 1883, 1883,    0, 1883,
        0, 1883, 1883,    0, 1883, 1883, 1883, 1883, 1883, 1883,
     1884,    0, 1884,    0,    0, 1884, 1884,    0, 1884,    0,

     1884, 1884,    0, 1884, 1884, 1884, 1884, 1884, 1884, 1885,
        0, 1885,    0,    0, 1885, 1885,    0, 1885,    0, 1885,
     1885,    0, 1885, 1885, 1885, 1885, 1885, 1885, 1886,    0,
     1886,    0,    0, 1886, 1886,    0,    0,    0, 1886, 1886,
        0,    0, 1886, 1886, 1886, 1886, 1886, 1887,    0, 1887,
        0,    0, 1887, 1887,    0,    0,    0, 1887,    0,    0,
        0, 1887, 1887, 1887, 1887, 1887, 1888,    0, 1888,    0,
        0, 1888, 1888,    0,    0,    0, 1888,    0,    0,    0,
     1888, 1888, 1888, 1888, 1888, 1889,    0, 1889,    0,    0,
     1889, 1889,    0, 1889,    0, 1889, 1889,    0, 1889, 1889,

     1889, 1889, 1889, 1889, 1890,    0, 1890,    0,    0, 1890,
     1890,    0,    0,    0, 1890,    0,    0,    0, 1890, 1890,
     1890, 1890, 1890, 1891,    0, 1891,    0,    0, 1891, 1891,
        0,    0,    0, 1891,    0,    0,    0, 1891, 1891, 1891,
     1891, 1891, 1892,    0, 1892,    0,    0, 1892, 1892,    0,
        0,    0, 1892,    0,    0,    0, 1892, 1892, 1892, 1892,
     1892, 1893,    0, 1893,    0,    0, 1893, 1893,    0,    0,
        0, 1893,    0,    0,    0, 1893, 1893, 1893, 1893, 1893,
     1894,    0, 1894,    0,    0, 1894, 1894,    0,    0,    0,
     1894, 1894,    0,    0, 1894, 1894, 1894, 1894, 1894, 1895,

        0, 1895,    0,    0, 1895, 1895,    0, 1895,    0, 1895,
     1895,    0, 1895, 1895, 1895, 1895, 1895, 1895, 1896,    0,
     1896,    0,    0, 1896, 1896,    0, 1896,    0, 1896, 1896,
        0, 1896, 1896, 1896, 1896, 1896, 1896, 1897,    0, 1897,
        0,    0, 1897, 1897,    0, 1897,    0, 1897, 1897,    0,
     1897, 1897, 1897, 1897, 1897, 1897, 1898,    0, 1898,    0,
        0, 1898, 1898,    0, 1898,    0, 1898, 1898,    0, 1898,
     1898, 1898, 1898, 1898, 1898, 1899,    0, 1899,    0,    0,
     1899, 1899,    0,    0,    0, 1899, 1899,    0,    0, 1899,
        0, 1899, 1899, 1899, 1900,    0, 1900,    0,    0, 1900,

     1900,    0,    0,    0, 1900,    0,    0,    0, 1900, 1900,
     1900, 1900, 1900, 1901,    0, 1901,    0,    0, 1901, 1901,
        0, 1901,    0, 1901, 1901,    0, 1901, 1901, 1901, 1901,
     1901, 1901, 1902,    0, 1902,    0,    0, 1902, 1902, 1902,
     1902, 1902, 1902, 1902,    0, 1902, 1902, 1902, 1902, 1902,
     1902, 1903,    0, 1903,    0,    0, 1903, 1903,    0,    0,
     1903, 1903, 1903,    0,    0, 1903, 1903, 1903, 1903, 1903,
     1904,    0, 1904,    0,    0, 1904, 1904,    0, 1904, 1904,
     1904, 1904,    0, 1904, 1904,    0, 1904, 1904, 1904, 1905,
        0, 1905,    0,    0, 1905, 1905,    0, 1905, 1905, 1905,

     1905,    0, 1905, 1905, 1905, 1905, 1905, 1905, 1906,    0,
     1906,    0,    0, 1906, 1906,    0, 1906, 1906, 1906, 1906,
        0, 1906, 1906, 1906, 1906, 1906, 1906, 1907,    0, 1907,
        0,    0, 1907, 1907,    0, 1907, 1907, 1907, 1907,    0,
     1907, 1907, 1907, 1907, 1907, 1907, 1908,    0, 1908,    0,
        0, 1908, 1908,    0,    0, 1908, 1908, 1908,    0,    0,
     1908, 1908, 1908, 1908, 1908, 1909,    0, 1909,    0,    0,
     1909, 1909,    0,    0, 1909, 1909,    0,    0,    0, 1909,
     1909, 1909, 1909, 1909, 1910,    0, 1910,    0,    0, 1910,
     1910,    0,    0, 1910, 1910,    0,    0,    0, 1910, 1910,

     1910, 1910, 1910, 1911,    0, 1911,    0,    0, 1911, 1911,
        0, 1911, 1911, 1911, 1911,    0, 1911, 1911, 1911, 1911,
     1911, 1911, 1912,    0, 1912,    0,    0, 1912, 1912,    0,
        0, 1912, 1912,    0,    0,    0, 1912, 1912, 1912, 1912,
     1912, 1913,    0, 1913,    0,    0, 1913, 1913,    0,    0,
     1913, 1913,    0,    0,    0, 1913, 1913, 1913, 1913, 1913,
     1914,    0, 1914,    0,    0, 1914, 1914,    0,    0, 1914,
     1914,    0,    0,    0, 1914, 1914, 1914, 1914, 1914, 1915,
        0, 1915,    0,    0, 1915, 1915,    0,    0, 1915, 1915,
        0,    0,    0, 1915, 1915, 1915, 1915, 1915, 1916,    0,

     1916,    0,    0, 1916, 1916,    0,    0, 1916, 1916, 1916,
        0,    0, 1916, 1916, 1916, 1916, 1916, 1917,    0, 1917,
        0,    0, 1917, 1917,    0, 1917, 1917, 1917, 1917,    0,
     1917, 1917, 1917, 1917, 1917, 1917, 1918,    0, 1918,    0,
        0, 1918, 1918,    0, 1918, 1918, 1918, 1918,    0, 1918,
     1918, 1918, 1918, 1918, 1918, 1919,    0, 1919,    0,    0,
     1919, 1919,    0, 1919, 1919, 1919, 1919,    0, 1919, 1919,
     1919, 1919, 1919, 1919, 1920,    0, 1920,    0,    0, 1920,
     1920,    0, 1920, 1920, 1920, 1920,    0, 1920, 1920, 1920,
     1920, 1920, 1920, 1921,    0, 1921,    0,    0, 1921, 1921,

        0,    0, 1921, 1921, 1921,    0,    0, 1921,    0, 1921,
     1921, 1921, 1922,    0, 1922,    0,    0, 1922, 1922,    0,
        0, 1922, 1922,    0,    0,    0, 1922, 1922, 1922, 1922,
     1922, 1923,    0, 1923,    0,    0, 1923, 1923,    0, 1923,
     1923, 1923, 1923,    0, 1923, 1923, 1923, 1923, 1923, 1923,
     1925,    0,    0, 1925,    0,    0,    0, 1925,    0, 1925,
     1925, 1926,    0,    0,    0,    0, 1926,    0, 1926, 1926,
        0,    0, 1926,    0, 1926, 1926, 1926,    0, 1926, 1926,
     1926,    0, 1926, 1926, 1926, 1929,    0,    0,    0, 1929,
        0, 1929, 1929, 1930, 1930, 1930, 1930, 1930,    0, 1930,

     1930, 1930, 1930,    0,    0, 1930, 1930,    0,    0, 1930,
     1930, 1930,    0, 1930,    0, 1930, 1930, 1931, 1931, 1931,
     1931, 1931,    0, 1931, 1931, 1931, 1931,    0,    0, 1931,
     1931,    0,    0, 1931, 1931, 1931,    0, 1931, 1931,    0,
     1931, 1932,    0, 1932,    0,    0, 1932, 1932,    0,    0,
     1932, 1932, 1932,    0,    0, 1932, 1932, 1932, 1932, 1932,
     1933,    0, 1933,    0,    0, 1933, 1933,    0,    0,    0,
     1933, 1933,    0, 1933, 1933,    0, 1933, 1933, 1933, 1934,
        0, 1934,    0,    0, 1934, 1934,    0, 1934,    0, 1934,
     1934,    0, 1934, 1934, 1934, 1934, 1934, 1934, 1935,    0,

     1935,    0,    0, 1935, 1935,    0, 1935,    0, 1935, 1935,
        0, 1935, 1935, 1935, 1935, 1935, 1935, 1936,    0, 1936,
        0,    0, 1936, 1936,    0,    0,    0, 1936,    0,    0,
        0, 1936, 1936, 1936, 1936, 1936, 1937,    0, 1937,    0,
        0, 1937, 1937,    0,    0,    0, 1937,    0,    0,    0,
     1937, 1937, 1937, 1937, 1937, 1938,    0, 1938,    0,    0,
     1938, 1938,    0,    0,    0, 1938,    0,    0,    0, 1938,
     1938, 1938, 1938, 1938, 1939,    0, 1939,    0,    0, 1939,
     1939,    0,    0,    0, 1939, 1939,    0,    0, 1939, 1939,
     1939, 1939, 1939, 1940,    0, 1940,    0,    0, 1940, 1940,

        0,    0,    0, 1940,    0,    0,    0, 1940, 1940, 1940,
     1940, 1940, 1941,    0, 1941,    0,    0, 1941, 1941,    0,
        0,    0, 1941, 1941,    0,    0, 1941, 1941, 1941, 1941,
     1941, 1942,    0, 1942,    0,    0, 1942, 1942,    0, 1942,
        0, 1942, 1942,    0, 1942, 1942, 1942, 1942, 1942, 1942,
     1943,    0, 1943,    0,    0, 1943, 1943,    0, 1943,    0,
     1943, 1943,    0, 1943, 1943, 1943, 1943, 1943, 1943, 1944,
        0, 1944,    0,    0, 1944, 1944,    0, 1944,    0, 1944,
     1944,    0, 1944, 1944, 1944, 1944, 1944, 1944, 1945,    0,
     1945,    0,    0, 1945, 1945,    0, 1945,    0, 1945, 1945,

        0, 1945, 1945, 1945, 1945, 1945, 1945, 1946,    0, 1946,
        0,    0, 1946, 1946,    0, 1946,    0, 1946, 1946,    0,
     1946, 1946, 1946, 1946, 1946, 1946, 1947,    0, 1947,    0,
        0, 1947, 1947,    0, 1947,    0, 1947, 1947,    0, 1947,
     1947, 1947, 1947, 1947, 1947, 1948,    0, 1948,    0,    0,
     1948, 1948,    0, 1948,    0, 1948, 1948,    0, 1948, 1948,
     1948, 1948, 1948, 1948, 1949,    0, 1949,    0,    0, 1949,
     1949,    0,    0,    0, 1949, 1949,    0,    0, 1949, 1949,
     1949, 1949, 1949, 1950,    0, 1950,    0,    0, 1950, 1950,
        0,    0,    0, 1950,    0,    0,    0, 1950, 1950, 1950,

     1950, 1950, 1951,    0, 1951,    0,    0, 1951, 1951,    0,
        0, 1951, 1951, 1951,    0, 1951, 1951,    0, 1951, 1951,
     1951, 1952,    0, 1952,    0,    0, 1952, 1952,    0, 1952,
     1952, 1952, 1952,    0, 1952, 1952, 1952, 1952, 1952, 1952,
     1953,    0, 1953,    0,    0, 1953, 1953,    0, 1953, 1953,
     1953, 1953,    0, 1953, 1953, 1953, 1953, 1953, 1953, 1954,
        0, 1954,    0,    0, 1954, 1954,    0,    0, 1954, 1954,
        0,    0,    0, 1954, 1954, 1954, 1954, 1954, 1955,    0,
     1955,    0,    0, 1955, 1955,    0,    0, 1955, 1955,    0,
        0,    0, 1955, 1955, 1955, 1955, 1955, 1956,    0, 1956,

        0,    0, 1956, 1956,    0,    0, 1956, 1956,    0,    0,
        0, 1956, 1956, 1956, 1956, 1956, 1957,    0, 1957,    0,
        0, 1957, 1957,    0,    0, 1957, 1957, 1957,    0,    0,
     1957, 1957, 1957, 1957, 1957, 1958,    0, 1958,    0,    0,
     1958, 1958,    0,    0, 1958, 1958,    0,    0,    0, 1958,
     1958, 1958, 1958, 1958, 1959,    0, 1959,    0,    0, 1959,
     1959,    0,    0, 1959, 1959, 1959,    0,    0, 1959, 1959,
     1959, 1959, 1959, 1960,    0, 1960,    0,    0, 1960, 1960,
        0, 1960, 1960, 1960, 1960,    0, 1960, 1960, 1960, 1960,
     1960, 1960, 1961,    0, 1961,    0,    0, 1961, 1961,    0,

     1961, 1961, 1961, 1961,    0, 1961, 1961, 1961, 1961, 1961,
     1961, 1962,    0, 1962,    0,    0, 1962, 1962,    0, 1962,
     1962, 1962, 1962,    0, 1962, 1962, 1962, 1962, 1962, 1962,
     1963,    0, 1963,    0,    0, 1963, 1963,    0, 1963, 1963,
     1963, 1963,    0, 1963, 1963, 1963, 1963, 1963, 1963, 1964,
        0, 1964,    0,    0, 1964, 1964,    0, 1964, 1964, 1964,
     1964,    0, 1964, 1964, 1964, 1964, 1964, 1964, 1965,    0,
     1965,    0,    0, 1965, 1965,    0, 1965, 1965, 1965, 1965,
        0, 1965, 1965, 1965, 1965, 1965, 1965, 1966,    0, 1966,
        0,    0, 1966, 1966,    0, 1966, 1966, 1966, 1966,    0,

     1966, 1966, 1966, 1966, 1966, 1966, 1967,    0, 1967,    0,
        0, 1967, 1967,    0,    0, 1967, 1967, 1967,    0,    0,
     1967, 1967, 1967, 1967, 1967, 1968,    0, 1968,    0,    0,
     1968, 1968,    0,    0, 1968, 1968,    0,    0,    0, 1968,
     1968, 1968, 1968, 1968, 1969, 1969, 1969,    0, 1969, 1969,
     1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969,
     1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969, 1972, 1972,
        0, 1972,    0,    0,    0, 1972,    0, 1972, 1972, 1973,
     1973, 1973, 1973, 1973,    0, 1973, 1973, 1973, 1973,    0,
        0, 1973, 1973,    0,    0, 1973, 1973, 1973,    0, 1973,

     1973,    0, 1973, 1974, 1974, 1974, 1974, 1974,    0, 1974,
     1974, 1974, 1974,    0,    0, 1974, 1974,    0,    0, 1974,
     1974, 1974,    0, 1974,    0,    0, 1974, 1975, 1975, 1975,
     1975, 1975,    0, 1975, 1975, 1975, 1975,    0,    0, 1975,
     1975,    0,    0, 1975, 1975, 1975,    0, 1975,    0,    0,
     1975, 1976, 1976, 1976, 1976, 1976,    0, 1976, 1976, 1976,
     1976,    0,    0, 1976, 1976,    0,    0, 1976, 1976, 1976,
        0, 1976,    0,    0, 1976, 1977, 1977, 1977, 1977, 1977,
        0, 1977, 1977, 1977, 1977,    0,    0, 1977, 1977,    0,
        0, 1977, 1977, 1977,    0, 1977,    0,    0, 1977, 1978,

     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1979,    0, 1979,    0,    0, 1979, 1979,
     1979, 1979,    0, 1979, 1979,    0, 1979, 1979, 1979, 1979,
     1979, 1979, 1980,    0, 1980,    0,    0, 1980, 1980,    0,
        0,    0, 1980, 1980,    0,    0, 1980, 1980, 1980, 1980,
     1980, 1981,    0, 1981,    0,    0, 1981, 1981,    0, 1981,
        0, 1981, 1981,    0, 1981, 1981, 1981, 1981, 1981, 1981,
     1982,    0, 1982,    0,    0, 1982, 1982,    0, 1982,    0,
     1982, 1982,    0, 1982, 1982, 1982, 1982, 1982, 1982, 1983,

        0, 1983,    0,    0, 1983, 1983,    0, 1983,    0, 1983,
     1983,    0, 1983, 1983, 1983, 1983, 1983, 1983, 1984,    0,
     1984,    0,    0, 1984, 1984,    0, 1984,    0, 1984, 1984,
        0, 1984, 1984, 1984, 1984, 1984, 1984, 1985,    0, 1985,
        0,    0, 1985, 1985,    0, 1985,    0, 1985, 1985,    0,
     1985, 1985, 1985, 1985, 1985, 1985, 1986,    0, 1986,    0,
        0, 1986, 1986,    0, 1986,    0, 1986, 1986,    0, 1986,
     1986, 1986, 1986, 1986, 1986, 1987,    0, 1987,    0,    0,
     1987, 1987,    0, 1987,    0, 1987, 1987,    0, 1987, 1987,
     1987, 1987, 1987, 1987, 1988,    0, 1988,    0,    0, 1988,

     1988,    0,    0,    0, 1988, 1988,    0,    0, 1988, 1988,
     1988, 1988, 1988, 1989,    0, 1989,    0,    0, 1989, 1989,
        0,    0,    0, 1989,    0,    0,    0, 1989, 1989, 1989,
     1989, 1989, 1990,    0, 1990,    0,    0, 1990, 1990,    0,
        0,    0, 1990,    0,    0,    0, 1990, 1990, 1990, 1990,
     1990, 1991,    0, 1991,    0,    0, 1991, 1991, 1991, 1991,
     1991, 1991, 1991,    0, 1991, 1991, 1991, 1991, 1991, 1991,
     1992,    0, 1992,    0,    0, 1992, 1992,    0,    0, 1992,
     1992, 1992,    0,    0, 1992, 1992, 1992, 1992, 1992, 1993,
        0, 1993,    0,    0, 1993, 1993,    0, 1993, 1993, 1993,

     1993,    0, 1993, 1993, 1993, 1993, 1993, 1993, 1994,    0,
     1994,    0,    0, 1994, 1994,    0, 1994, 1994, 1994, 1994,
        0, 1994, 1994, 1994, 1994, 1994, 1994, 1995,    0, 1995,
        0,    0, 1995, 1995,    0, 1995, 1995, 1995, 1995,    0,
     1995, 1995, 1995, 1995, 1995, 1995, 1996,    0, 1996,    0,
        0, 1996, 1996,    0, 1996, 1996, 1996, 1996,    0, 1996,
     1996, 1996, 1996, 1996, 1996, 1997,    0, 1997,    0,    0,
     1997, 1997,    0, 1997, 1997, 1997, 1997,    0, 1997, 1997,
     1997, 1997, 1997, 1997, 1998,    0, 1998,    0,    0, 1998,
     1998,    0, 1998, 1998, 1998, 1998,    0, 1998, 1998, 1998,

     1998, 1998, 1998, 1999,    0, 1999,    0,    0, 1999, 1999,
        0, 1999, 1999, 1999, 1999,    0, 1999, 1999, 1999, 1999,
     1999, 1999, 2000,    0, 2000,    0,    0, 2000, 2000,    0,
        0, 2000, 2000, 2000,    0,    0, 2000, 2000, 2000, 2000,
     2000, 2001,    0, 2001,    0,    0, 2001, 2001,    0,    0,
     2001, 2001,    0,    0,    0, 2001, 2001, 2001, 2001, 2001,
     2002,    0, 2002,    0,    0, 2002, 2002,    0,    0, 2002,
     2002,    0,    0,    0, 2002, 2002, 2002, 2002, 2002, 2003,
     2003, 2003, 2003, 2003,    0, 2003, 2003, 2003, 2003,    0,
        0, 2003, 2003,    0,    0, 2003, 2003, 2003,    0, 2003,

        0,    0, 2003, 2004, 2004, 2004, 2004, 2004,    0, 2004,
     2004, 2004, 2004,    0,    0, 2004, 2004,    0,    0, 2004,
     2004, 2004,    0, 2004,    0,    0, 2004, 2005, 2005, 2005,
     2005, 2005,    0, 2005, 2005, 2005, 2005,    0,    0, 2005,
     2005,    0,    0, 2005, 2005, 2005,    0, 2005,    0,    0,
     2005, 2006,    0, 2006,    0,    0, 2006, 2006,    0,    0,
     2006, 2006, 2006,    0,    0, 2006, 2006, 2006, 2006, 2006,
     2007,    0, 2007,    0,    0,    0, 2007,    0, 2007, 2007,
     2008,    0, 2008,    0,    0, 2008, 2008,    0, 2008,    0,
     2008, 2008,    0, 2008, 2008, 2008, 2008, 2008, 2008, 2009,

        0, 2009,    0,    0, 2009, 2009,    0, 2009,    0, 2009,
     2009,    0, 2009, 2009, 2009, 2009, 2009, 2009, 2010,    0,
     2010,    0,    0, 2010, 2010,    0, 2010,    0, 2010, 2010,
        0, 2010, 2010, 2010, 2010, 2010, 2010, 2011,    0, 2011,
        0,    0, 2011, 2011,    0, 2011,    0, 2011, 2011,    0,
     2011, 2011, 2011, 2011, 2011, 2011, 2012,    0, 2012,    0,
        0, 2012, 2012,    0,    0,    0, 2012,    0,    0,    0,
     2012, 2012, 2012, 2012, 2012, 2013,    0, 2013,    0,    0,
     2013, 2013,    0, 2013, 2013, 2013, 2013,    0, 2013, 2013,
     2013, 2013, 2013, 2013, 2014,    0, 2014,    0,    0, 2014,

     2014,    0, 2014, 2014, 2014, 2014,    0, 2014, 2014, 2014,
     2014, 2014, 2014, 2015,    0, 2015,    0,    0, 2015, 2015,
        0, 2015, 2015, 2015, 2015,    0, 2015, 2015, 2015, 2015,
     2015, 2015, 2016,    0, 2016,    0,    0, 2016, 2016,    0,
     2016, 2016, 2016, 2016,    0, 2016, 2016, 2016, 2016, 2016,
     2016, 2017, 2017, 2017, 2017, 2017,    0, 2017, 2017, 2017,
     2017,    0,    0, 2017, 2017,    0,    0, 2017, 2017, 2017,
        0, 2017,    0,    0, 2017, 2018, 2018, 2018, 2018, 2018,
        0, 2018, 2018, 2018, 2018,    0,    0, 2018, 2018,    0,
        0, 2018, 2018, 2018,    0, 2018,    0,    0, 2018, 2019,

     2019, 2019, 2019, 2019,    0, 2019, 2019, 2019, 2019,    0,
        0, 2019, 2019,    0,    0, 2019, 2019, 2019,    0, 2019,
        0,    0, 2019, 2020, 2020, 2020, 2020, 2020,    0, 2020,
     2020, 2020, 2020,    0,    0, 2020, 2020,    0,    0, 2020,
     2020, 2020,    0, 2020,    0,    0, 2020, 2021, 2021, 2021,
     2021, 2021,    0, 2021, 2021, 2021, 2021,    0,    0, 2021,
     2021,    0,    0, 2021, 2021, 2021,    0, 2021,    0,    0,
     2021, 2022, 2022, 2022, 2022, 2022,    0, 2022, 2022, 2022,
     2022,    0,    0, 2022, 2022,    0,    0, 2022, 2022, 2022,
        0, 2022,    0,    0, 2022, 2023, 2023, 2023, 2023, 2023,

        0, 2023, 2023, 2023, 2023,    0,    0, 2023, 2023,    0,
        0, 2023, 2023, 2023,    0, 2023,    0,    0, 2023, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761

    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parser.l"
/* Copyright 2009-2023
 * Kaz Kylheku <kaz@kylheku.com>
 * Vancouver, Canada
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#line 30 "parser.l"

#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <stdlib.h>
#include <limits.h>
#include <wchar.h>
#include <signal.h>
#include "config.h"
#include "lib.h"
#include "gc.h"
#include "stream.h"
#include "utf8.h"
#include "signal.h"
#include "unwind.h"
#include "hash.h"
#include "y.tab.h"
#include "parser.h"
#include "txr.h"

#define YY_INPUT(buf, result, max_size)                                 \
  do {                                                                  \
    val self = lit("parser");                                           \
    val n = get_bytes(self, yyextra->stream,                            \
                      coerce(mem_t *, buf), max_size);                  \
    result = c_num(n, self);                                            \
  } while (0)

#define YY_DECL \
  static int yylex_impl(YYSTYPE *yylval_param, yyscan_t yyscanner)

#define YY_FATAL_ERROR(msg) lex_irrecoverable_error(msg)

int opt_loglevel = 1;   /* 0 - quiet; 1 - normal; 2 - verbose */

val form_to_ln_hash;

static int directive_tok(scanner_t *yyg, int tok, int state);

#define FLEX_NUM_VERSION 10000*YY_FLEX_MAJOR_VERSION + \
                         100*YY_FLEX_MINOR_VERSION + \
                         YY_FLEX_SUBMINOR_VERSION

#if FLEX_NUM_VERSION < 20509
int yylex_destroy(void)
{
  return 0;
}
#endif

/* Missing prototypes not generated by flex. */
int yyget_column(yyscan_t);
void yyset_column (int column_no, yyscan_t yyscanner);

/* The following function is all that libflex provides.
   By providing it here, we eliminate the need to link libflex. */
#define YY_SKIP_YYWRAP
INLINE int yywrap(yyscan_t scanner)
{
  (void) scanner;
  return 1;
}

void yyerror(scanner_t *scanner, parser_t *parser, const char *s)
{
  yyerrorf(scanner, lit("~a"), string_utf8(s), nao);
  if (parser->prepared_msg) {
    yyerrorf(scanner, lit("~a"), parser->prepared_msg, nao);
    parser->prepared_msg = nil;
  }
}

void yyerrorf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    if (opt_compat && opt_compat <= 114)
      format(std_error, lit("~a: (~a:~d): "), prog_string,
             parser->name, num(parser->lineno), nao);
    else
      format(std_error, lit("~a:~d: "),
             parser->name, num(parser->lineno), nao);

    vformat(std_error, fmt, vl);
    put_char(chr('\n'), std_error);
    va_end (vl);
  }
  parser->errors++;
}

static void yyerrprepf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    set(mkloc(parser->prepared_msg, parser->parser),
        vformat_to_string(fmt, vl));
    va_end (vl);
  }
}

static void lex_irrecoverable_error(const char *msg8)
{
  val msg = string_utf8(msg8);
  uw_throwf(error_s, lit("error in parser: ~a"), msg, nao);
}

static void out_of_range_float(scanner_t *scanner, const char *tok)
{
    yyerrorf(scanner, lit("out-of-range floating-point literal: ~a"),
             string_utf8(tok), nao);
}

static wchar_t char_esc(int letter)
{
  switch (letter) {
  case ' ': return L' ';
  case 'a': return L'\a';
  case 'b': return L'\b';
  case 't': return L'\t';
  case 'n': return L'\n';
  case 'v': return L'\v';
  case 'f': return L'\f';
  case 'r': return L'\r';
  case 'e': return 27;
  case '"': return L'"';
  case '\'': return L'\'';
  case '`': return L'`';
  case '/': return L'/';
  case '@': return L'@';
  case '\\': return L'\\';
  }

  internal_error("unhandled escape character");
}

static wchar_t num_esc(scanner_t *scn, char *num)
{
  long val = 0;

  if (num[0] == 'x' || num[0] == 'u') {
    if (strlen(num) > 7)
      yyerror(scn, yyget_extra(scn), "too many digits in hex character escape");
    else
      val = strtol(num + 1, 0, 16);
  } else {
    if (num[0] == 'o')
      num++;
    if (strlen(num) > 8)
      yyerror(scn, yyget_extra(scn), "too many digits in octal character escape");
    else
      val = strtol(num, 0, 8);
  }

  if (val < 0 || val > 0x10FFFF || convert(wchar_t, val) != val) {
    yyerror(scn, yyget_extra(scn), "numeric character escape out of range");
    val = 0;
  }

  return val;
}

static wchar_t *unicode_ident(scanner_t *scn, const char *lex)
{
  wchar_t *wlex = utf8_dup_from(lex), *ptr = wlex, wch;

  while ((wch = *ptr++)) {
    if (wch < 0x1680 || (wch >= 0x3000 && wch < 0xdc00))
      continue;

    if ((wch >= 0xdc00 && wch <= 0xdcff) ||
        (wch >= 0xd800 && wch <= 0xdbff) ||
#if FULL_UNICODE
        (wch >= 0xf0000 && wch <= 0xffffd) ||
        (wch >= 0x100000 && wch <= 0x10fffd) ||
#endif
        (wch >= 0xe000 && wch <= 0xf8ff) ||
        (wch == 0xfffe) ||
        (wch == 0xffff))
    {
      yyerror(scn, yyget_extra(scn),
              "disallowed Unicode character in identifier");
      break;
    }

    switch (wch) {
    case 0x1680: case 0x180e: case 0x2000: case 0x2001: case 0x2002:
    case 0x2003: case 0x2004: case 0x2005: case 0x2006: case 0x2007:
    case 0x2008: case 0x2009: case 0x200a: case 0x2028: case 0x2029:
    case 0x205f: case 0x3000:
      yyerror(scn, yyget_extra(scn),
              "Unicode space occurs in identifier");
      break;
    default:
      continue;
    }

    break;
  }

  return wlex;
}

static char *remove_char(char *str, int c)
{
  char *dst = str, *src = str;

  while (*src) {
    int ch = *src++;
    if (ch != c)
      *dst++ = ch;
  }

  *dst = 0;

  return str;
}

#line 4479 "lex.yy.c"
#define YY_NO_INPUT 1

#line 4482 "lex.yy.c"

#define INITIAL 0
#define SPECIAL 1
#define BRACED 2
#define NESTED 3
#define REGEX 4
#define SREGEX 5
#define STRLIT 6
#define CHRLIT 7
#define QSILIT 8
#define QSPECIAL 9
#define WLIT 10
#define QWLIT 11
#define BUFLIT 12
#define JSON 13
#define JLIT 14
#define JMARKER 15

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE parser_t *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		/* Create the reject buffer large enough to save one state per allowed character. */
		if ( ! yyg->yy_state_buf )
			yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
		if ( ! yyg->yy_state_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 325 "parser.l"


#line 4798 "lex.yy.c"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1762 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1761 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 327 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num(10));
  return NUMBER;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 339 "parser.l"
{
  val str = string_own(utf8_dup_from(remove_char(yytext, ',')));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num(10));
  return NUMBER;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 351 "parser.l"
{
  val str = string_own(utf8_dup_from(remove_char(yytext + 2, ',')));
  int base;

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 370 "parser.l"
{
  int base = 0;
  val str = string_own(utf8_dup_from(yytext + 2));

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  yyerrorf(yyg, lit("trailing junk in numeric literal: ~a~a~a"),
           chr(yytext[0]), chr(yytext[1]), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 392 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str_utf8(yytext)) == nil)
    out_of_range_float(yyg, yytext);

  return NUMBER;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 404 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  remove_char(yytext, ',');

  if ((yylval->val = flo_str_utf8(yytext)) == nil)
    out_of_range_float(yyg, yytext);

  return NUMBER;
}
	YY_BREAK
case 7:
#line 420 "parser.l"
case 8:
#line 421 "parser.l"
case 9:
YY_RULE_SETUP
#line 421 "parser.l"
{
  val str = string_utf8(yytext);

  yyerrorf(yyg, lit("trailing junk in floating-point literal: ~a"), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str_utf8(yytext)) == nil)
    out_of_range_float(yyg, yytext);

  return NUMBER;
}
	YY_BREAK
case 10:
/* rule 10 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 437 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str_utf8(yytext)) == nil)
    out_of_range_float(yyg, yytext);

  return NUMBER;
}
	YY_BREAK
case 11:
#line 450 "parser.l"
case 12:
YY_RULE_SETUP
#line 450 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(10));
  return METANUM;
}
	YY_BREAK
case 13:
#line 462 "parser.l"
case 14:
YY_RULE_SETUP
#line 462 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(16));
  return METANUM;
}
	YY_BREAK
case 15:
#line 474 "parser.l"
case 16:
YY_RULE_SETUP
#line 474 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(8));
  return METANUM;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 485 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 3));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str(str, num(2));
  return METANUM;
}
	YY_BREAK
case 18:
#line 497 "parser.l"
case 19:
#line 498 "parser.l"
case 20:
YY_RULE_SETUP
#line 498 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 21:
#line 515 "parser.l"
case 22:
#line 516 "parser.l"
case 23:
YY_RULE_SETUP
#line 516 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 24:
#line 527 "parser.l"
case 25:
YY_RULE_SETUP
#line 527 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yyerrorf(yyg, lit("bad token: ~a"),
                    string_own(utf8_dup_from(yytext)),
                    nao);
  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 540 "parser.l"
{
  return directive_tok(yyg, ALL, 0);
}
	YY_BREAK
case 27:
/* rule 27 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 544 "parser.l"
{
  return directive_tok(yyg, SOME, NESTED);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 548 "parser.l"
{
  return directive_tok(yyg, NONE, 0);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 552 "parser.l"
{
  return directive_tok(yyg, MAYBE, 0);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 556 "parser.l"
{
  return directive_tok(yyg, CASES, 0);
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 560 "parser.l"
{
  return directive_tok(yyg, BLOCK, NESTED);
}
	YY_BREAK
case 32:
/* rule 32 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 564 "parser.l"
{
  return directive_tok(yyg, CHOOSE, NESTED);
}
	YY_BREAK
case 33:
/* rule 33 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 568 "parser.l"
{
  return directive_tok(yyg, GATHER, NESTED);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 572 "parser.l"
{
  return directive_tok(yyg, AND, 0);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 576 "parser.l"
{
  return directive_tok(yyg, OR, 0);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 580 "parser.l"
{
  return directive_tok(yyg, END, 0);
}
	YY_BREAK
case 37:
/* rule 37 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 584 "parser.l"
{
  return directive_tok(yyg, COLLECT, NESTED);
}
	YY_BREAK
case 38:
/* rule 38 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 588 "parser.l"
{
  return directive_tok(yyg, COLL, NESTED);
}
	YY_BREAK
case 39:
/* rule 39 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 592 "parser.l"
{
  return directive_tok(yyg, UNTIL, NESTED);
}
	YY_BREAK
case 40:
/* rule 40 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 596 "parser.l"
{
  return directive_tok(yyg, OUTPUT, NESTED);
}
	YY_BREAK
case 41:
/* rule 41 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 600 "parser.l"
{
  return directive_tok(yyg, REPEAT, NESTED);
}
	YY_BREAK
case 42:
/* rule 42 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 604 "parser.l"
{
  return directive_tok(yyg, PUSH, NESTED);
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 608 "parser.l"
{
  return directive_tok(yyg, REP, NESTED);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 612 "parser.l"
{
  return directive_tok(yyg, SINGLE, 0);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 616 "parser.l"
{
  return directive_tok(yyg, FIRST, 0);
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 620 "parser.l"
{
  return directive_tok(yyg, LAST, NESTED);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 624 "parser.l"
{
  return directive_tok(yyg, EMPTY, 0);
}
	YY_BREAK
case 48:
/* rule 48 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 628 "parser.l"
{
  return directive_tok(yyg, MOD, NESTED);
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 632 "parser.l"
{
  return directive_tok(yyg, MODLAST, NESTED);
}
	YY_BREAK
case 50:
/* rule 50 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 636 "parser.l"
{
  return directive_tok(yyg, DEFINE, NESTED);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 640 "parser.l"
{
  return directive_tok(yyg, TRY, 0);
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 644 "parser.l"
{
  return directive_tok(yyg, CATCH, NESTED);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 648 "parser.l"
{
  return directive_tok(yyg, FINALLY, 0);
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 652 "parser.l"
{
  return directive_tok(yyg, IF, NESTED);
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 656 "parser.l"
{
  return directive_tok(yyg, ELIF, NESTED);
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 660 "parser.l"
{
  return directive_tok(yyg, ELSE, 0);
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 664 "parser.l"
{
  yy_push_state(BRACED, yyscanner);
  yylval->lineno = yyextra->lineno;
  return yytext[0];
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 670 "parser.l"
{
 yy_push_state(NESTED, yyscanner);
 yylval->lineno = yyextra->lineno;
 return yytext[0];
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 676 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 248) ? OLD_AT : '@';
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 681 "parser.l"
{
  yylval->chr = '*';
  return SPLICE;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 686 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 691 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 63:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 700 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space or 0 needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 715 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 724 "parser.l"
{
  /* Eat whitespace in directive */
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 728 "parser.l"
{
  yy_push_state(STRLIT, yyscanner);
  return '"';
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 733 "parser.l"
{
  yy_push_state(CHRLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_BACKSLASH;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 739 "parser.l"
{
  yy_push_state(BUFLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_B_QUOTE;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 745 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_SLASH;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 751 "parser.l"
{
  yy_push_state(QSILIT, yyscanner);
  return '`';
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 756 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WORDS;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 762 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WSPLICE;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 768 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWORDS;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 774 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWSPLICE;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 780 "parser.l"
{
  return '#';
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 784 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_H;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 789 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_S;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 794 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_R;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 799 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_N;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 804 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_T;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 809 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  yy_push_state(JSON, yyscanner);
  return HASH_J;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 815 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_SEMI;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 820 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));
  yylval->val = int_str(str, num(10));
  return HASH_N_EQUALS;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 826 "parser.l"
{
  val str = string_own(utf8_dup_from(yytext + 1));
  yylval->val = int_str(str, num(10));
  return HASH_N_HASH;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 832 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 185) ? OLD_DOTDOT : DOTDOT;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 837 "parser.l"
{
  yy_pop_state(yyscanner);
  yylval->lexeme = chk_strdup(L"@");
  return TEXT;
}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 843 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 847 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  return '/';
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 852 "parser.l"
{
  yylval->chr = '.';
  return CONSDOT;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 857 "parser.l"
{
  yylval->chr = '.';
  return LAMBDOT;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 862 "parser.l"
{
  yylval->chr = '.';
  return UREFDOT;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 867 "parser.l"
{
  yylval->chr = '.';
  return '.';
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 872 "parser.l"
{
  yylval->chr = '.';
  return OREFDOT;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 877 "parser.l"
{
  yylval->chr = '.';
  return UOREFDOT;
}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 882 "parser.l"
{
  if (YYSTATE == SPECIAL)
    yy_pop_state(yyscanner);  /* @\ continuation */
  yyextra->lineno++;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 888 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = char_esc(yytext[1]);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);
  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 897 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = num_esc(yyg, yytext + 1);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);

  {
    char lastchar = yytext[yyleng-1];
    if (lastchar == ';' && opt_compat && opt_compat <= 109)
      unput(lastchar);
  }

  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 913 "parser.l"
{
  yyerrorf(yyg, lit("\\x escape without digits"), nao);
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 917 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 921 "parser.l"
{
  /* comment */
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 925 "parser.l"
{
  val ch = chr_str(string_utf8(yytext), zero);
  if (chr_isspace(ch))
    yyerrprepf(yyg, lit("unexpected whitespace character #\\x~,02x"),
               ch, nao);
  else if (chr_isunisp(ch))
    yyerrprepf(yyg, lit("unexpected Unicode space character #\\x~,02x"),
               ch, nao);
  else if (chr_iscntrl(ch))
    yyerrprepf(yyg, lit("unexpected control character #\\x~,02x"),
               ch, nao);
  else
    yyerrprepf(yyg, lit("unexpected character #\\~a"),
               ch, nao);
  return ERRTOK;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 942 "parser.l"
{
  yyerrprepf(yyg, lit("non-UTF-8 byte #x~02x in directive"),
             num(convert(unsigned char, yytext[0])), nao);
  return ERRTOK;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 948 "parser.l"
{
  yylval->chr = '/';
  return (YYSTATE == SREGEX) ? REGCHAR : '/';
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 953 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return REGCHAR;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 958 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext + 1);
  return REGCHAR;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 963 "parser.l"
{
  yylval->chr = yytext[1];
  return REGTOKEN;
}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 968 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 972 "parser.l"
{
  yyextra->lineno++;
  yyerrprepf(yyg, lit("newline in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 978 "parser.l"
{
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return REGCHAR;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 984 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 989 "parser.l"
{
  yylval->chr = yytext[1];
  return REGCHAR;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 994 "parser.l"
{
  if (opt_compat && opt_compat <= 105) {
    yylval->chr = yytext[1];
    return REGCHAR;
  }

  if (yytext[1] == 'x')
    yyerrprepf(yyg, lit("\\x escape without digits in regex"), nao);
  else
    yyerrprepf(yyg, lit("unrecognized escape in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1007 "parser.l"
{
  yyerrprepf(yyg, lit("dangling backslash in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1012 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yylval->lexeme = chk_strdup(wchr);
    return TEXT;
  }
  yylval->chr = wchr[0];
  return REGCHAR;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1022 "parser.l"
{
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return REGCHAR;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1027 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SPACE;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1032 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return TEXT;
}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 1037 "parser.l"
{
  yyextra->lineno++;
  return '\n';
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1042 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
  return '*';
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1047 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 1051 "parser.l"
{
  /* eat whole line comment */
  yyextra->lineno++;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1056 "parser.l"
{
  /* comment to end of line */
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1060 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1065 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1070 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1075 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 1080 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 1084 "parser.l"
{
  yyextra->lineno++;

  if (!opt_compat || opt_compat > 109)
    return ' ';
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1092 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext+1);
  return LITCHAR;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1097 "parser.l"
{
  yyerrorf(yyg, lit("\\x escape without digits"), nao);
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1101 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape: \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1105 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext);
  return LITCHAR;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1110 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1115 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK; /* hack */
}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 1120 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 1127 "parser.l"
{
  yyerrprepf(yyg, lit("newline in character literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 1134 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string quasiliteral"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 1141 "parser.l"
{
  yyextra->lineno++;

  if (opt_compat && opt_compat <= 109)
    return ' ';

  yyerrprepf(yyg, lit("newline in word list literal"), nao);
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 139:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1152 "parser.l"
{
  yy_push_state(QSPECIAL, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1157 "parser.l"
{
  yyerrprepf(yyg, lit("malformed @ expression in quasiliteral"), nao);
  return ERRTOK;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1162 "parser.l"
{
  return ' ';
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1166 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1171 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1176 "parser.l"
{
  wchar_t ch0, ch1;
  yytext[6] = 0;
  ch0 = num_esc(yyg, yytext + 1);
  ch1 = num_esc(yyg, yytext + 7);
  yylval->chr = ((ch0 - 0xD800) << 10 | (ch1 - 0xDC00)) + 0x10000;
  return LITCHAR;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1185 "parser.l"
{
  wchar_t ch = num_esc(yyg, yytext + 1);
  yylval->chr = if3(ch, ch, 0xDC00);
  return LITCHAR;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1191 "parser.l"
{
  yyerrorf(yyg, lit("JSON \\u escape needs four digits"), nao);
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1195 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized JSON escape: \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 1199 "parser.l"
{
  yyerrprepf(yyg, lit("newline in JSON string"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1206 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yylval->lexeme = chk_strdup(wchr);
    return TEXT;
  }
  yylval->chr = wchr[0];
  return LITCHAR;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1216 "parser.l"
{
  yylval->chr = strtol(yytext, 0, 16);
  return LITCHAR;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1221 "parser.l"
{
  return '\'';
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1225 "parser.l"
{
}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 1228 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1232 "parser.l"
{
  yyerrorf(yyg, lit("bad character ~s in buffer literal"),
           chr(yytext[0]), nao);
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1237 "parser.l"
{
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return LITCHAR;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1242 "parser.l"
{
  if ((yylval->val = flo_str_utf8(yytext)) == nil)
    out_of_range_float(yyg, yytext);
  return NUMBER;
}
	YY_BREAK
case 157:
/* rule 157 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1248 "parser.l"
{
  yylval->val = t;
  return JSKW;
}
	YY_BREAK
case 158:
/* rule 158 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1253 "parser.l"
{
  yylval->val = nil;
  return JSKW;
}
	YY_BREAK
case 159:
/* rule 159 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1258 "parser.l"
{
  yylval->val = null_s;
  return JSKW;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1263 "parser.l"
{
  if (strcmp("true", yytext) == 0) {
    yylval->val = t;
    return JSKW;
  }

  if (strcmp("false", yytext) == 0) {
    yylval->val = nil;
    return JSKW;
  }

  if (strcmp("null", yytext) == 0) {
    yylval->val = null_s;
    return JSKW;
  }

  {
    val str = string_own(utf8_dup_from(yytext));
    yyerrorf(yyg, lit("unrecognized JSON syntax: ~a"), str, nao);
  }
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1285 "parser.l"
{
  yy_push_state(JLIT, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1290 "parser.l"
{
  yy_push_state(JMARKER, yyscanner);
  yy_push_state(NESTED, yyscanner);
  return JSPLICE;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1296 "parser.l"
{
  yy_push_state(JMARKER, yyscanner);
  yy_push_state(NESTED, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1302 "parser.l"
{
  return yytext[0];
}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 1306 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1310 "parser.l"
{
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1313 "parser.l"
{
  yyerrorf(yyg, lit("bad character ~s in JSON literal"),
           chr(yytext[0]), nao);
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1318 "parser.l"
{
  internal_error("scanner processed input JMARKER state");
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1322 "parser.l"
ECHO;
	YY_BREAK
#line 6491 "lex.yy.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(SPECIAL):
			case YY_STATE_EOF(BRACED):
			case YY_STATE_EOF(NESTED):
			case YY_STATE_EOF(REGEX):
			case YY_STATE_EOF(SREGEX):
			case YY_STATE_EOF(STRLIT):
			case YY_STATE_EOF(CHRLIT):
			case YY_STATE_EOF(QSILIT):
			case YY_STATE_EOF(QSPECIAL):
			case YY_STATE_EOF(WLIT):
			case YY_STATE_EOF(QWLIT):
			case YY_STATE_EOF(BUFLIT):
			case YY_STATE_EOF(JSON):
			case YY_STATE_EOF(JLIT):
			case YY_STATE_EOF(JMARKER):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1762 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1762 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1761);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1322 "parser.l"


static int directive_tok(scanner_t *yyscanner, int tok, int state)
{
  struct yyguts_t *yyg = convert(struct yyguts_t *, yyscanner);
  char *pstart = yytext + 1 + strspn(yytext + 1, " \t");
  char *pcolon = strchr(pstart, ':');
  char *pend = pstart + strspn(pstart, ":-abcdefghijklmnopqrstuvwxyz");

  *pend = 0;

  if (pcolon != 0) {
    val pkgname = string_utf8((*pcolon = 0, pstart));
    val package = if3(pstart[0], find_package(pkgname), keyword_package);
    if (!package) {
      yyerrprepf(yyg, lit("package ~a not found"), pkgname, nao);
      tok = ERRTOK;
    }
    if (package != user_package && package != keyword_package) {
      val sym = string_utf8(pcolon + 1);
      yyerrprepf(yyg, lit("~a:~a: original usr package expected, not ~a"),
                 pkgname, sym, pkgname, nao);
      tok = ERRTOK;
    }
  } else {
    val symname = string_utf8(pstart);
    val sym = intern_fallback(symname, cur_package);
    val package = symbol_package(sym);

    if (package != user_package && package != keyword_package) {
      yyerrprepf(yyg, lit("~a: this is ~a:~a, not usr:~a"),
                 symname, package_name(package), symname, symname, nao);
      tok = ERRTOK;
    }
  }

  if (state != 0)
    yy_push_state(state, yyscanner);
  else
    yy_pop_state(yyscanner);
  yylval->lineno = yyextra->lineno;
  return tok;
}

void end_of_regex(scanner_t *yyg)
{
  if (YYSTATE != REGEX && YYSTATE != SREGEX)
    internal_error("end_of_regex called in wrong scanner state");

  yy_pop_state(yyg);

  if (YYSTATE != INITIAL) {
    if (yy_top_state(yyg) == INITIAL
      || yy_top_state(yyg) == QSILIT
      || yy_top_state(yyg) == QWLIT)
      yy_pop_state(yyg);
  }
}

void end_of_char(scanner_t *yyg)
{
  if (YYSTATE != CHRLIT)
    internal_error("end_of_char called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_buflit(scanner_t *yyg)
{
  if (YYSTATE != BUFLIT)
    internal_error("end_of_buflit called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_json(scanner_t *yyg)
{
  if (YYSTATE == JLIT)
    yy_pop_state(yyg);

  if (YYSTATE != JSON)
    internal_error("end_of_json called in wrong scanner state");

  yy_pop_state(yyg);
}

/* The complexity here is necessary because TXR Lisp parsing looks ahead
 * by one token. (The reason for *that* is the support of a.b.c referencing dot
 * syntax in TXR Lisp.)
 *
 * Consider these two different cases:
 *
 * ^#J[,~(+ 2.0 2.0)]
 * ^#J[,~(+ 2.0 2.0) #J42]
 *
 * This end_of_json_unquote function gets called when the (+ 2.0 2.0)
 * has been parsed, but the Yacc-generated parser has shifted one tokan
 * ahead.  It has read the ] token in the one case or the #J token in
 * the other. These tokens have totally different effects on the Lex
 * start condition. When the lexer reads the ] token, it pops off a NESTED
 * state, whereas the #J token wants to push on a new JSON state.
 * By the time end_of_json_unquote has been called, this has already happened.
 *
 * To deal with this, we use the dummy JMARKER start state which serves as a
 * kind of parenthesis inside the start condition stack. BHefore scanning Lisp
 * unquote within JSON, we push JMARKER state first, then the NESTED state.
 *
 * If the lookahead token is like ], and pops off a state, it will pop off
 * our NESTED state, so we are left at the JMARKER state. If the lookahead
 * token is something else like #J (HASH_J), then it will push a new
 * state like JSON on top, and we have JMARKER NESTED JSON.
 *
 * So what we are doing here is popping off everything until we get down
 * to the JMARKER state, and putting it into our little save area.
 *
 * Then we lose the JMARKER state.
 *
 * If the save area is empty, it means that the lookahead token consumed
 * our NESTED state, and so we are done.
 *
 * If the save area is not empty, it means the lookahead put something
 * extra over our NESTED state. We drop that state from our save area,
 * and restore the rest of the save area back into the stack.
 * Effectively, we are deleting the unquote-related states from the
 * interior of the start condition stack, not to disturb new material
 * initiated by the lookahead token.
 */
void end_of_json_unquote(scanner_t *yyg)
{
  int stacksave[8];
  int top = 0;

  while (YYSTATE != JMARKER) {
    stacksave[top++] = YYSTATE;
    yy_pop_state(yyg);
  }

  yy_pop_state(yyg);

  if (top-- > 0) {
    while (top > 0)
      yy_push_state(stacksave[--top], yyg);
  }
}

val source_loc(val form)
{
  return gethash(form_to_ln_hash, form);
}

val source_loc_str(val form, val alt)
{
  cons_bind (line, file, gethash(form_to_ln_hash, form));
  if (missingp(alt))
    alt = lit("source location n/a");
  return if3(line, format(nil, lit("~a:~d"), file, line, nao), alt);
}

int yylex(YYSTYPE *yylval_param, yyscan_t yyscanner)
{
  struct yyguts_t * yyg = convert(struct yyguts_t *, yyscanner);
  int yy_char;

  if (yyextra->tok_idx > 0) {
    struct yy_token *tok = &yyextra->tok_pushback[--yyextra->tok_idx];
    yyextra->recent_tok = *tok;
    *yylval_param = tok->yy_lval;
    if (tok->yy_lex_state && tok->yy_lex_state != YYSTATE)
      yy_push_state(tok->yy_lex_state, yyg);
    return tok->yy_char;
  }

  yy_char = yyextra->recent_tok.yy_char = yylex_impl(yylval_param, yyscanner);
  yyextra->recent_tok.yy_lval = *yylval_param;
  yyextra->recent_tok.yy_lex_state = YYSTATE;

  return yy_char;
}

void prime_scanner(scanner_t *yyg, enum prime_parser prim)
{
  while (YYSTATE != INITIAL)
    yy_pop_state(yyg);

  switch (prim) {
  case prime_lisp:
  case prime_interactive:
    yy_push_state(SPECIAL, yyg);
    yy_push_state(NESTED, yyg);
    yy_push_state(NESTED, yyg);
    break;
  case prime_regex:
    yy_push_state(SREGEX, yyg);
    break;
  case prime_json:
    yy_push_state(JSON, yyg);
    break;
  }
}

void scrub_scanner(scanner_t *yyg, int yy_char, wchar_t *lexeme)
{
  struct yy_token *rtok = &yyextra->recent_tok;

  if (rtok->yy_char == yy_char && rtok->yy_lval.lexeme == lexeme) {
    rtok->yy_char = 0;
    rtok->yy_lval.lexeme = 0;
  }
}

void parser_l_init(void)
{
  prot1(&form_to_ln_hash);
  form_to_ln_hash = make_eq_hash(hash_weak_keys);
  (void) &yy_fatal_error; /* suppress unused function warning */
}

