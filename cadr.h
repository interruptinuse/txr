/* This file is generated by gencadr.txr */

/* Copyright 2009-2021
 * Kaz Kylheku <kaz@kylheku.com>
 * Vancouver, Canada
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

val caar(val);
val cadr(val);
val cdar(val);
val cddr(val);
val caaar(val);
val caadr(val);
val cadar(val);
val caddr(val);
val cdaar(val);
val cdadr(val);
val cddar(val);
val cdddr(val);
val caaaar(val);
val caaadr(val);
val caadar(val);
val caaddr(val);
val cadaar(val);
val cadadr(val);
val caddar(val);
val cadddr(val);
val cdaaar(val);
val cdaadr(val);
val cdadar(val);
val cdaddr(val);
val cddaar(val);
val cddadr(val);
val cdddar(val);
val cddddr(val);
val caaaaar(val);
val caaaadr(val);
val caaadar(val);
val caaaddr(val);
val caadaar(val);
val caadadr(val);
val caaddar(val);
val caadddr(val);
val cadaaar(val);
val cadaadr(val);
val cadadar(val);
val cadaddr(val);
val caddaar(val);
val caddadr(val);
val cadddar(val);
val caddddr(val);
val cdaaaar(val);
val cdaaadr(val);
val cdaadar(val);
val cdaaddr(val);
val cdadaar(val);
val cdadadr(val);
val cdaddar(val);
val cdadddr(val);
val cddaaar(val);
val cddaadr(val);
val cddadar(val);
val cddaddr(val);
val cdddaar(val);
val cdddadr(val);
val cddddar(val);
val cdddddr(val);

void cadr_init(void);
