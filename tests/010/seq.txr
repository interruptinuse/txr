@(do 
   (defvar *h* (hash :equal-based))
   (defvar *s* "abcd")
   (defvar *v* #(1 2 3 4 5 6 7 8))
   (defvar *v2* #((1 . #\a) (2 . #\b) (3 . #\c) (4 . #\d)
                  (5 . #\e) (6 . #\f) (7 . #\h) (8 . #\g)))
   (defun caught (x) (format t "exception!\n"))
   (defun pr (x) (format t "~s\n" x))
   (defun pr2 (x y) (format t "~s ~s\n" x y))
   (pr (set [*h* "a"] 42))
   (pr [*h* "a"])
   (pr (del [*h* "a"]))
   (pr (del [*h* "a"]))
   (format t "~s ~s\n" (del [*s* 1]) *s*)
   (format t "~s ~s\n" (del [*s* -1]) *s*)
   (catch (pr (del [*s* 3]) *s*) (t (x) (caught x)))
   (pr [nsort *v* >])
   (pr [nsort *v2* > cdr])
   (pr [nsort (range 1 100) >])
   (pr2 (del [*v2* 1..3]) *v2*)
   (let ((s (copy "abcdefg")))
     (pr (del [s '(1 3 5)]))
     (pr s))
   (let ((s (copy "abcdefg")))
     (pr (del [s '(6)]))
     (pr s))
   (let ((s (copy "abcdefg")))
     (pr (del [s '(0 1 2 3 4 5 6)]))
     (pr s))
   (let ((s (copy "abcdefg")))
     (pr (del [s '(-7 -6 -5 -4 -3 -2 -1)]))
     (pr s))
   (let ((s (copy "abcdefg")))
     (pr (del [s '(-7 -5 -3 -1)]))
     (pr s))
   (let ((s (list 0 1 2 3 4 5 6)))
     (pr (del [s '(1 3 5)]))
     (pr s))
   (let ((s (list 0 1 2 3 4 5 6)))
     (pr (del [s '(0 1 2 3 4 5 6)]))
     (pr s))
   (let ((s (list 0 1 2 3 4 5 6)))
     (pr (del [s '(-7 -6 -5 -4 -3 -2 -1)]))
     (pr s))
   (let ((s (list 0 1 2 3 4 5 6)))
     (pr (del [s '(-7 -5 -3 -1)]))
     (pr s))
   (let ((s (vec 0 1 2 3 4 5 6)))
     (pr (del [s '(1 3 5)]))
     (pr s))
   (let ((s (vec 0 1 2 3 4 5 6)))
     (pr (del [s '(0 1 2 3 4 5 6)]))
     (pr s))
   (let ((s (vec 0 1 2 3 4 5 6)))
     (pr (del [s '(-7 -6 -5 -4 -3 -2 -1)]))
     (pr s))
   (let ((s (vec 0 1 2 3 4 5 6)))
     (pr (del [s '(-7 -5 -3 -1)]))
     (pr s))
   (let ((s (copy #b'aabbccddeeff99')))
     (pr (del [s '(1 3 5)]))
     (pr s))
   (let ((s (copy #b'aabbccddeeff99')))
     (pr (del [s '(6)]))
     (pr s))
   (let ((s (copy #b'aabbccddeeff99')))
     (pr (del [s '(0 1 2 3 4 5 6)]))
     (pr s))
   (let ((s (copy #b'aabbccddeeff99')))
     (pr (del [s '(-7 -6 -5 -4 -3 -2 -1)]))
     (pr s))
   (let ((s (copy #b'aabbccddeeff99')))
     (pr (del [s '(-7 -5 -3 -1)]))
     (pr s))
   )
