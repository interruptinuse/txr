;; Copyright 2015-2020
;; Kaz Kylheku <kaz@kylheku.com>
;; Vancouver, Canada
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; 1. Redistributions of source code must retain the above copyright notice, this
;;    list of conditions and the following disclaimer.
;;
;; 2. Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
;; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
;; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
;; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
;; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

(defmacro with-out-string-stream ((stream) . body)
  ^(let ((,stream (make-string-output-stream)))
     ,*body
     (get-string-from-stream ,stream)))

(defmacro with-out-strlist-stream ((stream) . body)
  ^(let ((,stream (make-strlist-output-stream)))
     ,*body
     (get-list-from-stream ,stream)))

(defmacro with-out-buf-stream ((stream : buf) . body)
  ^(let ((,stream (make-buf-stream ,*[[iff have list] buf])))
     ,*body
     (get-buf-from-stream ,stream)))

(defmacro with-in-string-stream ((stream string) . body)
  ^(let ((,stream (make-string-input-stream ,string)))
     ,*body))

(defmacro with-in-string-byte-stream ((stream string) . body)
  ^(let ((,stream (make-string-byte-input-stream ,string)))
     ,*body))

(defmacro with-in-buf-stream ((stream buf) . body)
  ^(let ((,stream (make-buf-stream ,buf)))
     ,*body))

(defmacro with-stream ((sym stream) . body)
  ^(let ((,sym ,stream))
     (unwind-protect
       (progn ,*body)
       (close-stream ,sym))))
